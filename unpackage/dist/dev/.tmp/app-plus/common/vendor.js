(global["webpackJsonp"] = global["webpackJsonp"] || []).push([["common/vendor"],{

/***/ 1:
/*!***********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-app-plus/dist/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.createApp = createApp;exports.createComponent = createComponent;exports.createPage = createPage;exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");}function _iterableToArrayLimit(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance\");}function _iterableToArray(iter) {if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;}}\n\nvar _toString = Object.prototype.toString;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isFn(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isStr(str) {\n  return typeof str === 'string';\n}\n\nfunction isPlainObject(obj) {\n  return _toString.call(obj) === '[object Object]';\n}\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\nfunction noop() {}\n\n/**\r\n                    * Create a cached version of a pure function.\r\n                    */\nfunction cached(fn) {\n  var cache = Object.create(null);\n  return function cachedFn(str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n}\n\n/**\r\n   * Camelize a hyphen-delimited string.\r\n   */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});\n});\n\nvar HOOKS = [\n'invoke',\n'success',\n'fail',\n'complete',\n'returnValue'];\n\n\nvar globalInterceptors = {};\nvar scopedInterceptors = {};\n\nfunction mergeHook(parentVal, childVal) {\n  var res = childVal ?\n  parentVal ?\n  parentVal.concat(childVal) :\n  Array.isArray(childVal) ?\n  childVal : [childVal] :\n  parentVal;\n  return res ?\n  dedupeHooks(res) :\n  res;\n}\n\nfunction dedupeHooks(hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res;\n}\n\nfunction removeHook(hooks, hook) {\n  var index = hooks.indexOf(hook);\n  if (index !== -1) {\n    hooks.splice(index, 1);\n  }\n}\n\nfunction mergeInterceptorHook(interceptor, option) {\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      interceptor[hook] = mergeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction removeInterceptorHook(interceptor, option) {\n  if (!interceptor || !option) {\n    return;\n  }\n  Object.keys(option).forEach(function (hook) {\n    if (HOOKS.indexOf(hook) !== -1 && isFn(option[hook])) {\n      removeHook(interceptor[hook], option[hook]);\n    }\n  });\n}\n\nfunction addInterceptor(method, option) {\n  if (typeof method === 'string' && isPlainObject(option)) {\n    mergeInterceptorHook(scopedInterceptors[method] || (scopedInterceptors[method] = {}), option);\n  } else if (isPlainObject(method)) {\n    mergeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction removeInterceptor(method, option) {\n  if (typeof method === 'string') {\n    if (isPlainObject(option)) {\n      removeInterceptorHook(scopedInterceptors[method], option);\n    } else {\n      delete scopedInterceptors[method];\n    }\n  } else if (isPlainObject(method)) {\n    removeInterceptorHook(globalInterceptors, method);\n  }\n}\n\nfunction wrapperHook(hook) {\n  return function (data) {\n    return hook(data) || data;\n  };\n}\n\nfunction isPromise(obj) {\n  return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';\n}\n\nfunction queue(hooks, data) {\n  var promise = false;\n  for (var i = 0; i < hooks.length; i++) {\n    var hook = hooks[i];\n    if (promise) {\n      promise = Promise.then(wrapperHook(hook));\n    } else {\n      var res = hook(data);\n      if (isPromise(res)) {\n        promise = Promise.resolve(res);\n      }\n      if (res === false) {\n        return {\n          then: function then() {} };\n\n      }\n    }\n  }\n  return promise || {\n    then: function then(callback) {\n      return callback(data);\n    } };\n\n}\n\nfunction wrapperOptions(interceptor) {var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ['success', 'fail', 'complete'].forEach(function (name) {\n    if (Array.isArray(interceptor[name])) {\n      var oldCallback = options[name];\n      options[name] = function callbackInterceptor(res) {\n        queue(interceptor[name], res).then(function (res) {\n          /* eslint-disable no-mixed-operators */\n          return isFn(oldCallback) && oldCallback(res) || res;\n        });\n      };\n    }\n  });\n  return options;\n}\n\nfunction wrapperReturnValue(method, returnValue) {\n  var returnValueHooks = [];\n  if (Array.isArray(globalInterceptors.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(globalInterceptors.returnValue));\n  }\n  var interceptor = scopedInterceptors[method];\n  if (interceptor && Array.isArray(interceptor.returnValue)) {\n    returnValueHooks.push.apply(returnValueHooks, _toConsumableArray(interceptor.returnValue));\n  }\n  returnValueHooks.forEach(function (hook) {\n    returnValue = hook(returnValue) || returnValue;\n  });\n  return returnValue;\n}\n\nfunction getApiInterceptorHooks(method) {\n  var interceptor = Object.create(null);\n  Object.keys(globalInterceptors).forEach(function (hook) {\n    if (hook !== 'returnValue') {\n      interceptor[hook] = globalInterceptors[hook].slice();\n    }\n  });\n  var scopedInterceptor = scopedInterceptors[method];\n  if (scopedInterceptor) {\n    Object.keys(scopedInterceptor).forEach(function (hook) {\n      if (hook !== 'returnValue') {\n        interceptor[hook] = (interceptor[hook] || []).concat(scopedInterceptor[hook]);\n      }\n    });\n  }\n  return interceptor;\n}\n\nfunction invokeApi(method, api, options) {for (var _len = arguments.length, params = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {params[_key - 3] = arguments[_key];}\n  var interceptor = getApiInterceptorHooks(method);\n  if (interceptor && Object.keys(interceptor).length) {\n    if (Array.isArray(interceptor.invoke)) {\n      var res = queue(interceptor.invoke, options);\n      return res.then(function (options) {\n        return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n      });\n    } else {\n      return api.apply(void 0, [wrapperOptions(interceptor, options)].concat(params));\n    }\n  }\n  return api.apply(void 0, [options].concat(params));\n}\n\nvar promiseInterceptor = {\n  returnValue: function returnValue(res) {\n    if (!isPromise(res)) {\n      return res;\n    }\n    return res.then(function (res) {\n      return res[1];\n    }).catch(function (res) {\n      return res[0];\n    });\n  } };\n\n\nvar SYNC_API_RE =\n/^\\$|restoreGlobal|getCurrentSubNVue|getMenuButtonBoundingClientRect|^report|interceptors|Interceptor$|getSubNVueById|requireNativePlugin|upx2px|hideKeyboard|canIUse|^create|Sync$|Manager$|base64ToArrayBuffer|arrayBufferToBase64/;\n\nvar CONTEXT_API_RE = /^create|Manager$/;\n\nvar CALLBACK_API_RE = /^on/;\n\nfunction isContextApi(name) {\n  return CONTEXT_API_RE.test(name);\n}\nfunction isSyncApi(name) {\n  return SYNC_API_RE.test(name);\n}\n\nfunction isCallbackApi(name) {\n  return CALLBACK_API_RE.test(name) && name !== 'onPush';\n}\n\nfunction handlePromise(promise) {\n  return promise.then(function (data) {\n    return [null, data];\n  }).\n  catch(function (err) {return [err];});\n}\n\nfunction shouldPromise(name) {\n  if (\n  isContextApi(name) ||\n  isSyncApi(name) ||\n  isCallbackApi(name))\n  {\n    return false;\n  }\n  return true;\n}\n\nfunction promisify(name, api) {\n  if (!shouldPromise(name)) {\n    return api;\n  }\n  return function promiseApi() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {params[_key2 - 1] = arguments[_key2];}\n    if (isFn(options.success) || isFn(options.fail) || isFn(options.complete)) {\n      return wrapperReturnValue(name, invokeApi.apply(void 0, [name, api, options].concat(params)));\n    }\n    return wrapperReturnValue(name, handlePromise(new Promise(function (resolve, reject) {\n      invokeApi.apply(void 0, [name, api, Object.assign({}, options, {\n        success: resolve,\n        fail: reject })].concat(\n      params));\n      /* eslint-disable no-extend-native */\n      if (!Promise.prototype.finally) {\n        Promise.prototype.finally = function (callback) {\n          var promise = this.constructor;\n          return this.then(\n          function (value) {return promise.resolve(callback()).then(function () {return value;});},\n          function (reason) {return promise.resolve(callback()).then(function () {\n              throw reason;\n            });});\n\n        };\n      }\n    })));\n  };\n}\n\nvar EPS = 1e-4;\nvar BASE_DEVICE_WIDTH = 750;\nvar isIOS = false;\nvar deviceWidth = 0;\nvar deviceDPR = 0;\n\nfunction checkDeviceWidth() {var _wx$getSystemInfoSync =\n\n\n\n\n  wx.getSystemInfoSync(),platform = _wx$getSystemInfoSync.platform,pixelRatio = _wx$getSystemInfoSync.pixelRatio,windowWidth = _wx$getSystemInfoSync.windowWidth; // uni=>wx runtime 编译目标是 uni 对象，内部不允许直接使用 uni\n\n  deviceWidth = windowWidth;\n  deviceDPR = pixelRatio;\n  isIOS = platform === 'ios';\n}\n\nfunction upx2px(number, newDeviceWidth) {\n  if (deviceWidth === 0) {\n    checkDeviceWidth();\n  }\n\n  number = Number(number);\n  if (number === 0) {\n    return 0;\n  }\n  var result = number / BASE_DEVICE_WIDTH * (newDeviceWidth || deviceWidth);\n  if (result < 0) {\n    result = -result;\n  }\n  result = Math.floor(result + EPS);\n  if (result === 0) {\n    if (deviceDPR === 1 || !isIOS) {\n      return 1;\n    } else {\n      return 0.5;\n    }\n  }\n  return number < 0 ? -result : result;\n}\n\nvar interceptors = {\n  promiseInterceptor: promiseInterceptor };\n\n\n\n\nvar baseApi = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  upx2px: upx2px,\n  interceptors: interceptors,\n  addInterceptor: addInterceptor,\n  removeInterceptor: removeInterceptor });\n\n\nvar protocols = {};\nvar todos = [];\nvar canIUses = [];\n\nvar CALLBACKS = ['success', 'fail', 'cancel', 'complete'];\n\nfunction processCallback(methodName, method, returnValue) {\n  return function (res) {\n    return method(processReturnValue(methodName, res, returnValue));\n  };\n}\n\nfunction processArgs(methodName, fromArgs) {var argsOption = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};var returnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};var keepFromArgs = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (isPlainObject(fromArgs)) {// 一般 api 的参数解析\n    var toArgs = keepFromArgs === true ? fromArgs : {}; // returnValue 为 false 时，说明是格式化返回值，直接在返回值对象上修改赋值\n    if (isFn(argsOption)) {\n      argsOption = argsOption(fromArgs, toArgs) || {};\n    }\n    for (var key in fromArgs) {\n      if (hasOwn(argsOption, key)) {\n        var keyOption = argsOption[key];\n        if (isFn(keyOption)) {\n          keyOption = keyOption(fromArgs[key], fromArgs, toArgs);\n        }\n        if (!keyOption) {// 不支持的参数\n          console.warn(\"app-plus \".concat(methodName, \"\\u6682\\u4E0D\\u652F\\u6301\").concat(key));\n        } else if (isStr(keyOption)) {// 重写参数 key\n          toArgs[keyOption] = fromArgs[key];\n        } else if (isPlainObject(keyOption)) {// {name:newName,value:value}可重新指定参数 key:value\n          toArgs[keyOption.name ? keyOption.name : key] = keyOption.value;\n        }\n      } else if (CALLBACKS.indexOf(key) !== -1) {\n        toArgs[key] = processCallback(methodName, fromArgs[key], returnValue);\n      } else {\n        if (!keepFromArgs) {\n          toArgs[key] = fromArgs[key];\n        }\n      }\n    }\n    return toArgs;\n  } else if (isFn(fromArgs)) {\n    fromArgs = processCallback(methodName, fromArgs, returnValue);\n  }\n  return fromArgs;\n}\n\nfunction processReturnValue(methodName, res, returnValue) {var keepReturnValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (isFn(protocols.returnValue)) {// 处理通用 returnValue\n    res = protocols.returnValue(methodName, res);\n  }\n  return processArgs(methodName, res, returnValue, {}, keepReturnValue);\n}\n\nfunction wrapper(methodName, method) {\n  if (hasOwn(protocols, methodName)) {\n    var protocol = protocols[methodName];\n    if (!protocol) {// 暂不支持的 api\n      return function () {\n        console.error(\"app-plus \\u6682\\u4E0D\\u652F\\u6301\".concat(methodName));\n      };\n    }\n    return function (arg1, arg2) {// 目前 api 最多两个参数\n      var options = protocol;\n      if (isFn(protocol)) {\n        options = protocol(arg1);\n      }\n\n      arg1 = processArgs(methodName, arg1, options.args, options.returnValue);\n\n      var args = [arg1];\n      if (typeof arg2 !== 'undefined') {\n        args.push(arg2);\n      }\n      var returnValue = wx[options.name || methodName].apply(wx, args);\n      if (isSyncApi(methodName)) {// 同步 api\n        return processReturnValue(methodName, returnValue, options.returnValue, isContextApi(methodName));\n      }\n      return returnValue;\n    };\n  }\n  return method;\n}\n\nvar todoApis = Object.create(null);\n\nvar TODOS = [\n'onTabBarMidButtonTap',\n'subscribePush',\n'unsubscribePush',\n'onPush',\n'offPush',\n'share'];\n\n\nfunction createTodoApi(name) {\n  return function todoApi(_ref)\n\n\n  {var fail = _ref.fail,complete = _ref.complete;\n    var res = {\n      errMsg: \"\".concat(name, \":fail:\\u6682\\u4E0D\\u652F\\u6301 \").concat(name, \" \\u65B9\\u6CD5\") };\n\n    isFn(fail) && fail(res);\n    isFn(complete) && complete(res);\n  };\n}\n\nTODOS.forEach(function (name) {\n  todoApis[name] = createTodoApi(name);\n});\n\nvar getEmitter = function () {\n  if (typeof getUniEmitter === 'function') {\n    /* eslint-disable no-undef */\n    return getUniEmitter;\n  }\n  var Emitter;\n  return function getUniEmitter() {\n    if (!Emitter) {\n      Emitter = new _vue.default();\n    }\n    return Emitter;\n  };\n}();\n\nfunction apply(ctx, method, args) {\n  return ctx[method].apply(ctx, args);\n}\n\nfunction $on() {\n  return apply(getEmitter(), '$on', Array.prototype.slice.call(arguments));\n}\nfunction $off() {\n  return apply(getEmitter(), '$off', Array.prototype.slice.call(arguments));\n}\nfunction $once() {\n  return apply(getEmitter(), '$once', Array.prototype.slice.call(arguments));\n}\nfunction $emit() {\n  return apply(getEmitter(), '$emit', Array.prototype.slice.call(arguments));\n}\n\nvar eventApi = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  $on: $on,\n  $off: $off,\n  $once: $once,\n  $emit: $emit });\n\n\nfunction requireNativePlugin(pluginName) {\n  /* eslint-disable no-undef */\n  if (typeof weex !== 'undefined') {\n    return weex.requireModule(pluginName);\n  }\n  /* eslint-disable no-undef */\n  return __requireNativePlugin__(pluginName);\n}\n\nfunction wrapper$1(webview) {\n  webview.$processed = true;\n\n  webview.postMessage = function (data) {\n    plus.webview.postMessageToUniNView({\n      type: 'UniAppSubNVue',\n      data: data },\n    webview.id);\n  };\n  var callbacks = [];\n  webview.onMessage = function (callback) {\n    callbacks.push(callback);\n  };\n  webview.$consumeMessage = function (e) {\n    callbacks.forEach(function (callback) {return callback(e);});\n  };\n\n  if (!webview.__uniapp_mask_id) {\n    return;\n  }\n  var maskColor = webview.__uniapp_mask;\n  var maskWebview = webview.__uniapp_mask_id === '0' ? {\n    setStyle: function setStyle(_ref2)\n\n    {var mask = _ref2.mask;\n      requireNativePlugin('uni-tabview').setMask({\n        color: mask });\n\n    } } :\n  plus.webview.getWebviewById(webview.__uniapp_mask_id);\n  var oldShow = webview.show;\n  var oldHide = webview.hide;\n  var oldClose = webview.close;\n\n  var showMask = function showMask() {\n    maskWebview.setStyle({\n      mask: maskColor });\n\n  };\n  var closeMask = function closeMask() {\n    maskWebview.setStyle({\n      mask: 'none' });\n\n  };\n  webview.show = function () {\n    showMask();for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {args[_key3] = arguments[_key3];}\n    return oldShow.apply(webview, args);\n  };\n  webview.hide = function () {\n    closeMask();for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {args[_key4] = arguments[_key4];}\n    return oldHide.apply(webview, args);\n  };\n  webview.close = function () {\n    closeMask();\n    callbacks = [];for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {args[_key5] = arguments[_key5];}\n    return oldClose.apply(webview, args);\n  };\n}\n\nfunction getSubNVueById(id) {\n  var webview = plus.webview.getWebviewById(id);\n  if (webview && !webview.$processed) {\n    wrapper$1(webview);\n  }\n  return webview;\n}\n\n\n\nvar api = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getSubNVueById: getSubNVueById,\n  requireNativePlugin: requireNativePlugin });\n\n\nvar MPPage = Page;\nvar MPComponent = Component;\n\nvar customizeRE = /:/g;\n\nvar customize = cached(function (str) {\n  return camelize(str.replace(customizeRE, '-'));\n});\n\nfunction initTriggerEvent(mpInstance) {\n  {\n    if (!wx.canIUse('nextTick')) {\n      return;\n    }\n  }\n  var oldTriggerEvent = mpInstance.triggerEvent;\n  mpInstance.triggerEvent = function (event) {for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {args[_key6 - 1] = arguments[_key6];}\n    return oldTriggerEvent.apply(mpInstance, [customize(event)].concat(args));\n  };\n}\n\nfunction initHook(name, options) {\n  var oldHook = options[name];\n  if (!oldHook) {\n    options[name] = function () {\n      initTriggerEvent(this);\n    };\n  } else {\n    options[name] = function () {\n      initTriggerEvent(this);for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {args[_key7] = arguments[_key7];}\n      return oldHook.apply(this, args);\n    };\n  }\n}\n\nPage = function Page() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('onLoad', options);\n  return MPPage(options);\n};\n\nComponent = function Component() {var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  initHook('created', options);\n  return MPComponent(options);\n};\n\nvar PAGE_EVENT_HOOKS = [\n'onPullDownRefresh',\n'onReachBottom',\n'onShareAppMessage',\n'onPageScroll',\n'onResize',\n'onTabItemTap'];\n\n\nfunction initMocks(vm, mocks) {\n  var mpInstance = vm.$mp[vm.mpType];\n  mocks.forEach(function (mock) {\n    if (hasOwn(mpInstance, mock)) {\n      vm[mock] = mpInstance[mock];\n    }\n  });\n}\n\nfunction hasHook(hook, vueOptions) {\n  if (!vueOptions) {\n    return true;\n  }\n\n  if (_vue.default.options && Array.isArray(_vue.default.options[hook])) {\n    return true;\n  }\n\n  vueOptions = vueOptions.default || vueOptions;\n\n  if (isFn(vueOptions)) {\n    if (isFn(vueOptions.extendOptions[hook])) {\n      return true;\n    }\n    if (vueOptions.super &&\n    vueOptions.super.options &&\n    Array.isArray(vueOptions.super.options[hook])) {\n      return true;\n    }\n    return false;\n  }\n\n  if (isFn(vueOptions[hook])) {\n    return true;\n  }\n  var mixins = vueOptions.mixins;\n  if (Array.isArray(mixins)) {\n    return !!mixins.find(function (mixin) {return hasHook(hook, mixin);});\n  }\n}\n\nfunction initHooks(mpOptions, hooks, vueOptions) {\n  hooks.forEach(function (hook) {\n    if (hasHook(hook, vueOptions)) {\n      mpOptions[hook] = function (args) {\n        return this.$vm && this.$vm.__call_hook(hook, args);\n      };\n    }\n  });\n}\n\nfunction initVueComponent(Vue, vueOptions) {\n  vueOptions = vueOptions.default || vueOptions;\n  var VueComponent;\n  if (isFn(vueOptions)) {\n    VueComponent = vueOptions;\n    vueOptions = VueComponent.extendOptions;\n  } else {\n    VueComponent = Vue.extend(vueOptions);\n  }\n  return [VueComponent, vueOptions];\n}\n\nfunction initSlots(vm, vueSlots) {\n  if (Array.isArray(vueSlots) && vueSlots.length) {\n    var $slots = Object.create(null);\n    vueSlots.forEach(function (slotName) {\n      $slots[slotName] = true;\n    });\n    vm.$scopedSlots = vm.$slots = $slots;\n  }\n}\n\nfunction initVueIds(vueIds, mpInstance) {\n  vueIds = (vueIds || '').split(',');\n  var len = vueIds.length;\n\n  if (len === 1) {\n    mpInstance._$vueId = vueIds[0];\n  } else if (len === 2) {\n    mpInstance._$vueId = vueIds[0];\n    mpInstance._$vuePid = vueIds[1];\n  }\n}\n\nfunction initData(vueOptions, context) {\n  var data = vueOptions.data || {};\n  var methods = vueOptions.methods || {};\n\n  if (typeof data === 'function') {\n    try {\n      data = data.call(context); // 支持 Vue.prototype 上挂的数据\n    } catch (e) {\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\n        console.warn('根据 Vue 的 data 函数初始化小程序 data 失败，请尽量确保 data 函数中不访问 vm 对象，否则可能影响首次数据渲染速度。', data);\n      }\n    }\n  } else {\n    try {\n      // 对 data 格式化\n      data = JSON.parse(JSON.stringify(data));\n    } catch (e) {}\n  }\n\n  if (!isPlainObject(data)) {\n    data = {};\n  }\n\n  Object.keys(methods).forEach(function (methodName) {\n    if (context.__lifecycle_hooks__.indexOf(methodName) === -1 && !hasOwn(data, methodName)) {\n      data[methodName] = methods[methodName];\n    }\n  });\n\n  return data;\n}\n\nvar PROP_TYPES = [String, Number, Boolean, Object, Array, null];\n\nfunction createObserver(name) {\n  return function observer(newVal, oldVal) {\n    if (this.$vm) {\n      this.$vm[name] = newVal; // 为了触发其他非 render watcher\n    }\n  };\n}\n\nfunction initBehaviors(vueOptions, initBehavior) {\n  var vueBehaviors = vueOptions['behaviors'];\n  var vueExtends = vueOptions['extends'];\n  var vueMixins = vueOptions['mixins'];\n\n  var vueProps = vueOptions['props'];\n\n  if (!vueProps) {\n    vueOptions['props'] = vueProps = [];\n  }\n\n  var behaviors = [];\n  if (Array.isArray(vueBehaviors)) {\n    vueBehaviors.forEach(function (behavior) {\n      behaviors.push(behavior.replace('uni://', \"wx\".concat(\"://\")));\n      if (behavior === 'uni://form-field') {\n        if (Array.isArray(vueProps)) {\n          vueProps.push('name');\n          vueProps.push('value');\n        } else {\n          vueProps['name'] = {\n            type: String,\n            default: '' };\n\n          vueProps['value'] = {\n            type: [String, Number, Boolean, Array, Object, Date],\n            default: '' };\n\n        }\n      }\n    });\n  }\n  if (isPlainObject(vueExtends) && vueExtends.props) {\n    behaviors.push(\n    initBehavior({\n      properties: initProperties(vueExtends.props, true) }));\n\n\n  }\n  if (Array.isArray(vueMixins)) {\n    vueMixins.forEach(function (vueMixin) {\n      if (isPlainObject(vueMixin) && vueMixin.props) {\n        behaviors.push(\n        initBehavior({\n          properties: initProperties(vueMixin.props, true) }));\n\n\n      }\n    });\n  }\n  return behaviors;\n}\n\nfunction parsePropType(key, type, defaultValue, file) {\n  // [String]=>String\n  if (Array.isArray(type) && type.length === 1) {\n    return type[0];\n  }\n  return type;\n}\n\nfunction initProperties(props) {var isBehavior = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;var file = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  var properties = {};\n  if (!isBehavior) {\n    properties.vueId = {\n      type: String,\n      value: '' };\n\n    properties.vueSlots = { // 小程序不能直接定义 $slots 的 props，所以通过 vueSlots 转换到 $slots\n      type: null,\n      value: [],\n      observer: function observer(newVal, oldVal) {\n        var $slots = Object.create(null);\n        newVal.forEach(function (slotName) {\n          $slots[slotName] = true;\n        });\n        this.setData({\n          $slots: $slots });\n\n      } };\n\n  }\n  if (Array.isArray(props)) {// ['title']\n    props.forEach(function (key) {\n      properties[key] = {\n        type: null,\n        observer: createObserver(key) };\n\n    });\n  } else if (isPlainObject(props)) {// {title:{type:String,default:''},content:String}\n    Object.keys(props).forEach(function (key) {\n      var opts = props[key];\n      if (isPlainObject(opts)) {// title:{type:String,default:''}\n        var value = opts['default'];\n        if (isFn(value)) {\n          value = value();\n        }\n\n        opts.type = parsePropType(key, opts.type);\n\n        properties[key] = {\n          type: PROP_TYPES.indexOf(opts.type) !== -1 ? opts.type : null,\n          value: value,\n          observer: createObserver(key) };\n\n      } else {// content:String\n        var type = parsePropType(key, opts);\n        properties[key] = {\n          type: PROP_TYPES.indexOf(type) !== -1 ? type : null,\n          observer: createObserver(key) };\n\n      }\n    });\n  }\n  return properties;\n}\n\nfunction wrapper$2(event) {\n  // TODO 又得兼容 mpvue 的 mp 对象\n  try {\n    event.mp = JSON.parse(JSON.stringify(event));\n  } catch (e) {}\n\n  event.stopPropagation = noop;\n  event.preventDefault = noop;\n\n  event.target = event.target || {};\n\n  if (!hasOwn(event, 'detail')) {\n    event.detail = {};\n  }\n\n  if (isPlainObject(event.detail)) {\n    event.target = Object.assign({}, event.target, event.detail);\n  }\n\n  return event;\n}\n\nfunction getExtraValue(vm, dataPathsArray) {\n  var context = vm;\n  dataPathsArray.forEach(function (dataPathArray) {\n    var dataPath = dataPathArray[0];\n    var value = dataPathArray[2];\n    if (dataPath || typeof value !== 'undefined') {// ['','',index,'disable']\n      var propPath = dataPathArray[1];\n      var valuePath = dataPathArray[3];\n\n      var vFor = dataPath ? vm.__get_value(dataPath, context) : context;\n\n      if (Number.isInteger(vFor)) {\n        context = value;\n      } else if (!propPath) {\n        context = vFor[value];\n      } else {\n        if (Array.isArray(vFor)) {\n          context = vFor.find(function (vForItem) {\n            return vm.__get_value(propPath, vForItem) === value;\n          });\n        } else if (isPlainObject(vFor)) {\n          context = Object.keys(vFor).find(function (vForKey) {\n            return vm.__get_value(propPath, vFor[vForKey]) === value;\n          });\n        } else {\n          console.error('v-for 暂不支持循环数据：', vFor);\n        }\n      }\n\n      if (valuePath) {\n        context = vm.__get_value(valuePath, context);\n      }\n    }\n  });\n  return context;\n}\n\nfunction processEventExtra(vm, extra, event) {\n  var extraObj = {};\n\n  if (Array.isArray(extra) && extra.length) {\n    /**\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *[\r\n                                              *    ['data.items', 'data.id', item.data.id],\r\n                                              *    ['metas', 'id', meta.id]\r\n                                              *],\r\n                                              *'test'\r\n                                              */\n    extra.forEach(function (dataPath, index) {\n      if (typeof dataPath === 'string') {\n        if (!dataPath) {// model,prop.sync\n          extraObj['$' + index] = vm;\n        } else {\n          if (dataPath === '$event') {// $event\n            extraObj['$' + index] = event;\n          } else if (dataPath.indexOf('$event.') === 0) {// $event.target.value\n            extraObj['$' + index] = vm.__get_value(dataPath.replace('$event.', ''), event);\n          } else {\n            extraObj['$' + index] = vm.__get_value(dataPath);\n          }\n        }\n      } else {\n        extraObj['$' + index] = getExtraValue(vm, dataPath);\n      }\n    });\n  }\n\n  return extraObj;\n}\n\nfunction getObjByArray(arr) {\n  var obj = {};\n  for (var i = 1; i < arr.length; i++) {\n    var element = arr[i];\n    obj[element[0]] = element[1];\n  }\n  return obj;\n}\n\nfunction processEventArgs(vm, event) {var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];var extra = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];var isCustom = arguments.length > 4 ? arguments[4] : undefined;var methodName = arguments.length > 5 ? arguments[5] : undefined;\n  var isCustomMPEvent = false; // wxcomponent 组件，传递原始 event 对象\n  if (isCustom) {// 自定义事件\n    isCustomMPEvent = event.currentTarget &&\n    event.currentTarget.dataset &&\n    event.currentTarget.dataset.comType === 'wx';\n    if (!args.length) {// 无参数，直接传入 event 或 detail 数组\n      if (isCustomMPEvent) {\n        return [event];\n      }\n      return event.detail.__args__ || event.detail;\n    }\n  }\n\n  var extraObj = processEventExtra(vm, extra, event);\n\n  var ret = [];\n  args.forEach(function (arg) {\n    if (arg === '$event') {\n      if (methodName === '__set_model' && !isCustom) {// input v-model value\n        ret.push(event.target.value);\n      } else {\n        if (isCustom && !isCustomMPEvent) {\n          ret.push(event.detail.__args__[0]);\n        } else {// wxcomponent 组件或内置组件\n          ret.push(event);\n        }\n      }\n    } else {\n      if (Array.isArray(arg) && arg[0] === 'o') {\n        ret.push(getObjByArray(arg));\n      } else if (typeof arg === 'string' && hasOwn(extraObj, arg)) {\n        ret.push(extraObj[arg]);\n      } else {\n        ret.push(arg);\n      }\n    }\n  });\n\n  return ret;\n}\n\nvar ONCE = '~';\nvar CUSTOM = '^';\n\nfunction isMatchEventType(eventType, optType) {\n  return eventType === optType ||\n\n  optType === 'regionchange' && (\n\n  eventType === 'begin' ||\n  eventType === 'end');\n\n\n}\n\nfunction handleEvent(event) {var _this = this;\n  event = wrapper$2(event);\n\n  // [['tap',[['handle',[1,2,a]],['handle1',[1,2,a]]]]]\n  var dataset = (event.currentTarget || event.target).dataset;\n  if (!dataset) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n  var eventOpts = dataset.eventOpts || dataset['event-opts']; // 支付宝 web-view 组件 dataset 非驼峰\n  if (!eventOpts) {\n    return console.warn(\"\\u4E8B\\u4EF6\\u4FE1\\u606F\\u4E0D\\u5B58\\u5728\");\n  }\n\n  // [['handle',[1,2,a]],['handle1',[1,2,a]]]\n  var eventType = event.type;\n\n  var ret = [];\n\n  eventOpts.forEach(function (eventOpt) {\n    var type = eventOpt[0];\n    var eventsArray = eventOpt[1];\n\n    var isCustom = type.charAt(0) === CUSTOM;\n    type = isCustom ? type.slice(1) : type;\n    var isOnce = type.charAt(0) === ONCE;\n    type = isOnce ? type.slice(1) : type;\n\n    if (eventsArray && isMatchEventType(eventType, type)) {\n      eventsArray.forEach(function (eventArray) {\n        var methodName = eventArray[0];\n        if (methodName) {\n          var handlerCtx = _this.$vm;\n          if (\n          handlerCtx.$options.generic &&\n          handlerCtx.$parent &&\n          handlerCtx.$parent.$parent)\n          {// mp-weixin,mp-toutiao 抽象节点模拟 scoped slots\n            handlerCtx = handlerCtx.$parent.$parent;\n          }\n          if (methodName === '$emit') {\n            handlerCtx.$emit.apply(handlerCtx,\n            processEventArgs(\n            _this.$vm,\n            event,\n            eventArray[1],\n            eventArray[2],\n            isCustom,\n            methodName));\n\n            return;\n          }\n          var handler = handlerCtx[methodName];\n          if (!isFn(handler)) {\n            throw new Error(\" _vm.\".concat(methodName, \" is not a function\"));\n          }\n          if (isOnce) {\n            if (handler.once) {\n              return;\n            }\n            handler.once = true;\n          }\n          ret.push(handler.apply(handlerCtx, processEventArgs(\n          _this.$vm,\n          event,\n          eventArray[1],\n          eventArray[2],\n          isCustom,\n          methodName)));\n\n        }\n      });\n    }\n  });\n\n  if (\n  eventType === 'input' &&\n  ret.length === 1 &&\n  typeof ret[0] !== 'undefined')\n  {\n    return ret[0];\n  }\n}\n\nvar hooks = [\n'onShow',\n'onHide',\n'onError',\n'onPageNotFound'];\n\n\nfunction parseBaseApp(vm, _ref3)\n\n\n{var mocks = _ref3.mocks,initRefs = _ref3.initRefs;\n  if (vm.$options.store) {\n    _vue.default.prototype.$store = vm.$options.store;\n  }\n\n  _vue.default.prototype.mpHost = \"app-plus\";\n\n  _vue.default.mixin({\n    beforeCreate: function beforeCreate() {\n      if (!this.$options.mpType) {\n        return;\n      }\n\n      this.mpType = this.$options.mpType;\n\n      this.$mp = _defineProperty({\n        data: {} },\n      this.mpType, this.$options.mpInstance);\n\n\n      this.$scope = this.$options.mpInstance;\n\n      delete this.$options.mpType;\n      delete this.$options.mpInstance;\n\n      if (this.mpType !== 'app') {\n        initRefs(this);\n        initMocks(this, mocks);\n      }\n    } });\n\n\n  var appOptions = {\n    onLaunch: function onLaunch(args) {\n      if (this.$vm) {// 已经初始化过了，主要是为了百度，百度 onShow 在 onLaunch 之前\n        return;\n      }\n\n      this.$vm = vm;\n\n      this.$vm.$mp = {\n        app: this };\n\n\n      this.$vm.$scope = this;\n      // vm 上也挂载 globalData\n      this.$vm.globalData = this.globalData;\n\n      this.$vm._isMounted = true;\n      this.$vm.__call_hook('mounted', args);\n\n      this.$vm.__call_hook('onLaunch', args);\n    } };\n\n\n  // 兼容旧版本 globalData\n  appOptions.globalData = vm.$options.globalData || {};\n  // 将 methods 中的方法挂在 getApp() 中\n  var methods = vm.$options.methods;\n  if (methods) {\n    Object.keys(methods).forEach(function (name) {\n      appOptions[name] = methods[name];\n    });\n  }\n\n  initHooks(appOptions, hooks);\n\n  return appOptions;\n}\n\nvar mocks = ['__route__', '__wxExparserNodeId__', '__wxWebviewId__'];\n\nfunction findVmByVueId(vm, vuePid) {\n  var $children = vm.$children;\n  // 优先查找直属(反向查找:https://github.com/dcloudio/uni-app/issues/1200)\n  for (var i = $children.length - 1; i >= 0; i--) {\n    var childVm = $children[i];\n    if (childVm.$scope._$vueId === vuePid) {\n      return childVm;\n    }\n  }\n  // 反向递归查找\n  var parentVm;\n  for (var _i = $children.length - 1; _i >= 0; _i--) {\n    parentVm = findVmByVueId($children[_i], vuePid);\n    if (parentVm) {\n      return parentVm;\n    }\n  }\n}\n\nfunction initBehavior(options) {\n  return Behavior(options);\n}\n\nfunction isPage() {\n  return !!this.route;\n}\n\nfunction initRelation(detail) {\n  this.triggerEvent('__l', detail);\n}\n\nfunction initRefs(vm) {\n  var mpInstance = vm.$scope;\n  Object.defineProperty(vm, '$refs', {\n    get: function get() {\n      var $refs = {};\n      var components = mpInstance.selectAllComponents('.vue-ref');\n      components.forEach(function (component) {\n        var ref = component.dataset.ref;\n        $refs[ref] = component.$vm || component;\n      });\n      var forComponents = mpInstance.selectAllComponents('.vue-ref-in-for');\n      forComponents.forEach(function (component) {\n        var ref = component.dataset.ref;\n        if (!$refs[ref]) {\n          $refs[ref] = [];\n        }\n        $refs[ref].push(component.$vm || component);\n      });\n      return $refs;\n    } });\n\n}\n\nfunction handleLink(event) {var _ref4 =\n\n\n\n  event.detail || event.value,vuePid = _ref4.vuePid,vueOptions = _ref4.vueOptions; // detail 是微信,value 是百度(dipatch)\n\n  var parentVm;\n\n  if (vuePid) {\n    parentVm = findVmByVueId(this.$vm, vuePid);\n  }\n\n  if (!parentVm) {\n    parentVm = this.$vm;\n  }\n\n  vueOptions.parent = parentVm;\n}\n\nfunction parseApp(vm) {\n  return parseBaseApp(vm, {\n    mocks: mocks,\n    initRefs: initRefs });\n\n}\n\nvar hooks$1 = [\n'onUniNViewMessage'];\n\n\nfunction parseApp$1(vm) {\n  var appOptions = parseApp(vm);\n\n  initHooks(appOptions, hooks$1);\n\n  return appOptions;\n}\n\nfunction createApp(vm) {\n  App(parseApp$1(vm));\n  return vm;\n}\n\nfunction parseBaseComponent(vueComponentOptions)\n\n\n{var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},isPage = _ref5.isPage,initRelation = _ref5.initRelation;var _initVueComponent =\n  initVueComponent(_vue.default, vueComponentOptions),_initVueComponent2 = _slicedToArray(_initVueComponent, 2),VueComponent = _initVueComponent2[0],vueOptions = _initVueComponent2[1];\n\n  var options = _objectSpread({\n    multipleSlots: true,\n    addGlobalClass: true },\n  vueOptions.options || {});\n\n\n  var componentOptions = {\n    options: options,\n    data: initData(vueOptions, _vue.default.prototype),\n    behaviors: initBehaviors(vueOptions, initBehavior),\n    properties: initProperties(vueOptions.props, false, vueOptions.__file),\n    lifetimes: {\n      attached: function attached() {\n        var properties = this.properties;\n\n        var options = {\n          mpType: isPage.call(this) ? 'page' : 'component',\n          mpInstance: this,\n          propsData: properties };\n\n\n        initVueIds(properties.vueId, this);\n\n        // 处理父子关系\n        initRelation.call(this, {\n          vuePid: this._$vuePid,\n          vueOptions: options });\n\n\n        // 初始化 vue 实例\n        this.$vm = new VueComponent(options);\n\n        // 处理$slots,$scopedSlots（暂不支持动态变化$slots）\n        initSlots(this.$vm, properties.vueSlots);\n\n        // 触发首次 setData\n        this.$vm.$mount();\n      },\n      ready: function ready() {\n        // 当组件 props 默认值为 true，初始化时传入 false 会导致 created,ready 触发, 但 attached 不触发\n        // https://developers.weixin.qq.com/community/develop/doc/00066ae2844cc0f8eb883e2a557800\n        if (this.$vm) {\n          this.$vm._isMounted = true;\n          this.$vm.__call_hook('mounted');\n          this.$vm.__call_hook('onReady');\n        }\n      },\n      detached: function detached() {\n        this.$vm && this.$vm.$destroy();\n      } },\n\n    pageLifetimes: {\n      show: function show(args) {\n        this.$vm && this.$vm.__call_hook('onPageShow', args);\n      },\n      hide: function hide() {\n        this.$vm && this.$vm.__call_hook('onPageHide');\n      },\n      resize: function resize(size) {\n        this.$vm && this.$vm.__call_hook('onPageResize', size);\n      } },\n\n    methods: {\n      __l: handleLink,\n      __e: handleEvent } };\n\n\n\n  if (Array.isArray(vueOptions.wxsCallMethods)) {\n    vueOptions.wxsCallMethods.forEach(function (callMethod) {\n      componentOptions.methods[callMethod] = function (args) {\n        return this.$vm[callMethod](args);\n      };\n    });\n  }\n\n  if (isPage) {\n    return componentOptions;\n  }\n  return [componentOptions, VueComponent];\n}\n\nfunction parseComponent(vueComponentOptions) {\n  return parseBaseComponent(vueComponentOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nfunction parseComponent$1(vueComponentOptions) {\n  var componentOptions = parseComponent(vueComponentOptions);\n\n  componentOptions.methods.$getAppWebview = function () {\n    return plus.webview.getWebviewById(\"\".concat(this.__wxWebviewId__));\n  };\n  return componentOptions;\n}\n\nvar hooks$2 = [\n'onShow',\n'onHide',\n'onUnload'];\n\n\nhooks$2.push.apply(hooks$2, PAGE_EVENT_HOOKS);\n\nfunction parseBasePage(vuePageOptions, _ref6)\n\n\n{var isPage = _ref6.isPage,initRelation = _ref6.initRelation;\n  var pageOptions = parseComponent$1(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$2, vuePageOptions);\n\n  pageOptions.methods.onLoad = function (args) {\n    this.$vm.$mp.query = args; // 兼容 mpvue\n    this.$vm.__call_hook('onLoad', args);\n  };\n\n  return pageOptions;\n}\n\nfunction parsePage(vuePageOptions) {\n  return parseBasePage(vuePageOptions, {\n    isPage: isPage,\n    initRelation: initRelation });\n\n}\n\nvar hooks$3 = [\n'onBackPress',\n'onNavigationBarButtonTap',\n'onNavigationBarSearchInputChanged',\n'onNavigationBarSearchInputConfirmed',\n'onNavigationBarSearchInputClicked'];\n\n\nfunction parsePage$1(vuePageOptions) {\n  var pageOptions = parsePage(vuePageOptions);\n\n  initHooks(pageOptions.methods, hooks$3);\n\n  return pageOptions;\n}\n\nfunction createPage(vuePageOptions) {\n  {\n    return Component(parsePage$1(vuePageOptions));\n  }\n}\n\nfunction createComponent(vueOptions) {\n  {\n    return Component(parseComponent$1(vueOptions));\n  }\n}\n\ntodos.forEach(function (todoApi) {\n  protocols[todoApi] = false;\n});\n\ncanIUses.forEach(function (canIUseApi) {\n  var apiName = protocols[canIUseApi] && protocols[canIUseApi].name ? protocols[canIUseApi].name :\n  canIUseApi;\n  if (!wx.canIUse(apiName)) {\n    protocols[canIUseApi] = false;\n  }\n});\n\nvar uni = {};\n\nif (typeof Proxy !== 'undefined' && \"app-plus\" !== 'app-plus') {\n  uni = new Proxy({}, {\n    get: function get(target, name) {\n      if (target[name]) {\n        return target[name];\n      }\n      if (baseApi[name]) {\n        return baseApi[name];\n      }\n      if (api[name]) {\n        return promisify(name, api[name]);\n      }\n      if (eventApi[name]) {\n        return eventApi[name];\n      }\n      if (!hasOwn(wx, name) && !hasOwn(protocols, name)) {\n        return;\n      }\n      return promisify(name, wrapper(name, wx[name]));\n    },\n    set: function set(target, name, value) {\n      target[name] = value;\n      return true;\n    } });\n\n} else {\n  Object.keys(baseApi).forEach(function (name) {\n    uni[name] = baseApi[name];\n  });\n\n  Object.keys(eventApi).forEach(function (name) {\n    uni[name] = eventApi[name];\n  });\n\n  Object.keys(api).forEach(function (name) {\n    uni[name] = promisify(name, api[name]);\n  });\n\n  Object.keys(wx).forEach(function (name) {\n    if (hasOwn(wx, name) || hasOwn(protocols, name)) {\n      uni[name] = promisify(name, wrapper(name, wx[name]));\n    }\n  });\n}\n\n{\n  if (typeof global !== 'undefined') {\n    global.uni = uni;\n    global.UniEmitter = eventApi;\n  }\n}\n\nwx.createApp = createApp;\nwx.createPage = createPage;\nwx.createComponent = createComponent;\n\nvar uni$1 = uni;var _default =\n\nuni$1;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n");

/***/ }),

/***/ 12:
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = formatLog;function typof(v) {\n  var s = Object.prototype.toString.call(v);\n  return s.substring(8, s.length - 1);\n}\n\nfunction isDebugMode() {\n  /* eslint-disable no-undef */\n  return typeof __channelId__ === 'string' && __channelId__;\n}\n\nfunction formatLog() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  var type = args.shift();\n  if (isDebugMode()) {\n    args.push(args.pop().replace('at ', 'uni-app:///'));\n    return console[type]['apply'](console, args);\n  }\n\n  var msgs = args.map(function (v) {\n    var type = Object.prototype.toString.call(v);\n\n    if (type.toLowerCase() === '[object object]') {\n      try {\n        v = '---BEGIN:JSON---' + JSON.stringify(v) + '---END:JSON---';\n      } catch (e) {\n        v = '[object object]';\n      }\n    } else {\n      if (v === null) {\n        v = '---NULL---';\n      } else if (v === undefined) {\n        v = '---UNDEFINED---';\n      } else {\n        var vType = typof(v).toUpperCase();\n\n        if (vType === 'NUMBER' || vType === 'BOOLEAN') {\n          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---';\n        } else {\n          v = String(v);\n        }\n      }\n    }\n\n    return v;\n  });\n  var msg = '';\n\n  if (msgs.length > 1) {\n    var lastMsg = msgs.pop();\n    msg = msgs.join('---COMMA---');\n\n    if (lastMsg.indexOf(' at ') === 0) {\n      msg += lastMsg;\n    } else {\n      msg += '---COMMA---' + lastMsg;\n    }\n  } else {\n    msg = msgs[0];\n  }\n\n  console[type](msg);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbInR5cG9mIiwidiIsInMiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJzdWJzdHJpbmciLCJsZW5ndGgiLCJpc0RlYnVnTW9kZSIsIl9fY2hhbm5lbElkX18iLCJmb3JtYXRMb2ciLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInR5cGUiLCJzaGlmdCIsInB1c2giLCJwb3AiLCJyZXBsYWNlIiwiY29uc29sZSIsIm1zZ3MiLCJtYXAiLCJ0b0xvd2VyQ2FzZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJlIiwidW5kZWZpbmVkIiwidlR5cGUiLCJ0b1VwcGVyQ2FzZSIsIlN0cmluZyIsIm1zZyIsImxhc3RNc2ciLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IjBGQUFBLFNBQVNBLEtBQVQsQ0FBZ0JDLENBQWhCLEVBQW1CO0FBQ2pCLE1BQUlDLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVI7QUFDQSxTQUFPQyxDQUFDLENBQUNLLFNBQUYsQ0FBWSxDQUFaLEVBQWVMLENBQUMsQ0FBQ00sTUFBRixHQUFXLENBQTFCLENBQVA7QUFDRDs7QUFFRCxTQUFTQyxXQUFULEdBQXdCO0FBQ3RCO0FBQ0EsU0FBTyxPQUFPQyxhQUFQLEtBQXlCLFFBQXpCLElBQXFDQSxhQUE1QztBQUNEOztBQUVjLFNBQVNDLFNBQVQsR0FBc0I7QUFDbkMsT0FBSyxJQUFJQyxJQUFJLEdBQUdDLFNBQVMsQ0FBQ0wsTUFBckIsRUFBNkJNLElBQUksR0FBRyxJQUFJQyxLQUFKLENBQVVILElBQVYsQ0FBcEMsRUFBcURJLElBQUksR0FBRyxDQUFqRSxFQUFvRUEsSUFBSSxHQUFHSixJQUEzRSxFQUFpRkksSUFBSSxFQUFyRixFQUF5RjtBQUN2RkYsUUFBSSxDQUFDRSxJQUFELENBQUosR0FBYUgsU0FBUyxDQUFDRyxJQUFELENBQXRCO0FBQ0Q7QUFDRCxNQUFJQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksS0FBTCxFQUFYO0FBQ0EsTUFBSVQsV0FBVyxFQUFmLEVBQW1CO0FBQ2pCSyxRQUFJLENBQUNLLElBQUwsQ0FBVUwsSUFBSSxDQUFDTSxHQUFMLEdBQVdDLE9BQVgsQ0FBbUIsS0FBbkIsRUFBMEIsYUFBMUIsQ0FBVjtBQUNBLFdBQU9DLE9BQU8sQ0FBQ0wsSUFBRCxDQUFQLENBQWMsT0FBZCxFQUF1QkssT0FBdkIsRUFBZ0NSLElBQWhDLENBQVA7QUFDRDs7QUFFRCxNQUFJUyxJQUFJLEdBQUdULElBQUksQ0FBQ1UsR0FBTCxDQUFTLFVBQVV2QixDQUFWLEVBQWE7QUFDL0IsUUFBSWdCLElBQUksR0FBR2QsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JMLENBQS9CLENBQVg7O0FBRUEsUUFBSWdCLElBQUksQ0FBQ1EsV0FBTCxPQUF1QixpQkFBM0IsRUFBOEM7QUFDNUMsVUFBSTtBQUNGeEIsU0FBQyxHQUFHLHFCQUFxQnlCLElBQUksQ0FBQ0MsU0FBTCxDQUFlMUIsQ0FBZixDQUFyQixHQUF5QyxnQkFBN0M7QUFDRCxPQUZELENBRUUsT0FBTzJCLENBQVAsRUFBVTtBQUNWM0IsU0FBQyxHQUFHLGlCQUFKO0FBQ0Q7QUFDRixLQU5ELE1BTU87QUFDTCxVQUFJQSxDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNkQSxTQUFDLEdBQUcsWUFBSjtBQUNELE9BRkQsTUFFTyxJQUFJQSxDQUFDLEtBQUs0QixTQUFWLEVBQXFCO0FBQzFCNUIsU0FBQyxHQUFHLGlCQUFKO0FBQ0QsT0FGTSxNQUVBO0FBQ0wsWUFBSTZCLEtBQUssR0FBRzlCLEtBQUssQ0FBQ0MsQ0FBRCxDQUFMLENBQVM4QixXQUFULEVBQVo7O0FBRUEsWUFBSUQsS0FBSyxLQUFLLFFBQVYsSUFBc0JBLEtBQUssS0FBSyxTQUFwQyxFQUErQztBQUM3QzdCLFdBQUMsR0FBRyxjQUFjNkIsS0FBZCxHQUFzQixLQUF0QixHQUE4QjdCLENBQTlCLEdBQWtDLFNBQWxDLEdBQThDNkIsS0FBOUMsR0FBc0QsS0FBMUQ7QUFDRCxTQUZELE1BRU87QUFDTDdCLFdBQUMsR0FBRytCLE1BQU0sQ0FBQy9CLENBQUQsQ0FBVjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFPQSxDQUFQO0FBQ0QsR0ExQlUsQ0FBWDtBQTJCQSxNQUFJZ0MsR0FBRyxHQUFHLEVBQVY7O0FBRUEsTUFBSVYsSUFBSSxDQUFDZixNQUFMLEdBQWMsQ0FBbEIsRUFBcUI7QUFDbkIsUUFBSTBCLE9BQU8sR0FBR1gsSUFBSSxDQUFDSCxHQUFMLEVBQWQ7QUFDQWEsT0FBRyxHQUFHVixJQUFJLENBQUNZLElBQUwsQ0FBVSxhQUFWLENBQU47O0FBRUEsUUFBSUQsT0FBTyxDQUFDRSxPQUFSLENBQWdCLE1BQWhCLE1BQTRCLENBQWhDLEVBQW1DO0FBQ2pDSCxTQUFHLElBQUlDLE9BQVA7QUFDRCxLQUZELE1BRU87QUFDTEQsU0FBRyxJQUFJLGdCQUFnQkMsT0FBdkI7QUFDRDtBQUNGLEdBVEQsTUFTTztBQUNMRCxPQUFHLEdBQUdWLElBQUksQ0FBQyxDQUFELENBQVY7QUFDRDs7QUFFREQsU0FBTyxDQUFDTCxJQUFELENBQVAsQ0FBY2dCLEdBQWQ7QUFDRCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHR5cG9mICh2KSB7XHJcbiAgdmFyIHMgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuICByZXR1cm4gcy5zdWJzdHJpbmcoOCwgcy5sZW5ndGggLSAxKVxyXG59XHJcblxyXG5mdW5jdGlvbiBpc0RlYnVnTW9kZSAoKSB7XHJcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cclxuICByZXR1cm4gdHlwZW9mIF9fY2hhbm5lbElkX18gPT09ICdzdHJpbmcnICYmIF9fY2hhbm5lbElkX19cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9nICgpIHtcclxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcclxuICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV1cclxuICB9XHJcbiAgdmFyIHR5cGUgPSBhcmdzLnNoaWZ0KClcclxuICBpZiAoaXNEZWJ1Z01vZGUoKSkge1xyXG4gICAgYXJncy5wdXNoKGFyZ3MucG9wKCkucmVwbGFjZSgnYXQgJywgJ3VuaS1hcHA6Ly8vJykpXHJcbiAgICByZXR1cm4gY29uc29sZVt0eXBlXVsnYXBwbHknXShjb25zb2xlLCBhcmdzKVxyXG4gIH1cclxuXHJcbiAgdmFyIG1zZ3MgPSBhcmdzLm1hcChmdW5jdGlvbiAodikge1xyXG4gICAgdmFyIHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodilcclxuXHJcbiAgICBpZiAodHlwZS50b0xvd2VyQ2FzZSgpID09PSAnW29iamVjdCBvYmplY3RdJykge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHYgPSAnLS0tQkVHSU46SlNPTi0tLScgKyBKU09OLnN0cmluZ2lmeSh2KSArICctLS1FTkQ6SlNPTi0tLSdcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHYgPSAnW29iamVjdCBvYmplY3RdJ1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHYgPSAnLS0tTlVMTC0tLSdcclxuICAgICAgfSBlbHNlIGlmICh2ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB2ID0gJy0tLVVOREVGSU5FRC0tLSdcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgdlR5cGUgPSB0eXBvZih2KS50b1VwcGVyQ2FzZSgpXHJcblxyXG4gICAgICAgIGlmICh2VHlwZSA9PT0gJ05VTUJFUicgfHwgdlR5cGUgPT09ICdCT09MRUFOJykge1xyXG4gICAgICAgICAgdiA9ICctLS1CRUdJTjonICsgdlR5cGUgKyAnLS0tJyArIHYgKyAnLS0tRU5EOicgKyB2VHlwZSArICctLS0nXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHYgPSBTdHJpbmcodilcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdlxyXG4gIH0pXHJcbiAgdmFyIG1zZyA9ICcnXHJcblxyXG4gIGlmIChtc2dzLmxlbmd0aCA+IDEpIHtcclxuICAgIHZhciBsYXN0TXNnID0gbXNncy5wb3AoKVxyXG4gICAgbXNnID0gbXNncy5qb2luKCctLS1DT01NQS0tLScpXHJcblxyXG4gICAgaWYgKGxhc3RNc2cuaW5kZXhPZignIGF0ICcpID09PSAwKSB7XHJcbiAgICAgIG1zZyArPSBsYXN0TXNnXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtc2cgKz0gJy0tLUNPTU1BLS0tJyArIGxhc3RNc2dcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgbXNnID0gbXNnc1swXVxyXG4gIH1cclxuXHJcbiAgY29uc29sZVt0eXBlXShtc2cpXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n");

/***/ }),

/***/ 13:
/*!****************************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/sdk/libs/strophe.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var __WEBPACK_LOCAL_MODULE_0__, __WEBPACK_LOCAL_MODULE_0__module;var __WEBPACK_LOCAL_MODULE_1__, __WEBPACK_LOCAL_MODULE_1__module;var __WEBPACK_LOCAL_MODULE_2__, __WEBPACK_LOCAL_MODULE_2__module;var __WEBPACK_LOCAL_MODULE_3__, __WEBPACK_LOCAL_MODULE_3__module;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_4__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_5__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_6__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_7__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; /** File: strophe.js\n               *  A JavaScript library for writing XMPP clients.\n               *\n               *  This library uses either Bidirectional-streams Over Synchronous HTTP (BOSH)\n               *  to emulate a persistent, stateful, two-way connection to an XMPP server or\n               *  alternatively WebSockets.\n               *\n               *  More information on BOSH can be found in XEP 124.\n               *  For more information on XMPP-over WebSocket see this RFC:\n               *  http://tools.ietf.org/html/rfc7395\n               */\n\n/* All of the Strophe globals are defined in this special function below so\n                   * that references to the globals become closures.  This will ensure that\n                   * on page reload, these references will still be available to callbacks\n                   * that are still executing.\n                   */\n// //console.log(window,document)\n\nvar isSocketConnnected = false;\nvar xmldom = __webpack_require__(/*! ./xmldom/dom-parser */ 14);\n// //console.log('xml', xmldom, typeof xmldom.DOMParser);\nvar DOMParser = xmldom.DOMParser;\n//console.log('DOMParser inited');\nvar document = new DOMParser().parseFromString(\"<?xml version='1.0'?>\\n\", 'text/xml');\n//console.log('document inited');\nvar window = window || {};\nwindow.DOMParser = DOMParser;\n\n//console.log('strophe ...')\nvar Strophe = null;\nvar $build = null;\nvar $msg = null;\nvar $iq = null;\nvar $pres = null;\n/* jshint ignore:start */\n(function (callback) {\n  /* jshint ignore:end */\n\n  // This code was written by Tyler Akins and has been placed in the\n  // public domain.  It would be nice if you left this header intact.\n  // Base64 code from Tyler Akins -- http://rumkin.com\n  //module.exports = callback();\n\n  (function (root, factory) {\n    //console.log(typeof define, define.amd, root)\n    if (true) {\n      !(__WEBPACK_LOCAL_MODULE_0__module = { id: \"strophe-base64\", exports: {}, loaded: false }, __WEBPACK_LOCAL_MODULE_0__ = function () {\n        return factory();\n      }.call(__WEBPACK_LOCAL_MODULE_0__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_0__module.exports, __WEBPACK_LOCAL_MODULE_0__module), __WEBPACK_LOCAL_MODULE_0__module.loaded = true, __WEBPACK_LOCAL_MODULE_0__ === undefined && (__WEBPACK_LOCAL_MODULE_0__ = __WEBPACK_LOCAL_MODULE_0__module.exports));\n    } else\n    {}\n  })(this, function () {\n    var keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n    var obj = {\n      /**\n                 * Encodes a string in base64\n                 * @param {String} input The string to encode in base64.\n                 */\n      encode: function encode(input) {\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n\n        do {\n          chr1 = input.charCodeAt(i++);\n          chr2 = input.charCodeAt(i++);\n          chr3 = input.charCodeAt(i++);\n\n          enc1 = chr1 >> 2;\n          enc2 = (chr1 & 3) << 4 | chr2 >> 4;\n          enc3 = (chr2 & 15) << 2 | chr3 >> 6;\n          enc4 = chr3 & 63;\n\n          if (isNaN(chr2)) {\n            enc2 = (chr1 & 3) << 4;\n            enc3 = enc4 = 64;\n          } else if (isNaN(chr3)) {\n            enc4 = 64;\n          }\n\n          output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) +\n          keyStr.charAt(enc3) + keyStr.charAt(enc4);\n        } while (i < input.length);\n\n        return output;\n      },\n\n      /**\n          * Decodes a base64 string.\n          * @param {String} input The string to decode.\n          */\n      decode: function decode(input) {\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n          enc1 = keyStr.indexOf(input.charAt(i++));\n          enc2 = keyStr.indexOf(input.charAt(i++));\n          enc3 = keyStr.indexOf(input.charAt(i++));\n          enc4 = keyStr.indexOf(input.charAt(i++));\n\n          chr1 = enc1 << 2 | enc2 >> 4;\n          chr2 = (enc2 & 15) << 4 | enc3 >> 2;\n          chr3 = (enc3 & 3) << 6 | enc4;\n\n          output = output + String.fromCharCode(chr1);\n\n          if (enc3 != 64) {\n            output = output + String.fromCharCode(chr2);\n          }\n          if (enc4 != 64) {\n            output = output + String.fromCharCode(chr3);\n          }\n        } while (i < input.length);\n\n        return output;\n      } };\n\n    return obj;\n  });\n  /*\n       * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n       * in FIPS PUB 180-1\n       * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n       * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n       * Distributed under the BSD License\n       * See http://pajhome.org.uk/crypt/md5 for details.\n       */\n\n  /* jshint undef: true, unused: true:, noarg: true, latedef: false */\n  /* global define */\n\n  /* Some functions and variables have been stripped for use with Strophe */\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_LOCAL_MODULE_1__module = { id: \"strophe-sha1\", exports: {}, loaded: false }, __WEBPACK_LOCAL_MODULE_1__ = function () {\n        return factory();\n      }.call(__WEBPACK_LOCAL_MODULE_1__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_1__module.exports, __WEBPACK_LOCAL_MODULE_1__module), __WEBPACK_LOCAL_MODULE_1__module.loaded = true, __WEBPACK_LOCAL_MODULE_1__ === undefined && (__WEBPACK_LOCAL_MODULE_1__ = __WEBPACK_LOCAL_MODULE_1__module.exports));\n    } else {}\n  })(this, function () {\n\n    /*\n                         * Calculate the SHA-1 of an array of big-endian words, and a bit length\n                         */\n    function core_sha1(x, len) {\n      /* append padding */\n      x[len >> 5] |= 0x80 << 24 - len % 32;\n      x[(len + 64 >> 9 << 4) + 15] = len;\n\n      var w = new Array(80);\n      var a = 1732584193;\n      var b = -271733879;\n      var c = -1732584194;\n      var d = 271733878;\n      var e = -1009589776;\n\n      var i, j, t, olda, oldb, oldc, oldd, olde;\n      for (i = 0; i < x.length; i += 16) {\n        olda = a;\n        oldb = b;\n        oldc = c;\n        oldd = d;\n        olde = e;\n\n        for (j = 0; j < 80; j++) {\n          if (j < 16) {\n            w[j] = x[i + j];\n          } else\n          {\n            w[j] = rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n          }\n          t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\n          safe_add(safe_add(e, w[j]), sha1_kt(j)));\n          e = d;\n          d = c;\n          c = rol(b, 30);\n          b = a;\n          a = t;\n        }\n\n        a = safe_add(a, olda);\n        b = safe_add(b, oldb);\n        c = safe_add(c, oldc);\n        d = safe_add(d, oldd);\n        e = safe_add(e, olde);\n      }\n      return [a, b, c, d, e];\n    }\n\n    /*\n       * Perform the appropriate triplet combination function for the current\n       * iteration\n       */\n    function sha1_ft(t, b, c, d) {\n      if (t < 20) {\n        return b & c | ~b & d;\n      }\n      if (t < 40) {\n        return b ^ c ^ d;\n      }\n      if (t < 60) {\n        return b & c | b & d | c & d;\n      }\n      return b ^ c ^ d;\n    }\n\n    /*\n       * Determine the appropriate additive constant for the current iteration\n       */\n    function sha1_kt(t) {\n      return t < 20 ? 1518500249 : t < 40 ? 1859775393 :\n      t < 60 ? -1894007588 : -899497514;\n    }\n\n    /*\n       * Calculate the HMAC-SHA1 of a key and some data\n       */\n    function core_hmac_sha1(key, data) {\n      var bkey = str2binb(key);\n      if (bkey.length > 16) {\n        bkey = core_sha1(bkey, key.length * 8);\n      }\n\n      var ipad = new Array(16),opad = new Array(16);\n      for (var i = 0; i < 16; i++) {\n        ipad[i] = bkey[i] ^ 0x36363636;\n        opad[i] = bkey[i] ^ 0x5C5C5C5C;\n      }\n\n      var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n      return core_sha1(opad.concat(hash), 512 + 160);\n    }\n\n    /*\n       * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n       * to work around bugs in some JS interpreters.\n       */\n    function safe_add(x, y) {\n      var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n      return msw << 16 | lsw & 0xFFFF;\n    }\n\n    /*\n       * Bitwise rotate a 32-bit number to the left.\n       */\n    function rol(num, cnt) {\n      return num << cnt | num >>> 32 - cnt;\n    }\n\n    /*\n       * Convert an 8-bit or 16-bit string to an array of big-endian words\n       * In 8-bit function, characters >255 have their hi-byte silently ignored.\n       */\n    function str2binb(str) {\n      var bin = [];\n      var mask = 255;\n      for (var i = 0; i < str.length * 8; i += 8) {\n        bin[i >> 5] |= (str.charCodeAt(i / 8) & mask) << 24 - i % 32;\n      }\n      return bin;\n    }\n\n    /*\n       * Convert an array of big-endian words to a string\n       */\n    function binb2str(bin) {\n      var str = \"\";\n      var mask = 255;\n      for (var i = 0; i < bin.length * 32; i += 8) {\n        str += String.fromCharCode(bin[i >> 5] >>> 24 - i % 32 & mask);\n      }\n      return str;\n    }\n\n    /*\n       * Convert an array of big-endian words to a base-64 string\n       */\n    function binb2b64(binarray) {\n      var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n      var str = \"\";\n      var triplet, j;\n      for (var i = 0; i < binarray.length * 4; i += 3) {\n        triplet = (binarray[i >> 2] >> 8 * (3 - i % 4) & 0xFF) << 16 |\n        (binarray[i + 1 >> 2] >> 8 * (3 - (i + 1) % 4) & 0xFF) << 8 |\n        binarray[i + 2 >> 2] >> 8 * (3 - (i + 2) % 4) & 0xFF;\n        for (j = 0; j < 4; j++) {\n          if (i * 8 + j * 6 > binarray.length * 32) {\n            str += \"=\";\n          } else\n          {\n            str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n          }\n        }\n      }\n      return str;\n    }\n\n    /*\n       * These are the functions you'll usually want to call\n       * They take string arguments and return either hex or base-64 encoded strings\n       */\n    return {\n      b64_hmac_sha1: function b64_hmac_sha1(key, data) {\n        return binb2b64(core_hmac_sha1(key, data));\n      },\n      b64_sha1: function b64_sha1(s) {\n        return binb2b64(core_sha1(str2binb(s), s.length * 8));\n      },\n      binb2str: binb2str,\n      core_hmac_sha1: core_hmac_sha1,\n      str_hmac_sha1: function str_hmac_sha1(key, data) {\n        return binb2str(core_hmac_sha1(key, data));\n      },\n      str_sha1: function str_sha1(s) {\n        return binb2str(core_sha1(str2binb(s), s.length * 8));\n      } };\n\n  });\n\n  /*\n       * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n       * Digest Algorithm, as defined in RFC 1321.\n       * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n       * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n       * Distributed under the BSD License\n       * See http://pajhome.org.uk/crypt/md5 for more info.\n       */\n\n  /*\n           * Everything that isn't used by Strophe has been stripped here!\n           */\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_LOCAL_MODULE_2__module = { id: \"strophe-md5\", exports: {}, loaded: false }, __WEBPACK_LOCAL_MODULE_2__ = function () {\n        return factory();\n      }.call(__WEBPACK_LOCAL_MODULE_2__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_2__module.exports, __WEBPACK_LOCAL_MODULE_2__module), __WEBPACK_LOCAL_MODULE_2__module.loaded = true, __WEBPACK_LOCAL_MODULE_2__ === undefined && (__WEBPACK_LOCAL_MODULE_2__ = __WEBPACK_LOCAL_MODULE_2__module.exports));\n    } else {}\n  })(this, function (b) {\n    /*\n                          * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n                          * to work around bugs in some JS interpreters.\n                          */\n    var safe_add = function safe_add(x, y) {\n      var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n      var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n      return msw << 16 | lsw & 0xFFFF;\n    };\n\n    /*\n        * Bitwise rotate a 32-bit number to the left.\n        */\n    var bit_rol = function bit_rol(num, cnt) {\n      return num << cnt | num >>> 32 - cnt;\n    };\n\n    /*\n        * Convert a string to an array of little-endian words\n        */\n    var str2binl = function str2binl(str) {\n      var bin = [];\n      for (var i = 0; i < str.length * 8; i += 8) {\n        bin[i >> 5] |= (str.charCodeAt(i / 8) & 255) << i % 32;\n      }\n      return bin;\n    };\n\n    /*\n        * Convert an array of little-endian words to a string\n        */\n    var binl2str = function binl2str(bin) {\n      var str = \"\";\n      for (var i = 0; i < bin.length * 32; i += 8) {\n        str += String.fromCharCode(bin[i >> 5] >>> i % 32 & 255);\n      }\n      return str;\n    };\n\n    /*\n        * Convert an array of little-endian words to a hex string.\n        */\n    var binl2hex = function binl2hex(binarray) {\n      var hex_tab = \"0123456789abcdef\";\n      var str = \"\";\n      for (var i = 0; i < binarray.length * 4; i++) {\n        str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) +\n        hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n      }\n      return str;\n    };\n\n    /*\n        * These functions implement the four basic operations the algorithm uses.\n        */\n    var md5_cmn = function md5_cmn(q, a, b, x, s, t) {\n      return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n    };\n\n    var md5_ff = function md5_ff(a, b, c, d, x, s, t) {\n      return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n    };\n\n    var md5_gg = function md5_gg(a, b, c, d, x, s, t) {\n      return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n    };\n\n    var md5_hh = function md5_hh(a, b, c, d, x, s, t) {\n      return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n    };\n\n    var md5_ii = function md5_ii(a, b, c, d, x, s, t) {\n      return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n    };\n\n    /*\n        * Calculate the MD5 of an array of little-endian words, and a bit length\n        */\n    var core_md5 = function core_md5(x, len) {\n      /* append padding */\n      x[len >> 5] |= 0x80 << len % 32;\n      x[(len + 64 >>> 9 << 4) + 14] = len;\n\n      var a = 1732584193;\n      var b = -271733879;\n      var c = -1732584194;\n      var d = 271733878;\n\n      var olda, oldb, oldc, oldd;\n      for (var i = 0; i < x.length; i += 16) {\n        olda = a;\n        oldb = b;\n        oldc = c;\n        oldd = d;\n\n        a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n        d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n        c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n        b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n        a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n        d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n        c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n        b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n        a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n        d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n        c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n        b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n        a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n        d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n        c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n        b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n\n        a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n        d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n        c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n        b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n        a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n        d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n        c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n        b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n        a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n        d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n        c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n        b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n        a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n        d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n        c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n        b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\n        a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n        d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n        c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n        b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n        a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n        d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n        c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n        b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n        a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n        d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n        c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n        b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n        a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n        d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n        c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n        b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n\n        a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n        d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n        c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n        b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n        a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n        d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n        c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n        b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n        a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n        d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n        c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n        b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n        a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n        d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n        c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n        b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n\n        a = safe_add(a, olda);\n        b = safe_add(b, oldb);\n        c = safe_add(c, oldc);\n        d = safe_add(d, oldd);\n      }\n      return [a, b, c, d];\n    };\n\n    var obj = {\n      /*\n                 * These are the functions you'll usually want to call.\n                 * They take string arguments and return either hex or base-64 encoded\n                 * strings.\n                 */\n      hexdigest: function hexdigest(s) {\n        return binl2hex(core_md5(str2binl(s), s.length * 8));\n      },\n\n      hash: function hash(s) {\n        return binl2str(core_md5(str2binl(s), s.length * 8));\n      } };\n\n    return obj;\n  });\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_LOCAL_MODULE_3__module = { id: \"strophe-utils\", exports: {}, loaded: false }, __WEBPACK_LOCAL_MODULE_3__ = function () {\n        return factory();\n      }.call(__WEBPACK_LOCAL_MODULE_3__module.exports, __webpack_require__, __WEBPACK_LOCAL_MODULE_3__module.exports, __WEBPACK_LOCAL_MODULE_3__module), __WEBPACK_LOCAL_MODULE_3__module.loaded = true, __WEBPACK_LOCAL_MODULE_3__ === undefined && (__WEBPACK_LOCAL_MODULE_3__ = __WEBPACK_LOCAL_MODULE_3__module.exports));\n    } else {}\n  })(this, function () {\n\n    var utils = {\n\n      utf16to8: function utf16to8(str) {\n        var i, c;\n        var out = \"\";\n        var len = str.length;\n        for (i = 0; i < len; i++) {\n          c = str.charCodeAt(i);\n          if (c >= 0x0000 && c <= 0x007F) {\n            out += str.charAt(i);\n          } else if (c > 0x07FF) {\n            out += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n            out += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n            out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n          } else {\n            out += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n            out += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n          }\n        }\n        return out;\n      },\n\n      addCookies: function addCookies(cookies) {\n        /* Parameters:\n                                                 *  (Object) cookies - either a map of cookie names\n                                                 *    to string values or to maps of cookie values.\n                                                 *\n                                                 * For example:\n                                                 * { \"myCookie\": \"1234\" }\n                                                 *\n                                                 * or:\n                                                 * { \"myCookie\": {\n                                                 *      \"value\": \"1234\",\n                                                 *      \"domain\": \".example.org\",\n                                                 *      \"path\": \"/\",\n                                                 *      \"expires\": expirationDate\n                                                 *      }\n                                                 *  }\n                                                 *\n                                                 *  These values get passed to Strophe.Connection via\n                                                 *   options.cookies\n                                                 */\n        var cookieName, cookieObj, isObj, cookieValue, expires, domain, path;\n        for (cookieName in cookies || {}) {\n          expires = '';\n          domain = '';\n          path = '';\n          cookieObj = cookies[cookieName];\n          isObj = typeof cookieObj == \"object\";\n          cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n          if (isObj) {\n            expires = cookieObj.expires ? \";expires=\" + cookieObj.expires : '';\n            domain = cookieObj.domain ? \";domain=\" + cookieObj.domain : '';\n            path = cookieObj.path ? \";path=\" + cookieObj.path : '';\n          }\n          document.cookie =\n          cookieName + '=' + cookieValue + expires + domain + path;\n        }\n      } };\n\n    return utils;\n  });\n\n  /*\n       This program is distributed under the terms of the MIT license.\n       Please see the LICENSE file for details.\n      \t Copyright 2006-2008, OGG, LLC\n       */\n\n\n  /* jshint undef: true, unused: true:, noarg: true, latedef: true */\n  /* global define */\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_4__ = ((function () {\n        return factory();\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));\n    } else {}\n  })(this, function () {\n\n    /** Function: Function.prototype.bind\n                         *  Bind a function to an instance.\n                         *\n                         *  This Function object extension method creates a bound method similar\n                         *  to those in Python.  This means that the 'this' object will point\n                         *  to the instance you want.  See\n                         *  <a href='https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind'>MDC's bind() documentation</a> and\n                         *  <a href='http://benjamin.smedbergs.us/blog/2007-01-03/bound-functions-and-function-imports-in-javascript/'>Bound Functions and Function Imports in JavaScript</a>\n                         *  for a complete explanation.\n                         *\n                         *  This extension already exists in some browsers (namely, Firefox 3), but\n                         *  we provide it to support those that don't.\n                         *\n                         *  Parameters:\n                         *    (Object) obj - The object that will become 'this' in the bound function.\n                         *    (Object) argN - An option argument that will be prepended to the\n                         *      arguments given for the function call\n                         *\n                         *  Returns:\n                         *    The bound function.\n                         */\n    if (!Function.prototype.bind) {\n      Function.prototype.bind = function (obj /*, arg1, arg2, ... */) {\n        var func = this;\n        var _slice = Array.prototype.slice;\n        var _concat = Array.prototype.concat;\n        var _args = _slice.call(arguments, 1);\n        return function () {\n          return func.apply(obj ? obj : this, _concat.call(_args, _slice.call(arguments, 0)));\n        };\n      };\n    }\n\n    /** Function: Array.isArray\n       *  This is a polyfill for the ES5 Array.isArray method.\n       */\n    if (!Array.isArray) {\n      Array.isArray = function (arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n      };\n    }\n\n    /** Function: Array.prototype.indexOf\n       *  Return the index of an object in an array.\n       *\n       *  This function is not supplied by some JavaScript implementations, so\n       *  we provide it if it is missing.  This code is from:\n       *  http://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Objects:Array:indexOf\n       *\n       *  Parameters:\n       *    (Object) elt - The object to look for.\n       *    (Integer) from - The index from which to start looking. (optional).\n       *\n       *  Returns:\n       *    The index of elt in the array or -1 if not found.\n       */\n    if (!Array.prototype.indexOf) {\n      Array.prototype.indexOf = function (elt /*, from*/) {\n        var len = this.length;\n        var from = Number(arguments[1]) || 0;\n        from = from < 0 ? Math.ceil(from) : Math.floor(from);\n        if (from < 0) {\n          from += len;\n        }\n\n        for (; from < len; from++) {\n          if (from in this && this[from] === elt) {\n            return from;\n          }\n        }\n        return -1;\n      };\n    }\n  });\n\n\n  /** Function: Array.prototype.forEach\n       *\n       *  This function is not available in IE < 9\n       *  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\n       */\n  if (!Array.prototype.forEach) {\n    Array.prototype.forEach = function (callback, thisArg) {\n      var T, k;\n      if (this === null) {\n        throw new TypeError(' this is null or not defined');\n      }\n\n      // 1. Let O be the result of calling toObject() passing the\n      // |this| value as the argument.\n      var O = Object(this);\n      // 2. Let lenValue be the result of calling the Get() internal\n      // method of O with the argument \"length\".\n      // 3. Let len be toUint32(lenValue).\n      var len = O.length >>> 0;\n      // 4. If isCallable(callback) is false, throw a TypeError exception.\n      // See: http://es5.github.com/#x9.11\n      if (typeof callback !== \"function\") {\n        throw new TypeError(callback + ' is not a function');\n      }\n      // 5. If thisArg was supplied, let T be thisArg; else let\n      // T be undefined.\n      if (arguments.length > 1) {\n        T = thisArg;\n      }\n      // 6. Let k be 0\n      k = 0;\n      // 7. Repeat, while k < len\n      while (k < len) {\n        var kValue;\n        // a. Let Pk be ToString(k).\n        //        This is implicit for LHS operands of the in operator\n        // b. Let kPresent be the result of calling the HasProperty\n        //        internal method of O with argument Pk.\n        //        This step can be combined with c\n        // c. If kPresent is true, then\n        if (k in O) {\n          // i. Let kValue be the result of calling the Get internal\n          // method of O with argument Pk.\n          kValue = O[k];\n          // ii. Call the Call internal method of callback with T as\n          // the this value and argument list containing kValue, k, and O.\n          callback.call(T, kValue, k, O);\n        }\n        // d. Increase k by 1.\n        k++;\n      }\n      // 8. return undefined\n    };\n  }\n\n  /*\n     This program is distributed under the terms of the MIT license.\n     Please see the LICENSE file for details.\n    \t Copyright 2006-2008, OGG, LLC\n     */\n\n\n  /* jshint undef: true, unused: true:, noarg: true, latedef: true */\n  /*global define, document, window, setTimeout, clearTimeout, ActiveXObject, DOMParser */\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __WEBPACK_LOCAL_MODULE_1__,\n      __WEBPACK_LOCAL_MODULE_0__,\n      __WEBPACK_LOCAL_MODULE_2__,\n      __WEBPACK_LOCAL_MODULE_3__,\n      __WEBPACK_LOCAL_MODULE_4__], __WEBPACK_LOCAL_MODULE_5__ = ((function () {\n        return factory.apply(this, arguments);\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));\n    } else { var o; }\n  })(this, function (SHA1, Base64, MD5, utils, Strophe) {\n\n    var Strophe;\n\n    /** Function: $build\n                  *  Create a Strophe.Builder.\n                  *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n                  *\n                  *  Parameters:\n                  *    (String) name - The root element name.\n                  *    (Object) attrs - The attributes for the root element in object notation.\n                  *\n                  *  Returns:\n                  *    A new Strophe.Builder object.\n                  */\n    function $build(name, attrs) {\n      return new Strophe.Builder(name, attrs);\n    }\n\n    /** Function: $msg\n       *  Create a Strophe.Builder with a <message/> element as the root.\n       *\n       *  Parameters:\n       *    (Object) attrs - The <message/> element attributes in object notation.\n       *\n       *  Returns:\n       *    A new Strophe.Builder object.\n       */\n    function $msg(attrs) {\n      return new Strophe.Builder(\"message\", attrs);\n    }\n\n    /** Function: $iq\n       *  Create a Strophe.Builder with an <iq/> element as the root.\n       *\n       *  Parameters:\n       *    (Object) attrs - The <iq/> element attributes in object notation.\n       *\n       *  Returns:\n       *    A new Strophe.Builder object.\n       */\n    function $iq(attrs) {\n      return new Strophe.Builder(\"iq\", attrs);\n    }\n\n    /** Function: $pres\n       *  Create a Strophe.Builder with a <presence/> element as the root.\n       *\n       *  Parameters:\n       *    (Object) attrs - The <presence/> element attributes in object notation.\n       *\n       *  Returns:\n       *    A new Strophe.Builder object.\n       */\n    function $pres(attrs) {\n      return new Strophe.Builder(\"presence\", attrs);\n    }\n\n    /** Class: Strophe\n       *  An object container for all Strophe library functions.\n       *\n       *  This class is just a container for all the objects and constants\n       *  used in the library.  It is not meant to be instantiated, but to\n       *  provide a namespace for library objects, constants, and functions.\n       */\n    Strophe = {\n      /** Constant: VERSION\n                 *  The version of the Strophe library. Unreleased builds will have\n                 *  a version of head-HASH where HASH is a partial revision.\n                 */\n      VERSION: \"1.2.9\",\n\n      /** Constants: XMPP Namespace Constants\n                         *  Common namespace constants from the XMPP RFCs and XEPs.\n                         *\n                         *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n                         *  NS.BOSH - BOSH namespace from XEP 206.\n                         *  NS.CLIENT - Main XMPP client namespace.\n                         *  NS.AUTH - Legacy authentication namespace.\n                         *  NS.ROSTER - Roster operations namespace.\n                         *  NS.PROFILE - Profile namespace.\n                         *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n                         *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n                         *  NS.MUC - Multi-User Chat namespace from XEP 45.\n                         *  NS.SASL - XMPP SASL namespace from RFC 3920.\n                         *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n                         *  NS.BIND - XMPP Binding namespace from RFC 3920.\n                         *  NS.SESSION - XMPP Session namespace from RFC 3920.\n                         *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n                         *  NS.XHTML - XHTML body namespace from XEP 71.\n                         */\n      NS: {\n        HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n        BOSH: \"urn:xmpp:xbosh\",\n        CLIENT: \"jabber:client\",\n        AUTH: \"jabber:iq:auth\",\n        ROSTER: \"jabber:iq:roster\",\n        PROFILE: \"jabber:iq:profile\",\n        DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n        DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n        MUC: \"http://jabber.org/protocol/muc\",\n        SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n        STREAM: \"http://etherx.jabber.org/streams\",\n        FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n        BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n        SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n        VERSION: \"jabber:iq:version\",\n        STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n        XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n        XHTML: \"http://www.w3.org/1999/xhtml\" },\n\n\n      /** Constants: XHTML_IM Namespace\n                                                  *  contains allowed tags, tag attributes, and css properties.\n                                                  *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n                                                  *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n                                                  *  allowed tags and their attributes.\n                                                  */\n      XHTML: {\n        tags: ['a', 'blockquote', 'br', 'cite', 'em', 'img', 'li', 'ol', 'p', 'span', 'strong', 'ul', 'body'],\n        attributes: {\n          'a': ['href'],\n          'blockquote': ['style'],\n          'br': [],\n          'cite': ['style'],\n          'em': [],\n          'img': ['src', 'alt', 'style', 'height', 'width'],\n          'li': ['style'],\n          'ol': ['style'],\n          'p': ['style'],\n          'span': ['style'],\n          'strong': [],\n          'ul': ['style'],\n          'body': [] },\n\n        css: ['background-color', 'color', 'font-family', 'font-size', 'font-style', 'font-weight', 'margin-left', 'margin-right', 'text-align', 'text-decoration'],\n        /** Function: XHTML.validTag\n                                                                                                                                                                      *\n                                                                                                                                                                      * Utility method to determine whether a tag is allowed\n                                                                                                                                                                      * in the XHTML_IM namespace.\n                                                                                                                                                                      *\n                                                                                                                                                                      * XHTML tag names are case sensitive and must be lower case.\n                                                                                                                                                                      */\n        validTag: function validTag(tag) {\n          for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n            if (tag == Strophe.XHTML.tags[i]) {\n              return true;\n            }\n          }\n          return false;\n        },\n        /** Function: XHTML.validAttribute\n            *\n            * Utility method to determine whether an attribute is allowed\n            * as recommended per XEP-0071\n            *\n            * XHTML attribute names are case sensitive and must be lower case.\n            */\n        validAttribute: function validAttribute(tag, attribute) {\n          if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n            for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n              if (attribute == Strophe.XHTML.attributes[tag][i]) {\n                return true;\n              }\n            }\n          }\n          return false;\n        },\n        validCSS: function validCSS(style) {\n          for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n            if (style == Strophe.XHTML.css[i]) {\n              return true;\n            }\n          }\n          return false;\n        } },\n\n\n      /** Constants: Connection Status Constants\n              *  Connection status constants for use by the connection handler\n              *  callback.\n              *\n              *  Status.ERROR - An error has occurred\n              *  Status.CONNECTING - The connection is currently being made\n              *  Status.CONNFAIL - The connection attempt failed\n              *  Status.AUTHENTICATING - The connection is authenticating\n              *  Status.AUTHFAIL - The authentication attempt failed\n              *  Status.CONNECTED - The connection has succeeded\n              *  Status.DISCONNECTED - The connection has been terminated\n              *  Status.DISCONNECTING - The connection is currently being terminated\n              *  Status.ATTACHED - The connection has been attached\n              *  Status.CONNTIMEOUT - The connection has timed out\n              */\n      Status: {\n        ERROR: 0,\n        CONNECTING: 1,\n        CONNFAIL: 2,\n        AUTHENTICATING: 3,\n        AUTHFAIL: 4,\n        CONNECTED: 5,\n        DISCONNECTED: 6,\n        DISCONNECTING: 7,\n        ATTACHED: 8,\n        REDIRECT: 9,\n        CONNTIMEOUT: 10 },\n\n\n      /** Constants: Log Level Constants\n                            *  Logging level indicators.\n                            *\n                            *  LogLevel.DEBUG - Debug output\n                            *  LogLevel.INFO - Informational output\n                            *  LogLevel.WARN - Warnings\n                            *  LogLevel.ERROR - Errors\n                            *  LogLevel.FATAL - Fatal errors\n                            */\n      LogLevel: {\n        DEBUG: 0,\n        INFO: 1,\n        WARN: 2,\n        ERROR: 3,\n        FATAL: 4 },\n\n\n      /** PrivateConstants: DOM Element Type Constants\n                     *  DOM element types.\n                     *\n                     *  ElementType.NORMAL - Normal element.\n                     *  ElementType.TEXT - Text data element.\n                     *  ElementType.FRAGMENT - XHTML fragment element.\n                     */\n      ElementType: {\n        NORMAL: 1,\n        TEXT: 3,\n        CDATA: 4,\n        FRAGMENT: 11 },\n\n\n      /** PrivateConstants: Timeout Values\n                         *  Timeout values for error states.  These values are in seconds.\n                         *  These should not be changed unless you know exactly what you are\n                         *  doing.\n                         *\n                         *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n                         *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n                         *      This defaults to 1.1, and with default wait, 66 seconds.\n                         *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n                         *      Strophe can detect early failure, it will consider the request\n                         *      failed if it doesn't return after\n                         *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n                         *      This defaults to 0.1, and with default wait, 6 seconds.\n                         */\n      TIMEOUT: 1.1,\n      SECONDARY_TIMEOUT: 0.1,\n\n      /** Function: addNamespace\n                               *  This function is used to extend the current namespaces in\n                               *  Strophe.NS.  It takes a key and a value with the key being the\n                               *  name of the new namespace, with its actual value.\n                               *  For example:\n                               *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n                               *\n                               *  Parameters:\n                               *    (String) name - The name under which the namespace will be\n                               *      referenced under Strophe.NS\n                               *    (String) value - The actual namespace.\n                               */\n      addNamespace: function addNamespace(name, value) {\n        Strophe.NS[name] = value;\n      },\n\n      /** Function: forEachChild\n          *  Map a function over some or all child elements of a given element.\n          *\n          *  This is a small convenience function for mapping a function over\n          *  some or all of the children of an element.  If elemName is null, all\n          *  children will be passed to the function, otherwise only children\n          *  whose tag names match elemName will be passed.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - The element to operate on.\n          *    (String) elemName - The child element tag name filter.\n          *    (Function) func - The function to apply to each child.  This\n          *      function should take a single argument, a DOM element.\n          */\n      forEachChild: function forEachChild(elem, elemName, func) {\n        var i, childNode;\n        for (i = 0; i < elem.childNodes.length; i++) {\n          childNode = elem.childNodes[i];\n          if (childNode.nodeType == Strophe.ElementType.NORMAL && (\n          !elemName || this.isTagEqual(childNode, elemName))) {\n            func(childNode);\n          }\n        }\n      },\n\n      /** Function: isTagEqual\n          *  Compare an element's tag name with a string.\n          *\n          *  This function is case sensitive.\n          *\n          *  Parameters:\n          *    (XMLElement) el - A DOM element.\n          *    (String) name - The element name.\n          *\n          *  Returns:\n          *    true if the element's tag name matches _el_, and false\n          *    otherwise.\n          */\n      isTagEqual: function isTagEqual(el, name) {\n        return el.tagName == name;\n      },\n\n      /** PrivateVariable: _xmlGenerator\n          *  _Private_ variable that caches a DOM document to\n          *  generate elements.\n          */\n      _xmlGenerator: null,\n\n      /** PrivateFunction: _makeGenerator\n                            *  _Private_ function that creates a dummy XML DOM document to serve as\n                            *  an element and text node generator.\n                            */\n      _makeGenerator: function _makeGenerator() {\n        var doc;\n        // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n        // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n        // less than 10 in the case of IE9 and below.\n        if (document.implementation.createDocument === undefined ||\n        document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n          doc = this._getIEXmlDom();\n          doc.appendChild(doc.createElement('strophe'));\n        } else {\n          doc = document.implementation.\n          createDocument('jabber:client', 'strophe', null);\n        }\n        return doc;\n      },\n\n      /** Function: xmlGenerator\n          *  Get the DOM document to generate elements.\n          *\n          *  Returns:\n          *    The currently used DOM document.\n          */\n      xmlGenerator: function xmlGenerator() {\n        if (!Strophe._xmlGenerator) {\n          Strophe._xmlGenerator = Strophe._makeGenerator();\n        }\n        return Strophe._xmlGenerator;\n      },\n\n      /** PrivateFunction: _getIEXmlDom\n          *  Gets IE xml doc object\n          *\n          *  Returns:\n          *    A Microsoft XML DOM Object\n          *  See Also:\n          *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n          */\n      _getIEXmlDom: function _getIEXmlDom() {\n        var doc = null;\n        var docStrings = [\n        \"Msxml2.DOMDocument.6.0\",\n        \"Msxml2.DOMDocument.5.0\",\n        \"Msxml2.DOMDocument.4.0\",\n        \"MSXML2.DOMDocument.3.0\",\n        \"MSXML2.DOMDocument\",\n        \"MSXML.DOMDocument\",\n        \"Microsoft.XMLDOM\"];\n\n\n        for (var d = 0; d < docStrings.length; d++) {\n          if (doc === null) {\n            try {\n              doc = new ActiveXObject(docStrings[d]);\n            } catch (e) {\n              doc = null;\n            }\n          } else {\n            break;\n          }\n        }\n        return doc;\n      },\n\n      /** Function: xmlElement\n          *  Create an XML DOM element.\n          *\n          *  This function creates an XML DOM element correctly across all\n          *  implementations. Note that these are not HTML DOM elements, which\n          *  aren't appropriate for XMPP stanzas.\n          *\n          *  Parameters:\n          *    (String) name - The name for the element.\n          *    (Array|Object) attrs - An optional array or object containing\n          *      key/value pairs to use as element attributes. The object should\n          *      be in the format {'key': 'value'} or {key: 'value'}. The array\n          *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n          *    (String) text - The text child data for the element.\n          *\n          *  Returns:\n          *    A new XML DOM element.\n          */\n      xmlElement: function xmlElement(name) {\n        if (!name) {\n          return null;\n        }\n\n        var node = Strophe.xmlGenerator().createElement(name);\n        // FIXME: this should throw errors if args are the wrong type or\n        // there are more than two optional args\n        var a, i, k;\n        for (a = 1; a < arguments.length; a++) {\n          var arg = arguments[a];\n          if (!arg) {\n            continue;\n          }\n          if (typeof arg == \"string\" ||\n          typeof arg == \"number\") {\n            node.appendChild(Strophe.xmlTextNode(arg));\n          } else if (typeof arg == \"object\" &&\n          typeof arg.sort == \"function\") {\n            for (i = 0; i < arg.length; i++) {\n              var attr = arg[i];\n              if (typeof attr == \"object\" &&\n              typeof attr.sort == \"function\" &&\n              attr[1] !== undefined &&\n              attr[1] !== null) {\n                node.setAttribute(attr[0], attr[1]);\n              }\n            }\n          } else if (typeof arg == \"object\") {\n            for (k in arg) {\n              if (arg.hasOwnProperty(k)) {\n                if (arg[k] !== undefined &&\n                arg[k] !== null) {\n                  node.setAttribute(k, arg[k]);\n                }\n              }\n            }\n          }\n        }\n\n        return node;\n      },\n\n      /*  Function: xmlescape\n          *  Excapes invalid xml characters.\n          *\n          *  Parameters:\n          *     (String) text - text to escape.\n          *\n          *  Returns:\n          *      Escaped text.\n          */\n      xmlescape: function xmlescape(text) {\n        text = text.replace(/\\&/g, \"&amp;\");\n        text = text.replace(/</g, \"&lt;\");\n        text = text.replace(/>/g, \"&gt;\");\n        text = text.replace(/'/g, \"&apos;\");\n        text = text.replace(/\"/g, \"&quot;\");\n        return text;\n      },\n\n      /*  Function: xmlunescape\n          *  Unexcapes invalid xml characters.\n          *\n          *  Parameters:\n          *     (String) text - text to unescape.\n          *\n          *  Returns:\n          *      Unescaped text.\n          */\n      xmlunescape: function xmlunescape(text) {\n        text = text.replace(/\\&amp;/g, \"&\");\n        text = text.replace(/&lt;/g, \"<\");\n        text = text.replace(/&gt;/g, \">\");\n        text = text.replace(/&apos;/g, \"'\");\n        text = text.replace(/&quot;/g, \"\\\"\");\n        return text;\n      },\n\n      /** Function: xmlTextNode\n          *  Creates an XML DOM text node.\n          *\n          *  Provides a cross implementation version of document.createTextNode.\n          *\n          *  Parameters:\n          *    (String) text - The content of the text node.\n          *\n          *  Returns:\n          *    A new XML DOM text node.\n          */\n      xmlTextNode: function xmlTextNode(text) {\n        return Strophe.xmlGenerator().createTextNode(text);\n      },\n\n      /** Function: xmlHtmlNode\n          *  Creates an XML DOM html node.\n          *\n          *  Parameters:\n          *    (String) html - The content of the html node.\n          *\n          *  Returns:\n          *    A new XML DOM text node.\n          */\n      xmlHtmlNode: function xmlHtmlNode(html) {\n        var node;\n        //ensure text is escaped\n        //console.log('xmlhtmlnode init', window.DOMParser, typeof window.DOMParser)\n        if (window.DOMParser) {\n          var parser = new DOMParser();\n          node = parser.parseFromString(html, \"text/xml\");\n        } else {\n          node = new ActiveXObject(\"Microsoft.XMLDOM\");\n          node.async = \"false\";\n          node.loadXML(html);\n        }\n        return node;\n      },\n\n      /** Function: getText\n          *  Get the concatenation of all text children of an element.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - A DOM element.\n          *\n          *  Returns:\n          *    A String with the concatenated text of all text element children.\n          */\n      getText: function getText(elem) {\n        if (!elem) {\n          return null;\n        }\n\n        var str = \"\";\n        if (elem.childNodes.length === 0 && elem.nodeType ==\n        Strophe.ElementType.TEXT) {\n          str += elem.nodeValue;\n        }\n\n        for (var i = 0; i < elem.childNodes.length; i++) {\n          if (elem.childNodes[i].nodeType == Strophe.ElementType.TEXT) {\n            str += elem.childNodes[i].nodeValue;\n          }\n        }\n\n        return Strophe.xmlescape(str);\n      },\n\n      /** Function: copyElement\n          *  Copy an XML DOM element.\n          *\n          *  This function copies a DOM element and all its descendants and returns\n          *  the new copy.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - A DOM element.\n          *\n          *  Returns:\n          *    A new, copied DOM element tree.\n          */\n      copyElement: function copyElement(elem) {\n        var i, el;\n        if (elem.nodeType == Strophe.ElementType.NORMAL) {\n          el = Strophe.xmlElement(elem.tagName);\n\n          for (i = 0; i < elem.attributes.length; i++) {\n            el.setAttribute(elem.attributes[i].nodeName,\n            elem.attributes[i].value);\n          }\n\n          for (i = 0; i < elem.childNodes.length; i++) {\n            el.appendChild(Strophe.copyElement(elem.childNodes[i]));\n          }\n        } else if (elem.nodeType == Strophe.ElementType.TEXT) {\n          el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n        }\n        return el;\n      },\n\n\n      /** Function: createHtml\n          *  Copy an HTML DOM element into an XML DOM.\n          *\n          *  This function copies a DOM element and all its descendants and returns\n          *  the new copy.\n          *\n          *  Parameters:\n          *    (HTMLElement) elem - A DOM element.\n          *\n          *  Returns:\n          *    A new, copied DOM element tree.\n          */\n      createHtml: function createHtml(elem) {\n        var i, el, j, tag, attribute, value, css, cssAttrs, attr, cssName, cssValue;\n        if (elem.nodeType == Strophe.ElementType.NORMAL) {\n          tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n          if (Strophe.XHTML.validTag(tag)) {\n            try {\n              el = Strophe.xmlElement(tag);\n              for (i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                attribute = Strophe.XHTML.attributes[tag][i];\n                value = elem.getAttribute(attribute);\n                if (typeof value == 'undefined' || value === null || value === '' || value === false || value === 0) {\n                  continue;\n                }\n                if (attribute == 'style' && typeof value == 'object') {\n                  if (typeof value.cssText != 'undefined') {\n                    value = value.cssText; // we're dealing with IE, need to get CSS out\n                  }\n                }\n                // filter out invalid css styles\n                if (attribute == 'style') {\n                  css = [];\n                  cssAttrs = value.split(';');\n                  for (j = 0; j < cssAttrs.length; j++) {\n                    attr = cssAttrs[j].split(':');\n                    cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n                    if (Strophe.XHTML.validCSS(cssName)) {\n                      cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                      css.push(cssName + ': ' + cssValue);\n                    }\n                  }\n                  if (css.length > 0) {\n                    value = css.join('; ');\n                    el.setAttribute(attribute, value);\n                  }\n                } else {\n                  el.setAttribute(attribute, value);\n                }\n              }\n\n              for (i = 0; i < elem.childNodes.length; i++) {\n                el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n              }\n            } catch (e) {// invalid elements\n              el = Strophe.xmlTextNode('');\n            }\n          } else {\n            el = Strophe.xmlGenerator().createDocumentFragment();\n            for (i = 0; i < elem.childNodes.length; i++) {\n              el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n            }\n          }\n        } else if (elem.nodeType == Strophe.ElementType.FRAGMENT) {\n          el = Strophe.xmlGenerator().createDocumentFragment();\n          for (i = 0; i < elem.childNodes.length; i++) {\n            el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n          }\n        } else if (elem.nodeType == Strophe.ElementType.TEXT) {\n          el = Strophe.xmlTextNode(elem.nodeValue);\n        }\n        return el;\n      },\n\n      /** Function: escapeNode\n          *  Escape the node part (also called local part) of a JID.\n          *\n          *  Parameters:\n          *    (String) node - A node (or local part).\n          *\n          *  Returns:\n          *    An escaped node (or local part).\n          */\n      escapeNode: function escapeNode(node) {\n        if (typeof node !== \"string\") {\n          return node;\n        }\n        return node.replace(/^\\s+|\\s+$/g, '').\n        replace(/\\\\/g, \"\\\\5c\").\n        replace(/ /g, \"\\\\20\").\n        replace(/\\\"/g, \"\\\\22\").\n        replace(/\\&/g, \"\\\\26\").\n        replace(/\\'/g, \"\\\\27\").\n        replace(/\\//g, \"\\\\2f\").\n        replace(/:/g, \"\\\\3a\").\n        replace(/</g, \"\\\\3c\").\n        replace(/>/g, \"\\\\3e\").\n        replace(/@/g, \"\\\\40\");\n      },\n\n      /** Function: unescapeNode\n          *  Unescape a node part (also called local part) of a JID.\n          *\n          *  Parameters:\n          *    (String) node - A node (or local part).\n          *\n          *  Returns:\n          *    An unescaped node (or local part).\n          */\n      unescapeNode: function unescapeNode(node) {\n        if (typeof node !== \"string\") {\n          return node;\n        }\n        return node.replace(/\\\\20/g, \" \").\n        replace(/\\\\22/g, '\"').\n        replace(/\\\\26/g, \"&\").\n        replace(/\\\\27/g, \"'\").\n        replace(/\\\\2f/g, \"/\").\n        replace(/\\\\3a/g, \":\").\n        replace(/\\\\3c/g, \"<\").\n        replace(/\\\\3e/g, \">\").\n        replace(/\\\\40/g, \"@\").\n        replace(/\\\\5c/g, \"\\\\\");\n      },\n\n      /** Function: getNodeFromJid\n          *  Get the node portion of a JID String.\n          *\n          *  Parameters:\n          *    (String) jid - A JID.\n          *\n          *  Returns:\n          *    A String containing the node.\n          */\n      getNodeFromJid: function getNodeFromJid(jid) {\n        if (jid.indexOf(\"@\") < 0) {\n          return null;\n        }\n        return jid.split(\"@\")[0];\n      },\n\n      /** Function: getDomainFromJid\n          *  Get the domain portion of a JID String.\n          *\n          *  Parameters:\n          *    (String) jid - A JID.\n          *\n          *  Returns:\n          *    A String containing the domain.\n          */\n      getDomainFromJid: function getDomainFromJid(jid) {\n        var bare = Strophe.getBareJidFromJid(jid);\n        if (bare.indexOf(\"@\") < 0) {\n          return bare;\n        } else {\n          var parts = bare.split(\"@\");\n          parts.splice(0, 1);\n          return parts.join('@');\n        }\n      },\n\n      /** Function: getResourceFromJid\n          *  Get the resource portion of a JID String.\n          *\n          *  Parameters:\n          *    (String) jid - A JID.\n          *\n          *  Returns:\n          *    A String containing the resource.\n          */\n      getResourceFromJid: function getResourceFromJid(jid) {\n        var s = jid.split(\"/\");\n        if (s.length < 2) {\n          return null;\n        }\n        s.splice(0, 1);\n        return s.join('/');\n      },\n\n      /** Function: getBareJidFromJid\n          *  Get the bare JID from a JID String.\n          *\n          *  Parameters:\n          *    (String) jid - A JID.\n          *\n          *  Returns:\n          *    A String containing the bare JID.\n          */\n      getBareJidFromJid: function getBareJidFromJid(jid) {\n        return jid ? jid.split(\"/\")[0] : null;\n      },\n\n      /** PrivateFunction: _handleError\n          *  _Private_ function that properly logs an error to the console\n          */\n      _handleError: function _handleError(e) {\n        if (typeof e.stack !== \"undefined\") {\n          Strophe.fatal(e.stack);\n        }\n        if (e.sourceURL) {\n          Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" +\n          e.line + \" - \" + e.name + \": \" + e.message);\n        } else if (e.fileName) {\n          Strophe.fatal(\"error: \" + this.handler + \" \" +\n          e.fileName + \":\" + e.lineNumber + \" - \" +\n          e.name + \": \" + e.message);\n        } else {\n          Strophe.fatal(\"error: \" + e.message);\n        }\n      },\n\n      /** Function: log\n          *  User overrideable logging function.\n          *\n          *  This function is called whenever the Strophe library calls any\n          *  of the logging functions.  The default implementation of this\n          *  function does nothing.  If client code wishes to handle the logging\n          *  messages, it should override this with\n          *  > Strophe.log = function (level, msg) {\n         *  >   (user code here)\n         *  > };\n          *\n          *  Please note that data sent and received over the wire is logged\n          *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n          *\n          *  The different levels and their meanings are\n          *\n          *    DEBUG - Messages useful for debugging purposes.\n          *    INFO - Informational messages.  This is mostly information like\n          *      'disconnect was called' or 'SASL auth succeeded'.\n          *    WARN - Warnings about potential problems.  This is mostly used\n          *      to report transient connection errors like request timeouts.\n          *    ERROR - Some error occurred.\n          *    FATAL - A non-recoverable fatal error occurred.\n          *\n          *  Parameters:\n          *    (Integer) level - The log level of the log message.  This will\n          *      be one of the values in Strophe.LogLevel.\n          *    (String) msg - The log message.\n          */\n      /* jshint ignore:start */\n      log: function log(level, msg) {\n        //console.log('log', level, msg);\n\n        return;\n      },\n      /* jshint ignore:end */\n\n      /** Function: debug\n                               *  Log a message at the Strophe.LogLevel.DEBUG level.\n                               *\n                               *  Parameters:\n                               *    (String) msg - The log message.\n                               */\n      debug: function debug(msg) {\n        this.log(this.LogLevel.DEBUG, msg);\n      },\n\n      /** Function: info\n          *  Log a message at the Strophe.LogLevel.INFO level.\n          *\n          *  Parameters:\n          *    (String) msg - The log message.\n          */\n      info: function info(msg) {\n        this.log(this.LogLevel.INFO, msg);\n      },\n\n      /** Function: warn\n          *  Log a message at the Strophe.LogLevel.WARN level.\n          *\n          *  Parameters:\n          *    (String) msg - The log message.\n          */\n      warn: function warn(msg) {\n        this.log(this.LogLevel.WARN, msg);\n      },\n\n      /** Function: error\n          *  Log a message at the Strophe.LogLevel.ERROR level.\n          *\n          *  Parameters:\n          *    (String) msg - The log message.\n          */\n      error: function error(msg) {\n        this.log(this.LogLevel.ERROR, msg);\n      },\n\n      /** Function: fatal\n          *  Log a message at the Strophe.LogLevel.FATAL level.\n          *\n          *  Parameters:\n          *    (String) msg - The log message.\n          */\n      fatal: function fatal(msg) {\n        this.log(this.LogLevel.FATAL, msg);\n      },\n\n      /** Function: serialize\n          *  Render a DOM element and all descendants to a String.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - A DOM element.\n          *\n          *  Returns:\n          *    The serialized element tree as a String.\n          */\n      serialize: function serialize(elem) {\n        var result;\n\n        if (!elem) {\n          return null;\n        }\n\n        if (typeof elem.tree === \"function\") {\n          elem = elem.tree();\n        }\n\n        var nodeName = elem.nodeName;\n        var i, child;\n\n        if (elem.getAttribute(\"_realname\")) {\n          nodeName = elem.getAttribute(\"_realname\");\n        }\n\n        result = \"<\" + nodeName;\n        for (i = 0; i < elem.attributes.length; i++) {\n          if (elem.attributes[i].nodeName != \"_realname\") {\n            result += \" \" + elem.attributes[i].nodeName +\n            \"='\" + Strophe.xmlescape(elem.attributes[i].value) + \"'\";\n          }\n        }\n\n        if (elem.childNodes.length > 0) {\n          result += \">\";\n          for (i = 0; i < elem.childNodes.length; i++) {\n            child = elem.childNodes[i];\n            switch (child.nodeType) {\n              case Strophe.ElementType.NORMAL:\n                // normal element, so recurse\n                result += Strophe.serialize(child);\n                break;\n              case Strophe.ElementType.TEXT:\n                // text element to escape values\n                result += Strophe.xmlescape(child.nodeValue);\n                break;\n              case Strophe.ElementType.CDATA:\n                // cdata section so don't escape values\n                result += \"<![CDATA[\" + child.nodeValue + \"]]>\";}\n\n          }\n          result += \"</\" + nodeName + \">\";\n        } else {\n          result += \"/>\";\n        }\n\n        return result;\n      },\n\n      /** PrivateVariable: _requestId\n          *  _Private_ variable that keeps track of the request ids for\n          *  connections.\n          */\n      _requestId: 0,\n\n      /** PrivateVariable: Strophe.connectionPlugins\n                      *  _Private_ variable Used to store plugin names that need\n                      *  initialization on Strophe.Connection construction.\n                      */\n      _connectionPlugins: {},\n\n      /** Function: addConnectionPlugin\n                               *  Extends the Strophe.Connection object with the given plugin.\n                               *\n                               *  Parameters:\n                               *    (String) name - The name of the extension.\n                               *    (Object) ptype - The plugin's prototype.\n                               */\n      addConnectionPlugin: function addConnectionPlugin(name, ptype) {\n        Strophe._connectionPlugins[name] = ptype;\n      } };\n\n\n    /** Class: Strophe.Builder\n            *  XML DOM builder.\n            *\n            *  This object provides an interface similar to JQuery but for building\n            *  DOM elements easily and rapidly.  All the functions except for toString()\n            *  and tree() return the object, so calls can be chained.  Here's an\n            *  example using the $iq() builder helper.\n            *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n            *  >     .c('query', {xmlns: 'strophe:example'})\n            *  >     .c('example')\n            *  >     .toString()\n            *\n            *  The above generates this XML fragment\n            *  > <iq to='you' from='me' type='get' id='1'>\n            *  >   <query xmlns='strophe:example'>\n            *  >     <example/>\n            *  >   </query>\n            *  > </iq>\n            *  The corresponding DOM manipulations to get a similar fragment would be\n            *  a lot more tedious and probably involve several helper variables.\n            *\n            *  Since adding children makes new operations operate on the child, up()\n            *  is provided to traverse up the tree.  To add two children, do\n            *  > builder.c('child1', ...).up().c('child2', ...)\n            *  The next operation on the Builder will be relative to the second child.\n            */\n\n    /** Constructor: Strophe.Builder\n                *  Create a Strophe.Builder object.\n                *\n                *  The attributes should be passed in object notation.  For example\n                *  > var b = new Builder('message', {to: 'you', from: 'me'});\n                *  or\n                *  > var b = new Builder('messsage', {'xml:lang': 'en'});\n                *\n                *  Parameters:\n                *    (String) name - The name of the root element.\n                *    (Object) attrs - The attributes for the root element in object notation.\n                *\n                *  Returns:\n                *    A new Strophe.Builder.\n                */\n    Strophe.Builder = function (name, attrs) {\n      // Set correct namespace for jabber:client elements\n      if (name == \"presence\" || name == \"message\" || name == \"iq\") {\n        if (attrs && !attrs.xmlns) {\n          attrs.xmlns = Strophe.NS.CLIENT;\n        } else if (!attrs) {\n          attrs = { xmlns: Strophe.NS.CLIENT };\n        }\n      }\n\n      // Holds the tree being built.\n      this.nodeTree = Strophe.xmlElement(name, attrs);\n\n      // Points to the current operation node.\n      this.node = this.nodeTree;\n    };\n\n    Strophe.Builder.prototype = {\n      /** Function: tree\n                                   *  Return the DOM tree.\n                                   *\n                                   *  This function returns the current DOM tree as an element object.  This\n                                   *  is suitable for passing to functions like Strophe.Connection.send().\n                                   *\n                                   *  Returns:\n                                   *    The DOM tree as a element object.\n                                   */\n      tree: function tree() {\n        return this.nodeTree;\n      },\n\n      /** Function: toString\n          *  Serialize the DOM tree to a String.\n          *\n          *  This function returns a string serialization of the current DOM\n          *  tree.  It is often used internally to pass data to a\n          *  Strophe.Request object.\n          *\n          *  Returns:\n          *    The serialized DOM tree in a String.\n          */\n      toString: function toString() {\n        return Strophe.serialize(this.nodeTree);\n      },\n\n      /** Function: up\n          *  Make the current parent element the new current element.\n          *\n          *  This function is often used after c() to traverse back up the tree.\n          *  For example, to add two children to the same element\n          *  > builder.c('child1', {}).up().c('child2', {});\n          *\n          *  Returns:\n          *    The Stophe.Builder object.\n          */\n      up: function up() {\n        this.node = this.node.parentNode;\n        return this;\n      },\n\n      /** Function: root\n          *  Make the root element the new current element.\n          *\n          *  When at a deeply nested element in the tree, this function can be used\n          *  to jump back to the root of the tree, instead of having to repeatedly\n          *  call up().\n          *\n          *  Returns:\n          *    The Stophe.Builder object.\n          */\n      root: function root() {\n        this.node = this.nodeTree;\n        return this;\n      },\n\n      /** Function: attrs\n          *  Add or modify attributes of the current element.\n          *\n          *  The attributes should be passed in object notation.  This function\n          *  does not move the current element pointer.\n          *\n          *  Parameters:\n          *    (Object) moreattrs - The attributes to add/modify in object notation.\n          *\n          *  Returns:\n          *    The Strophe.Builder object.\n          */\n      attrs: function attrs(moreattrs) {\n        for (var k in moreattrs) {\n          if (moreattrs.hasOwnProperty(k)) {\n            if (moreattrs[k] === undefined) {\n              this.node.removeAttribute(k);\n            } else {\n              this.node.setAttribute(k, moreattrs[k]);\n            }\n          }\n        }\n        return this;\n      },\n\n      /** Function: c\n          *  Add a child to the current element and make it the new current\n          *  element.\n          *\n          *  This function moves the current element pointer to the child,\n          *  unless text is provided.  If you need to add another child, it\n          *  is necessary to use up() to go back to the parent in the tree.\n          *\n          *  Parameters:\n          *    (String) name - The name of the child.\n          *    (Object) attrs - The attributes of the child in object notation.\n          *    (String) text - The text to add to the child.\n          *\n          *  Returns:\n          *    The Strophe.Builder object.\n          */\n      c: function c(name, attrs, text) {\n        var child = Strophe.xmlElement(name, attrs, text);\n        this.node.appendChild(child);\n        if (typeof text !== \"string\" && typeof text !== \"number\") {\n          this.node = child;\n        }\n        return this;\n      },\n\n      /** Function: cnode\n          *  Add a child to the current element and make it the new current\n          *  element.\n          *\n          *  This function is the same as c() except that instead of using a\n          *  name and an attributes object to create the child it uses an\n          *  existing DOM element object.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - A DOM element.\n          *\n          *  Returns:\n          *    The Strophe.Builder object.\n          */\n      cnode: function cnode(elem) {\n        var impNode;\n        var xmlGen = Strophe.xmlGenerator();\n        try {\n          impNode = xmlGen.importNode !== undefined;\n        } catch (e) {\n          impNode = false;\n        }\n        var newElem = impNode ?\n        xmlGen.importNode(elem, true) :\n        Strophe.copyElement(elem);\n        this.node.appendChild(newElem);\n        this.node = newElem;\n        return this;\n      },\n\n      /** Function: t\n          *  Add a child text element.\n          *\n          *  This *does not* make the child the new current element since there\n          *  are no children of text elements.\n          *\n          *  Parameters:\n          *    (String) text - The text data to append to the current element.\n          *\n          *  Returns:\n          *    The Strophe.Builder object.\n          */\n      t: function t(text) {\n        var child = Strophe.xmlTextNode(text);\n        this.node.appendChild(child);\n        return this;\n      },\n\n      /** Function: h\n          *  Replace current element contents with the HTML passed in.\n          *\n          *  This *does not* make the child the new current element\n          *\n          *  Parameters:\n          *    (String) html - The html to insert as contents of current element.\n          *\n          *  Returns:\n          *    The Strophe.Builder object.\n          */\n      h: function h(html) {\n        var fragment = document.createElement('body');\n\n        // force the browser to try and fix any invalid HTML tags\n        fragment.innerHTML = html;\n\n        // copy cleaned html into an xml dom\n        var xhtml = Strophe.createHtml(fragment);\n\n        while (xhtml.childNodes.length > 0) {\n          this.node.appendChild(xhtml.childNodes[0]);\n        }\n        return this;\n      } };\n\n\n    /** PrivateClass: Strophe.Handler\n            *  _Private_ helper class for managing stanza handlers.\n            *\n            *  A Strophe.Handler encapsulates a user provided callback function to be\n            *  executed when matching stanzas are received by the connection.\n            *  Handlers can be either one-off or persistant depending on their\n            *  return value. Returning true will cause a Handler to remain active, and\n            *  returning false will remove the Handler.\n            *\n            *  Users will not use Strophe.Handler objects directly, but instead they\n            *  will use Strophe.Connection.addHandler() and\n            *  Strophe.Connection.deleteHandler().\n            */\n\n    /** PrivateConstructor: Strophe.Handler\n                *  Create and initialize a new Strophe.Handler.\n                *\n                *  Parameters:\n                *    (Function) handler - A function to be executed when the handler is run.\n                *    (String) ns - The namespace to match.\n                *    (String) name - The element name to match.\n                *    (String) type - The element type to match.\n                *    (String) id - The element id attribute to match.\n                *    (String) from - The element from attribute to match.\n                *    (Object) options - Handler options\n                *\n                *  Returns:\n                *    A new Strophe.Handler object.\n                */\n    Strophe.Handler = function (handler, ns, name, type, id, from, options) {\n      this.handler = handler;\n      this.ns = ns;\n      this.name = name;\n      this.type = type;\n      this.id = id;\n      this.options = options || { 'matchBareFromJid': false, 'ignoreNamespaceFragment': false };\n      // BBB: Maintain backward compatibility with old `matchBare` option\n      if (this.options.matchBare) {\n        Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n        this.options.matchBareFromJid = this.options.matchBare;\n        delete this.options.matchBare;\n      }\n\n      if (this.options.matchBareFromJid) {\n        this.from = from ? Strophe.getBareJidFromJid(from) : null;\n      } else {\n        this.from = from;\n      }\n      // whether the handler is a user handler or a system handler\n      this.user = true;\n    };\n\n    Strophe.Handler.prototype = {\n      /** PrivateFunction: getNamespace\n                                   *  Returns the XML namespace attribute on an element.\n                                   *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n                                   *  URL fragment will be stripped.\n                                   *\n                                   *  Parameters:\n                                   *    (XMLElement) elem - The XML element with the namespace.\n                                   *\n                                   *  Returns:\n                                   *    The namespace, with optionally the fragment stripped.\n                                   */\n      getNamespace: function getNamespace(elem) {\n        var elNamespace = elem.getAttribute(\"xmlns\");\n        if (elNamespace && this.options.ignoreNamespaceFragment) {\n          elNamespace = elNamespace.split('#')[0];\n        }\n        return elNamespace;\n      },\n\n      /** PrivateFunction: namespaceMatch\n          *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - The XML element to test.\n          *\n          *  Returns:\n          *    true if the stanza matches and false otherwise.\n          */\n      namespaceMatch: function namespaceMatch(elem) {\n        var nsMatch = false;\n        if (!this.ns) {\n          return true;\n        } else {\n          var that = this;\n          Strophe.forEachChild(elem, null, function (elem) {\n            if (that.getNamespace(elem) === that.ns) {\n              nsMatch = true;\n            }\n          });\n          nsMatch = nsMatch || this.getNamespace(elem) === this.ns;\n        }\n        return nsMatch;\n      },\n\n      /** PrivateFunction: isMatch\n          *  Tests if a stanza matches the Strophe.Handler.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - The XML element to test.\n          *\n          *  Returns:\n          *    true if the stanza matches and false otherwise.\n          */\n      isMatch: function isMatch(elem) {\n        var from = elem.getAttribute('from');\n        if (this.options.matchBareFromJid) {\n          from = Strophe.getBareJidFromJid(from);\n        }\n        var elem_type = elem.getAttribute(\"type\");\n        if (this.namespaceMatch(elem) && (\n        !this.name || Strophe.isTagEqual(elem, this.name)) && (\n        !this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) != -1 : elem_type == this.type)) && (\n        !this.id || elem.getAttribute(\"id\") == this.id) && (\n        !this.from || from == this.from)) {\n          return true;\n        }\n        return false;\n      },\n\n      /** PrivateFunction: run\n          *  Run the callback on a matching stanza.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - The DOM element that triggered the\n          *      Strophe.Handler.\n          *\n          *  Returns:\n          *    A boolean indicating if the handler should remain active.\n          */\n      run: function run(elem) {\n        var result = null;\n        try {\n          result = this.handler(elem);\n        } catch (e) {\n          Strophe._handleError(e);\n          throw e;\n        }\n        return result;\n      },\n\n      /** PrivateFunction: toString\n          *  Get a String representation of the Strophe.Handler object.\n          *\n          *  Returns:\n          *    A String.\n          */\n      toString: function toString() {\n        return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" +\n        this.id + \",\" + this.ns + \")}\";\n      } };\n\n\n    /** PrivateClass: Strophe.TimedHandler\n            *  _Private_ helper class for managing timed handlers.\n            *\n            *  A Strophe.TimedHandler encapsulates a user provided callback that\n            *  should be called after a certain period of time or at regular\n            *  intervals.  The return value of the callback determines whether the\n            *  Strophe.TimedHandler will continue to fire.\n            *\n            *  Users will not use Strophe.TimedHandler objects directly, but instead\n            *  they will use Strophe.Connection.addTimedHandler() and\n            *  Strophe.Connection.deleteTimedHandler().\n            */\n\n    /** PrivateConstructor: Strophe.TimedHandler\n                *  Create and initialize a new Strophe.TimedHandler object.\n                *\n                *  Parameters:\n                *    (Integer) period - The number of milliseconds to wait before the\n                *      handler is called.\n                *    (Function) handler - The callback to run when the handler fires.  This\n                *      function should take no arguments.\n                *\n                *  Returns:\n                *    A new Strophe.TimedHandler object.\n                */\n    Strophe.TimedHandler = function (period, handler) {\n      this.period = period;\n      this.handler = handler;\n      this.lastCalled = new Date().getTime();\n      this.user = true;\n    };\n\n    Strophe.TimedHandler.prototype = {\n      /** PrivateFunction: run\n                                        *  Run the callback for the Strophe.TimedHandler.\n                                        *\n                                        *  Returns:\n                                        *    true if the Strophe.TimedHandler should be called again, and false\n                                        *      otherwise.\n                                        */\n      run: function run() {\n        this.lastCalled = new Date().getTime();\n        return this.handler();\n      },\n\n      /** PrivateFunction: reset\n          *  Reset the last called time for the Strophe.TimedHandler.\n          */\n      reset: function reset() {\n        this.lastCalled = new Date().getTime();\n      },\n\n      /** PrivateFunction: toString\n          *  Get a string representation of the Strophe.TimedHandler object.\n          *\n          *  Returns:\n          *    The string representation.\n          */\n      toString: function toString() {\n        return \"{TimedHandler: \" + this.handler + \"(\" + this.period + \")}\";\n      } };\n\n\n    /** Class: Strophe.Connection\n            *  XMPP Connection manager.\n            *\n            *  This class is the main part of Strophe.  It manages a BOSH or websocket\n            *  connection to an XMPP server and dispatches events to the user callbacks\n            *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n            *  and legacy authentication.\n            *\n            *  After creating a Strophe.Connection object, the user will typically\n            *  call connect() with a user supplied callback to handle connection level\n            *  events like authentication failure, disconnection, or connection\n            *  complete.\n            *\n            *  The user will also have several event handlers defined by using\n            *  addHandler() and addTimedHandler().  These will allow the user code to\n            *  respond to interesting stanzas or do something periodically with the\n            *  connection. These handlers will be active once authentication is\n            *  finished.\n            *\n            *  To send data to the connection, use send().\n            */\n\n    /** Constructor: Strophe.Connection\n                *  Create and initialize a Strophe.Connection object.\n                *\n                *  The transport-protocol for this connection will be chosen automatically\n                *  based on the given service parameter. URLs starting with \"ws://\" or\n                *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n                *  or without a protocol will use BOSH.\n                *\n                *  To make Strophe connect to the current host you can leave out the protocol\n                *  and host part and just pass the path, e.g.\n                *\n                *  > var conn = new Strophe.Connection(\"/http-bind/\");\n                *\n                *  Options common to both Websocket and BOSH:\n                *  ------------------------------------------\n                *\n                *  cookies\n                *  ~~~~~~~\n                *\n                *  The \"cookies\" option allows you to pass in cookies to be added to the\n                *  document. These cookies will then be included in the BOSH XMLHttpRequest\n                *  or in the websocket connection.\n                *\n                *  The passed in value must be a map of cookie names and string values:\n                *\n                *  > { \"myCookie\": {\n               *  >     \"value\": \"1234\",\n               *  >     \"domain\": \".example.org\",\n               *  >     \"path\": \"/\",\n               *  >     \"expires\": expirationDate\n               *  >     }\n               *  > }\n                *\n                *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n                *  Those cookies need to be set under those domains, for example they can be\n                *  set server-side by making a XHR call to that domain to ask it to set any\n                *  necessary cookies.\n                *\n                *  mechanisms\n                *  ~~~~~~~~~~\n                *\n                *  The \"mechanisms\" option allows you to specify the SASL mechanisms that this\n                *  instance of Strophe.Connection (and therefore your XMPP client) will\n                *  support.\n                *\n                *  The value must be an array of objects with Strophe.SASLMechanism\n                *  prototypes.\n                *\n                *  If nothing is specified, then the following mechanisms (and their\n                *  priorities) are registered:\n                *\n                *      EXTERNAL - 60\n                *      OAUTHBEARER - 50\n                *      SCRAM-SHA1 - 40\n                *      DIGEST-MD5 - 30\n                *      PLAIN - 20\n                *      ANONYMOUS - 10\n                *\n                *  WebSocket options:\n                *  ------------------\n                *\n                *  If you want to connect to the current host with a WebSocket connection you\n                *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n                *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n                *  for Secure WebSocket.\n                *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n                *\n                *  > var conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n                *\n                *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n                *  of the current site.\n                *\n                *  Also because downgrading security is not permitted by browsers, when using\n                *  relative URLs both BOSH and WebSocket connections will use their secure\n                *  variants if the current connection to the site is also secure (https).\n                *\n                *  BOSH options:\n                *  -------------\n                *\n                *  By adding \"sync\" to the options, you can control if requests will\n                *  be made synchronously or not. The default behaviour is asynchronous.\n                *  If you want to make requests synchronous, make \"sync\" evaluate to true:\n                *  > var conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n                *\n                *  You can also toggle this on an already established connection:\n                *  > conn.options.sync = true;\n                *\n                *  The \"customHeaders\" option can be used to provide custom HTTP headers to be\n                *  included in the XMLHttpRequests made.\n                *\n                *  The \"keepalive\" option can be used to instruct Strophe to maintain the\n                *  current BOSH session across interruptions such as webpage reloads.\n                *\n                *  It will do this by caching the sessions tokens in sessionStorage, and when\n                *  \"restore\" is called it will check whether there are cached tokens with\n                *  which it can resume an existing session.\n                *\n                *  The \"withCredentials\" option should receive a Boolean value and is used to\n                *  indicate wether cookies should be included in ajax requests (by default\n                *  they're not).\n                *  Set this value to true if you are connecting to a BOSH service\n                *  and for some reason need to send cookies to it.\n                *  In order for this to work cross-domain, the server must also enable\n                *  credentials by setting the Access-Control-Allow-Credentials response header\n                *  to \"true\". For most usecases however this setting should be false (which\n                *  is the default).\n                *  Additionally, when using Access-Control-Allow-Credentials, the\n                *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n                *  instead must be restricted to actual domains.\n                *\n                *  The \"contentType\" option can be set to change the default Content-Type\n                *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n                *  CORS preflight requests that are sent to the server.\n                *\n                *  Parameters:\n                *    (String) service - The BOSH or WebSocket service URL.\n                *    (Object) options - A hash of configuration options\n                *\n                *  Returns:\n                *    A new Strophe.Connection object.\n                */\n    Strophe.Connection = function (service, options) {\n      // The service URL\n      this.service = service;\n      // Configuration options\n      this.options = options || {};\n      var proto = this.options.protocol || \"\";\n\n      // Select protocal based on service or options\n      if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 ||\n      proto.indexOf(\"ws\") === 0) {\n        this._proto = new Strophe.Websocket(this);\n      } else {\n        this._proto = new Strophe.Bosh(this);\n      }\n\n      /* The connected JID. */\n      this.jid = \"\";\n      /* the JIDs domain */\n      this.domain = null;\n      /* stream:features */\n      this.features = null;\n\n      // SASL\n      this._sasl_data = {};\n      this.do_session = false;\n      this.do_bind = false;\n\n      // handler lists\n      this.timedHandlers = [];\n      this.handlers = [];\n      this.removeTimeds = [];\n      this.removeHandlers = [];\n      this.addTimeds = [];\n      this.addHandlers = [];\n      this.protocolErrorHandlers = {\n        'HTTP': {},\n        'websocket': {} };\n\n\n      this._idleTimeout = null;\n      this._disconnectTimeout = null;\n\n      this.authenticated = false;\n      this.connected = false;\n      this.disconnecting = false;\n      this.do_authentication = true;\n      this.paused = false;\n      this.restored = false;\n\n      this._data = [];\n      this._uniqueId = 0;\n\n      this._sasl_success_handler = null;\n      this._sasl_failure_handler = null;\n      this._sasl_challenge_handler = null;\n\n      // Max retries before disconnecting\n      this.maxRetries = 5;\n\n      // Call onIdle callback every 1/10th of a second\n      // XXX: setTimeout should be called only with function expressions (23974bc1)\n      this._idleTimeout = setTimeout(function () {\n        this._onIdle();\n      }.bind(this), 100);\n\n      utils.addCookies(this.options.cookies);\n      this.registerSASLMechanisms(this.options.mechanisms);\n\n      // initialize plugins\n      for (var k in Strophe._connectionPlugins) {\n        if (Strophe._connectionPlugins.hasOwnProperty(k)) {\n          var ptype = Strophe._connectionPlugins[k];\n          // jslint complaints about the below line, but this is fine\n          var F = function F() {\n          }; // jshint ignore:line\n          F.prototype = ptype;\n          this[k] = new F();\n          this[k].init(this);\n        }\n      }\n    };\n\n    Strophe.Connection.prototype = {\n      /** Function: reset\n                                      *  Reset the connection.\n                                      *\n                                      *  This function should be called after a connection is disconnected\n                                      *  before that connection is reused.\n                                      */\n      reset: function reset() {\n        this._proto._reset();\n\n        // SASL\n        this.do_session = false;\n        this.do_bind = false;\n\n        // handler lists\n        this.timedHandlers = [];\n        this.handlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        this.authenticated = false;\n        this.connected = false;\n        this.disconnecting = false;\n        this.restored = false;\n\n        this._data = [];\n        this._requests = [];\n        this._uniqueId = 0;\n      },\n\n      /** Function: pause\n          *  Pause the request manager.\n          *\n          *  This will prevent Strophe from sending any more requests to the\n          *  server.  This is very useful for temporarily pausing\n          *  BOSH-Connections while a lot of send() calls are happening quickly.\n          *  This causes Strophe to send the data in a single request, saving\n          *  many request trips.\n          */\n      pause: function pause() {\n        this.paused = true;\n      },\n\n      /** Function: resume\n          *  Resume the request manager.\n          *\n          *  This resumes after pause() has been called.\n          */\n      resume: function resume() {\n        this.paused = false;\n      },\n\n      /** Function: getUniqueId\n          *  Generate a unique ID for use in <iq/> elements.\n          *\n          *  All <iq/> stanzas are required to have unique id attributes.  This\n          *  function makes creating these easy.  Each connection instance has\n          *  a counter which starts from zero, and the value of this counter\n          *  plus a colon followed by the suffix becomes the unique id. If no\n          *  suffix is supplied, the counter is used as the unique id.\n          *\n          *  Suffixes are used to make debugging easier when reading the stream\n          *  data, and their use is recommended.  The counter resets to 0 for\n          *  every new connection for the same reason.  For connections to the\n          *  same server that authenticate the same way, all the ids should be\n          *  the same, which makes it easy to see changes.  This is useful for\n          *  automated testing as well.\n          *\n          *  Parameters:\n          *    (String) suffix - A optional suffix to append to the id.\n          *\n          *  Returns:\n          *    A unique string to be used for the id attribute.\n          */\n      getUniqueId: function getUniqueId(suffix) {\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n          var r = Math.random() * 16 | 0,\n          v = c == 'x' ? r : r & 0x3 | 0x8;\n          return v.toString(16);\n        });\n        if (typeof suffix == \"string\" || typeof suffix == \"number\") {\n          return uuid + \":\" + suffix;\n        } else {\n          return uuid + \"\";\n        }\n      },\n\n      /** Function: addProtocolErrorHandler\n          *  Register a handler function for when a protocol (websocker or HTTP)\n          *  error occurs.\n          *\n          *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n          *  Patches that handle websocket errors would be very welcome.\n          *\n          *  Parameters:\n          *    (String) protocol - 'HTTP' or 'websocket'\n          *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n          *    (Function) callback - Function that will fire on Http error\n          *\n          *  Example:\n          *  function onError(err_code){\n         *    //do stuff\n         *  }\n          *\n          *  var conn = Strophe.connect('http://example.com/http-bind');\n          *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n          *  // Triggers HTTP 500 error and onError handler will be called\n          *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n          */\n      addProtocolErrorHandler: function addProtocolErrorHandler(protocol, status_code, callback) {\n        this.protocolErrorHandlers[protocol][status_code] = callback;\n      },\n\n\n      /** Function: connect\n          *  Starts the connection process.\n          *\n          *  As the connection process proceeds, the user supplied callback will\n          *  be triggered multiple times with status updates.  The callback\n          *  should take two arguments - the status code and the error condition.\n          *\n          *  The status code will be one of the values in the Strophe.Status\n          *  constants.  The error condition will be one of the conditions\n          *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n          *\n          *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n          *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n          *  of the optional parameters.\n          *\n          *  Parameters:\n          *    (String) jid - The user's JID.  This may be a bare JID,\n          *      or a full JID.  If a node is not supplied, SASL ANONYMOUS\n          *      authentication will be attempted.\n          *    (String) pass - The user's password.\n          *    (Function) callback - The connect callback function.\n          *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n          *      time the server will wait before returning an empty result for\n          *      a request.  The default setting of 60 seconds is recommended.\n          *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n          *      number of connections the server will hold at one time.  This\n          *      should almost always be set to 1 (the default).\n          *    (String) route - The optional route value.\n          *    (String) authcid - The optional alternative authentication identity\n          *      (username) if intending to impersonate another user.\n          *      When using the SASL-EXTERNAL authentication mechanism, for example\n          *      with client certificates, then the authcid value is used to\n          *      determine whether an authorization JID (authzid) should be sent to\n          *      the server. The authzid should not be sent to the server if the\n          *      authzid and authcid are the same. So to prevent it from being sent\n          *      (for example when the JID is already contained in the client\n          *      certificate), set authcid to that same JID. See XEP-178 for more\n          *      details.\n          */\n      connect: function connect(jid, pass, callback, wait, hold, route, authcid) {\n        this.jid = jid;\n        /** Variable: authzid\n                         *  Authorization identity.\n                         */\n        this.authzid = Strophe.getBareJidFromJid(this.jid);\n\n        /** Variable: authcid\n                                                             *  Authentication identity (User name).\n                                                             */\n        this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n\n        /** Variable: pass\n                                                                     *  Authentication identity (User password).\n                                                                     */\n        this.pass = pass;\n\n        /** Variable: servtype\n                           *  Digest MD5 compatibility.\n                           */\n        this.servtype = \"xmpp\";\n\n        this.connect_callback = callback;\n        this.disconnecting = false;\n        this.connected = false;\n        this.authenticated = false;\n        this.restored = false;\n\n        // parse jid for domain\n        this.domain = Strophe.getDomainFromJid(this.jid);\n\n        this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n        this._proto._connect(wait, hold, route);\n      },\n\n      /** Function: attach\n          *  Attach to an already created and authenticated BOSH session.\n          *\n          *  This function is provided to allow Strophe to attach to BOSH\n          *  sessions which have been created externally, perhaps by a Web\n          *  application.  This is often used to support auto-login type features\n          *  without putting user credentials into the page.\n          *\n          *  Parameters:\n          *    (String) jid - The full JID that is bound by the session.\n          *    (String) sid - The SID of the BOSH session.\n          *    (String) rid - The current RID of the BOSH session.  This RID\n          *      will be used by the next request.\n          *    (Function) callback The connect callback function.\n          *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n          *      time the server will wait before returning an empty result for\n          *      a request.  The default setting of 60 seconds is recommended.\n          *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n          *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n          *      number of connections the server will hold at one time.  This\n          *      should almost always be set to 1 (the default).\n          *    (Integer) wind - The optional HTTBIND window value.  This is the\n          *      allowed range of request ids that are valid.  The default is 5.\n          */\n      attach: function attach(jid, sid, rid, callback, wait, hold, wind) {\n        if (this._proto instanceof Strophe.Bosh) {\n          this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n        } else {\n          throw {\n            name: 'StropheSessionError',\n            message: 'The \"attach\" method can only be used with a BOSH connection.' };\n\n        }\n      },\n\n      /** Function: restore\n          *  Attempt to restore a cached BOSH session.\n          *\n          *  This function is only useful in conjunction with providing the\n          *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n          *\n          *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n          *  RID (Request ID) and SID (Session ID) and then when this function is\n          *  called, it will attempt to restore the session from those cached\n          *  tokens.\n          *\n          *  This function must therefore be called instead of connect or attach.\n          *\n          *  For an example on how to use it, please see examples/restore.js\n          *\n          *  Parameters:\n          *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n          *    (Function) callback - The connect callback function.\n          *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n          *      time the server will wait before returning an empty result for\n          *      a request.  The default setting of 60 seconds is recommended.\n          *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n          *      number of connections the server will hold at one time.  This\n          *      should almost always be set to 1 (the default).\n          *    (Integer) wind - The optional HTTBIND window value.  This is the\n          *      allowed range of request ids that are valid.  The default is 5.\n          */\n      restore: function restore(jid, callback, wait, hold, wind) {\n        if (this._sessionCachingSupported()) {\n          this._proto._restore(jid, callback, wait, hold, wind);\n        } else {\n          throw {\n            name: 'StropheSessionError',\n            message: 'The \"restore\" method can only be used with a BOSH connection.' };\n\n        }\n      },\n\n      /** PrivateFunction: _sessionCachingSupported\n          * Checks whether sessionStorage and JSON are supported and whether we're\n          * using BOSH.\n          */\n      _sessionCachingSupported: function _sessionCachingSupported() {\n        if (this._proto instanceof Strophe.Bosh) {\n          if (!JSON) {\n            return false;\n          }\n          try {\n            window.sessionStorage.setItem('_strophe_', '_strophe_');\n            window.sessionStorage.removeItem('_strophe_');\n          } catch (e) {\n            return false;\n          }\n          return true;\n        }\n        return false;\n      },\n\n      /** Function: xmlInput\n          *  User overrideable function that receives XML data coming into the\n          *  connection.\n          *\n          *  The default function does nothing.  User code can override this with\n          *  > Strophe.Connection.xmlInput = function (elem) {\n         *  >   (user code)\n         *  > };\n          *\n          *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n          *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n          *\n          *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n          *  <Strophe.Bosh.strip> if you want to strip this tag.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - The XML data received by the connection.\n          */\n      /* jshint unused:false */\n      xmlInput: function xmlInput(elem) {\n        return;\n      },\n      /* jshint unused:true */\n\n      /** Function: xmlOutput\n                                *  User overrideable function that receives XML data sent to the\n                                *  connection.\n                                *\n                                *  The default function does nothing.  User code can override this with\n                                *  > Strophe.Connection.xmlOutput = function (elem) {\n                               *  >   (user code)\n                               *  > };\n                                *\n                                *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n                                *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n                                *\n                                *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n                                *  <Strophe.Bosh.strip> if you want to strip this tag.\n                                *\n                                *  Parameters:\n                                *    (XMLElement) elem - The XMLdata sent by the connection.\n                                */\n      /* jshint unused:false */\n      xmlOutput: function xmlOutput(elem) {\n        return;\n      },\n      /* jshint unused:true */\n\n      /** Function: rawInput\n                                *  User overrideable function that receives raw data coming into the\n                                *  connection.\n                                *\n                                *  The default function does nothing.  User code can override this with\n                                *  > Strophe.Connection.rawInput = function (data) {\n                               *  >   (user code)\n                               *  > };\n                                *\n                                *  Parameters:\n                                *    (String) data - The data received by the connection.\n                                */\n      /* jshint unused:false */\n      rawInput: function rawInput(data) {\n        return;\n      },\n      /* jshint unused:true */\n\n      /** Function: rawOutput\n                                *  User overrideable function that receives raw data sent to the\n                                *  connection.\n                                *\n                                *  The default function does nothing.  User code can override this with\n                                *  > Strophe.Connection.rawOutput = function (data) {\n                               *  >   (user code)\n                               *  > };\n                                *\n                                *  Parameters:\n                                *    (String) data - The data sent by the connection.\n                                */\n      /* jshint unused:false */\n      rawOutput: function rawOutput(data) {\n        return;\n      },\n      /* jshint unused:true */\n\n      /** Function: nextValidRid\n                                *  User overrideable function that receives the new valid rid.\n                                *\n                                *  The default function does nothing. User code can override this with\n                                *  > Strophe.Connection.nextValidRid = function (rid) {\n                               *  >    (user code)\n                               *  > };\n                                *\n                                *  Parameters:\n                                *    (Number) rid - The next valid rid\n                                */\n      /* jshint unused:false */\n      nextValidRid: function nextValidRid(rid) {\n        return;\n      },\n      /* jshint unused:true */\n\n      /** Function: send\n                                *  Send a stanza.\n                                *\n                                *  This function is called to push data onto the send queue to\n                                *  go out over the wire.  Whenever a request is sent to the BOSH\n                                *  server, all pending data is sent and the queue is flushed.\n                                *\n                                *  Parameters:\n                                *    (XMLElement |\n                                *     [XMLElement] |\n                                *     Strophe.Builder) elem - The stanza to send.\n                                */\n      send: function send(elem, fail) {\n        // console.log(elem)\n        if (elem === null) {\n          return;\n        }\n        if (typeof elem.sort === \"function\") {\n          for (var i = 0; i < elem.length; i++) {\n            this._queueData(elem[i]);\n          }\n        } else if (typeof elem.tree === \"function\") {\n          this._queueData(elem.tree());\n        } else {\n          this._queueData(elem);\n        }\n        this._proto._send(fail);\n      },\n\n      /** Function: flush\n          *  Immediately send any pending outgoing data.\n          *\n          *  Normally send() queues outgoing data until the next idle period\n          *  (100ms), which optimizes network use in the common cases when\n          *  several send()s are called in succession. flush() can be used to\n          *  immediately send all pending data.\n          */\n      flush: function flush(fail) {\n        // cancel the pending idle period and run the idle function\n        // immediately\n        clearTimeout(this._idleTimeout);\n        this._onIdle(fail);\n      },\n\n      /** Function: sendIQ\n          *  Helper function to send IQ stanzas.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - The stanza to send.\n          *    (Function) callback - The callback function for a successful request.\n          *    (Function) errback - The callback function for a failed or timed\n          *      out request.  On timeout, the stanza will be null.\n          *    (Integer) timeout - The time specified in milliseconds for a\n          *      timeout to occur.\n          *\n          *  Returns:\n          *    The id used to send the IQ.\n          */\n      sendIQ: function sendIQ(elem, callback, errback, timeout) {\n        var timeoutHandler = null;\n        var that = this;\n\n        if (typeof elem.tree === \"function\") {\n          elem = elem.tree();\n        }\n        var id = elem.getAttribute('id');\n\n        // inject id if not found\n        if (!id) {\n          id = this.getUniqueId(\"sendIQ\");\n          elem.setAttribute(\"id\", id);\n        }\n\n        var expectedFrom = elem.getAttribute(\"to\");\n        var fulljid = this.jid;\n\n        var handler = this.addHandler(function (stanza) {\n          // remove timeout handler if there is one\n          if (timeoutHandler) {\n            that.deleteTimedHandler(timeoutHandler);\n          }\n\n          var acceptable = false;\n          var from = stanza.getAttribute(\"from\");\n          if (from === expectedFrom ||\n          !expectedFrom && (\n          from === Strophe.getBareJidFromJid(fulljid) ||\n          from === Strophe.getDomainFromJid(fulljid) ||\n          from === fulljid)) {\n            acceptable = true;\n          }\n\n          if (!acceptable) {\n            throw {\n              name: \"StropheError\",\n              message: \"Got answer to IQ from wrong jid:\" + from +\n              \"\\nExpected jid: \" + expectedFrom };\n\n          }\n\n          var iqtype = stanza.getAttribute('type');\n          if (iqtype == 'result') {\n            if (callback) {\n              callback(stanza);\n            }\n          } else if (iqtype == 'error') {\n            if (errback) {\n              errback(stanza);\n            }\n          } else {\n            throw {\n              name: \"StropheError\",\n              message: \"Got bad IQ type of \" + iqtype };\n\n          }\n        }, null, 'iq', ['error', 'result'], id);\n\n        // if timeout specified, setup timeout handler.\n        if (timeout) {\n          timeoutHandler = this.addTimedHandler(timeout, function () {\n            // get rid of normal handler\n            that.deleteHandler(handler);\n            // call errback on timeout with null stanza\n            if (errback) {\n              errback(null);\n            }\n            return false;\n          });\n        }\n        this.send(elem);\n        return id;\n      },\n\n      /** PrivateFunction: _queueData\n          *  Queue outgoing data for later sending.  Also ensures that the data\n          *  is a DOMElement.\n          */\n      _queueData: function _queueData(element) {\n        if (element === null || !element.tagName || !element.childNodes) {\n          throw {\n            name: \"StropheError\",\n            message: \"Cannot queue non-DOMElement.\" };\n\n        }\n        this._data.push(element);\n      },\n\n      /** PrivateFunction: _sendRestart\n          *  Send an xmpp:restart stanza.\n          */\n      _sendRestart: function _sendRestart() {\n        this._data.push(\"restart\");\n        this._proto._sendRestart();\n        // XXX: setTimeout should be called only with function expressions (23974bc1)\n        this._idleTimeout = setTimeout(function () {\n          this._onIdle();\n        }.bind(this), 100);\n      },\n\n      /** Function: addTimedHandler\n          *  Add a timed handler to the connection.\n          *\n          *  This function adds a timed handler.  The provided handler will\n          *  be called every period milliseconds until it returns false,\n          *  the connection is terminated, or the handler is removed.  Handlers\n          *  that wish to continue being invoked should return true.\n          *\n          *  Because of method binding it is necessary to save the result of\n          *  this function if you wish to remove a handler with\n          *  deleteTimedHandler().\n          *\n          *  Note that user handlers are not active until authentication is\n          *  successful.\n          *\n          *  Parameters:\n          *    (Integer) period - The period of the handler.\n          *    (Function) handler - The callback function.\n          *\n          *  Returns:\n          *    A reference to the handler that can be used to remove it.\n          */\n      addTimedHandler: function addTimedHandler(period, handler) {\n        var thand = new Strophe.TimedHandler(period, handler);\n        this.addTimeds.push(thand);\n        return thand;\n      },\n\n      /** Function: deleteTimedHandler\n          *  Delete a timed handler for a connection.\n          *\n          *  This function removes a timed handler from the connection.  The\n          *  handRef parameter is *not* the function passed to addTimedHandler(),\n          *  but is the reference returned from addTimedHandler().\n          *\n          *  Parameters:\n          *    (Strophe.TimedHandler) handRef - The handler reference.\n          */\n      deleteTimedHandler: function deleteTimedHandler(handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeTimeds.push(handRef);\n      },\n\n      /** Function: addHandler\n          *  Add a stanza handler for the connection.\n          *\n          *  This function adds a stanza handler to the connection.  The\n          *  handler callback will be called for any stanza that matches\n          *  the parameters.  Note that if multiple parameters are supplied,\n          *  they must all match for the handler to be invoked.\n          *\n          *  The handler will receive the stanza that triggered it as its argument.\n          *  *The handler should return true if it is to be invoked again;\n          *  returning false will remove the handler after it returns.*\n          *\n          *  As a convenience, the ns parameters applies to the top level element\n          *  and also any of its immediate children.  This is primarily to make\n          *  matching /iq/query elements easy.\n          *\n          *  Options\n          *  ~~~~~~~\n          *  With the options argument, you can specify boolean flags that affect how\n          *  matches are being done.\n          *\n          *  Currently two flags exist:\n          *\n          *  - matchBareFromJid:\n          *      When set to true, the from parameter and the\n          *      from attribute on the stanza will be matched as bare JIDs instead\n          *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n          *      value of options. The default value for matchBareFromJid is false.\n          *\n          *  - ignoreNamespaceFragment:\n          *      When set to true, a fragment specified on the stanza's namespace\n          *      URL will be ignored when it's matched with the one configured for\n          *      the handler.\n          *\n          *      This means that if you register like this:\n          *      >   connection.addHandler(\n          *      >       handler,\n          *      >       'http://jabber.org/protocol/muc',\n          *      >       null, null, null, null,\n          *      >       {'ignoreNamespaceFragment': true}\n          *      >   );\n          *\n          *      Then a stanza with XML namespace of\n          *      'http://jabber.org/protocol/muc#user' will also be matched. If\n          *      'ignoreNamespaceFragment' is false, then only stanzas with\n          *      'http://jabber.org/protocol/muc' will be matched.\n          *\n          *  Deleting the handler\n          *  ~~~~~~~~~~~~~~~~~~~~\n          *  The return value should be saved if you wish to remove the handler\n          *  with deleteHandler().\n          *\n          *  Parameters:\n          *    (Function) handler - The user callback.\n          *    (String) ns - The namespace to match.\n          *    (String) name - The stanza name to match.\n          *    (String|Array) type - The stanza type (or types if an array) to match.\n          *    (String) id - The stanza id attribute to match.\n          *    (String) from - The stanza from attribute to match.\n          *    (String) options - The handler options\n          *\n          *  Returns:\n          *    A reference to the handler that can be used to remove it.\n          */\n      addHandler: function addHandler(handler, ns, name, type, id, from, options) {\n        var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n        this.addHandlers.push(hand);\n        return hand;\n      },\n\n      /** Function: deleteHandler\n          *  Delete a stanza handler for a connection.\n          *\n          *  This function removes a stanza handler from the connection.  The\n          *  handRef parameter is *not* the function passed to addHandler(),\n          *  but is the reference returned from addHandler().\n          *\n          *  Parameters:\n          *    (Strophe.Handler) handRef - The handler reference.\n          */\n      deleteHandler: function deleteHandler(handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeHandlers.push(handRef);\n        // If a handler is being deleted while it is being added,\n        // prevent it from getting added\n        var i = this.addHandlers.indexOf(handRef);\n        if (i >= 0) {\n          this.addHandlers.splice(i, 1);\n        }\n      },\n\n      /** Function: registerSASLMechanisms\n          *\n          * Register the SASL mechanisms which will be supported by this instance of\n          * Strophe.Connection (i.e. which this XMPP client will support).\n          *\n          *  Parameters:\n          *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n          *\n          */\n      registerSASLMechanisms: function registerSASLMechanisms(mechanisms) {\n        this.mechanisms = {};\n        mechanisms = mechanisms || [\n        Strophe.SASLAnonymous,\n        Strophe.SASLExternal,\n        Strophe.SASLMD5,\n        Strophe.SASLOAuthBearer,\n        Strophe.SASLPlain,\n        Strophe.SASLSHA1];\n\n        mechanisms.forEach(this.registerSASLMechanism.bind(this));\n      },\n\n      /** Function: registerSASLMechanism\n          *\n          * Register a single SASL mechanism, to be supported by this client.\n          *\n          *  Parameters:\n          *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n          *\n          */\n      registerSASLMechanism: function registerSASLMechanism(mechanism) {\n        this.mechanisms[mechanism.prototype.name] = mechanism;\n      },\n\n      /** Function: disconnect\n          *  Start the graceful disconnection process.\n          *\n          *  This function starts the disconnection process.  This process starts\n          *  by sending unavailable presence and sending BOSH body of type\n          *  terminate.  A timeout handler makes sure that disconnection happens\n          *  even if the BOSH server does not respond.\n          *  If the Connection object isn't connected, at least tries to abort all pending requests\n          *  so the connection object won't generate successful requests (which were already opened).\n          *\n          *  The user supplied connection callback will be notified of the\n          *  progress as this process happens.\n          *\n          *  Parameters:\n          *    (String) reason - The reason the disconnect is occuring.\n          */\n      disconnect: function disconnect(reason) {\n        this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n        Strophe.info(\"Disconnect was called because: \" + reason);\n        if (this.connected) {\n          var pres = false;\n          this.disconnecting = true;\n          if (this.authenticated) {\n            pres = $pres({\n              xmlns: Strophe.NS.CLIENT,\n              type: 'unavailable' });\n\n          }\n          // setup timeout handler\n          this._disconnectTimeout = this._addSysTimedHandler(\n          3000, this._onDisconnectTimeout.bind(this));\n          this._proto._disconnect(pres);\n        } else {\n          Strophe.info(\"Disconnect was called before Strophe connected to the server\");\n          this._proto._abortAllRequests();\n        }\n      },\n\n      /** PrivateFunction: _changeConnectStatus\n          *  _Private_ helper function that makes sure plugins and the user's\n          *  callback are notified of connection status changes.\n          *\n          *  Parameters:\n          *    (Integer) status - the new connection status, one of the values\n          *      in Strophe.Status\n          *    (String) condition - the error condition or null\n          */\n      _changeConnectStatus: function _changeConnectStatus(status, condition) {\n        // notify all plugins listening for status changes\n        for (var k in Strophe._connectionPlugins) {\n          if (Strophe._connectionPlugins.hasOwnProperty(k)) {\n            var plugin = this[k];\n            if (plugin.statusChanged) {\n              try {\n                plugin.statusChanged(status, condition);\n              } catch (err) {\n                Strophe.error(\"\" + k + \" plugin caused an exception \" +\n                \"changing status: \" + err);\n              }\n            }\n          }\n        }\n\n        // notify the user's callback\n        if (this.connect_callback) {\n          try {\n            this.connect_callback(status, condition);\n          } catch (e) {\n            Strophe._handleError(e);\n            Strophe.error(\n            \"User connection callback caused an \" + \"exception: \" + e);\n          }\n        }\n      },\n\n      /** PrivateFunction: _doDisconnect\n          *  _Private_ function to disconnect.\n          *\n          *  This is the last piece of the disconnection logic.  This resets the\n          *  connection and alerts the user's connection callback.\n          */\n      _doDisconnect: function _doDisconnect(condition) {\n        //console.log('_doDisconnect 14', condition)\n        if (typeof this._idleTimeout == \"number\") {\n          clearTimeout(this._idleTimeout);\n        }\n\n        // Cancel Disconnect Timeout\n        if (this._disconnectTimeout !== null) {\n          this.deleteTimedHandler(this._disconnectTimeout);\n          this._disconnectTimeout = null;\n        }\n\n        Strophe.info(\"_doDisconnect was called\");\n        this._proto._doDisconnect();\n\n        this.authenticated = false;\n        this.disconnecting = false;\n        this.restored = false;\n\n        // delete handlers\n        this.handlers = [];\n        this.timedHandlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        // tell the parent we disconnected\n        this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n        this.connected = false;\n      },\n\n      /** PrivateFunction: _dataRecv\n          *  _Private_ handler to processes incoming data from the the connection.\n          *\n          *  Except for _connect_cb handling the initial connection request,\n          *  this function handles the incoming data for all requests.  This\n          *  function also fires stanza handlers that match each incoming\n          *  stanza.\n          *\n          *  Parameters:\n          *    (Strophe.Request) req - The request that has data ready.\n          *    (string) req - The stanza a raw string (optiona).\n          */\n      _dataRecv: function _dataRecv(req, raw) {\n        Strophe.info(\"_dataRecv called\");\n        var elem = this._proto._reqToData(req);\n        if (elem === null) {\n          return;\n        }\n\n        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n          if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n            this.xmlInput(elem.childNodes[0]);\n          } else {\n            this.xmlInput(elem);\n          }\n        }\n        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n          if (raw) {\n            this.rawInput(raw);\n          } else {\n            this.rawInput(Strophe.serialize(elem));\n          }\n        }\n\n        // remove handlers scheduled for deletion\n        var i, hand;\n        while (this.removeHandlers.length > 0) {\n          hand = this.removeHandlers.pop();\n          i = this.handlers.indexOf(hand);\n          if (i >= 0) {\n            this.handlers.splice(i, 1);\n          }\n        }\n\n        // add handlers scheduled for addition\n        while (this.addHandlers.length > 0) {\n          this.handlers.push(this.addHandlers.pop());\n        }\n\n        // handle graceful disconnect\n        if (this.disconnecting && this._proto._emptyQueue()) {\n          //console.log('_doDisconnect 1')\n          this._doDisconnect();\n          return;\n        }\n\n        var type = elem.getAttribute(\"type\");\n        var cond, conflict;\n        if (type !== null && type == \"terminate\") {\n          // Don't process stanzas that come in after disconnect\n          if (this.disconnecting) {\n            return;\n          }\n\n          // an error occurred\n          cond = elem.getAttribute(\"condition\");\n          conflict = elem.getElementsByTagName(\"conflict\");\n          if (cond !== null) {\n            if (cond == \"remote-stream-error\" && conflict.length > 0) {\n              cond = \"conflict\";\n            }\n            this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n          } else {\n            this._changeConnectStatus(Strophe.Status.CONNFAIL, \"unknown\");\n          }\n          this._doDisconnect(cond);\n          return;\n        }\n\n        // send each incoming stanza through the handler chain\n        var that = this;\n        Strophe.forEachChild(elem, null, function (child) {\n          var i, newList;\n          // process handlers\n          newList = that.handlers;\n          that.handlers = [];\n          for (i = 0; i < newList.length; i++) {\n            var hand = newList[i];\n            // encapsulate 'handler.run' not to lose the whole handler list if\n            // one of the handlers throws an exception\n            try {\n              if (hand.isMatch(child) && (\n              that.authenticated || !hand.user)) {\n                if (hand.run(child)) {\n                  that.handlers.push(hand);\n                }\n              } else {\n                that.handlers.push(hand);\n              }\n            } catch (e) {\n              // if the handler throws an exception, we consider it as false\n              Strophe.warn('Removing Strophe handlers due to uncaught exception: ' + e.message);\n            }\n          }\n        });\n      },\n\n\n      /** Attribute: mechanisms\n          *  SASL Mechanisms available for Connection.\n          */\n      mechanisms: {},\n\n      /** PrivateFunction: _connect_cb\n                       *  _Private_ handler for initial connection request.\n                       *\n                       *  This handler is used to process the initial connection request\n                       *  response from the BOSH server. It is used to set up authentication\n                       *  handlers and start the authentication process.\n                       *\n                       *  SASL authentication will be attempted if available, otherwise\n                       *  the code will fall back to legacy authentication.\n                       *\n                       *  Parameters:\n                       *    (Strophe.Request) req - The current request.\n                       *    (Function) _callback - low level (xmpp) connect callback function.\n                       *      Useful for plugins with their own xmpp connect callback (when their)\n                       *      want to do something special).\n                       */\n      _connect_cb: function _connect_cb(req, _callback, raw) {\n        Strophe.info(\"_connect_cb was called\");\n        this.connected = true;\n\n        var bodyWrap;\n        try {\n          bodyWrap = this._proto._reqToData(req);\n        } catch (e) {\n          if (e != \"badformat\") {\n            throw e;\n          }\n          this._changeConnectStatus(Strophe.Status.CONNFAIL, 'bad-format');\n          this._doDisconnect('bad-format');\n        }\n        if (!bodyWrap) {\n          return;\n        }\n\n        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n          if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n            this.xmlInput(bodyWrap.childNodes[0]);\n          } else {\n            this.xmlInput(bodyWrap);\n          }\n        }\n        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n          if (raw) {\n            this.rawInput(raw);\n          } else {\n            this.rawInput(Strophe.serialize(bodyWrap));\n          }\n        }\n\n        var conncheck = this._proto._connect_cb(bodyWrap);\n        if (conncheck === Strophe.Status.CONNFAIL) {\n          return;\n        }\n\n        // Check for the stream:features tag\n        var hasFeatures;\n        if (bodyWrap.getElementsByTagNameNS) {\n          hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n        } else {\n          hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 ||\n          bodyWrap.getElementsByTagName(\"features\").length > 0;\n        }\n\n        //console.log('hasFeatures', hasFeatures, bodyWrap, _callback)\n        if (!hasFeatures) {\n          try {\n            this._proto._no_auth_received(_callback);\n          } catch (e) {\n          }\n\n          return;\n        }\n\n        var matched = [],i,mech;\n        var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n        if (mechanisms.length > 0) {\n          for (i = 0; i < mechanisms.length; i++) {\n            mech = Strophe.getText(mechanisms[i]);\n            if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n          }\n        }\n\n        //console.log('matched', matched, bodyWrap)\n        if (matched.length === 0) {\n          if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n            // There are no matching SASL mechanisms and also no legacy\n            // auth available.\n            this._proto._no_auth_received(_callback);\n            return;\n          }\n        }\n        if (this.do_authentication !== false) {\n          this.authenticate(matched);\n        }\n      },\n\n      /** Function: sortMechanismsByPriority\n          *\n          *  Sorts an array of objects with prototype SASLMechanism according to\n          *  their priorities.\n          *\n          *  Parameters:\n          *    (Array) mechanisms - Array of SASL mechanisms.\n          *\n          */\n      sortMechanismsByPriority: function sortMechanismsByPriority(mechanisms) {\n        // Sorting mechanisms according to priority.\n        var i, j, higher, swap;\n        for (i = 0; i < mechanisms.length - 1; ++i) {\n          higher = i;\n          for (j = i + 1; j < mechanisms.length; ++j) {\n            if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n              higher = j;\n            }\n          }\n          if (higher != i) {\n            swap = mechanisms[i];\n            mechanisms[i] = mechanisms[higher];\n            mechanisms[higher] = swap;\n          }\n        }\n        return mechanisms;\n      },\n\n      /** PrivateFunction: _attemptSASLAuth\n          *\n          *  Iterate through an array of SASL mechanisms and attempt authentication\n          *  with the highest priority (enabled) mechanism.\n          *\n          *  Parameters:\n          *    (Array) mechanisms - Array of SASL mechanisms.\n          *\n          *  Returns:\n          *    (Boolean) mechanism_found - true or false, depending on whether a\n          *          valid SASL mechanism was found with which authentication could be\n          *          started.\n          */\n      _attemptSASLAuth: function _attemptSASLAuth(mechanisms) {\n        mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n        var i = 0,mechanism_found = false;\n        for (i = 0; i < mechanisms.length; ++i) {\n          if (!mechanisms[i].prototype.test(this)) {\n            continue;\n          }\n          this._sasl_success_handler = this._addSysHandler(\n          this._sasl_success_cb.bind(this), null,\n          \"success\", null, null);\n          this._sasl_failure_handler = this._addSysHandler(\n          this._sasl_failure_cb.bind(this), null,\n          \"failure\", null, null);\n          this._sasl_challenge_handler = this._addSysHandler(\n          this._sasl_challenge_cb.bind(this), null,\n          \"challenge\", null, null);\n\n          this._sasl_mechanism = new mechanisms[i]();\n          this._sasl_mechanism.onStart(this);\n\n          var request_auth_exchange = $build(\"auth\", {\n            xmlns: Strophe.NS.SASL,\n            mechanism: this._sasl_mechanism.name });\n\n          if (this._sasl_mechanism.isClientFirst) {\n            var response = this._sasl_mechanism.onChallenge(this, null);\n            request_auth_exchange.t(Base64.encode(response));\n          }\n          this.send(request_auth_exchange.tree());\n          mechanism_found = true;\n          break;\n        }\n        return mechanism_found;\n      },\n\n      /** PrivateFunction: _attemptLegacyAuth\n          *\n          *  Attempt legacy (i.e. non-SASL) authentication.\n          *\n          */\n      _attemptLegacyAuth: function _attemptLegacyAuth() {\n        if (Strophe.getNodeFromJid(this.jid) === null) {\n          // we don't have a node, which is required for non-anonymous\n          // client connections\n          this._changeConnectStatus(\n          Strophe.Status.CONNFAIL,\n          'x-strophe-bad-non-anon-jid');\n\n          this.disconnect('x-strophe-bad-non-anon-jid');\n        } else {\n          // Fall back to legacy authentication\n          this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n          this._addSysHandler(\n          this._auth1_cb.bind(this),\n          null, null, null, \"_auth_1\");\n\n          this.send($iq({\n            'type': \"get\",\n            'to': this.domain,\n            'id': \"_auth_1\" }).\n          c(\"query\", { xmlns: Strophe.NS.AUTH }).\n          c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid)).\n          tree());\n        }\n      },\n\n      /** Function: authenticate\n          * Set up authentication\n          *\n          *  Continues the initial connection request by setting up authentication\n          *  handlers and starting the authentication process.\n          *\n          *  SASL authentication will be attempted if available, otherwise\n          *  the code will fall back to legacy authentication.\n          *\n          *  Parameters:\n          *    (Array) matched - Array of SASL mechanisms supported.\n          *\n          */\n      authenticate: function authenticate(matched) {\n        //console.log('authenticate');\n        if (!this._attemptSASLAuth(matched)) {\n          this._attemptLegacyAuth();\n        }\n      },\n\n      /** PrivateFunction: _sasl_challenge_cb\n          *  _Private_ handler for the SASL challenge\n          *\n          */\n      _sasl_challenge_cb: function _sasl_challenge_cb(elem) {\n        var challenge = Base64.decode(Strophe.getText(elem));\n        var response = this._sasl_mechanism.onChallenge(this, challenge);\n        var stanza = $build('response', {\n          'xmlns': Strophe.NS.SASL });\n\n        if (response !== \"\") {\n          stanza.t(Base64.encode(response));\n        }\n        this.send(stanza.tree());\n        return true;\n      },\n\n      /** PrivateFunction: _auth1_cb\n          *  _Private_ handler for legacy authentication.\n          *\n          *  This handler is called in response to the initial <iq type='get'/>\n          *  for legacy authentication.  It builds an authentication <iq/> and\n          *  sends it, creating a handler (calling back to _auth2_cb()) to\n          *  handle the result\n          *\n          *  Parameters:\n          *    (XMLElement) elem - The stanza that triggered the callback.\n          *\n          *  Returns:\n          *    false to remove the handler.\n          */\n      /* jshint unused:false */\n      _auth1_cb: function _auth1_cb(elem) {\n        // build plaintext auth iq\n        var iq = $iq({ type: \"set\", id: \"_auth_2\" }).\n        c('query', { xmlns: Strophe.NS.AUTH }).\n        c('username', {}).t(Strophe.getNodeFromJid(this.jid)).\n        up().\n        c('password').t(this.pass);\n\n        if (!Strophe.getResourceFromJid(this.jid)) {\n          // since the user has not supplied a resource, we pick\n          // a default one here.  unlike other auth methods, the server\n          // cannot do this for us.\n          this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n        }\n        iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n        this._addSysHandler(this._auth2_cb.bind(this), null,\n        null, null, \"_auth_2\");\n        this.send(iq.tree());\n        return false;\n      },\n      /* jshint unused:true */\n\n      /** PrivateFunction: _sasl_success_cb\n                                *  _Private_ handler for succesful SASL authentication.\n                                *\n                                *  Parameters:\n                                *    (XMLElement) elem - The matching stanza.\n                                *\n                                *  Returns:\n                                *    false to remove the handler.\n                                */\n      _sasl_success_cb: function _sasl_success_cb(elem) {\n        //console.log('_sasl_success_cb', elem)\n        if (this._sasl_data[\"server-signature\"]) {\n          var serverSignature;\n          var success = Base64.decode(Strophe.getText(elem));\n          var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n          var matches = success.match(attribMatch);\n          if (matches[1] == \"v\") {\n            serverSignature = matches[2];\n          }\n\n          if (serverSignature != this._sasl_data[\"server-signature\"]) {\n            // remove old handlers\n            this.deleteHandler(this._sasl_failure_handler);\n            this._sasl_failure_handler = null;\n            if (this._sasl_challenge_handler) {\n              this.deleteHandler(this._sasl_challenge_handler);\n              this._sasl_challenge_handler = null;\n            }\n\n            this._sasl_data = {};\n            return this._sasl_failure_cb(null);\n          }\n        }\n        Strophe.info(\"SASL authentication succeeded.\");\n\n        if (this._sasl_mechanism) {\n          this._sasl_mechanism.onSuccess();\n        }\n\n        // remove old handlers\n        this.deleteHandler(this._sasl_failure_handler);\n        this._sasl_failure_handler = null;\n        if (this._sasl_challenge_handler) {\n          this.deleteHandler(this._sasl_challenge_handler);\n          this._sasl_challenge_handler = null;\n        }\n\n        var streamfeature_handlers = [];\n        var wrapper = function wrapper(handlers, elem) {\n          while (handlers.length) {\n            this.deleteHandler(handlers.pop());\n          }\n          this._sasl_auth1_cb.bind(this)(elem);\n          return false;\n        };\n        streamfeature_handlers.push(this._addSysHandler(function (elem) {\n          wrapper.bind(this)(streamfeature_handlers, elem);\n        }.bind(this), null, \"stream:features\", null, null));\n        streamfeature_handlers.push(this._addSysHandler(function (elem) {\n          wrapper.bind(this)(streamfeature_handlers, elem);\n        }.bind(this), Strophe.NS.STREAM, \"features\", null, null));\n\n        // we must send an xmpp:restart now\n        this._sendRestart();\n\n        return false;\n      },\n\n      /** PrivateFunction: _sasl_auth1_cb\n          *  _Private_ handler to start stream binding.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - The matching stanza.\n          *\n          *  Returns:\n          *    false to remove the handler.\n          */\n      _sasl_auth1_cb: function _sasl_auth1_cb(elem) {\n        //console.log('_sasl_auth1_cb', elem)\n\n        // save stream:features for future usage\n        this.features = elem;\n        var i, child;\n        for (i = 0; i < elem.childNodes.length; i++) {\n          child = elem.childNodes[i];\n          if (child.nodeName == 'bind') {\n            this.do_bind = true;\n          }\n\n          if (child.nodeName == 'session') {\n            this.do_session = true;\n          }\n        }\n\n        if (!this.do_bind) {\n          this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n          return false;\n        } else {\n          this._addSysHandler(this._sasl_bind_cb.bind(this), null, null,\n          null, \"_bind_auth_2\");\n\n          var resource = Strophe.getResourceFromJid(this.jid);\n          if (resource) {\n            this.send($iq({ type: \"set\", id: \"_bind_auth_2\" }).\n            c('bind', { xmlns: Strophe.NS.BIND }).\n            c('resource', {}).t(resource).tree());\n          } else {\n            this.send($iq({ type: \"set\", id: \"_bind_auth_2\" }).\n            c('bind', { xmlns: Strophe.NS.BIND }).\n            tree());\n          }\n        }\n        return false;\n      },\n\n      /** PrivateFunction: _sasl_bind_cb\n          *  _Private_ handler for binding result and session start.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - The matching stanza.\n          *\n          *  Returns:\n          *    false to remove the handler.\n          */\n      _sasl_bind_cb: function _sasl_bind_cb(elem) {\n        //console.log('_sasl_bind_cb', elem)\n\n        if (elem.getAttribute(\"type\") == \"error\") {\n          Strophe.info(\"SASL binding failed.\");\n          var conflict = elem.getElementsByTagName(\"conflict\"),condition;\n          if (conflict.length > 0) {\n            condition = 'conflict';\n          }\n          this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition);\n          return false;\n        }\n\n        // TODO - need to grab errors\n        var bind = elem.getElementsByTagName(\"bind\");\n        var jidNode;\n        if (bind.length > 0) {\n          // Grab jid\n          jidNode = bind[0].getElementsByTagName(\"jid\");\n          if (jidNode.length > 0) {\n            this.jid = Strophe.getText(jidNode[0]);\n\n            if (this.do_session) {\n              this._addSysHandler(this._sasl_session_cb.bind(this),\n              null, null, null, \"_session_auth_2\");\n\n              this.send($iq({ type: \"set\", id: \"_session_auth_2\" }).\n              c('session', { xmlns: Strophe.NS.SESSION }).\n              tree());\n            } else {\n              this.authenticated = true;\n              this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n            }\n          }\n        } else {\n          Strophe.info(\"SASL binding failed.\");\n          this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n          return false;\n        }\n      },\n\n      /** PrivateFunction: _sasl_session_cb\n          *  _Private_ handler to finish successful SASL connection.\n          *\n          *  This sets Connection.authenticated to true on success, which\n          *  starts the processing of user handlers.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - The matching stanza.\n          *\n          *  Returns:\n          *    false to remove the handler.\n          */\n      _sasl_session_cb: function _sasl_session_cb(elem) {\n        if (elem.getAttribute(\"type\") == \"result\") {\n          this.authenticated = true;\n          this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n        } else if (elem.getAttribute(\"type\") == \"error\") {\n          Strophe.info(\"Session creation failed.\");\n          this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n          return false;\n        }\n        return false;\n      },\n\n      /** PrivateFunction: _sasl_failure_cb\n          *  _Private_ handler for SASL authentication failure.\n          *\n          *  Parameters:\n          *    (XMLElement) elem - The matching stanza.\n          *\n          *  Returns:\n          *    false to remove the handler.\n          */\n      /* jshint unused:false */\n      _sasl_failure_cb: function _sasl_failure_cb(elem) {\n        // delete unneeded handlers\n        if (this._sasl_success_handler) {\n          this.deleteHandler(this._sasl_success_handler);\n          this._sasl_success_handler = null;\n        }\n        if (this._sasl_challenge_handler) {\n          this.deleteHandler(this._sasl_challenge_handler);\n          this._sasl_challenge_handler = null;\n        }\n\n        if (this._sasl_mechanism)\n        this._sasl_mechanism.onFailure();\n        this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n        return false;\n      },\n      /* jshint unused:true */\n\n      /** PrivateFunction: _auth2_cb\n                                *  _Private_ handler to finish legacy authentication.\n                                *\n                                *  This handler is called when the result from the jabber:iq:auth\n                                *  <iq/> stanza is returned.\n                                *\n                                *  Parameters:\n                                *    (XMLElement) elem - The stanza that triggered the callback.\n                                *\n                                *  Returns:\n                                *    false to remove the handler.\n                                */\n      _auth2_cb: function _auth2_cb(elem) {\n        if (elem.getAttribute(\"type\") == \"result\") {\n          this.authenticated = true;\n          this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n        } else if (elem.getAttribute(\"type\") == \"error\") {\n          this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n          this.disconnect('authentication failed');\n        }\n        return false;\n      },\n\n      /** PrivateFunction: _addSysTimedHandler\n          *  _Private_ function to add a system level timed handler.\n          *\n          *  This function is used to add a Strophe.TimedHandler for the\n          *  library code.  System timed handlers are allowed to run before\n          *  authentication is complete.\n          *\n          *  Parameters:\n          *    (Integer) period - The period of the handler.\n          *    (Function) handler - The callback function.\n          */\n      _addSysTimedHandler: function _addSysTimedHandler(period, handler) {\n        var thand = new Strophe.TimedHandler(period, handler);\n        thand.user = false;\n        this.addTimeds.push(thand);\n        return thand;\n      },\n\n      /** PrivateFunction: _addSysHandler\n          *  _Private_ function to add a system level stanza handler.\n          *\n          *  This function is used to add a Strophe.Handler for the\n          *  library code.  System stanza handlers are allowed to run before\n          *  authentication is complete.\n          *\n          *  Parameters:\n          *    (Function) handler - The callback function.\n          *    (String) ns - The namespace to match.\n          *    (String) name - The stanza name to match.\n          *    (String) type - The stanza type attribute to match.\n          *    (String) id - The stanza id attribute to match.\n          */\n      _addSysHandler: function _addSysHandler(handler, ns, name, type, id) {\n        var hand = new Strophe.Handler(handler, ns, name, type, id);\n        hand.user = false;\n        this.addHandlers.push(hand);\n        return hand;\n      },\n\n      /** PrivateFunction: _onDisconnectTimeout\n          *  _Private_ timeout handler for handling non-graceful disconnection.\n          *\n          *  If the graceful disconnect process does not complete within the\n          *  time allotted, this handler finishes the disconnect anyway.\n          *\n          *  Returns:\n          *    false to remove the handler.\n          */\n      _onDisconnectTimeout: function _onDisconnectTimeout() {\n        Strophe.info(\"_onDisconnectTimeout was called\");\n        this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n        this._proto._onDisconnectTimeout();\n        // actually disconnect\n        this._doDisconnect();\n        return false;\n      },\n\n      /** PrivateFunction: _onIdle\n          *  _Private_ handler to process events during idle cycle.\n          *\n          *  This handler is called every 100ms to fire timed handlers that\n          *  are ready and keep poll requests going.\n          */\n      _onIdle: function _onIdle(fail) {\n        var i, thand, since, newList;\n\n        // add timed handlers scheduled for addition\n        // NOTE: we add before remove in the case a timed handler is\n        // added and then deleted before the next _onIdle() call.\n        while (this.addTimeds.length > 0) {\n          this.timedHandlers.push(this.addTimeds.pop());\n        }\n\n        // remove timed handlers that have been scheduled for deletion\n        while (this.removeTimeds.length > 0) {\n          thand = this.removeTimeds.pop();\n          i = this.timedHandlers.indexOf(thand);\n          if (i >= 0) {\n            this.timedHandlers.splice(i, 1);\n          }\n        }\n\n        // call ready timed handlers\n        var now = new Date().getTime();\n        newList = [];\n        for (i = 0; i < this.timedHandlers.length; i++) {\n          thand = this.timedHandlers[i];\n          if (this.authenticated || !thand.user) {\n            since = thand.lastCalled + thand.period;\n            if (since - now <= 0) {\n              if (thand.run()) {\n                newList.push(thand);\n              }\n            } else {\n              newList.push(thand);\n            }\n          }\n        }\n        this.timedHandlers = newList;\n\n        clearTimeout(this._idleTimeout);\n\n        this._proto._onIdle(fail);\n\n        // reactivate the timer only if connected\n        if (this.connected) {\n          // XXX: setTimeout should be called only with function expressions (23974bc1)\n          this._idleTimeout = setTimeout(function () {\n            this._onIdle(fail);\n          }.bind(this), 100);\n        }\n      } };\n\n\n    /** Class: Strophe.SASLMechanism\n            *\n            *  encapsulates SASL authentication mechanisms.\n            *\n            *  User code may override the priority for each mechanism or disable it completely.\n            *  See <priority> for information about changing priority and <test> for informatian on\n            *  how to disable a mechanism.\n            *\n            *  By default, all mechanisms are enabled and the priorities are\n            *\n            *  EXTERNAL - 60\n            *  OAUTHBEARER - 50\n            *  SCRAM-SHA1 - 40\n            *  DIGEST-MD5 - 30\n            *  PLAIN - 20\n            *  ANONYMOUS - 10\n            *\n            *  See: Strophe.Connection.addSupportedSASLMechanisms\n            */\n\n    /**\n                * PrivateConstructor: Strophe.SASLMechanism\n                * SASL auth mechanism abstraction.\n                *\n                *  Parameters:\n                *    (String) name - SASL Mechanism name.\n                *    (Boolean) isClientFirst - If client should send response first without challenge.\n                *    (Number) priority - Priority.\n                *\n                *  Returns:\n                *    A new Strophe.SASLMechanism object.\n                */\n    Strophe.SASLMechanism = function (name, isClientFirst, priority) {\n      /** PrivateVariable: name\n                                                                       *  Mechanism name.\n                                                                       */\n      this.name = name;\n      /** PrivateVariable: isClientFirst\n                         *  If client sends response without initial server challenge.\n                         */\n      this.isClientFirst = isClientFirst;\n      /** Variable: priority\n                                           *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n                                           *  Users may override this to prioritize mechanisms differently.\n                                           *\n                                           *  In the default configuration the priorities are\n                                           *\n                                           *  SCRAM-SHA1 - 40\n                                           *  DIGEST-MD5 - 30\n                                           *  Plain - 20\n                                           *\n                                           *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n                                           *\n                                           *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n                                           *\n                                           *  See <SASL mechanisms> for a list of available mechanisms.\n                                           *\n                                           */\n      this.priority = priority;\n    };\n\n    Strophe.SASLMechanism.prototype = {\n      /**\n                                         *  Function: test\n                                         *  Checks if mechanism able to run.\n                                         *  To disable a mechanism, make this return false;\n                                         *\n                                         *  To disable plain authentication run\n                                         *  > Strophe.SASLPlain.test = function() {\n                                        *  >   return false;\n                                        *  > }\n                                         *\n                                         *  See <SASL mechanisms> for a list of available mechanisms.\n                                         *\n                                         *  Parameters:\n                                         *    (Strophe.Connection) connection - Target Connection.\n                                         *\n                                         *  Returns:\n                                         *    (Boolean) If mechanism was able to run.\n                                         */\n      /* jshint unused:false */\n      test: function test(connection) {\n        return true;\n      },\n      /* jshint unused:true */\n\n      /** PrivateFunction: onStart\n                                *  Called before starting mechanism on some connection.\n                                *\n                                *  Parameters:\n                                *    (Strophe.Connection) connection - Target Connection.\n                                */\n      onStart: function onStart(connection) {\n        this._connection = connection;\n      },\n\n      /** PrivateFunction: onChallenge\n          *  Called by protocol implementation on incoming challenge. If client is\n          *  first (isClientFirst == true) challenge will be null on the first call.\n          *\n          *  Parameters:\n          *    (Strophe.Connection) connection - Target Connection.\n          *    (String) challenge - current challenge to handle.\n          *\n          *  Returns:\n          *    (String) Mechanism response.\n          */\n      /* jshint unused:false */\n      onChallenge: function onChallenge(connection, challenge) {\n        throw new Error(\"You should implement challenge handling!\");\n      },\n      /* jshint unused:true */\n\n      /** PrivateFunction: onFailure\n                                *  Protocol informs mechanism implementation about SASL failure.\n                                */\n      onFailure: function onFailure() {\n        this._connection = null;\n      },\n\n      /** PrivateFunction: onSuccess\n          *  Protocol informs mechanism implementation about SASL success.\n          */\n      onSuccess: function onSuccess() {\n        this._connection = null;\n      } };\n\n\n    /** Constants: SASL mechanisms\n            *  Available authentication mechanisms\n            *\n            *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n            *  Strophe.SASLPlain - SASL PLAIN authentication.\n            *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n            *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n            *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n            *  Strophe.SASLExternal - SASL EXTERNAL authentication\n            */\n\n    // Building SASL callbacks\n\n    /** PrivateConstructor: SASLAnonymous\n     *  SASL ANONYMOUS authentication.\n     */\n    Strophe.SASLAnonymous = function () {\n    };\n    Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 10);\n\n    Strophe.SASLAnonymous.prototype.test = function (connection) {\n      return connection.authcid === null;\n    };\n\n\n    /** PrivateConstructor: SASLPlain\n        *  SASL PLAIN authentication.\n        */\n    Strophe.SASLPlain = function () {\n    };\n    Strophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 20);\n\n    Strophe.SASLPlain.prototype.test = function (connection) {\n      return connection.authcid !== null;\n    };\n\n    Strophe.SASLPlain.prototype.onChallenge = function (connection) {\n      var auth_str = connection.authzid;\n      auth_str = auth_str + \"\\0\";\n      auth_str = auth_str + connection.authcid;\n      auth_str = auth_str + \"\\0\";\n      auth_str = auth_str + connection.pass;\n      return utils.utf16to8(auth_str);\n    };\n\n\n    /** PrivateConstructor: SASLSHA1\n        *  SASL SCRAM SHA 1 authentication.\n        */\n    Strophe.SASLSHA1 = function () {\n    };\n    Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 40);\n\n    Strophe.SASLSHA1.prototype.test = function (connection) {\n      return connection.authcid !== null;\n    };\n\n    Strophe.SASLSHA1.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n      var cnonce = test_cnonce || MD5.hexdigest(Math.random() * 1234567890);\n      var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n      auth_str += \",r=\";\n      auth_str += cnonce;\n      connection._sasl_data.cnonce = cnonce;\n      connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n\n      auth_str = \"n,,\" + auth_str;\n\n      this.onChallenge = function (connection, challenge) {\n        var nonce, salt, iter, Hi, U, U_old, i, k, pass;\n        var clientKey, serverKey, clientSignature;\n        var responseText = \"c=biws,\";\n        var authMessage = connection._sasl_data[\"client-first-message-bare\"] + \",\" +\n        challenge + \",\";\n        var cnonce = connection._sasl_data.cnonce;\n        var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n        while (challenge.match(attribMatch)) {\n          var matches = challenge.match(attribMatch);\n          challenge = challenge.replace(matches[0], \"\");\n          switch (matches[1]) {\n            case \"r\":\n              nonce = matches[2];\n              break;\n            case \"s\":\n              salt = matches[2];\n              break;\n            case \"i\":\n              iter = matches[2];\n              break;}\n\n        }\n\n        if (nonce.substr(0, cnonce.length) !== cnonce) {\n          connection._sasl_data = {};\n          return connection._sasl_failure_cb();\n        }\n\n        responseText += \"r=\" + nonce;\n        authMessage += responseText;\n\n        salt = Base64.decode(salt);\n        salt += \"\\x00\\x00\\x00\\x01\";\n\n        pass = utils.utf16to8(connection.pass);\n        Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n        for (i = 1; i < iter; i++) {\n          U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n          for (k = 0; k < 5; k++) {\n            Hi[k] ^= U[k];\n          }\n          U_old = U;\n        }\n        Hi = SHA1.binb2str(Hi);\n\n        clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n        serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n        clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n        connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n        for (k = 0; k < 5; k++) {\n          clientKey[k] ^= clientSignature[k];\n        }\n\n        responseText += \",p=\" + Base64.encode(SHA1.binb2str(clientKey));\n        return responseText;\n      }.bind(this);\n\n      return auth_str;\n    };\n\n\n    /** PrivateConstructor: SASLMD5\n        *  SASL DIGEST MD5 authentication.\n        */\n    Strophe.SASLMD5 = function () {\n    };\n    Strophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 30);\n\n    Strophe.SASLMD5.prototype.test = function (connection) {\n      return connection.authcid !== null;\n    };\n\n    /** PrivateFunction: _quote\n        *  _Private_ utility function to backslash escape and quote strings.\n        *\n        *  Parameters:\n        *    (String) str - The string to be quoted.\n        *\n        *  Returns:\n        *    quoted string\n        */\n    Strophe.SASLMD5.prototype._quote = function (str) {\n      return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"';\n      //\" end string workaround for emacs\n    };\n\n    Strophe.SASLMD5.prototype.onChallenge = function (connection, challenge, test_cnonce) {\n      var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n      var cnonce = test_cnonce || MD5.hexdigest(\"\" + Math.random() * 1234567890);\n      var realm = \"\";\n      var host = null;\n      var nonce = \"\";\n      var qop = \"\";\n      var matches;\n\n      while (challenge.match(attribMatch)) {\n        matches = challenge.match(attribMatch);\n        challenge = challenge.replace(matches[0], \"\");\n        matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n        switch (matches[1]) {\n          case \"realm\":\n            realm = matches[2];\n            break;\n          case \"nonce\":\n            nonce = matches[2];\n            break;\n          case \"qop\":\n            qop = matches[2];\n            break;\n          case \"host\":\n            host = matches[2];\n            break;}\n\n      }\n\n      var digest_uri = connection.servtype + \"/\" + connection.domain;\n      if (host !== null) {\n        digest_uri = digest_uri + \"/\" + host;\n      }\n\n      var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n      var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n      var A2 = 'AUTHENTICATE:' + digest_uri;\n\n      var responseText = \"\";\n      responseText += 'charset=utf-8,';\n      responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n      responseText += 'realm=' + this._quote(realm) + ',';\n      responseText += 'nonce=' + this._quote(nonce) + ',';\n      responseText += 'nc=00000001,';\n      responseText += 'cnonce=' + this._quote(cnonce) + ',';\n      responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n      responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" +\n      nonce + \":00000001:\" +\n      cnonce + \":auth:\" +\n      MD5.hexdigest(A2)) + \",\";\n      responseText += 'qop=auth';\n\n      this.onChallenge = function () {\n        return \"\";\n      };\n      return responseText;\n    };\n\n\n    /** PrivateConstructor: SASLOAuthBearer\n        *  SASL OAuth Bearer authentication.\n        */\n    Strophe.SASLOAuthBearer = function () {\n    };\n    Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 50);\n\n    Strophe.SASLOAuthBearer.prototype.test = function (connection) {\n      return connection.authcid !== null;\n    };\n\n    Strophe.SASLOAuthBearer.prototype.onChallenge = function (connection) {\n      var auth_str = 'n,a=';\n      auth_str = auth_str + connection.authzid;\n      auth_str = auth_str + ',';\n      auth_str = auth_str + \"\\x01\";\n      auth_str = auth_str + 'auth=Bearer ';\n      auth_str = auth_str + connection.pass;\n      auth_str = auth_str + \"\\x01\";\n      auth_str = auth_str + \"\\x01\";\n      return utils.utf16to8(auth_str);\n    };\n\n\n    /** PrivateConstructor: SASLExternal\n        *  SASL EXTERNAL authentication.\n        *\n        *  The EXTERNAL mechanism allows a client to request the server to use\n        *  credentials established by means external to the mechanism to\n        *  authenticate the client. The external means may be, for instance,\n        *  TLS services.\n        */\n    Strophe.SASLExternal = function () {\n    };\n    Strophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 60);\n\n    Strophe.SASLExternal.prototype.onChallenge = function (connection) {\n      /** According to XEP-178, an authzid SHOULD NOT be presented when the\n                                                                         * authcid contained or implied in the client certificate is the JID (i.e.\n                                                                         * authzid) with which the user wants to log in as.\n                                                                         *\n                                                                         * To NOT send the authzid, the user should therefore set the authcid equal\n                                                                         * to the JID when instantiating a new Strophe.Connection object.\n                                                                         */\n      return connection.authcid === connection.authzid ? '' : connection.authzid;\n    };\n\n    return {\n      Strophe: Strophe,\n      $build: $build,\n      $msg: $msg,\n      $iq: $iq,\n      $pres: $pres,\n      SHA1: SHA1,\n      Base64: Base64,\n      MD5: MD5 };\n\n  });\n\n\n  /*\n       This program is distributed under the terms of the MIT license.\n       Please see the LICENSE file for details.\n      \t Copyright 2006-2008, OGG, LLC\n       */\n\n\n  /* jshint undef: true, unused: true:, noarg: true, latedef: true */\n  /* global define, window, setTimeout, clearTimeout, XMLHttpRequest, ActiveXObject, Strophe, $build */\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_5__], __WEBPACK_LOCAL_MODULE_6__ = ((function (core) {\n        return factory(\n        core.Strophe,\n        core.$build);\n\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));\n    } else {}\n  })(this, function (Strophe, $build) {\n\n    /** PrivateClass: Strophe.Request\n                                        *  _Private_ helper class that provides a cross implementation abstraction\n                                        *  for a BOSH related XMLHttpRequest.\n                                        *\n                                        *  The Strophe.Request class is used internally to encapsulate BOSH request\n                                        *  information.  It is not meant to be used from user's code.\n                                        */\n\n    /** PrivateConstructor: Strophe.Request\n                                            *  Create and initialize a new Strophe.Request object.\n                                            *\n                                            *  Parameters:\n                                            *    (XMLElement) elem - The XML data to be sent in the request.\n                                            *    (Function) func - The function that will be called when the\n                                            *      XMLHttpRequest readyState changes.\n                                            *    (Integer) rid - The BOSH rid attribute associated with this request.\n                                            *    (Integer) sends - The number of times this same request has been sent.\n                                            */\n    Strophe.Request = function (elem, func, rid, sends) {\n      this.id = ++Strophe._requestId;\n      this.xmlData = elem;\n      this.data = Strophe.serialize(elem);\n      // save original function in case we need to make a new request\n      // from this one.\n      this.origFunc = func;\n      this.func = func;\n      this.rid = rid;\n      this.date = NaN;\n      this.sends = sends || 0;\n      this.abort = false;\n      this.dead = null;\n\n      this.age = function () {\n        if (!this.date) {\n          return 0;\n        }\n        var now = new Date();\n        return (now - this.date) / 1000;\n      };\n      this.timeDead = function () {\n        if (!this.dead) {\n          return 0;\n        }\n        var now = new Date();\n        return (now - this.dead) / 1000;\n      };\n      this.xhr = this._newXHR();\n    };\n\n    Strophe.Request.prototype = {\n      /** PrivateFunction: getResponse\n                                   *  Get a response from the underlying XMLHttpRequest.\n                                   *\n                                   *  This function attempts to get a response from the request and checks\n                                   *  for errors.\n                                   *\n                                   *  Throws:\n                                   *    \"parsererror\" - A parser error occured.\n                                   *    \"badformat\" - The entity has sent XML that cannot be processed.\n                                   *\n                                   *  Returns:\n                                   *    The DOM element tree of the response.\n                                   */\n      getResponse: function getResponse() {\n        var node = null;\n        if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n          node = this.xhr.responseXML.documentElement;\n          if (node.tagName == \"parsererror\") {\n            Strophe.error(\"invalid response received\");\n            Strophe.error(\"responseText: \" + this.xhr.responseText);\n            Strophe.error(\"responseXML: \" +\n            Strophe.serialize(this.xhr.responseXML));\n            throw \"parsererror\";\n          }\n        } else if (this.xhr.responseText) {\n          Strophe.error(\"invalid response received\");\n          Strophe.error(\"responseText: \" + this.xhr.responseText);\n          throw \"badformat\";\n        }\n\n        return node;\n      },\n\n      /** PrivateFunction: _newXHR\n          *  _Private_ helper function to create XMLHttpRequests.\n          *\n          *  This function creates XMLHttpRequests across all implementations.\n          *\n          *  Returns:\n          *    A new XMLHttpRequest.\n          */\n      _newXHR: function _newXHR() {\n        var xhr = null;\n        if (window.XMLHttpRequest) {\n          xhr = new XMLHttpRequest();\n          if (xhr.overrideMimeType) {\n            xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n          }\n        } else if (window.ActiveXObject) {\n          xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        // use Function.bind() to prepend ourselves as an argument\n        xhr.onreadystatechange = this.func.bind(null, this);\n        return xhr;\n      } };\n\n\n    /** Class: Strophe.Bosh\n            *  _Private_ helper class that handles BOSH Connections\n            *\n            *  The Strophe.Bosh class is used internally by Strophe.Connection\n            *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n            */\n\n    /** File: bosh.js\n                *  A JavaScript library to enable BOSH in Strophejs.\n                *\n                *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n                *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n                *  More information on BOSH can be found in XEP 124.\n                */\n\n    /** PrivateConstructor: Strophe.Bosh\n                    *  Create and initialize a Strophe.Bosh object.\n                    *\n                    *  Parameters:\n                    *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n                    *\n                    *  Returns:\n                    *    A new Strophe.Bosh object.\n                    */\n    Strophe.Bosh = function (connection) {\n      this._conn = connection;\n      /* request id for body tags */\n      this.rid = Math.floor(Math.random() * 4294967295);\n      /* The current session ID. */\n      this.sid = null;\n\n      // default BOSH values\n      this.hold = 1;\n      this.wait = 60;\n      this.window = 5;\n      this.errors = 0;\n\n      this._requests = [];\n    };\n\n    Strophe.Bosh.prototype = {\n      /** Variable: strip\n                                *\n                                *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n                                *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n                                *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n                                *\n                                *  > Strophe.Bosh.prototype.strip = \"body\";\n                                *\n                                *  This will enable stripping of the body tag in both\n                                *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n                                */\n      strip: null,\n\n      /** PrivateFunction: _buildBody\n                    *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n                    *\n                    *  Returns:\n                    *    A Strophe.Builder with a <body/> element.\n                    */\n      _buildBody: function _buildBody() {\n        var bodyWrap = $build('body', {\n          rid: this.rid++,\n          xmlns: Strophe.NS.HTTPBIND });\n\n        if (this.sid !== null) {\n          bodyWrap.attrs({ sid: this.sid });\n        }\n        if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n          this._cacheSession();\n        }\n        return bodyWrap;\n      },\n\n      /** PrivateFunction: _reset\n          *  Reset the connection.\n          *\n          *  This function is called by the reset function of the Strophe Connection\n          */\n      _reset: function _reset() {\n        this.rid = Math.floor(Math.random() * 4294967295);\n        this.sid = null;\n        this.errors = 0;\n        if (this._conn._sessionCachingSupported()) {\n          window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n      },\n\n      /** PrivateFunction: _connect\n          *  _Private_ function that initializes the BOSH connection.\n          *\n          *  Creates and sends the Request that initializes the BOSH connection.\n          */\n      _connect: function _connect(wait, hold, route) {\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.errors = 0;\n\n        // build the body tag\n        var body = this._buildBody().attrs({\n          to: this._conn.domain,\n          \"xml:lang\": \"en\",\n          wait: this.wait,\n          hold: this.hold,\n          content: \"text/xml; charset=utf-8\",\n          ver: \"1.6\",\n          \"xmpp:version\": \"1.0\",\n          \"xmlns:xmpp\": Strophe.NS.BOSH });\n\n\n        if (route) {\n          body.attrs({\n            route: route });\n\n        }\n\n        var _connect_cb = this._conn._connect_cb;\n\n        this._requests.push(\n        new Strophe.Request(body.tree(),\n        this._onRequestStateChange.bind(\n        this, _connect_cb.bind(this._conn)),\n        body.tree().getAttribute(\"rid\")));\n        this._throttledRequestHandler();\n      },\n\n      /** PrivateFunction: _attach\n          *  Attach to an already created and authenticated BOSH session.\n          *\n          *  This function is provided to allow Strophe to attach to BOSH\n          *  sessions which have been created externally, perhaps by a Web\n          *  application.  This is often used to support auto-login type features\n          *  without putting user credentials into the page.\n          *\n          *  Parameters:\n          *    (String) jid - The full JID that is bound by the session.\n          *    (String) sid - The SID of the BOSH session.\n          *    (String) rid - The current RID of the BOSH session.  This RID\n          *      will be used by the next request.\n          *    (Function) callback The connect callback function.\n          *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n          *      time the server will wait before returning an empty result for\n          *      a request.  The default setting of 60 seconds is recommended.\n          *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n          *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n          *      number of connections the server will hold at one time.  This\n          *      should almost always be set to 1 (the default).\n          *    (Integer) wind - The optional HTTBIND window value.  This is the\n          *      allowed range of request ids that are valid.  The default is 5.\n          */\n      _attach: function _attach(jid, sid, rid, callback, wait, hold, wind) {\n        this._conn.jid = jid;\n        this.sid = sid;\n        this.rid = rid;\n\n        this._conn.connect_callback = callback;\n\n        this._conn.domain = Strophe.getDomainFromJid(this._conn.jid);\n\n        this._conn.authenticated = true;\n        this._conn.connected = true;\n\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.window = wind || this.window;\n\n        this._conn._changeConnectStatus(Strophe.Status.ATTACHED, null);\n      },\n\n      /** PrivateFunction: _restore\n          *  Attempt to restore a cached BOSH session\n          *\n          *  Parameters:\n          *    (String) jid - The full JID that is bound by the session.\n          *      This parameter is optional but recommended, specifically in cases\n          *      where prebinded BOSH sessions are used where it's important to know\n          *      that the right session is being restored.\n          *    (Function) callback The connect callback function.\n          *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n          *      time the server will wait before returning an empty result for\n          *      a request.  The default setting of 60 seconds is recommended.\n          *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n          *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n          *      number of connections the server will hold at one time.  This\n          *      should almost always be set to 1 (the default).\n          *    (Integer) wind - The optional HTTBIND window value.  This is the\n          *      allowed range of request ids that are valid.  The default is 5.\n          */\n      _restore: function _restore(jid, callback, wait, hold, wind) {\n        var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n        if (typeof session !== \"undefined\" &&\n        session !== null &&\n        session.rid &&\n        session.sid &&\n        session.jid && (\n        typeof jid === \"undefined\" || jid === null || Strophe.getBareJidFromJid(session.jid) == Strophe.getBareJidFromJid(jid))) {\n          this._conn.restored = true;\n          this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n        } else {\n          throw { name: \"StropheSessionError\", message: \"_restore: no restoreable session.\" };\n        }\n      },\n\n      /** PrivateFunction: _cacheSession\n          *  _Private_ handler for the beforeunload event.\n          *\n          *  This handler is used to process the Bosh-part of the initial request.\n          *  Parameters:\n          *    (Strophe.Request) bodyWrap - The received stanza.\n          */\n      _cacheSession: function _cacheSession() {\n        if (this._conn.authenticated) {\n          if (this._conn.jid && this.rid && this.sid) {\n            window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n              'jid': this._conn.jid,\n              'rid': this.rid,\n              'sid': this.sid }));\n\n          }\n        } else {\n          window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n      },\n\n      /** PrivateFunction: _connect_cb\n          *  _Private_ handler for initial connection request.\n          *\n          *  This handler is used to process the Bosh-part of the initial request.\n          *  Parameters:\n          *    (Strophe.Request) bodyWrap - The received stanza.\n          */\n      _connect_cb: function _connect_cb(bodyWrap) {\n        var typ = bodyWrap.getAttribute(\"type\");\n        var cond, conflict;\n        if (typ !== null && typ == \"terminate\") {\n          // an error occurred\n          cond = bodyWrap.getAttribute(\"condition\");\n          Strophe.error(\"BOSH-Connection failed: \" + cond);\n          conflict = bodyWrap.getElementsByTagName(\"conflict\");\n          if (cond !== null) {\n            if (cond == \"remote-stream-error\" && conflict.length > 0) {\n              cond = \"conflict\";\n            }\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n          } else {\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"unknown\");\n          }\n          this._conn._doDisconnect(cond);\n          return Strophe.Status.CONNFAIL;\n        }\n\n        // check to make sure we don't overwrite these if _connect_cb is\n        // called multiple times in the case of missing stream:features\n        if (!this.sid) {\n          this.sid = bodyWrap.getAttribute(\"sid\");\n        }\n        var wind = bodyWrap.getAttribute('requests');\n        if (wind) {\n          this.window = parseInt(wind, 10);\n        }\n        var hold = bodyWrap.getAttribute('hold');\n        if (hold) {\n          this.hold = parseInt(hold, 10);\n        }\n        var wait = bodyWrap.getAttribute('wait');\n        if (wait) {\n          this.wait = parseInt(wait, 10);\n        }\n      },\n\n      /** PrivateFunction: _disconnect\n          *  _Private_ part of Connection.disconnect for Bosh\n          *\n          *  Parameters:\n          *    (Request) pres - This stanza will be sent before disconnecting.\n          */\n      _disconnect: function _disconnect(pres) {\n        this._sendTerminate(pres);\n      },\n\n      /** PrivateFunction: _doDisconnect\n          *  _Private_ function to disconnect.\n          *\n          *  Resets the SID and RID.\n          */\n      _doDisconnect: function _doDisconnect() {\n        this.sid = null;\n        this.rid = Math.floor(Math.random() * 4294967295);\n        if (this._conn._sessionCachingSupported()) {\n          window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n      },\n\n      /** PrivateFunction: _emptyQueue\n          * _Private_ function to check if the Request queue is empty.\n          *\n          *  Returns:\n          *    True, if there are no Requests queued, False otherwise.\n          */\n      _emptyQueue: function _emptyQueue() {\n        return this._requests.length === 0;\n      },\n\n      /** PrivateFunction: _callProtocolErrorHandlers\n          *  _Private_ function to call error handlers registered for HTTP errors.\n          *\n          *  Parameters:\n          *    (Strophe.Request) req - The request that is changing readyState.\n          */\n      _callProtocolErrorHandlers: function _callProtocolErrorHandlers(req) {\n        var reqStatus = this._getRequestStatus(req),\n        err_callback;\n        err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n        if (err_callback) {\n          err_callback.call(this, reqStatus);\n        }\n      },\n\n      /** PrivateFunction: _hitError\n          *  _Private_ function to handle the error count.\n          *\n          *  Requests are resent automatically until their error count reaches\n          *  5.  Each time an error is encountered, this function is called to\n          *  increment the count and disconnect if the count is too high.\n          *\n          *  Parameters:\n          *    (Integer) reqStatus - The request status.\n          */\n      _hitError: function _hitError(reqStatus) {\n        this.errors++;\n        Strophe.warn(\"request errored, status: \" + reqStatus +\n        \", number of errors: \" + this.errors);\n        if (this.errors > 4) {\n          this._conn._onDisconnectTimeout();\n        }\n      },\n\n      /** PrivateFunction: _no_auth_received\n          *\n          * Called on stream start/restart when no stream:features\n          * has been received and sends a blank poll request.\n          */\n      _no_auth_received: function _no_auth_received(_callback) {\n        //console.log('_no_auth_received')\n\n        if (_callback) {\n          _callback = _callback.bind(this._conn);\n        } else {\n          _callback = this._conn._connect_cb.bind(this._conn);\n        }\n        var body = this._buildBody();\n        this._requests.push(\n        new Strophe.Request(body.tree(),\n        this._onRequestStateChange.bind(\n        this, _callback.bind(this._conn)),\n        body.tree().getAttribute(\"rid\")));\n        //console.log(this._requests)\n        this._throttledRequestHandler();\n      },\n\n      /** PrivateFunction: _onDisconnectTimeout\n          *  _Private_ timeout handler for handling non-graceful disconnection.\n          *\n          *  Cancels all remaining Requests and clears the queue.\n          */\n      _onDisconnectTimeout: function _onDisconnectTimeout() {\n        this._abortAllRequests();\n      },\n\n      /** PrivateFunction: _abortAllRequests\n          *  _Private_ helper function that makes sure all pending requests are aborted.\n          */\n      _abortAllRequests: function _abortAllRequests() {\n        var req;\n        while (this._requests.length > 0) {\n          req = this._requests.pop();\n          req.abort = true;\n          req.xhr.abort();\n          // jslint complains, but this is fine. setting to empty func\n          // is necessary for IE6\n          req.xhr.onreadystatechange = function () {\n          }; // jshint ignore:line\n        }\n      },\n\n      /** PrivateFunction: _onIdle\n          *  _Private_ handler called by Strophe.Connection._onIdle\n          *\n          *  Sends all queued Requests or polls with empty Request if there are none.\n          */\n      _onIdle: function _onIdle() {\n        var data = this._conn._data;\n        // if no requests are in progress, poll\n        if (this._conn.authenticated && this._requests.length === 0 &&\n        data.length === 0 && !this._conn.disconnecting) {\n          Strophe.info(\"no requests during idle cycle, sending \" +\n          \"blank request\");\n          data.push(null);\n        }\n\n        if (this._conn.paused) {\n          return;\n        }\n\n        if (this._requests.length < 2 && data.length > 0) {\n          var body = this._buildBody();\n          for (var i = 0; i < data.length; i++) {\n            if (data[i] !== null) {\n              if (data[i] === \"restart\") {\n                body.attrs({\n                  to: this._conn.domain,\n                  \"xml:lang\": \"en\",\n                  \"xmpp:restart\": \"true\",\n                  \"xmlns:xmpp\": Strophe.NS.BOSH });\n\n              } else {\n                body.cnode(data[i]).up();\n              }\n            }\n          }\n          delete this._conn._data;\n          this._conn._data = [];\n          this._requests.push(\n          new Strophe.Request(body.tree(),\n          this._onRequestStateChange.bind(\n          this, this._conn._dataRecv.bind(this._conn)),\n          body.tree().getAttribute(\"rid\")));\n          this._throttledRequestHandler();\n        }\n\n        if (this._requests.length > 0) {\n          var time_elapsed = this._requests[0].age();\n          if (this._requests[0].dead !== null) {\n            if (this._requests[0].timeDead() >\n            Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n              this._throttledRequestHandler();\n            }\n          }\n\n          if (time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait)) {\n            Strophe.warn(\"Request \" +\n            this._requests[0].id +\n            \" timed out, over \" + Math.floor(Strophe.TIMEOUT * this.wait) +\n            \" seconds since last activity\");\n            this._throttledRequestHandler();\n          }\n        }\n      },\n\n      /** PrivateFunction: _getRequestStatus\n          *\n          *  Returns the HTTP status code from a Strophe.Request\n          *\n          *  Parameters:\n          *    (Strophe.Request) req - The Strophe.Request instance.\n          *    (Integer) def - The default value that should be returned if no\n          *          status value was found.\n          */\n      _getRequestStatus: function _getRequestStatus(req, def) {\n        var reqStatus;\n        if (req.xhr.readyState == 4) {\n          try {\n            reqStatus = req.xhr.status;\n          } catch (e) {\n            // ignore errors from undefined status attribute. Works\n            // around a browser bug\n            Strophe.error(\n            \"Caught an error while retrieving a request's status, \" +\n            \"reqStatus: \" + reqStatus);\n          }\n        }\n        if (typeof reqStatus == \"undefined\") {\n          reqStatus = typeof def === 'number' ? def : 0;\n        }\n        return reqStatus;\n      },\n\n      /** PrivateFunction: _onRequestStateChange\n          *  _Private_ handler for Strophe.Request state changes.\n          *\n          *  This function is called when the XMLHttpRequest readyState changes.\n          *  It contains a lot of error handling logic for the many ways that\n          *  requests can fail, and calls the request callback when requests\n          *  succeed.\n          *\n          *  Parameters:\n          *    (Function) func - The handler for the request.\n          *    (Strophe.Request) req - The request that is changing readyState.\n          */\n      _onRequestStateChange: function _onRequestStateChange(func, req) {\n        Strophe.debug(\"request id \" + req.id + \".\" + req.sends +\n        \" state changed to \" + req.xhr.readyState);\n        if (req.abort) {\n          req.abort = false;\n          return;\n        }\n        if (req.xhr.readyState !== 4) {\n          // The request is not yet complete\n          return;\n        }\n        var reqStatus = this._getRequestStatus(req);\n        if (this.disconnecting && reqStatus >= 400) {\n          this._hitError(reqStatus);\n          this._callProtocolErrorHandlers(req);\n          return;\n        }\n\n        if (reqStatus > 0 && reqStatus < 500 || req.sends > 5) {\n          // remove from internal queue\n          this._removeRequest(req);\n          Strophe.debug(\"request id \" + req.id + \" should now be removed\");\n        }\n\n        if (reqStatus == 200) {\n          // request succeeded\n          var reqIs0 = this._requests[0] == req;\n          var reqIs1 = this._requests[1] == req;\n          // if request 1 finished, or request 0 finished and request\n          // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n          // restart the other - both will be in the first spot, as the\n          // completed request has been removed from the queue already\n          if (reqIs1 ||\n          reqIs0 && this._requests.length > 0 &&\n          this._requests[0].age() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n            this._restartRequest(0);\n          }\n          this._conn.nextValidRid(Number(req.rid) + 1);\n          Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" got 200\");\n          func(req); // call handler\n          this.errors = 0;\n        } else if (reqStatus === 0 ||\n        reqStatus >= 400 && reqStatus < 600 ||\n        reqStatus >= 12000) {\n          // request failed\n          Strophe.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n          this._hitError(reqStatus);\n          this._callProtocolErrorHandlers(req);\n          if (reqStatus >= 400 && reqStatus < 500) {\n            this._conn._changeConnectStatus(Strophe.Status.DISCONNECTING, null);\n            this._conn._doDisconnect();\n          }\n        } else {\n          Strophe.error(\"request id \" + req.id + \".\" + req.sends + \" error \" + reqStatus + \" happened\");\n        }\n        if (!(reqStatus > 0 && reqStatus < 500) || req.sends > 5) {\n          this._throttledRequestHandler();\n        }\n      },\n\n      /** PrivateFunction: _processRequest\n          *  _Private_ function to process a request in the queue.\n          *\n          *  This function takes requests off the queue and sends them and\n          *  restarts dead requests.\n          *\n          *  Parameters:\n          *    (Integer) i - The index of the request in the queue.\n          */\n      _processRequest: function _processRequest(i) {\n        var self = this;\n        var req = this._requests[i];\n        var reqStatus = this._getRequestStatus(req, -1);\n\n        // make sure we limit the number of retries\n        if (req.sends > this._conn.maxRetries) {\n          this._conn._onDisconnectTimeout();\n          return;\n        }\n\n        var time_elapsed = req.age();\n        var primaryTimeout = !isNaN(time_elapsed) &&\n        time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait);\n        var secondaryTimeout = req.dead !== null &&\n        req.timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait);\n        var requestCompletedWithServerError = req.xhr.readyState == 4 && (\n        reqStatus < 1 || reqStatus >= 500);\n        if (primaryTimeout || secondaryTimeout ||\n        requestCompletedWithServerError) {\n          if (secondaryTimeout) {\n            Strophe.error(\"Request \" + this._requests[i].id +\n            \" timed out (secondary), restarting\");\n          }\n          req.abort = true;\n          req.xhr.abort();\n          // setting to null fails on IE6, so set to empty function\n          req.xhr.onreadystatechange = function () {\n          };\n          this._requests[i] = new Strophe.Request(req.xmlData,\n          req.origFunc,\n          req.rid,\n          req.sends);\n          req = this._requests[i];\n        }\n\n        if (req.xhr.readyState === 0) {\n          Strophe.debug(\"request id \" + req.id + \".\" + req.sends + \" posting\");\n\n          try {\n            var contentType = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n            req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n            if (typeof req.xhr.setRequestHeader !== 'undefined') {\n              // IE9 doesn't have setRequestHeader\n              req.xhr.setRequestHeader(\"Content-Type\", contentType);\n            }\n            if (this._conn.options.withCredentials) {\n              req.xhr.withCredentials = true;\n            }\n          } catch (e2) {\n            Strophe.error(\"XHR open failed.\");\n            if (!this._conn.connected) {\n              this._conn._changeConnectStatus(\n              Strophe.Status.CONNFAIL, \"bad-service\");\n            }\n            this._conn.disconnect();\n            return;\n          }\n\n          // Fires the XHR request -- may be invoked immediately\n          // or on a gradually expanding retry window for reconnects\n          var sendFunc = function sendFunc() {\n            req.date = new Date();\n            if (self._conn.options.customHeaders) {\n              var headers = self._conn.options.customHeaders;\n              for (var header in headers) {\n                if (headers.hasOwnProperty(header)) {\n                  req.xhr.setRequestHeader(header, headers[header]);\n                }\n              }\n            }\n            req.xhr.send(req.data);\n          };\n\n          // Implement progressive backoff for reconnects --\n          // First retry (send == 1) should also be instantaneous\n          if (req.sends > 1) {\n            // Using a cube of the retry number creates a nicely\n            // expanding retry window\n            var backoff = Math.min(Math.floor(Strophe.TIMEOUT * this.wait),\n            Math.pow(req.sends, 3)) * 1000;\n            setTimeout(function () {\n              // XXX: setTimeout should be called only with function expressions (23974bc1)\n              sendFunc();\n            }, backoff);\n          } else {\n            sendFunc();\n          }\n\n          req.sends++;\n\n          if (this._conn.xmlOutput !== Strophe.Connection.prototype.xmlOutput) {\n            if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n              this._conn.xmlOutput(req.xmlData.childNodes[0]);\n            } else {\n              this._conn.xmlOutput(req.xmlData);\n            }\n          }\n          if (this._conn.rawOutput !== Strophe.Connection.prototype.rawOutput) {\n            this._conn.rawOutput(req.data);\n          }\n        } else {\n          Strophe.debug(\"_processRequest: \" + (\n          i === 0 ? \"first\" : \"second\") +\n          \" request has readyState of \" +\n          req.xhr.readyState);\n        }\n      },\n\n      /** PrivateFunction: _removeRequest\n          *  _Private_ function to remove a request from the queue.\n          *\n          *  Parameters:\n          *    (Strophe.Request) req - The request to remove.\n          */\n      _removeRequest: function _removeRequest(req) {\n        Strophe.debug(\"removing request\");\n        var i;\n        for (i = this._requests.length - 1; i >= 0; i--) {\n          if (req == this._requests[i]) {\n            this._requests.splice(i, 1);\n          }\n        }\n        // IE6 fails on setting to null, so set to empty function\n        req.xhr.onreadystatechange = function () {\n        };\n        this._throttledRequestHandler();\n      },\n\n      /** PrivateFunction: _restartRequest\n          *  _Private_ function to restart a request that is presumed dead.\n          *\n          *  Parameters:\n          *    (Integer) i - The index of the request in the queue.\n          */\n      _restartRequest: function _restartRequest(i) {\n        var req = this._requests[i];\n        if (req.dead === null) {\n          req.dead = new Date();\n        }\n\n        this._processRequest(i);\n      },\n\n      /** PrivateFunction: _reqToData\n          * _Private_ function to get a stanza out of a request.\n          *\n          * Tries to extract a stanza out of a Request Object.\n          * When this fails the current connection will be disconnected.\n          *\n          *  Parameters:\n          *    (Object) req - The Request.\n          *\n          *  Returns:\n          *    The stanza that was passed.\n          */\n      _reqToData: function _reqToData(req) {\n        try {\n          return req.getResponse();\n        } catch (e) {\n          if (e != \"parsererror\") {\n            throw e;\n          }\n          this._conn.disconnect(\"strophe-parsererror\");\n        }\n      },\n\n      /** PrivateFunction: _sendTerminate\n          *  _Private_ function to send initial disconnect sequence.\n          *\n          *  This is the first step in a graceful disconnect.  It sends\n          *  the BOSH server a terminate body and includes an unavailable\n          *  presence if authentication has completed.\n          */\n      _sendTerminate: function _sendTerminate(pres) {\n        Strophe.info(\"_sendTerminate was called\");\n        var body = this._buildBody().attrs({ type: \"terminate\" });\n        if (pres) {\n          body.cnode(pres.tree());\n        }\n        var req = new Strophe.Request(\n        body.tree(),\n        this._onRequestStateChange.bind(\n        this, this._conn._dataRecv.bind(this._conn)),\n        body.tree().getAttribute(\"rid\"));\n\n        this._requests.push(req);\n        this._throttledRequestHandler();\n      },\n\n      /** PrivateFunction: _send\n          *  _Private_ part of the Connection.send function for BOSH\n          *\n          * Just triggers the RequestHandler to send the messages that are in the queue\n          */\n      _send: function _send(fail) {\n        clearTimeout(this._conn._idleTimeout);\n        this._throttledRequestHandler();\n\n        // XXX: setTimeout should be called only with function expressions (23974bc1)\n        this._conn._idleTimeout = setTimeout(function () {\n          this._onIdle(fail);\n        }.bind(this._conn), 100);\n      },\n\n      /** PrivateFunction: _sendRestart\n          *\n          *  Send an xmpp:restart stanza.\n          */\n      _sendRestart: function _sendRestart() {\n        this._throttledRequestHandler();\n        clearTimeout(this._conn._idleTimeout);\n      },\n\n      /** PrivateFunction: _throttledRequestHandler\n          *  _Private_ function to throttle requests to the connection window.\n          *\n          *  This function makes sure we don't send requests so fast that the\n          *  request ids overflow the connection window in the case that one\n          *  request died.\n          */\n      _throttledRequestHandler: function _throttledRequestHandler() {\n        if (!this._requests) {\n          Strophe.debug(\"_throttledRequestHandler called with \" +\n          \"undefined requests\");\n        } else {\n          Strophe.debug(\"_throttledRequestHandler called with \" +\n          this._requests.length + \" requests\");\n        }\n\n        if (!this._requests || this._requests.length === 0) {\n          return;\n        }\n\n        if (this._requests.length > 0) {\n          this._processRequest(0);\n        }\n\n        if (this._requests.length > 1 &&\n        Math.abs(this._requests[0].rid -\n        this._requests[1].rid) < this.window) {\n          this._processRequest(1);\n        }\n      } };\n\n    return Strophe;\n  });\n\n  /*\n       This program is distributed under the terms of the MIT license.\n       Please see the LICENSE file for details.\n      \t Copyright 2006-2008, OGG, LLC\n       */\n\n\n  /* jshint undef: true, unused: true:, noarg: true, latedef: true */\n  /* global define, window, clearTimeout, WebSocket, DOMParser, Strophe, $build */\n\n  (function (root, factory) {\n    if (true) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_5__], __WEBPACK_LOCAL_MODULE_7__ = ((function (core) {\n        return factory(\n        core.Strophe,\n        core.$build);\n\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)));\n    } else {}\n  })(this, function (Strophe, $build) {\n    //console.log(Strophe)\n    var _socketTask = undefined;\n    /** Class: Strophe.WebSocket\n                                  *  _Private_ helper class that handles WebSocket Connections\n                                  *\n                                  *  The Strophe.WebSocket class is used internally by Strophe.Connection\n                                  *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n                                  */\n\n    /** File: websocket.js\n                                      *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n                                      *\n                                      *  This file implements XMPP over WebSockets for Strophejs.\n                                      *  If a Connection is established with a Websocket url (ws://...)\n                                      *  Strophe will use WebSockets.\n                                      *  For more information on XMPP-over-WebSocket see RFC 7395:\n                                      *  http://tools.ietf.org/html/rfc7395\n                                      *\n                                      *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n                                      */\n\n    /** PrivateConstructor: Strophe.Websocket\n                                          *  Create and initialize a Strophe.WebSocket object.\n                                          *  Currently only sets the connection Object.\n                                          *\n                                          *  Parameters:\n                                          *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n                                          *\n                                          *  Returns:\n                                          *    A new Strophe.WebSocket object.\n                                          */\n    Strophe.Websocket = function (connection) {\n      //console.log(connection)\n      this._conn = connection;\n      this.strip = \"wrapper\";\n\n      var service = connection.service; //\"wss://im-api.sandbox.easemob.com/ws/\"\n      if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n        // If the service is not an absolute URL, assume it is a path and put the absolute\n        // URL together from options, current URL and the path.\n        var new_service = \"\";\n\n        if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n          new_service += \"ws\";\n        } else {\n          new_service += \"wss\";\n        }\n\n        new_service += \"://\" + window.location.host;\n\n        if (service.indexOf(\"/\") !== 0) {\n          new_service += window.location.pathname + service;\n        } else {\n          new_service += service;\n        }\n\n        connection.service = new_service;\n      }\n    };\n\n    Strophe.Websocket.prototype = {\n      /** PrivateFunction: _buildStream\n                                     *  _Private_ helper function to generate the <stream> start tag for WebSockets\n                                     *\n                                     *  Returns:\n                                     *    A Strophe.Builder with a <stream> element.\n                                     */\n      _buildStream: function _buildStream() {\n        return $build(\"open\", {\n          \"xmlns\": Strophe.NS.FRAMING,\n          \"to\": this._conn.domain,\n          \"version\": '1.0' });\n\n      },\n\n      /** PrivateFunction: _check_streamerror\n          * _Private_ checks a message for stream:error\n          *\n          *  Parameters:\n          *    (Strophe.Request) bodyWrap - The received stanza.\n          *    connectstatus - The ConnectStatus that will be set on error.\n          *  Returns:\n          *     true if there was a streamerror, false otherwise.\n          */\n      _check_streamerror: function _check_streamerror(bodyWrap, connectstatus) {\n        var errors;\n        if (bodyWrap.getElementsByTagNameNS) {\n          errors = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"error\");\n        } else {\n          errors = bodyWrap.getElementsByTagName(\"stream:error\");\n        }\n        if (errors.length === 0) {\n          return false;\n        }\n        var error = errors[0];\n\n        var condition = \"\";\n        var text = \"\";\n\n        var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n        for (var i = 0; i < error.childNodes.length; i++) {\n          var e = error.childNodes[i];\n          if (e.getAttribute(\"xmlns\") !== ns) {\n            break;\n          }\n          if (e.nodeName === \"text\") {\n            text = e.textContent;\n          } else {\n            condition = e.nodeName;\n          }\n        }\n\n        var errorString = \"WebSocket stream error: \";\n\n        if (condition) {\n          errorString += condition;\n        } else {\n          errorString += \"unknown\";\n        }\n\n        if (text) {\n          errorString += \" - \" + condition;\n        }\n\n        Strophe.error(errorString);\n\n        // close the connection on stream_error\n        this._conn._changeConnectStatus(connectstatus, condition);\n        this._conn._doDisconnect();\n        return true;\n      },\n\n      /** PrivateFunction: _reset\n          *  Reset the connection.\n          *\n          *  This function is called by the reset function of the Strophe Connection.\n          *  Is not needed by WebSockets.\n          */\n      _reset: function _reset() {\n        return;\n      },\n\n      /** PrivateFunction: _connect\n          *  _Private_ function called by Strophe.Connection.connect\n          *\n          *  Creates a WebSocket for a connection and assigns Callbacks to it.\n          *  Does nothing if there already is a WebSocket.\n          */\n\n      _connect: function _connect() {\n        // Ensure that there is no open WebSocket from a previous Connection.\n        // Create the new WobSocket\n        var isAndroid = false;\n        var res = wx.getSystemInfoSync();\n        if (res.platform == \"devtools\") {\n          isAndroid = false;\n        } else if (res.platform == \"ios\") {\n          isAndroid = false;\n        } else if (res.platform == \"android\") {\n          isAndroid = true;\n        }\n\n        var me = this;\n        this.socket = {\n          onopen: this._onOpen,\n          onmessage: this._connect_cb_wrapper,\n          onerror: this._onError,\n          onclose: this._onClose,\n          send: function send(str) {\n            wx.sendSocketMessage({ data: str });\n          } };\n\n\n        function creatSocket() {\n          if (_socketTask) {\n            __f__(\"log\", '有sockettask了。。。', \" at webIM\\\\sdk\\\\libs\\\\strophe.js:5579\");\n            _socketTask.close();\n            _socketTask = undefined;\n          }\n\n          setTimeout(function () {\n            var SocketTask = wx.connectSocket({\n              url: me._conn.service,\n              fail: function fail(e) {\n                __f__(\"log\", '连接失败', e, \" at webIM\\\\sdk\\\\libs\\\\strophe.js:5588\");\n                //部分机型从后台切回前台状态有延迟\n                if (e.errMsg.indexOf('suspend') != -1) {\n                  creatSocket();\n                }\n              },\n              success: function success(e) {\n                __f__(\"log\", '连接成功', e, \" at webIM\\\\sdk\\\\libs\\\\strophe.js:5595\");\n              } });\n\n            _socketTask = SocketTask;\n\n            _socketTask.onOpen(function (res) {\n              __f__(\"log\", \"WebSocket 连接已打开！\", \" at webIM\\\\sdk\\\\libs\\\\strophe.js:5601\");\n              isSocketConnnected = true;\n              // wx.sendSocketMessage({\n              //     data: \"Hello,World:\"\n              // });\n              me.socket.onopen.call(me);\n            });\n            _socketTask.onMessage(function (msg) {\n              //console.log(\"onSocketMessage\", msg, JSON.stringify(msg));\n              me.socket.onmessage.call(me, msg);\n            });\n            _socketTask.onClose(function (e) {\n              __f__(\"log\", \"WebSocket 连接已经关闭！\", \" at webIM\\\\sdk\\\\libs\\\\strophe.js:5613\");\n              isSocketConnnected = false;\n              me._conn.connected = true;\n              me.socket.onclose.call(me);\n              // 外部回调，需要设计一个更合适的\n              me._onSocketClose && me._onSocketClose(e);\n              //me._conn._changeConnectStatus(Strophe.Status.DISCONNECTED, e);\n            });\n            _socketTask.onError(function (e) {\n              __f__(\"log\", '出错了 出错了', \" at webIM\\\\sdk\\\\libs\\\\strophe.js:5622\");\n\n              if (isAndroid) {\n                __f__(\"log\", '安卓', \" at webIM\\\\sdk\\\\libs\\\\strophe.js:5625\");\n                //这个是安卓操作系统\n                isSocketConnnected = false;\n                me._conn.connected = true;\n                me.socket.onclose.call(me);\n                // 外部回调，需要设计一个更合适的\n                me._onSocketClose && me._onSocketClose(e);\n              } else {\n                me.socket.onclose.call(me);\n              }\n\n            });\n\n          }, 1000);\n        }\n        creatSocket();\n\n      },\n\n      /** PrivateFunction: _connect_cb\n          *  _Private_ function called by Strophe.Connection._connect_cb\n          *\n          * checks for stream:error\n          *\n          *  Parameters:\n          *    (Strophe.Request) bodyWrap - The received stanza.\n          */\n      _connect_cb: function _connect_cb(bodyWrap) {\n        //console.log('connnect_cb', bodyWrap)\n        var error = this._check_streamerror(bodyWrap, Strophe.Status.CONNFAIL);\n        if (error) {\n          return Strophe.Status.CONNFAIL;\n        }\n      },\n\n      /** PrivateFunction: _handleStreamStart\n          * _Private_ function that checks the opening <open /> tag for errors.\n          *\n          * Disconnects if there is an error and returns false, true otherwise.\n          *\n          *  Parameters:\n          *    (Node) message - Stanza containing the <open /> tag.\n          */\n      _handleStreamStart: function _handleStreamStart(message) {\n        var error = false;\n\n        //console.log('_handleStreamStart', message, typeof message)\n\n        // Check for errors in the <open /> tag\n        var ns = message.getAttribute(\"xmlns\");\n        if (typeof ns !== \"string\") {\n          error = \"Missing xmlns in <open />\";\n        } else if (ns !== Strophe.NS.FRAMING) {\n          error = \"Wrong xmlns in <open />: \" + ns;\n        }\n\n        var ver = message.getAttribute(\"version\");\n        if (typeof ver !== \"string\") {\n          error = \"Missing version in <open />\";\n        } else if (ver !== \"1.0\") {\n          error = \"Wrong version in <open />: \" + ver;\n        }\n\n        if (error) {\n          this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, error);\n          this._conn._doDisconnect();\n          return false;\n        }\n\n        return true;\n      },\n\n      /** PrivateFunction: _connect_cb_wrapper\n          * _Private_ function that handles the first connection messages.\n          *\n          * On receiving an opening stream tag this callback replaces itself with the real\n          * message handler. On receiving a stream error the connection is terminated.\n          */\n      _connect_cb_wrapper: function _connect_cb_wrapper(message) {\n        //console.log('_connect_cb_wrapper inited')\n\n        if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n          //console.log('_connect_cb_wrapper open 2')\n\n          // Strip the XML Declaration, if there is one\n          var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n          //console.log('_connect_cb_wrapper open 3', data)\n\n          if (data === '') return;\n\n          //console.log(new DOMParser().parseFromString(data, \"text/xml\"))\n          //console.log('_connect_cb_wrapper open 3.1', data)\n\n          var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n          //console.log('_connect_cb_wrapper open 4', streamStart)\n          this._conn.xmlInput(streamStart);\n          this._conn.rawInput(message.data);\n\n          //_handleStreamSteart will check for XML errors and disconnect on error\n          //console.log('_handleStreamStart', streamStart)\n          if (this._handleStreamStart(streamStart)) {\n            //_connect_cb will check for stream:error and disconnect on error\n            //console.log('_connect_cb')\n            this._connect_cb(streamStart);\n          }\n        } else if (message.data.indexOf(\"<close \") === 0) {//'<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />') {\n          //console.log('_connect_cb_wrapper inited 3')\n          this._conn.rawInput(message.data);\n          this._conn.xmlInput(message);\n          var see_uri = message.getAttribute(\"see-other-uri\");\n          if (see_uri) {\n            this._conn._changeConnectStatus(Strophe.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n            this._conn.reset();\n            this._conn.service = see_uri;\n            this._connect();\n          } else {\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"Received closing stream\");\n            this._conn._doDisconnect();\n          }\n        } else {\n          //console.log('_connect_cb_wrapper inited 4')\n\n          var string = this._streamWrap(message.data);\n          //console.log('_connect_cb_wrapper inited 5')\n\n          var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n          //console.log('_connect_cb_wrapper inited 6')\n\n          this.socket.onmessage = this._onMessage.bind(this);\n          //console.log('_connect_cb_wrapper inited 7')\n\n          this._conn._connect_cb(elem, null, message.data);\n        }\n      },\n\n      /** PrivateFunction: _disconnect\n          *  _Private_ function called by Strophe.Connection.disconnect\n          *\n          *  Disconnects and sends a last stanza if one is given\n          *\n          *  Parameters:\n          *    (Request) pres - This stanza will be sent before disconnecting.\n          */\n      _disconnect: function _disconnect(pres) {\n        __f__(\"log\", '_disconnect', this.socket.readyState, !!this.socket, \" at webIM\\\\sdk\\\\libs\\\\strophe.js:5769\");\n        //  && this.socket.readyState !== WebSocket.CLOSED\n        if (this.socket) {\n          if (pres) {\n            this._conn.send(pres);\n          }\n          var close = $build(\"close\", { \"xmlns\": Strophe.NS.FRAMING });\n          this._conn.xmlOutput(close);\n          var closeString = Strophe.serialize(close);\n          this._conn.rawOutput(closeString);\n          try {\n            this.socket.send(closeString);\n          } catch (e) {\n            Strophe.info(\"Couldn't send <close /> tag.\");\n          }\n        }\n        this._conn._doDisconnect();\n      },\n\n      /** PrivateFunction: _doDisconnect\n          *  _Private_ function to disconnect.\n          *\n          *  Just closes the Socket for WebSockets\n          */\n      _doDisconnect: function _doDisconnect() {\n        Strophe.info(\"WebSockets _doDisconnect was called\");\n        this._closeSocket && this._closeSocket();\n      },\n\n      /** PrivateFunction _streamWrap\n          *  _Private_ helper function to wrap a stanza in a <stream> tag.\n          *  This is used so Strophe can process stanzas from WebSockets like BOSH\n          */\n      _streamWrap: function _streamWrap(stanza) {\n        return \"<wrapper>\" + stanza + '</wrapper>';\n      },\n\n\n      /** PrivateFunction: _closeSocket\n          *  _Private_ function to close the WebSocket.\n          *\n          *  Closes the socket if it is still open and deletes it\n          */\n      // _closeSocket: function () {\n      //     if (this.socket) { try {\n      //         this.socket.close();\n      //     } catch (e) {} }\n      //     this.socket = null;\n      // },\n\n      /** PrivateFunction: _emptyQueue\n       * _Private_ function to check if the message queue is empty.\n       *\n       *  Returns:\n       *    True, because WebSocket messages are send immediately after queueing.\n       */\n      _emptyQueue: function _emptyQueue() {\n        return true;\n      },\n\n      /** PrivateFunction: _onClose\n          * _Private_ function to handle websockets closing.\n          *\n          * Nothing to do here for WebSockets\n          */\n      _onClose: function _onClose() {\n        if (this._conn.connected && !this._conn.disconnecting) {\n          Strophe.error(\"Websocket closed unexpectedly\");\n          this._conn._doDisconnect();\n        } else {\n          Strophe.info(\"Websocket closed\");\n        }\n      },\n\n      /** PrivateFunction: _no_auth_received\n          *\n          * Called on stream start/restart when no stream:features\n          * has been received.\n          */\n      _no_auth_received: function _no_auth_received(_callback) {\n        Strophe.error(\"Server did not send any auth methods\");\n        this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"Server did not send any auth methods\");\n        if (_callback) {\n          _callback = _callback.bind(this._conn);\n          _callback();\n        }\n        this._conn._doDisconnect();\n      },\n\n      /** PrivateFunction: _onDisconnectTimeout\n          *  _Private_ timeout handler for handling non-graceful disconnection.\n          *\n          *  This does nothing for WebSockets\n          */\n      _onDisconnectTimeout: function _onDisconnectTimeout() {\n      },\n\n      /** PrivateFunction: _abortAllRequests\n          *  _Private_ helper function that makes sure all pending requests are aborted.\n          */\n      _abortAllRequests: function _abortAllRequests() {\n      },\n\n      /** PrivateFunction: _onError\n          * _Private_ function to handle websockets errors.\n          *\n          * Parameters:\n          * (Object) error - The websocket error.\n          */\n      _onError: function _onError(error) {\n        wx.onSocketError(function (res) {\n          // console.log('WebSocket连接打开失败，请检查！')\n        });\n        // Strophe.error(\"Websocket error \" + error);\n        // this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"The WebSocket connection could not be established or was disconnected.\");\n        // this._disconnect();\n      },\n\n      /** PrivateFunction: _onIdle\n          *  _Private_ function called by Strophe.Connection._onIdle\n          *\n          *  sends all queued stanzas\n          */\n      _onIdle: function _onIdle(_fail) {\n        var data = this._conn._data;\n        if (data.length > 0 && !this._conn.paused) {\n          for (var i = 0; i < data.length; i++) {\n            if (data[i] !== null) {\n              var stanza, rawStanza;\n              if (data[i] === \"restart\") {\n                stanza = this._buildStream().tree();\n              } else {\n                stanza = data[i];\n              }\n              rawStanza = Strophe.serialize(stanza);\n\n              this._conn.xmlOutput(stanza);\n              this._conn.rawOutput(rawStanza);\n              // onsend todo\n              if (isSocketConnnected) {\n                wx.sendSocketMessage({\n                  data: rawStanza,\n                  fail: function fail() {\n                    __f__(\"log\", 'socjet发送失败', \" at webIM\\\\sdk\\\\libs\\\\strophe.js:5912\");\n                    _fail && _fail('socket error');\n                  },\n                  success: function success() {\n\n                  } });\n\n              } else {\n                //this._conn._doDisconnect();\n                isSocketConnnected = false;\n                _fail && _fail('socket disconnnected');\n                //this._changeConnectStatus(Strophe.Status.DISCONNECTED, null);\n              }\n\n              //this.socket.send(rawStanza);\n            }\n          }\n          this._conn._data = [];\n        }\n      },\n\n      /** PrivateFunction: _onMessage\n          * _Private_ function to handle websockets messages.\n          *\n          * This function parses each of the messages as if they are full documents.\n          * [TODO : We may actually want to use a SAX Push parser].\n          *\n          * Since all XMPP traffic starts with\n          *  <stream:stream version='1.0'\n          *                 xml:lang='en'\n          *                 xmlns='jabber:client'\n          *                 xmlns:stream='http://etherx.jabber.org/streams'\n          *                 id='3697395463'\n          *                 from='SERVER'>\n          *\n          * The first stanza will always fail to be parsed.\n          *\n          * Additionally, the seconds stanza will always be <stream:features> with\n          * the stream NS defined in the previous stanza, so we need to 'force'\n          * the inclusion of the NS in this stanza.\n          *\n          * Parameters:\n          * (string) message - The websocket message.\n          */\n      _onMessage: function _onMessage(message) {\n        //console.log('_onMessage')\n        // wx.sendSocketMessage({\n        //   data: message\n        // })\n        var elem, data;\n        // check for closing stream\n        var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n        if (message.data === close) {\n          this._conn.rawInput(close);\n          this._conn.xmlInput(message);\n          if (!this._conn.disconnecting) {\n            this._conn._doDisconnect();\n          }\n          return;\n        } else if (message.data.search(\"<open \") === 0) {\n          // This handles stream restarts\n          elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n          if (!this._handleStreamStart(elem)) {\n            return;\n          }\n        } else {\n          data = this._streamWrap(message.data);\n          elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n        }\n\n        if (this._check_streamerror(elem, Strophe.Status.ERROR)) {\n          return;\n        }\n\n        //handle unavailable presence stanza before disconnecting\n        if (this._conn.disconnecting &&\n        elem.firstChild.nodeName === \"presence\" &&\n        elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n          this._conn.xmlInput(elem);\n          this._conn.rawInput(Strophe.serialize(elem));\n          // if we are already disconnecting we will ignore the unavailable stanza and\n          // wait for the </stream:stream> tag before we close the connection\n          return;\n        }\n        this._conn._dataRecv(elem, message.data);\n      },\n\n      /** PrivateFunction: _onOpen\n          * _Private_ function to handle websockets connection setup.\n          *\n          * The opening stream tag is sent here.\n          */\n      _onOpen: function _onOpen() {\n        Strophe.info(\"Websocket open\");\n        var start = this._buildStream();\n        this._conn.xmlOutput(start.tree());\n\n        var startString = Strophe.serialize(start);\n        this._conn.rawOutput(startString);\n        // onsend todo\n        //console.log('startString', startString)\n        //_socketTask.send({data: startString})\n        wx.sendSocketMessage({ data: startString });\n        //this.socket.send(rawStanza);\n        // this.socket.send(startString);\n      },\n\n      /** PrivateFunction: _reqToData\n          * _Private_ function to get a stanza out of a request.\n          *\n          * WebSockets don't use requests, so the passed argument is just returned.\n          *\n          *  Parameters:\n          *    (Object) stanza - The stanza.\n          *\n          *  Returns:\n          *    The stanza that was passed.\n          */\n      _reqToData: function _reqToData(stanza) {\n        return stanza;\n      },\n\n      /** PrivateFunction: _send\n          *  _Private_ part of the Connection.send function for WebSocket\n          *\n          * Just flushes the messages that are in the queue\n          */\n      _send: function _send(flush) {\n        this._conn.flush(flush);\n      },\n\n      /** PrivateFunction: _sendRestart\n          *\n          *  Send an xmpp:restart stanza.\n          */\n      _sendRestart: function _sendRestart() {\n        clearTimeout(this._conn._idleTimeout);\n        this._conn._onIdle.bind(this._conn)();\n      } };\n\n    return Strophe;\n  });\n\n  (function (root) {\n    if (true) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n      __WEBPACK_LOCAL_MODULE_5__,\n      __WEBPACK_LOCAL_MODULE_6__,\n      __WEBPACK_LOCAL_MODULE_7__], __WEBPACK_AMD_DEFINE_RESULT__ = (function (wrapper) {\n        return wrapper;\n      }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    }\n  })(this);\n\n  /* jshint ignore:start */\n  if (callback) {\n    if (true) {\n      //For backwards compatability\n      var n_callback = callback;\n      if (typeof requirejs === 'function') {\n        requirejs([\"./strophe\"], function (o) {\n          n_callback(o.Strophe, o.$build, o.$msg, o.$iq, o.$pres);\n        });\n      } else {\n        Promise.resolve(/*! AMD require */).then(function() { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(/*! ./strophe */ 13)]; (function (o) {\n          n_callback(o.Strophe, o.$build, o.$msg, o.$iq, o.$pres);\n        }).apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__);}).catch(__webpack_require__.oe);\n      }\n    } else {}\n  }\n\n\n}).bind(window)(function (Strophe, build, msg, iq, pres) {\n  // window.Strophe = Strophe;\n  // //console.log(window.Strophe)\n  // window.$build = build;\n  // window.$msg = msg;\n  // window.$iq = iq;\n  // window.$pres = pres;\n});\n/* jshint ignore:end */\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),

/***/ 14:
/*!**************************************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/sdk/libs/xmldom/dom-parser.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function DOMParser(options) {\n  this.options = options || { locator: {} };\n\n}\nDOMParser.prototype.parseFromString = function (source, mimeType) {\n  var options = this.options;\n  var sax = new XMLReader();\n  var domBuilder = options.domBuilder || new DOMHandler(); //contentHandler and LexicalHandler\n  var errorHandler = options.errorHandler;\n  var locator = options.locator;\n  var defaultNSMap = options.xmlns || {};\n  var entityMap = { 'lt': '<', 'gt': '>', 'amp': '&', 'quot': '\"', 'apos': \"'\" };\n  if (locator) {\n    domBuilder.setDocumentLocator(locator);\n  }\n\n  sax.errorHandler = buildErrorHandler(errorHandler, domBuilder, locator);\n  sax.domBuilder = options.domBuilder || domBuilder;\n  if (/\\/x?html?$/.test(mimeType)) {\n    entityMap.nbsp = '\\xa0';\n    entityMap.copy = '\\xa9';\n    defaultNSMap[''] = 'http://www.w3.org/1999/xhtml';\n  }\n  defaultNSMap.xml = defaultNSMap.xml || 'http://www.w3.org/XML/1998/namespace';\n  if (source) {\n    sax.parse(source, defaultNSMap, entityMap);\n  } else {\n    sax.errorHandler.error(\"invalid document source\");\n  }\n  return domBuilder.document;\n};\nfunction buildErrorHandler(errorImpl, domBuilder, locator) {\n  if (!errorImpl) {\n    if (domBuilder instanceof DOMHandler) {\n      return domBuilder;\n    }\n    errorImpl = domBuilder;\n  }\n  var errorHandler = {};\n  var isCallback = errorImpl instanceof Function;\n  locator = locator || {};\n  function build(key) {\n    var fn = errorImpl[key];\n    if (!fn && isCallback) {\n      fn = errorImpl.length == 2 ? function (msg) {\n        errorImpl(key, msg);\n      } : errorImpl;\n    }\n    errorHandler[key] = fn && function (msg) {\n      fn('[xmldom ' + key + ']\\t' + msg + _locator(locator));\n    } || function () {\n    };\n  }\n\n  build('warning');\n  build('error');\n  build('fatalError');\n  return errorHandler;\n}\n\n//console.log('#\\n\\n\\n\\n\\n\\n\\n####')\n/**\r\n * +ContentHandler+ErrorHandler\r\n * +LexicalHandler+EntityResolver2\r\n * -DeclHandler-DTDHandler\r\n *\r\n * DefaultHandler:EntityResolver, DTDHandler, ContentHandler, ErrorHandler\r\n * DefaultHandler2:DefaultHandler,LexicalHandler, DeclHandler, EntityResolver2\r\n * @link http://www.saxproject.org/apidoc/org/xml/sax/helpers/DefaultHandler.html\r\n */\nfunction DOMHandler() {\n  this.cdata = false;\n}\nfunction position(locator, node) {\n  node.lineNumber = locator.lineNumber;\n  node.columnNumber = locator.columnNumber;\n}\n/**\r\n   * @see org.xml.sax.ContentHandler#startDocument\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html\r\n   */\nDOMHandler.prototype = {\n  startDocument: function startDocument() {\n    this.document = new DOMImplementation().createDocument(null, null, null);\n    if (this.locator) {\n      this.document.documentURI = this.locator.systemId;\n    }\n  },\n  startElement: function startElement(namespaceURI, localName, qName, attrs) {\n    var doc = this.document;\n    var el = doc.createElementNS(namespaceURI, qName || localName);\n    var len = attrs.length;\n    appendElement(this, el);\n    this.currentElement = el;\n\n    this.locator && position(this.locator, el);\n    for (var i = 0; i < len; i++) {\n      var namespaceURI = attrs.getURI(i);\n      var value = attrs.getValue(i);\n      var qName = attrs.getQName(i);\n      var attr = doc.createAttributeNS(namespaceURI, qName);\n      if (attr.getOffset) {\n        position(attr.getOffset(1), attr);\n      }\n      attr.value = attr.nodeValue = value;\n      el.setAttributeNode(attr);\n    }\n  },\n  endElement: function endElement(namespaceURI, localName, qName) {\n    var current = this.currentElement;\n    var tagName = current.tagName;\n    this.currentElement = current.parentNode;\n  },\n  startPrefixMapping: function startPrefixMapping(prefix, uri) {\n  },\n  endPrefixMapping: function endPrefixMapping(prefix) {\n  },\n  processingInstruction: function processingInstruction(target, data) {\n    var ins = this.document.createProcessingInstruction(target, data);\n    this.locator && position(this.locator, ins);\n    appendElement(this, ins);\n  },\n  ignorableWhitespace: function ignorableWhitespace(ch, start, length) {\n  },\n  characters: function characters(chars, start, length) {\n    chars = _toString.apply(this, arguments);\n    //console.log(chars)\n    if (this.currentElement && chars) {\n      if (this.cdata) {\n        var charNode = this.document.createCDATASection(chars);\n        this.currentElement.appendChild(charNode);\n      } else {\n        var charNode = this.document.createTextNode(chars);\n        this.currentElement.appendChild(charNode);\n      }\n      this.locator && position(this.locator, charNode);\n    }\n  },\n  skippedEntity: function skippedEntity(name) {\n  },\n  endDocument: function endDocument() {\n    this.document.normalize();\n  },\n  setDocumentLocator: function setDocumentLocator(locator) {\n    if (this.locator = locator) {// && !('lineNumber' in locator)){\n      locator.lineNumber = 0;\n    }\n  },\n  //LexicalHandler\n  comment: function comment(chars, start, length) {\n    chars = _toString.apply(this, arguments);\n    var comm = this.document.createComment(chars);\n    this.locator && position(this.locator, comm);\n    appendElement(this, comm);\n  },\n\n  startCDATA: function startCDATA() {\n    //used in characters() methods\n    this.cdata = true;\n  },\n  endCDATA: function endCDATA() {\n    this.cdata = false;\n  },\n\n  startDTD: function startDTD(name, publicId, systemId) {\n    var impl = this.document.implementation;\n    if (impl && impl.createDocumentType) {\n      var dt = impl.createDocumentType(name, publicId, systemId);\n      this.locator && position(this.locator, dt);\n      appendElement(this, dt);\n    }\n  },\n  /**\r\n      * @see org.xml.sax.ErrorHandler\r\n      * @link http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html\r\n      */\n  warning: function warning(error) {\n    //console.warn('[xmldom warning]\\t' + error, _locator(this.locator));\n  },\n  error: function error(_error) {\n    //console.error('[xmldom error]\\t' + error, _locator(this.locator));\n  },\n  fatalError: function fatalError(error) {\n    //console.error('[xmldom fatalError]\\t' + error, _locator(this.locator));\n    throw error;\n  } };\n\nfunction _locator(l) {\n  if (l) {\n    return '\\n@' + (l.systemId || '') + '#[line:' + l.lineNumber + ',col:' + l.columnNumber + ']';\n  }\n}\nfunction _toString(chars, start, length) {\n  if (typeof chars == 'string') {\n    return chars.substr(start, length);\n  } else {//java sax connect width xmldom on rhino(what about: \"? && !(chars instanceof String)\")\n    if (chars.length >= start + length || start) {\n      return new java.lang.String(chars, start, length) + '';\n    }\n    return chars;\n  }\n}\n\n/*\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/LexicalHandler.html\r\n   * used method of org.xml.sax.ext.LexicalHandler:\r\n   *  #comment(chars, start, length)\r\n   *  #startCDATA()\r\n   *  #endCDATA()\r\n   *  #startDTD(name, publicId, systemId)\r\n   *\r\n   *\r\n   * IGNORED method of org.xml.sax.ext.LexicalHandler:\r\n   *  #endDTD()\r\n   *  #startEntity(name)\r\n   *  #endEntity(name)\r\n   *\r\n   *\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/DeclHandler.html\r\n   * IGNORED method of org.xml.sax.ext.DeclHandler\r\n   * \t#attributeDecl(eName, aName, type, mode, value)\r\n   *  #elementDecl(name, model)\r\n   *  #externalEntityDecl(name, publicId, systemId)\r\n   *  #internalEntityDecl(name, value)\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/ext/EntityResolver2.html\r\n   * IGNORED method of org.xml.sax.EntityResolver2\r\n   *  #resolveEntity(String name,String publicId,String baseURI,String systemId)\r\n   *  #resolveEntity(publicId, systemId)\r\n   *  #getExternalSubset(name, baseURI)\r\n   * @link http://www.saxproject.org/apidoc/org/xml/sax/DTDHandler.html\r\n   * IGNORED method of org.xml.sax.DTDHandler\r\n   *  #notationDecl(name, publicId, systemId) {};\r\n   *  #unparsedEntityDecl(name, publicId, systemId, notationName) {};\r\n   */\n\"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl\".replace(/\\w+/g, function (key) {\n  DOMHandler.prototype[key] = function () {\n    return null;\n  };\n});\n\n/* Private static helpers treated below as private instance methods, so don't need to add these to the public API; we might use a Relator to also get rid of non-standard public properties */\nfunction appendElement(hander, node) {\n  if (!hander.currentElement) {\n    hander.document.appendChild(node);\n  } else {\n    hander.currentElement.appendChild(node);\n  }\n} //appendChild and setAttributeNS are preformance key\n\nif (true) {\n  var XMLReader = __webpack_require__(/*! ./sax */ 15).XMLReader;\n  var DOMImplementation = exports.DOMImplementation = __webpack_require__(/*! ./dom */ 16).DOMImplementation;\n  var XMLSerializer = exports.XMLSerializer = __webpack_require__(/*! ./dom */ 16).XMLSerializer;\n  exports.DOMParser = DOMParser;\n  var DOMParser = {\n    DOMImplementation: DOMImplementation,\n    XMLSerializer: XMLSerializer,\n    DOMParser: DOMParser };\n\n  module.exports = DOMParser;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),

/***/ 15:
/*!*******************************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/sdk/libs/xmldom/sax.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" //[4]   \tNameStartChar\t   ::=   \t\":\" | [A-Z] | \"_\" | [a-z] | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x2FF] | [#x370-#x37D] | [#x37F-#x1FFF] | [#x200C-#x200D] | [#x2070-#x218F] | [#x2C00-#x2FEF] | [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]\n//[4a]   \tNameChar\t   ::=   \tNameStartChar | \"-\" | \".\" | [0-9] | #xB7 | [#x0300-#x036F] | [#x203F-#x2040]\n//[5]   \tName\t   ::=   \tNameStartChar (NameChar)*\nvar nameStartChar = /[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/; //\\u10000-\\uEFFFF\nvar nameChar = new RegExp(\"[\\\\-\\\\.0-9\" + nameStartChar.source.slice(1, -1) + \"\\xB7\\u0300-\\u036F\\\\u203F-\\u2040]\");\nvar tagNamePattern = new RegExp('^' + nameStartChar.source + nameChar.source + '*(?:\\:' + nameStartChar.source + nameChar.source + '*)?$');\n//var tagNamePattern = /^[a-zA-Z_][\\w\\-\\.]*(?:\\:[a-zA-Z_][\\w\\-\\.]*)?$/\n//var handlers = 'resolveEntity,getExternalSubset,characters,endDocument,endElement,endPrefixMapping,ignorableWhitespace,processingInstruction,setDocumentLocator,skippedEntity,startDocument,startElement,startPrefixMapping,notationDecl,unparsedEntityDecl,error,fatalError,warning,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,comment,endCDATA,endDTD,endEntity,startCDATA,startDTD,startEntity'.split(',')\n\n//S_TAG,\tS_ATTR,\tS_EQ,\tS_V\n//S_ATTR_S,\tS_E,\tS_S,\tS_C\nvar S_TAG = 0; //tag name offerring\nvar S_ATTR = 1; //attr name offerring\nvar S_ATTR_S = 2; //attr name end and space offer\nvar S_EQ = 3; //=space?\nvar S_V = 4; //attr value(no quot value only)\nvar S_E = 5; //attr value end and no space(quot end)\nvar S_S = 6; //(attr value end || tag end ) && (space offer)\nvar S_C = 7; //closed el<el />\n\nfunction XMLReader() {\n\n}\n\nXMLReader.prototype = {\n  parse: function parse(source, defaultNSMap, entityMap) {\n    var domBuilder = this.domBuilder;\n    domBuilder.startDocument();\n    _copy(defaultNSMap, defaultNSMap = {});\n    _parse(source, defaultNSMap, entityMap,\n    domBuilder, this.errorHandler);\n    domBuilder.endDocument();\n  } };\n\nfunction _parse(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {\n  function fixedFromCharCode(code) {\n    // String.prototype.fromCharCode does not supports\n    // > 2 bytes unicode chars directly\n    if (code > 0xffff) {\n      code -= 0x10000;\n      var surrogate1 = 0xd800 + (code >> 10),\n      surrogate2 = 0xdc00 + (code & 0x3ff);\n\n      return String.fromCharCode(surrogate1, surrogate2);\n    } else {\n      return String.fromCharCode(code);\n    }\n  }\n\n  function entityReplacer(a) {\n    var k = a.slice(1, -1);\n    if (k in entityMap) {\n      return entityMap[k];\n    } else if (k.charAt(0) === '#') {\n      return fixedFromCharCode(parseInt(k.substr(1).replace('x', '0x')));\n    } else {\n      errorHandler.error('entity not found:' + a);\n      return a;\n    }\n  }\n\n  function appendText(end) {//has some bugs\n    if (end > start) {\n      var xt = source.substring(start, end).replace(/&#?\\w+;/g, entityReplacer);\n      locator && position(start);\n      domBuilder.characters(xt, 0, end - start);\n      start = end;\n    }\n  }\n\n  function position(p, m) {\n    while (p >= lineEnd && (m = linePattern.exec(source))) {\n      lineStart = m.index;\n      lineEnd = lineStart + m[0].length;\n      locator.lineNumber++;\n      ////console.log('line++:',locator,startPos,endPos)\n    }\n    locator.columnNumber = p - lineStart + 1;\n  }\n\n  var lineStart = 0;\n  var lineEnd = 0;\n  var linePattern = /.+(?:\\r\\n?|\\n)|.*$/g;\n  var locator = domBuilder.locator;\n\n  var parseStack = [{ currentNSMap: defaultNSMapCopy }];\n  var closeMap = {};\n  var start = 0;\n  while (true) {\n    try {\n      var tagStart = source.indexOf('<', start);\n      if (tagStart < 0) {\n        if (!source.substr(start).match(/^\\s*$/)) {\n          var doc = domBuilder.document;\n          var text = doc.createTextNode(source.substr(start));\n          doc.appendChild(text);\n          domBuilder.currentElement = text;\n        }\n        return;\n      }\n      if (tagStart > start) {\n        appendText(tagStart);\n      }\n      switch (source.charAt(tagStart + 1)) {\n        case '/':\n          var end = source.indexOf('>', tagStart + 3);\n          var tagName = source.substring(tagStart + 2, end);\n          var config = parseStack.pop();\n          var localNSMap = config.localNSMap;\n          if (config.tagName != tagName) {\n            errorHandler.fatalError(\"end tag name: \" + tagName + ' is not match the current start tagName:' + config.tagName);\n          }\n          domBuilder.endElement(config.uri, config.localName, tagName);\n          if (localNSMap) {\n            for (var prefix in localNSMap) {\n              domBuilder.endPrefixMapping(prefix);\n            }\n          }\n          end++;\n          break;\n        // end elment\n        case '?': // <?...?>\n          locator && position(tagStart);\n          end = parseInstruction(source, tagStart, domBuilder);\n          break;\n        case '!': // <!doctype,<![CDATA,<!--\n          locator && position(tagStart);\n          end = parseDCC(source, tagStart, domBuilder, errorHandler);\n          break;\n        default:\n          //console.log('locator', locator)\n\n          locator && position(tagStart);\n\n          var el = new ElementAttributes();\n\n          //elStartEnd\n          var end = parseElementStartPart(source, tagStart, el, entityReplacer, errorHandler);\n          //console.log('end', end)\n\n          var len = el.length;\n\n          if (locator) {\n            if (len) {\n              //attribute position fixed\n              for (var i = 0; i < len; i++) {\n                var a = el[i];\n                position(a.offset);\n                a.offset = copyLocator(locator, {});\n              }\n            }\n            position(end);\n          }\n          //console.log('el', el)\n\n          if (!el.closed && fixSelfClosed(source, end, el.tagName, closeMap)) {\n            el.closed = true;\n            if (!entityMap.nbsp) {\n              errorHandler.warning('unclosed xml attribute');\n            }\n          }\n          //console.log('parseStack', parseStack)\n\n          appendElement(el, domBuilder, parseStack);\n\n          //console.log('el', el, parseStack)\n\n\n          if (el.uri === 'http://www.w3.org/1999/xhtml' && !el.closed) {\n            end = parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder);\n          } else {\n            end++;\n          }}\n\n    } catch (e) {\n      errorHandler.error('element parse error: ' + e);\n      //console.log('element parse error: ', e)\n      end = -1;\n    }\n    //console.log('out', end, start)\n\n\n    if (end > start) {\n      start = end;\n    } else {\n      //TODO: 这里有可能sax回退，有位置错误风险\n      appendText(Math.max(tagStart, start) + 1);\n    }\n  }\n}\nfunction copyLocator(f, t) {\n  t.lineNumber = f.lineNumber;\n  t.columnNumber = f.columnNumber;\n  return t;\n}\n\n/**\r\n   * @see #appendElement(source,elStartEnd,el,selfClosed,entityReplacer,domBuilder,parseStack);\r\n   * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\r\n   */\nfunction parseElementStartPart(source, start, el, entityReplacer, errorHandler) {\n  var attrName;\n  var value;\n  var p = ++start;\n  var s = S_TAG; //status\n  while (true) {\n    var c = source.charAt(p);\n    switch (c) {\n      case '=':\n        if (s === S_ATTR) {//attrName\n          attrName = source.slice(start, p);\n          s = S_EQ;\n        } else if (s === S_ATTR_S) {\n          s = S_EQ;\n        } else {\n          //fatalError: equal must after attrName or space after attrName\n          throw new Error('attribute equal must after attrName');\n        }\n        break;\n      case '\\'':\n      case '\"':\n        if (s === S_EQ) {//equal\n          start = p + 1;\n          p = source.indexOf(c, start);\n          if (p > 0) {\n            value = source.slice(start, p).replace(/&#?\\w+;/g, entityReplacer);\n            el.add(attrName, value, start - 1);\n            s = S_E;\n          } else {\n            //fatalError: no end quot match\n            throw new Error('attribute value no end \\'' + c + '\\' match');\n          }\n        } else if (s == S_V) {\n          value = source.slice(start, p).replace(/&#?\\w+;/g, entityReplacer);\n          ////console.log(attrName,value,start,p)\n          el.add(attrName, value, start);\n          //console.dir(el)\n          errorHandler.warning('attribute \"' + attrName + '\" missed start quot(' + c + ')!!');\n          start = p + 1;\n          s = S_E;\n        } else {\n          //fatalError: no equal before\n          throw new Error('attribute value must after \"=\"');\n        }\n        break;\n      case '/':\n        switch (s) {\n          case S_TAG:\n            el.setTagName(source.slice(start, p));\n          case S_E:\n          case S_S:\n          case S_C:\n            s = S_C;\n            el.closed = true;\n          case S_V:\n          case S_ATTR:\n          case S_ATTR_S:\n            break;\n          //case S_EQ:\n          default:\n            throw new Error(\"attribute invalid close char('/')\");}\n\n        break;\n      case '': //end document\n        //throw new Error('unexpected end of input')\n        errorHandler.error('unexpected end of input');\n      case '>':\n        switch (s) {\n          case S_TAG:\n            el.setTagName(source.slice(start, p));\n          case S_E:\n          case S_S:\n          case S_C:\n            break; //normal\n          case S_V: //Compatible state\n          case S_ATTR:\n            value = source.slice(start, p);\n            if (value.slice(-1) === '/') {\n              el.closed = true;\n              value = value.slice(0, -1);\n            }\n          case S_ATTR_S:\n            if (s === S_ATTR_S) {\n              value = attrName;\n            }\n            if (s == S_V) {\n              errorHandler.warning('attribute \"' + value + '\" missed quot(\")!!');\n              el.add(attrName, value.replace(/&#?\\w+;/g, entityReplacer), start);\n            } else {\n              errorHandler.warning('attribute \"' + value + '\" missed value!! \"' + value + '\" instead!!');\n              el.add(value, value, start);\n            }\n            break;\n          case S_EQ:\n            throw new Error('attribute value missed!!');}\n\n        //\t\t\t//console.log(tagName,tagNamePattern,tagNamePattern.test(tagName))\n        return p;\n      /*xml space '\\x20' | #x9 | #xD | #xA; */\n      case \"\\x80\":\n        c = ' ';\n      default:\n        if (c <= ' ') {//space\n          switch (s) {\n            case S_TAG:\n              el.setTagName(source.slice(start, p)); //tagName\n              s = S_S;\n              break;\n            case S_ATTR:\n              attrName = source.slice(start, p);\n              s = S_ATTR_S;\n              break;\n            case S_V:\n              var value = source.slice(start, p).replace(/&#?\\w+;/g, entityReplacer);\n              errorHandler.warning('attribute \"' + value + '\" missed quot(\")!!');\n              el.add(attrName, value, start);\n            case S_E:\n              s = S_S;\n              break;\n            //case S_S:\n            //case S_EQ:\n            //case S_ATTR_S:\n            //\tvoid();break;\n            //case S_C:\n            //ignore warning\n          }\n        } else {//not space\n          //S_TAG,\tS_ATTR,\tS_EQ,\tS_V\n          //S_ATTR_S,\tS_E,\tS_S,\tS_C\n          switch (s) {\n            //case S_TAG:void();break;\n            //case S_ATTR:void();break;\n            //case S_V:void();break;\n            case S_ATTR_S:\n              errorHandler.warning('attribute \"' + attrName + '\" missed value!! \"' + attrName + '\" instead!!');\n              el.add(attrName, attrName, start);\n              start = p;\n              s = S_ATTR;\n              break;\n            case S_E:\n              errorHandler.warning('attribute space is required\"' + attrName + '\"!!');\n            case S_S:\n              s = S_ATTR;\n              start = p;\n              break;\n            case S_EQ:\n              s = S_V;\n              start = p;\n              break;\n            case S_C:\n              throw new Error(\"elements closed character '/' and '>' must be connected to\");}\n\n        }}\n\n    p++;\n  }\n}\n/**\r\n   * @return end of the elementStartPart(end of elementEndPart for selfClosed el)\r\n   */\nfunction appendElement(el, domBuilder, parseStack) {\n  var tagName = el.tagName;\n  var localNSMap = null;\n  var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;\n  var i = el.length;\n  while (i--) {\n    var a = el[i];\n    var qName = a.qName;\n    var value = a.value;\n    var nsp = qName.indexOf(':');\n    if (nsp > 0) {\n      var prefix = a.prefix = qName.slice(0, nsp);\n      var localName = qName.slice(nsp + 1);\n      var nsPrefix = prefix === 'xmlns' && localName;\n    } else {\n      localName = qName;\n      prefix = null;\n      nsPrefix = qName === 'xmlns' && '';\n    }\n    //can not set prefix,because prefix !== ''\n    a.localName = localName;\n    //prefix == null for no ns prefix attribute\n    if (nsPrefix !== false) {//hack!!\n      if (localNSMap == null) {\n        localNSMap = {};\n        ////console.log(currentNSMap,0)\n        _copy(currentNSMap, currentNSMap = {});\n        ////console.log(currentNSMap,1)\n      }\n      currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;\n      a.uri = 'http://www.w3.org/2000/xmlns/';\n      domBuilder.startPrefixMapping(nsPrefix, value);\n    }\n  }\n  var i = el.length;\n  while (i--) {\n    a = el[i];\n    var prefix = a.prefix;\n    if (prefix) {//no prefix attribute has no namespace\n      if (prefix === 'xml') {\n        a.uri = 'http://www.w3.org/XML/1998/namespace';\n      }\n      if (prefix !== 'xmlns') {\n        a.uri = currentNSMap[prefix];\n\n        //{//console.log('###'+a.qName,domBuilder.locator.systemId+'',currentNSMap,a.uri)}\n      }\n    }\n  }\n  var nsp = tagName.indexOf(':');\n  if (nsp > 0) {\n    prefix = el.prefix = tagName.slice(0, nsp);\n    localName = el.localName = tagName.slice(nsp + 1);\n  } else {\n    prefix = null; //important!!\n    localName = el.localName = tagName;\n  }\n  //no prefix element has default namespace\n  var ns = el.uri = currentNSMap[prefix || ''];\n  domBuilder.startElement(ns, localName, tagName, el);\n  //endPrefixMapping and startPrefixMapping have not any help for dom builder\n  //localNSMap = null\n  if (el.closed) {\n    domBuilder.endElement(ns, localName, tagName);\n    if (localNSMap) {\n      for (prefix in localNSMap) {\n        domBuilder.endPrefixMapping(prefix);\n      }\n    }\n  } else {\n    el.currentNSMap = currentNSMap;\n    el.localNSMap = localNSMap;\n    parseStack.push(el);\n  }\n}\nfunction parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {\n  if (/^(?:script|textarea)$/i.test(tagName)) {\n    var elEndStart = source.indexOf('</' + tagName + '>', elStartEnd);\n    var text = source.substring(elStartEnd + 1, elEndStart);\n    if (/[&<]/.test(text)) {\n      if (/^script$/i.test(tagName)) {\n        //if(!/\\]\\]>/.test(text)){\n        //lexHandler.startCDATA();\n        domBuilder.characters(text, 0, text.length);\n        //lexHandler.endCDATA();\n        return elEndStart;\n        //}\n      } //}else{//text area\n      text = text.replace(/&#?\\w+;/g, entityReplacer);\n      domBuilder.characters(text, 0, text.length);\n      return elEndStart;\n      //}\n\n    }\n  }\n  return elStartEnd + 1;\n}\nfunction fixSelfClosed(source, elStartEnd, tagName, closeMap) {\n  //if(tagName in closeMap){\n  var pos = closeMap[tagName];\n  if (pos == null) {\n    ////console.log(tagName)\n    pos = closeMap[tagName] = source.lastIndexOf('</' + tagName + '>');\n  }\n  return pos < elStartEnd;\n  //}\n}\nfunction _copy(source, target) {\n  for (var n in source) {\n    target[n] = source[n];\n  }\n}\nfunction parseDCC(source, start, domBuilder, errorHandler) {//sure start with '<!'\n  var next = source.charAt(start + 2);\n  switch (next) {\n    case '-':\n      if (source.charAt(start + 3) === '-') {\n        var end = source.indexOf('-->', start + 4);\n        //append comment source.substring(4,end)//<!--\n        if (end > start) {\n          domBuilder.comment(source, start + 4, end - start - 4);\n          return end + 3;\n        } else {\n          errorHandler.error(\"Unclosed comment\");\n          return -1;\n        }\n      } else {\n        //error\n        return -1;\n      }\n    default:\n      if (source.substr(start + 3, 6) == 'CDATA[') {\n        var end = source.indexOf(']]>', start + 9);\n        domBuilder.startCDATA();\n        domBuilder.characters(source, start + 9, end - start - 9);\n        domBuilder.endCDATA();\n        return end + 3;\n      }\n      //<!DOCTYPE\n      //startDTD(java.lang.String name, java.lang.String publicId, java.lang.String systemId)\n      var matchs = split(source, start);\n      var len = matchs.length;\n      if (len > 1 && /!doctype/i.test(matchs[0][0])) {\n        var name = matchs[1][0];\n        var pubid = len > 3 && /^public$/i.test(matchs[2][0]) && matchs[3][0];\n        var sysid = len > 4 && matchs[4][0];\n        var lastMatch = matchs[len - 1];\n        domBuilder.startDTD(name, pubid && pubid.replace(/^(['\"])(.*?)\\1$/, '$2'),\n        sysid && sysid.replace(/^(['\"])(.*?)\\1$/, '$2'));\n        domBuilder.endDTD();\n\n        return lastMatch.index + lastMatch[0].length;\n      }}\n\n  return -1;\n}\n\n\nfunction parseInstruction(source, start, domBuilder) {\n  var end = source.indexOf('?>', start);\n  if (end) {\n    var match = source.substring(start, end).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);\n    if (match) {\n      var len = match[0].length;\n      domBuilder.processingInstruction(match[1], match[2]);\n      return end + 2;\n    } else {//error\n      return -1;\n    }\n  }\n  return -1;\n}\n\n/**\r\n   * @param source\r\n   */\nfunction ElementAttributes(source) {\n\n}\nElementAttributes.prototype = {\n  setTagName: function setTagName(tagName) {\n    if (!tagNamePattern.test(tagName)) {\n      throw new Error('invalid tagName:' + tagName);\n    }\n    this.tagName = tagName;\n  },\n  add: function add(qName, value, offset) {\n    if (!tagNamePattern.test(qName)) {\n      throw new Error('invalid attribute:' + qName);\n    }\n    this[this.length++] = { qName: qName, value: value, offset: offset };\n  },\n  length: 0,\n  getLocalName: function getLocalName(i) {\n    return this[i].localName;\n  },\n  getOffset: function getOffset(i) {\n    return this[i].offset;\n  },\n  getQName: function getQName(i) {\n    return this[i].qName;\n  },\n  getURI: function getURI(i) {\n    return this[i].uri;\n  },\n  getValue: function getValue(i) {\n    return this[i].value;\n  }\n  //\t,getIndex:function(uri, localName)){\n  //\t\tif(localName){\n  //\n  //\t\t}else{\n  //\t\t\tvar qName = uri\n  //\t\t}\n  //\t},\n  //\tgetValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},\n  //\tgetType:function(uri,localName){}\n  //\tgetType:function(i){},\n};\n\n\nfunction _set_proto_(thiz, parent) {\n  thiz.__proto__ = parent;\n  return thiz;\n}\nif (!(_set_proto_({}, _set_proto_.prototype) instanceof _set_proto_)) {\n  _set_proto_ = function _set_proto_(thiz, parent) {\n    function p() {\n    };\n    p.prototype = parent;\n    p = new p();\n    for (parent in thiz) {\n      p[parent] = thiz[parent];\n    }\n    return p;\n  };\n}\n\nfunction split(source, start) {\n  var match;\n  var buf = [];\n  var reg = /'[^']+'|\"[^\"]+\"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;\n  reg.lastIndex = start;\n  reg.exec(source); //skip <\n  while (match = reg.exec(source)) {\n    buf.push(match);\n    if (match[1]) return buf;\n  }\n}\n\nif (true) {\n  exports.XMLReader = XMLReader;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),

/***/ 16:
/*!*******************************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/sdk/libs/xmldom/dom.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" /*\n               * DOM Level 2\n               * Object DOMException\n               * @see http://www.w3.org/TR/REC-DOM-Level-1/ecma-script-language-binding.html\n               * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/ecma-script-binding.html\n               */\n\nfunction copy(src, dest) {\n  for (var p in src) {\n    dest[p] = src[p];\n  }\n}\n/**\n   ^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*((?:.*\\{\\s*?[\\r\\n][\\s\\S]*?^})|\\S.*?(?=[;\\r\\n]));?\n   ^\\w+\\.prototype\\.([_\\w]+)\\s*=\\s*(\\S.*?(?=[;\\r\\n]));?\n   */\nfunction _extends(Class, Super) {\n  var pt = Class.prototype;\n  if (Object.create) {\n    var ppt = Object.create(Super.prototype);\n    pt.__proto__ = ppt;\n  }\n  if (!(pt instanceof Super)) {var\n    t = function t() {\n    };;\n    t.prototype = Super.prototype;\n    t = new t();\n    copy(pt, t);\n    Class.prototype = pt = t;\n  }\n  if (pt.constructor != Class) {\n    if (typeof Class != 'function') {\n      //console.error(\"unknow Class:\" + Class)\n    }\n    pt.constructor = Class;\n  }\n}\nvar htmlns = 'http://www.w3.org/1999/xhtml';\n// Node Types\nvar NodeType = {};\nvar ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;\nvar ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;\nvar TEXT_NODE = NodeType.TEXT_NODE = 3;\nvar CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;\nvar ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;\nvar ENTITY_NODE = NodeType.ENTITY_NODE = 6;\nvar PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;\nvar COMMENT_NODE = NodeType.COMMENT_NODE = 8;\nvar DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;\nvar DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;\nvar DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;\nvar NOTATION_NODE = NodeType.NOTATION_NODE = 12;\n\n// ExceptionCode\nvar ExceptionCode = {};\nvar ExceptionMessage = {};\nvar INDEX_SIZE_ERR = ExceptionCode.INDEX_SIZE_ERR = (ExceptionMessage[1] = \"Index size error\", 1);\nvar DOMSTRING_SIZE_ERR = ExceptionCode.DOMSTRING_SIZE_ERR = (ExceptionMessage[2] = \"DOMString size error\", 2);\nvar HIERARCHY_REQUEST_ERR = ExceptionCode.HIERARCHY_REQUEST_ERR = (ExceptionMessage[3] = \"Hierarchy request error\", 3);\nvar WRONG_DOCUMENT_ERR = ExceptionCode.WRONG_DOCUMENT_ERR = (ExceptionMessage[4] = \"Wrong document\", 4);\nvar INVALID_CHARACTER_ERR = ExceptionCode.INVALID_CHARACTER_ERR = (ExceptionMessage[5] = \"Invalid character\", 5);\nvar NO_DATA_ALLOWED_ERR = ExceptionCode.NO_DATA_ALLOWED_ERR = (ExceptionMessage[6] = \"No data allowed\", 6);\nvar NO_MODIFICATION_ALLOWED_ERR = ExceptionCode.NO_MODIFICATION_ALLOWED_ERR = (ExceptionMessage[7] = \"No modification allowed\", 7);\nvar NOT_FOUND_ERR = ExceptionCode.NOT_FOUND_ERR = (ExceptionMessage[8] = \"Not found\", 8);\nvar NOT_SUPPORTED_ERR = ExceptionCode.NOT_SUPPORTED_ERR = (ExceptionMessage[9] = \"Not supported\", 9);\nvar INUSE_ATTRIBUTE_ERR = ExceptionCode.INUSE_ATTRIBUTE_ERR = (ExceptionMessage[10] = \"Attribute in use\", 10);\n//level2\nvar INVALID_STATE_ERR = ExceptionCode.INVALID_STATE_ERR = (ExceptionMessage[11] = \"Invalid state\", 11);\nvar SYNTAX_ERR = ExceptionCode.SYNTAX_ERR = (ExceptionMessage[12] = \"Syntax error\", 12);\nvar INVALID_MODIFICATION_ERR = ExceptionCode.INVALID_MODIFICATION_ERR = (ExceptionMessage[13] = \"Invalid modification\", 13);\nvar NAMESPACE_ERR = ExceptionCode.NAMESPACE_ERR = (ExceptionMessage[14] = \"Invalid namespace\", 14);\nvar INVALID_ACCESS_ERR = ExceptionCode.INVALID_ACCESS_ERR = (ExceptionMessage[15] = \"Invalid access\", 15);\n\n\nfunction DOMException(code, message) {\n  if (message instanceof Error) {\n    var error = message;\n  } else {\n    error = this;\n    Error.call(this, ExceptionMessage[code]);\n    this.message = ExceptionMessage[code];\n    if (Error.captureStackTrace) Error.captureStackTrace(this, DOMException);\n  }\n  error.code = code;\n  if (message) this.message = this.message + \": \" + message;\n  return error;\n};\nDOMException.prototype = Error.prototype;\ncopy(ExceptionCode, DOMException);\n/**\n                                    * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-536297177\n                                    * The NodeList interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. NodeList objects in the DOM are live.\n                                    * The items in the NodeList are accessible via an integral index, starting from 0.\n                                    */\nfunction NodeList() {\n};\nNodeList.prototype = {\n  /**\n                        * The number of nodes in the list. The range of valid child node indices is 0 to length-1 inclusive.\n                        * @standard level1\n                        */\n  length: 0,\n  /**\n              * Returns the indexth item in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.\n              * @standard level1\n              * @param index  unsigned long\n              *   Index into the collection.\n              * @return Node\n              *    The node at the indexth position in the NodeList, or null if that is not a valid index.\n              */\n  item: function item(index) {\n    return this[index] || null;\n  },\n  toString: function toString() {\n    for (var buf = [], i = 0; i < this.length; i++) {\n      serializeToString(this[i], buf);\n    }\n    return buf.join('');\n  } };\n\nfunction LiveNodeList(node, refresh) {\n  this._node = node;\n  this._refresh = refresh;\n  _updateLiveList(this);\n}\nfunction _updateLiveList(list) {\n  var inc = list._node._inc || list._node.ownerDocument._inc;\n  if (list._inc != inc) {\n    var ls = list._refresh(list._node);\n    //console.log(ls.length)\n    __set__(list, 'length', ls.length);\n    copy(ls, list);\n    list._inc = inc;\n  }\n}\nLiveNodeList.prototype.item = function (i) {\n  _updateLiveList(this);\n  return this[i];\n};\n\n_extends(LiveNodeList, NodeList);\n/**\n                                   *\n                                   * Objects implementing the NamedNodeMap interface are used to represent collections of nodes that can be accessed by name. Note that NamedNodeMap does not inherit from NodeList; NamedNodeMaps are not maintained in any particular order. Objects contained in an object implementing NamedNodeMap may also be accessed by an ordinal index, but this is simply to allow convenient enumeration of the contents of a NamedNodeMap, and does not imply that the DOM specifies an order to these Nodes.\n                                   * NamedNodeMap objects in the DOM are live.\n                                   * used for attributes or DocumentType entities\n                                   */\nfunction NamedNodeMap() {\n};\n\nfunction _findNodeIndex(list, node) {\n  var i = list.length;\n  while (i--) {\n    if (list[i] === node) {\n      return i;\n    }\n  }\n}\n\nfunction _addNamedNode(el, list, newAttr, oldAttr) {\n  if (oldAttr) {\n    list[_findNodeIndex(list, oldAttr)] = newAttr;\n  } else {\n    list[list.length++] = newAttr;\n  }\n  if (el) {\n    newAttr.ownerElement = el;\n    var doc = el.ownerDocument;\n    if (doc) {\n      oldAttr && _onRemoveAttribute(doc, el, oldAttr);\n      _onAddAttribute(doc, el, newAttr);\n    }\n  }\n}\nfunction _removeNamedNode(el, list, attr) {\n  var i = _findNodeIndex(list, attr);\n  if (i >= 0) {\n    var lastIndex = list.length - 1;\n    while (i < lastIndex) {\n      list[i] = list[++i];\n    }\n    list.length = lastIndex;\n    if (el) {\n      var doc = el.ownerDocument;\n      if (doc) {\n        _onRemoveAttribute(doc, el, attr);\n        attr.ownerElement = null;\n      }\n    }\n  } else {\n    throw DOMException(NOT_FOUND_ERR, new Error());\n  }\n}\nNamedNodeMap.prototype = {\n  length: 0,\n  item: NodeList.prototype.item,\n  getNamedItem: function getNamedItem(key) {\n    //\t\tif(key.indexOf(':')>0 || key == 'xmlns'){\n    //\t\t\treturn null;\n    //\t\t}\n    var i = this.length;\n    while (i--) {\n      var attr = this[i];\n      if (attr.nodeName == key) {\n        return attr;\n      }\n    }\n  },\n  setNamedItem: function setNamedItem(attr) {\n    var el = attr.ownerElement;\n    if (el && el != this._ownerElement) {\n      throw new DOMException(INUSE_ATTRIBUTE_ERR);\n    }\n    var oldAttr = this.getNamedItem(attr.nodeName);\n    _addNamedNode(this._ownerElement, this, attr, oldAttr);\n    return oldAttr;\n  },\n  /* returns Node */\n  setNamedItemNS: function setNamedItemNS(attr) {// raises: WRONG_DOCUMENT_ERR,NO_MODIFICATION_ALLOWED_ERR,INUSE_ATTRIBUTE_ERR\n    var el = attr.ownerElement,oldAttr;\n    if (el && el != this._ownerElement) {\n      throw new DOMException(INUSE_ATTRIBUTE_ERR);\n    }\n    oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);\n    _addNamedNode(this._ownerElement, this, attr, oldAttr);\n    return oldAttr;\n  },\n\n  /* returns Node */\n  removeNamedItem: function removeNamedItem(key) {\n    var attr = this.getNamedItem(key);\n    _removeNamedNode(this._ownerElement, this, attr);\n    return attr;\n\n\n  }, // raises: NOT_FOUND_ERR,NO_MODIFICATION_ALLOWED_ERR\n\n  //for level2\n  removeNamedItemNS: function removeNamedItemNS(namespaceURI, localName) {\n    var attr = this.getNamedItemNS(namespaceURI, localName);\n    _removeNamedNode(this._ownerElement, this, attr);\n    return attr;\n  },\n  getNamedItemNS: function getNamedItemNS(namespaceURI, localName) {\n    var i = this.length;\n    while (i--) {\n      var node = this[i];\n      if (node.localName == localName && node.namespaceURI == namespaceURI) {\n        return node;\n      }\n    }\n    return null;\n  } };\n\n/**\n        * @see http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-102161490\n        */\nfunction DOMImplementation( /* Object */features) {\n  this._features = {};\n  if (features) {\n    for (var feature in features) {\n      this._features = features[feature];\n    }\n  }\n};\n\nDOMImplementation.prototype = {\n  hasFeature: function hasFeature( /* string */feature, /* string */version) {\n    var versions = this._features[feature.toLowerCase()];\n    if (versions && (!version || version in versions)) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n  // Introduced in DOM Level 2:\n  createDocument: function createDocument(namespaceURI, qualifiedName, doctype) {// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR,WRONG_DOCUMENT_ERR\n    var doc = new Document();\n    doc.implementation = this;\n    doc.childNodes = new NodeList();\n    doc.doctype = doctype;\n    if (doctype) {\n      doc.appendChild(doctype);\n    }\n    if (qualifiedName) {\n      var root = doc.createElementNS(namespaceURI, qualifiedName);\n      doc.appendChild(root);\n    }\n    return doc;\n  },\n  // Introduced in DOM Level 2:\n  createDocumentType: function createDocumentType(qualifiedName, publicId, systemId) {// raises:INVALID_CHARACTER_ERR,NAMESPACE_ERR\n    var node = new DocumentType();\n    node.name = qualifiedName;\n    node.nodeName = qualifiedName;\n    node.publicId = publicId;\n    node.systemId = systemId;\n    // Introduced in DOM Level 2:\n    //readonly attribute DOMString        internalSubset;\n\n    //TODO:..\n    //  readonly attribute NamedNodeMap     entities;\n    //  readonly attribute NamedNodeMap     notations;\n    return node;\n  } };\n\n\n\n/**\n        * @see http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-1950641247\n        */\n\nfunction Node() {\n};\n\nNode.prototype = {\n  firstChild: null,\n  lastChild: null,\n  previousSibling: null,\n  nextSibling: null,\n  attributes: null,\n  parentNode: null,\n  childNodes: null,\n  ownerDocument: null,\n  nodeValue: null,\n  namespaceURI: null,\n  prefix: null,\n  localName: null,\n  // Modified in DOM Level 2:\n  insertBefore: function insertBefore(newChild, refChild) {//raises\n    return _insertBefore(this, newChild, refChild);\n  },\n  replaceChild: function replaceChild(newChild, oldChild) {//raises\n    this.insertBefore(newChild, oldChild);\n    if (oldChild) {\n      this.removeChild(oldChild);\n    }\n  },\n  removeChild: function removeChild(oldChild) {\n    return _removeChild(this, oldChild);\n  },\n  appendChild: function appendChild(newChild) {\n    return this.insertBefore(newChild, null);\n  },\n  hasChildNodes: function hasChildNodes() {\n    return this.firstChild != null;\n  },\n  cloneNode: function cloneNode(deep) {\n    return _cloneNode(this.ownerDocument || this, this, deep);\n  },\n  // Modified in DOM Level 2:\n  normalize: function normalize() {\n    var child = this.firstChild;\n    while (child) {\n      var next = child.nextSibling;\n      if (next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE) {\n        this.removeChild(next);\n        child.appendData(next.data);\n      } else {\n        child.normalize();\n        child = next;\n      }\n    }\n  },\n  // Introduced in DOM Level 2:\n  isSupported: function isSupported(feature, version) {\n    return this.ownerDocument.implementation.hasFeature(feature, version);\n  },\n  // Introduced in DOM Level 2:\n  hasAttributes: function hasAttributes() {\n    return this.attributes.length > 0;\n  },\n  lookupPrefix: function lookupPrefix(namespaceURI) {\n    var el = this;\n    while (el) {\n      var map = el._nsMap;\n      //console.dir(map)\n      if (map) {\n        for (var n in map) {\n          if (map[n] == namespaceURI) {\n            return n;\n          }\n        }\n      }\n      el = el.nodeType == 2 ? el.ownerDocument : el.parentNode;\n    }\n    return null;\n  },\n  // Introduced in DOM Level 3:\n  lookupNamespaceURI: function lookupNamespaceURI(prefix) {\n    var el = this;\n    while (el) {\n      var map = el._nsMap;\n      //console.dir(map)\n      if (map) {\n        if (prefix in map) {\n          return map[prefix];\n        }\n      }\n      el = el.nodeType == 2 ? el.ownerDocument : el.parentNode;\n    }\n    return null;\n  },\n  // Introduced in DOM Level 3:\n  isDefaultNamespace: function isDefaultNamespace(namespaceURI) {\n    var prefix = this.lookupPrefix(namespaceURI);\n    return prefix == null;\n  } };\n\n\n\nfunction _xmlEncoder(c) {\n  return c == '<' && '&lt;' ||\n  c == '>' && '&gt;' ||\n  c == '&' && '&amp;' ||\n  c == '\"' && '&quot;' ||\n  '&#' + c.charCodeAt() + ';';\n}\n\n\ncopy(NodeType, Node);\ncopy(NodeType, Node.prototype);\n\n/**\n                                 * @param callback return true for continue,false for break\n                                 * @return boolean true: break visit;\n                                 */\nfunction _visitNode(node, callback) {\n  if (callback(node)) {\n    return true;\n  }\n  if (node = node.firstChild) {\n    do {\n      if (_visitNode(node, callback)) {\n        return true;\n      }\n    } while (node = node.nextSibling);\n  }\n}\n\n\nfunction Document() {\n}\nfunction _onAddAttribute(doc, el, newAttr) {\n  doc && doc._inc++;\n  var ns = newAttr.namespaceURI;\n  if (ns == 'http://www.w3.org/2000/xmlns/') {\n    //update namespace\n    el._nsMap[newAttr.prefix ? newAttr.localName : ''] = newAttr.value;\n  }\n}\nfunction _onRemoveAttribute(doc, el, newAttr, remove) {\n  doc && doc._inc++;\n  var ns = newAttr.namespaceURI;\n  if (ns == 'http://www.w3.org/2000/xmlns/') {\n    //update namespace\n    delete el._nsMap[newAttr.prefix ? newAttr.localName : ''];\n  }\n}\nfunction _onUpdateChild(doc, el, newChild) {\n  if (doc && doc._inc) {\n    doc._inc++;\n    //update childNodes\n    var cs = el.childNodes;\n    if (newChild) {\n      cs[cs.length++] = newChild;\n    } else {\n      //console.log(1)\n      var child = el.firstChild;\n      var i = 0;\n      while (child) {\n        cs[i++] = child;\n        child = child.nextSibling;\n      }\n      cs.length = i;\n    }\n  }\n}\n\n/**\n   * attributes;\n   * children;\n   *\n   * writeable properties:\n   * nodeValue,Attr:value,CharacterData:data\n   * prefix\n   */\nfunction _removeChild(parentNode, child) {\n  var previous = child.previousSibling;\n  var next = child.nextSibling;\n  if (previous) {\n    previous.nextSibling = next;\n  } else {\n    parentNode.firstChild = next;\n  }\n  if (next) {\n    next.previousSibling = previous;\n  } else {\n    parentNode.lastChild = previous;\n  }\n  _onUpdateChild(parentNode.ownerDocument, parentNode);\n  return child;\n}\n/**\n   * preformance key(refChild == null)\n   */\nfunction _insertBefore(parentNode, newChild, nextChild) {\n  var cp = newChild.parentNode;\n  if (cp) {\n    cp.removeChild(newChild); //remove and update\n  }\n  if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {\n    var newFirst = newChild.firstChild;\n    if (newFirst == null) {\n      return newChild;\n    }\n    var newLast = newChild.lastChild;\n  } else {\n    newFirst = newLast = newChild;\n  }\n  var pre = nextChild ? nextChild.previousSibling : parentNode.lastChild;\n\n  newFirst.previousSibling = pre;\n  newLast.nextSibling = nextChild;\n\n\n  if (pre) {\n    pre.nextSibling = newFirst;\n  } else {\n    parentNode.firstChild = newFirst;\n  }\n  if (nextChild == null) {\n    parentNode.lastChild = newLast;\n  } else {\n    nextChild.previousSibling = newLast;\n  }\n  do {\n    newFirst.parentNode = parentNode;\n  } while (newFirst !== newLast && (newFirst = newFirst.nextSibling));\n  _onUpdateChild(parentNode.ownerDocument || parentNode, parentNode);\n  //console.log(parentNode.lastChild.nextSibling == null)\n  if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\n    newChild.firstChild = newChild.lastChild = null;\n  }\n  return newChild;\n}\nfunction _appendSingleChild(parentNode, newChild) {\n  var cp = newChild.parentNode;\n  if (cp) {\n    var pre = parentNode.lastChild;\n    cp.removeChild(newChild); //remove and update\n    var pre = parentNode.lastChild;\n  }\n  var pre = parentNode.lastChild;\n  newChild.parentNode = parentNode;\n  newChild.previousSibling = pre;\n  newChild.nextSibling = null;\n  if (pre) {\n    pre.nextSibling = newChild;\n  } else {\n    parentNode.firstChild = newChild;\n  }\n  parentNode.lastChild = newChild;\n  _onUpdateChild(parentNode.ownerDocument, parentNode, newChild);\n  return newChild;\n  //console.log(\"__aa\",parentNode.lastChild.nextSibling == null)\n}\nDocument.prototype = {\n  //implementation : null,\n  nodeName: '#document',\n  nodeType: DOCUMENT_NODE,\n  doctype: null,\n  documentElement: null,\n  _inc: 1,\n\n  insertBefore: function insertBefore(newChild, refChild) {//raises\n    if (newChild.nodeType == DOCUMENT_FRAGMENT_NODE) {\n      var child = newChild.firstChild;\n      while (child) {\n        var next = child.nextSibling;\n        this.insertBefore(child, refChild);\n        child = next;\n      }\n      return newChild;\n    }\n    if (this.documentElement == null && newChild.nodeType == 1) {\n      this.documentElement = newChild;\n    }\n\n    return _insertBefore(this, newChild, refChild), newChild.ownerDocument = this, newChild;\n  },\n  removeChild: function removeChild(oldChild) {\n    if (this.documentElement == oldChild) {\n      this.documentElement = null;\n    }\n    return _removeChild(this, oldChild);\n  },\n  // Introduced in DOM Level 2:\n  importNode: function importNode(importedNode, deep) {\n    return _importNode(this, importedNode, deep);\n  },\n  // Introduced in DOM Level 2:\n  getElementById: function getElementById(id) {\n    var rtv = null;\n    _visitNode(this.documentElement, function (node) {\n      if (node.nodeType == 1) {\n        if (node.getAttribute('id') == id) {\n          rtv = node;\n          return true;\n        }\n      }\n    });\n    return rtv;\n  },\n\n  //document factory method:\n  createElement: function createElement(tagName) {\n    var node = new Element();\n    node.ownerDocument = this;\n    node.nodeName = tagName;\n    node.tagName = tagName;\n    node.childNodes = new NodeList();\n    var attrs = node.attributes = new NamedNodeMap();\n    attrs._ownerElement = node;\n    return node;\n  },\n  createDocumentFragment: function createDocumentFragment() {\n    var node = new DocumentFragment();\n    node.ownerDocument = this;\n    node.childNodes = new NodeList();\n    return node;\n  },\n  createTextNode: function createTextNode(data) {\n    var node = new Text();\n    node.ownerDocument = this;\n    node.appendData(data);\n    return node;\n  },\n  createComment: function createComment(data) {\n    var node = new Comment();\n    node.ownerDocument = this;\n    node.appendData(data);\n    return node;\n  },\n  createCDATASection: function createCDATASection(data) {\n    var node = new CDATASection();\n    node.ownerDocument = this;\n    node.appendData(data);\n    return node;\n  },\n  createProcessingInstruction: function createProcessingInstruction(target, data) {\n    var node = new ProcessingInstruction();\n    node.ownerDocument = this;\n    node.tagName = node.target = target;\n    node.nodeValue = node.data = data;\n    return node;\n  },\n  createAttribute: function createAttribute(name) {\n    var node = new Attr();\n    node.ownerDocument = this;\n    node.name = name;\n    node.nodeName = name;\n    node.localName = name;\n    node.specified = true;\n    return node;\n  },\n  createEntityReference: function createEntityReference(name) {\n    var node = new EntityReference();\n    node.ownerDocument = this;\n    node.nodeName = name;\n    return node;\n  },\n  // Introduced in DOM Level 2:\n  createElementNS: function createElementNS(namespaceURI, qualifiedName) {\n    var node = new Element();\n    var pl = qualifiedName.split(':');\n    var attrs = node.attributes = new NamedNodeMap();\n    node.childNodes = new NodeList();\n    node.ownerDocument = this;\n    node.nodeName = qualifiedName;\n    node.tagName = qualifiedName;\n    node.namespaceURI = namespaceURI;\n    if (pl.length == 2) {\n      node.prefix = pl[0];\n      node.localName = pl[1];\n    } else {\n      //el.prefix = null;\n      node.localName = qualifiedName;\n    }\n    attrs._ownerElement = node;\n    return node;\n  },\n  // Introduced in DOM Level 2:\n  createAttributeNS: function createAttributeNS(namespaceURI, qualifiedName) {\n    var node = new Attr();\n    var pl = qualifiedName.split(':');\n    node.ownerDocument = this;\n    node.nodeName = qualifiedName;\n    node.name = qualifiedName;\n    node.namespaceURI = namespaceURI;\n    node.specified = true;\n    if (pl.length == 2) {\n      node.prefix = pl[0];\n      node.localName = pl[1];\n    } else {\n      //el.prefix = null;\n      node.localName = qualifiedName;\n    }\n    return node;\n  } };\n\n_extends(Document, Node);\n\n\nfunction Element() {\n  this._nsMap = {};\n};\nElement.prototype = {\n  nodeType: ELEMENT_NODE,\n  hasAttribute: function hasAttribute(name) {\n    return this.getAttributeNode(name) != null;\n  },\n  getAttribute: function getAttribute(name) {\n    var attr = this.getAttributeNode(name);\n    return attr && attr.value || '';\n  },\n  getAttributeNode: function getAttributeNode(name) {\n    return this.attributes.getNamedItem(name);\n  },\n  setAttribute: function setAttribute(name, value) {\n    var attr = this.ownerDocument.createAttribute(name);\n    attr.value = attr.nodeValue = \"\" + value;\n    this.setAttributeNode(attr);\n  },\n  removeAttribute: function removeAttribute(name) {\n    var attr = this.getAttributeNode(name);\n    attr && this.removeAttributeNode(attr);\n  },\n\n  //four real opeartion method\n  appendChild: function appendChild(newChild) {\n    if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return this.insertBefore(newChild, null);\n    } else {\n      return _appendSingleChild(this, newChild);\n    }\n  },\n  setAttributeNode: function setAttributeNode(newAttr) {\n    return this.attributes.setNamedItem(newAttr);\n  },\n  setAttributeNodeNS: function setAttributeNodeNS(newAttr) {\n    return this.attributes.setNamedItemNS(newAttr);\n  },\n  removeAttributeNode: function removeAttributeNode(oldAttr) {\n    return this.attributes.removeNamedItem(oldAttr.nodeName);\n  },\n  //get real attribute name,and remove it by removeAttributeNode\n  removeAttributeNS: function removeAttributeNS(namespaceURI, localName) {\n    var old = this.getAttributeNodeNS(namespaceURI, localName);\n    old && this.removeAttributeNode(old);\n  },\n\n  hasAttributeNS: function hasAttributeNS(namespaceURI, localName) {\n    return this.getAttributeNodeNS(namespaceURI, localName) != null;\n  },\n  getAttributeNS: function getAttributeNS(namespaceURI, localName) {\n    var attr = this.getAttributeNodeNS(namespaceURI, localName);\n    return attr && attr.value || '';\n  },\n  setAttributeNS: function setAttributeNS(namespaceURI, qualifiedName, value) {\n    var attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);\n    attr.value = attr.nodeValue = \"\" + value;\n    this.setAttributeNode(attr);\n  },\n  getAttributeNodeNS: function getAttributeNodeNS(namespaceURI, localName) {\n    return this.attributes.getNamedItemNS(namespaceURI, localName);\n  },\n\n  getElementsByTagName: function getElementsByTagName(tagName) {\n    return new LiveNodeList(this, function (base) {\n      var ls = [];\n      _visitNode(base, function (node) {\n        if (node !== base && node.nodeType == ELEMENT_NODE && (tagName === '*' || node.tagName == tagName)) {\n          ls.push(node);\n        }\n      });\n      return ls;\n    });\n  },\n  getElementsByTagNameNS: function getElementsByTagNameNS(namespaceURI, localName) {\n    return new LiveNodeList(this, function (base) {\n      var ls = [];\n      _visitNode(base, function (node) {\n        if (node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === '*' || node.namespaceURI === namespaceURI) && (localName === '*' || node.localName == localName)) {\n          ls.push(node);\n        }\n      });\n      return ls;\n    });\n  } };\n\nDocument.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;\nDocument.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;\n\n\n_extends(Element, Node);\nfunction Attr() {\n};\nAttr.prototype.nodeType = ATTRIBUTE_NODE;\n_extends(Attr, Node);\n\n\nfunction CharacterData() {\n};\nCharacterData.prototype = {\n  data: '',\n  substringData: function substringData(offset, count) {\n    return this.data.substring(offset, offset + count);\n  },\n  appendData: function appendData(text) {\n    text = this.data + text;\n    this.nodeValue = this.data = text;\n    this.length = text.length;\n  },\n  insertData: function insertData(offset, text) {\n    this.replaceData(offset, 0, text);\n\n  },\n  appendChild: function appendChild(newChild) {\n    //if(!(newChild instanceof CharacterData)){\n    throw new Error(ExceptionMessage[3]);\n    //}\n    return Node.prototype.appendChild.apply(this, arguments);\n  },\n  deleteData: function deleteData(offset, count) {\n    this.replaceData(offset, count, \"\");\n  },\n  replaceData: function replaceData(offset, count, text) {\n    var start = this.data.substring(0, offset);\n    var end = this.data.substring(offset + count);\n    text = start + text + end;\n    this.nodeValue = this.data = text;\n    this.length = text.length;\n  } };\n\n_extends(CharacterData, Node);\nfunction Text() {\n};\nText.prototype = {\n  nodeName: \"#text\",\n  nodeType: TEXT_NODE,\n  splitText: function splitText(offset) {\n    var text = this.data;\n    var newText = text.substring(offset);\n    text = text.substring(0, offset);\n    this.data = this.nodeValue = text;\n    this.length = text.length;\n    var newNode = this.ownerDocument.createTextNode(newText);\n    if (this.parentNode) {\n      this.parentNode.insertBefore(newNode, this.nextSibling);\n    }\n    return newNode;\n  } };\n\n_extends(Text, CharacterData);\nfunction Comment() {\n};\nComment.prototype = {\n  nodeName: \"#comment\",\n  nodeType: COMMENT_NODE };\n\n_extends(Comment, CharacterData);\n\nfunction CDATASection() {\n};\nCDATASection.prototype = {\n  nodeName: \"#cdata-section\",\n  nodeType: CDATA_SECTION_NODE };\n\n_extends(CDATASection, CharacterData);\n\n\nfunction DocumentType() {\n};\nDocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;\n_extends(DocumentType, Node);\n\nfunction Notation() {\n};\nNotation.prototype.nodeType = NOTATION_NODE;\n_extends(Notation, Node);\n\nfunction Entity() {\n};\nEntity.prototype.nodeType = ENTITY_NODE;\n_extends(Entity, Node);\n\nfunction EntityReference() {\n};\nEntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;\n_extends(EntityReference, Node);\n\nfunction DocumentFragment() {\n};\nDocumentFragment.prototype.nodeName = \"#document-fragment\";\nDocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;\n_extends(DocumentFragment, Node);\n\n\nfunction ProcessingInstruction() {\n}\nProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;\n_extends(ProcessingInstruction, Node);\nfunction XMLSerializer() {\n}\nXMLSerializer.prototype.serializeToString = function (node, attributeSorter) {\n  return node.toString(attributeSorter);\n};\nNode.prototype.toString = function (attributeSorter) {\n  var buf = [];\n  serializeToString(this, buf, attributeSorter);\n  return buf.join('');\n};\nfunction serializeToString(node, buf, attributeSorter, isHTML) {\n  switch (node.nodeType) {\n    case ELEMENT_NODE:\n      var attrs = node.attributes;\n      var len = attrs.length;\n      var child = node.firstChild;\n      var nodeName = node.tagName;\n      isHTML = htmlns === node.namespaceURI || isHTML;\n      buf.push('<', nodeName);\n      if (attributeSorter) {\n        buf.sort.apply(attrs, attributeSorter);\n      }\n      for (var i = 0; i < len; i++) {\n        serializeToString(attrs.item(i), buf, attributeSorter, isHTML);\n      }\n      if (child || isHTML && !/^(?:meta|link|img|br|hr|input|button)$/i.test(nodeName)) {\n        buf.push('>');\n        //if is cdata child node\n        if (isHTML && /^script$/i.test(nodeName)) {\n          if (child) {\n            buf.push(child.data);\n          }\n        } else {\n          while (child) {\n            serializeToString(child, buf, attributeSorter, isHTML);\n            child = child.nextSibling;\n          }\n        }\n        buf.push('</', nodeName, '>');\n      } else {\n        buf.push('/>');\n      }\n      return;\n    case DOCUMENT_NODE:\n    case DOCUMENT_FRAGMENT_NODE:\n      var child = node.firstChild;\n      while (child) {\n        serializeToString(child, buf, attributeSorter, isHTML);\n        child = child.nextSibling;\n      }\n      return;\n    case ATTRIBUTE_NODE:\n      return buf.push(' ', node.name, '=\"', node.value.replace(/[<&\"]/g, _xmlEncoder), '\"');\n    case TEXT_NODE:\n      return buf.push(node.data.replace(/[<&]/g, _xmlEncoder));\n    case CDATA_SECTION_NODE:\n      return buf.push('<![CDATA[', node.data, ']]>');\n    case COMMENT_NODE:\n      return buf.push(\"<!--\", node.data, \"-->\");\n    case DOCUMENT_TYPE_NODE:\n      var pubid = node.publicId;\n      var sysid = node.systemId;\n      buf.push('<!DOCTYPE ', node.name);\n      if (pubid) {\n        buf.push(' PUBLIC \"', pubid);\n        if (sysid && sysid != '.') {\n          buf.push('\" \"', sysid);\n        }\n        buf.push('\">');\n      } else if (sysid && sysid != '.') {\n        buf.push(' SYSTEM \"', sysid, '\">');\n      } else {\n        var sub = node.internalSubset;\n        if (sub) {\n          buf.push(\" [\", sub, \"]\");\n        }\n        buf.push(\">\");\n      }\n      return;\n    case PROCESSING_INSTRUCTION_NODE:\n      return buf.push(\"<?\", node.target, \" \", node.data, \"?>\");\n    case ENTITY_REFERENCE_NODE:\n      return buf.push('&', node.nodeName, ';');\n    //case ENTITY_NODE:\n    //case NOTATION_NODE:\n    default:\n      buf.push('??', node.nodeName);}\n\n}\nfunction _importNode(doc, node, deep) {\n  var node2;\n  switch (node.nodeType) {\n    case ELEMENT_NODE:\n      node2 = node.cloneNode(false);\n      node2.ownerDocument = doc;\n    //var attrs = node2.attributes;\n    //var len = attrs.length;\n    //for(var i=0;i<len;i++){\n    //node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));\n    //}\n    case DOCUMENT_FRAGMENT_NODE:\n      break;\n    case ATTRIBUTE_NODE:\n      deep = true;\n      break;\n    //case ENTITY_REFERENCE_NODE:\n    //case PROCESSING_INSTRUCTION_NODE:\n    ////case TEXT_NODE:\n    //case CDATA_SECTION_NODE:\n    //case COMMENT_NODE:\n    //\tdeep = false;\n    //\tbreak;\n    //case DOCUMENT_NODE:\n    //case DOCUMENT_TYPE_NODE:\n    //cannot be imported.\n    //case ENTITY_NODE:\n    //case NOTATION_NODE：\n    //can not hit in level3\n    //default:throw e;\n  }\n  if (!node2) {\n    node2 = node.cloneNode(false); //false\n  }\n  node2.ownerDocument = doc;\n  node2.parentNode = null;\n  if (deep) {\n    var child = node.firstChild;\n    while (child) {\n      node2.appendChild(_importNode(doc, child, deep));\n      child = child.nextSibling;\n    }\n  }\n  return node2;\n}\n//\n//var _relationMap = {firstChild:1,lastChild:1,previousSibling:1,nextSibling:1,\n//\t\t\t\t\tattributes:1,childNodes:1,parentNode:1,documentElement:1,doctype,};\nfunction _cloneNode(doc, node, deep) {\n  var node2 = new node.constructor();\n  for (var n in node) {\n    var v = node[n];\n    if (typeof v != 'object') {\n      if (v != node2[n]) {\n        node2[n] = v;\n      }\n    }\n  }\n  if (node.childNodes) {\n    node2.childNodes = new NodeList();\n  }\n  node2.ownerDocument = doc;\n  switch (node2.nodeType) {\n    case ELEMENT_NODE:\n      var attrs = node.attributes;\n      var attrs2 = node2.attributes = new NamedNodeMap();\n      var len = attrs.length;\n      attrs2._ownerElement = node2;\n      for (var i = 0; i < len; i++) {\n        node2.setAttributeNode(_cloneNode(doc, attrs.item(i), true));\n      }\n      break;\n      ;\n    case ATTRIBUTE_NODE:\n      deep = true;}\n\n  if (deep) {\n    var child = node.firstChild;\n    while (child) {\n      node2.appendChild(_cloneNode(doc, child, deep));\n      child = child.nextSibling;\n    }\n  }\n  return node2;\n}\n\nfunction __set__(object, key, value) {\n  object[key] = value;\n}\n//do dynamic\ntry {\n  if (Object.defineProperty) {var\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    getTextContent = function getTextContent(node) {\n      switch (node.nodeType) {\n        case 1:\n        case 11:\n          var buf = [];\n          node = node.firstChild;\n          while (node) {\n            if (node.nodeType !== 7 && node.nodeType !== 8) {\n              buf.push(getTextContent(node));\n            }\n            node = node.nextSibling;\n          }\n          return buf.join('');\n        default:\n          return node.nodeValue;}\n\n    };Object.defineProperty(LiveNodeList.prototype, 'length', { get: function get() {_updateLiveList(this);return this.$$length;} });Object.defineProperty(Node.prototype, 'textContent', { get: function get() {return getTextContent(this);}, set: function set(data) {switch (this.nodeType) {case 1:case 11:while (this.firstChild) {this.removeChild(this.firstChild);}if (data || String(data)) {this.appendChild(this.ownerDocument.createTextNode(data));}break;default: //TODO:\n            this.data = data;this.value = value;this.nodeValue = data;}} });\n    __set__ = function __set__(object, key, value) {\n      //console.log(value)\n      object['$$' + key] = value;\n    };\n  }\n} catch (e) {//ie8\n}\n\nif (true) {\n  exports.DOMImplementation = DOMImplementation;\n  exports.XMLSerializer = XMLSerializer;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///16\n");

/***/ }),

/***/ 17:
/*!****************************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/utils/msgstorage.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {var Disp = __webpack_require__(/*! ./Dispatcher */ 18);\nvar msgPackager = __webpack_require__(/*! ./msgpackager */ 19);\nvar msgType = __webpack_require__(/*! ./msgtype */ 27);\nvar msgStorage = new Disp();\nvar disp = __webpack_require__(/*! ./broadcast */ 28);\n/**\r\n                                    * @receiveMsg : 接收到的消息单个消息对象，\r\n                                    * @type: 接收到的消息的类型\r\n                                    * */\nmsgStorage.saveReceiveMsg = function (receiveMsg, type) {\n  var sendableMsg;\n  if (type == msgType.IMAGE) {\n    sendableMsg = {\n      id: receiveMsg.id,\n      type: type,\n      body: {\n        id: receiveMsg.id,\n        from: receiveMsg.from,\n        to: receiveMsg.to,\n        type: receiveMsg.type,\n        ext: receiveMsg.ext,\n        chatType: receiveMsg.type,\n        toJid: \"\",\n        body: {\n          type: type,\n          url: receiveMsg.url,\n          filename: receiveMsg.filename,\n          filetype: receiveMsg.filetype,\n          size: {\n            width: receiveMsg.width,\n            height: receiveMsg.height } } } };\n\n\n\n\n  } else if (type == msgType.TEXT || type == msgType.EMOJI) {\n    // 判断如果是文本和表情消息。\n    sendableMsg = {\n      id: receiveMsg.id,\n      type: type,\n      body: {\n        id: receiveMsg.id,\n        from: receiveMsg.from,\n        to: receiveMsg.to,\n        type: receiveMsg.type, // 聊天类型， chat，聊天类型  不是消息类型\n        ext: receiveMsg.ext, // 扩展消息\n        chatType: receiveMsg.type, // 群聊类型，true时为聊天室，false时为群组\n        toJid: \"\",\n        body: {\n          type: type,\n          msg: receiveMsg.data } },\n\n\n      value: receiveMsg.data };\n\n  } else if (type == msgType.FILE) {\n    sendableMsg = {\n      id: receiveMsg.id,\n      type: type,\n      body: {\n        id: receiveMsg.id,\n        length: receiveMsg.file_length,\n        from: receiveMsg.from,\n        to: receiveMsg.to,\n        type: receiveMsg.type,\n        ext: receiveMsg.ext,\n        chatType: receiveMsg.type,\n        toJid: \"\",\n        body: {\n          type: type,\n          url: receiveMsg.url,\n          filename: receiveMsg.filename,\n          msg: \"当前不支持此格式消息展示\" } },\n\n\n      value: receiveMsg.data };\n\n  } else if (type == msgType.AUDIO) {\n    sendableMsg = {\n      id: receiveMsg.id,\n      type: type,\n      accessToken: receiveMsg.token || receiveMsg.accessToken,\n      body: {\n        id: receiveMsg.id,\n        length: receiveMsg.length,\n        from: receiveMsg.from,\n        to: receiveMsg.to,\n        type: receiveMsg.type,\n        ext: receiveMsg.ext,\n        chatType: type,\n        toJid: \"\",\n        body: {\n          type: type,\n          url: receiveMsg.url,\n          filename: receiveMsg.filename,\n          filetype: receiveMsg.filetype,\n          from: receiveMsg.from,\n          to: receiveMsg.to } } };\n\n\n\n  } else {\n    return;\n  }\n  this.saveMsg(sendableMsg, type, receiveMsg);\n};\n\n/**\r\n    * sendableMsg：上方格式化的数据\r\n    * type: 消息类型\r\n    * receiveMsg： 接收的原始消息数据\r\n    * */\nmsgStorage.saveMsg = function (sendableMsg, type, receiveMsg) {\n  // console.log('sendableMsgsendableMsg', sendableMsg)\n  var me = this;\n  var myName = uni.getStorageSync(\"myUsername\"); // 获取到当前用户的名称\n  __f__(\"log\", myName, \" at webIM\\\\utils\\\\msgstorage.js:117\");\n  var sessionKey;\n  // 仅用作群聊收消息，发消息没有 receiveMsg\n  if (receiveMsg && receiveMsg.type == \"groupchat\") {\n    sessionKey = receiveMsg.to + myName;\n  }\n  // 群聊发 & 单发 & 单收\n  else {\n      // 判断消息from 是否 来自于当前用户， 如果是sessionKey 的值为  to加name  否则 是from 加name\n      sessionKey = sendableMsg.body.from == myName ?\n      sendableMsg.body.to + myName :\n      sendableMsg.body.from + myName;\n\n      __f__(\"log\", sendableMsg, \" at webIM\\\\utils\\\\msgstorage.js:130\");\n      __f__(\"log\", sessionKey, \" at webIM\\\\utils\\\\msgstorage.js:131\");\n    }\n  var curChatMsg = wx.getStorageSync(sessionKey) || [];\n  var renderableMsg = msgPackager(sendableMsg, type, myName);\n  if (type == msgType.AUDIO) {\n    renderableMsg.msg.length = sendableMsg.body.length;\n    renderableMsg.msg.token = sendableMsg.accessToken;\n  }\n  curChatMsg.push(renderableMsg);\n  //console.log('renderableMsgrenderableMsg', renderableMsg)\n  if (type == msgType.AUDIO) {\n    renderableMsg.msg.token = sendableMsg.accessToken;\n    //如果是音频则请求服务器转码\n    // wx.downloadFile({\n    // \turl: sendableMsg.body.body.url,\n    // \theader: {\n    // \t\t\"X-Requested-With\": \"XMLHttpRequest\",\n    // \t\tAccept: \"audio/mp3\",\n    // \t\tAuthorization: \"Bearer \" + sendableMsg.accessToken\n    // \t},\n    // \tsuccess(res){\n    // \t\t// wx.playVoice({\n    // \t\t// \tfilePath: res.tempFilePath\n    // \t\t// });\n    // \t\trenderableMsg.msg.url = res.tempFilePath;\n\n    // \t\tsave();\n    // \t},\n    // \tfail(e){\n    // \t\tconsole.log(\"downloadFile failed\", e);\n    // \t}\n    // });\n  }\n  // else{\n  // \tsave();\n  // }\n\n  save();\n\n  function save() {\n    __f__(\"log\", \"保存消息\", curChatMsg, \" at webIM\\\\utils\\\\msgstorage.js:171\");\n\n    var memName = curChatMsg[0].info.from == myName ? curChatMsg[0].info.to : curChatMsg[0].info.from;\n    var fromName = curChatMsg[0].info.from == myName ? curChatMsg[0].ext.toName : curChatMsg[0].ext.myName;\n    var avatarImg = curChatMsg[0].info.from == myName ? curChatMsg[0].ext.toImg : curChatMsg[0].ext.fromAvatar;\n    __f__(\"log\", getApp().globalData.memberList, \" at webIM\\\\utils\\\\msgstorage.js:176\");\n    __f__(\"log\", memName, \" at webIM\\\\utils\\\\msgstorage.js:177\");\n    // getApp().globalData.memberList.map((item, index) => {\n    // \tif (item.name === memName) {\n    // \t\tconsole.log('我不是第一条新消息')\n    // \t\tlet a={\n    // \t\t\tname: memName,\n    // \t\t\t// nickName: item.nickName,\n    // \t\t\t// avatar: item.avatar\n    // \t\t\tnickName: fromName,\n    // \t\t\tavatar: avatarImg\n    // \t\t}\n    // \t\tgetApp().globalData.memberList.splice(index, 1)\n    // \t\tgetApp().globalData.memberList.unshift(a)\n    // \t}\n    // })\n    if (some(getApp().globalData.memberList, memName)) {\n      __f__(\"log\", '我已经有了', \" at webIM\\\\utils\\\\msgstorage.js:193\");\n      getApp().globalData.memberList.map(function (item, index) {\n        if (item.name === memName) {\n          __f__(\"log\", '我不是第一条新消息', \" at webIM\\\\utils\\\\msgstorage.js:196\");\n          var _a = {\n            name: memName,\n            // nickName: item.nickName,\n            // avatar: item.avatar\n            nickName: fromName,\n            avatar: avatarImg };\n\n          getApp().globalData.memberList.splice(index, 1);\n          getApp().globalData.memberList.unshift(_a);\n        }\n      });\n    } else {\n      __f__(\"log\", '我还没有', \" at webIM\\\\utils\\\\msgstorage.js:209\");\n      var _a2 = {\n        name: memName,\n        // nickName: item.nickName,\n        // avatar: item.avatar\n        nickName: fromName,\n        avatar: avatarImg\n\n        // getApp().globalData.memberList.splice(index, 1)\n      };getApp().globalData.memberList.unshift(_a2);\n    }\n\n    function some(arr, aName) {\n      return arr.some(function (item, index) {\n        return item.name == aName;\n      });\n\n    }\n    // 如果为空,则是第一条消息\n    if (getApp().globalData.memberList == \"\") {\n      __f__(\"log\", '我是第一条新消息', \" at webIM\\\\utils\\\\msgstorage.js:229\");\n      var _a3 = {\n        name: memName,\n        nickName: fromName,\n        avatar: avatarImg };\n\n      getApp().globalData.memberList.unshift(_a3);\n    }\n    __f__(\"log\", getApp().globalData.memberList, \" at webIM\\\\utils\\\\msgstorage.js:237\");\n    var a = getApp().globalData.memberList;\n    uni.setStorageSync(\"memberList\", a);\n\n    wx.setStorage({\n      key: sessionKey,\n      data: curChatMsg,\n      success: function success() {\n        if (type == msgType.AUDIO || type == msgType.VIDEO) {\n          disp.fire('em.chat.audio.fileLoaded');\n        }\n        me.fire(\"newChatMsg\", renderableMsg, type, curChatMsg, sessionKey);\n      } });\n\n  }\n};\nmodule.exports = msgStorage;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vd2ViSU0vdXRpbHMvbXNnc3RvcmFnZS5qcyJdLCJuYW1lcyI6WyJEaXNwIiwicmVxdWlyZSIsIm1zZ1BhY2thZ2VyIiwibXNnVHlwZSIsIm1zZ1N0b3JhZ2UiLCJkaXNwIiwic2F2ZVJlY2VpdmVNc2ciLCJyZWNlaXZlTXNnIiwidHlwZSIsInNlbmRhYmxlTXNnIiwiSU1BR0UiLCJpZCIsImJvZHkiLCJmcm9tIiwidG8iLCJleHQiLCJjaGF0VHlwZSIsInRvSmlkIiwidXJsIiwiZmlsZW5hbWUiLCJmaWxldHlwZSIsInNpemUiLCJ3aWR0aCIsImhlaWdodCIsIlRFWFQiLCJFTU9KSSIsIm1zZyIsImRhdGEiLCJ2YWx1ZSIsIkZJTEUiLCJsZW5ndGgiLCJmaWxlX2xlbmd0aCIsIkFVRElPIiwiYWNjZXNzVG9rZW4iLCJ0b2tlbiIsInNhdmVNc2ciLCJtZSIsIm15TmFtZSIsInVuaSIsImdldFN0b3JhZ2VTeW5jIiwic2Vzc2lvbktleSIsImN1ckNoYXRNc2ciLCJ3eCIsInJlbmRlcmFibGVNc2ciLCJwdXNoIiwic2F2ZSIsIm1lbU5hbWUiLCJpbmZvIiwiZnJvbU5hbWUiLCJ0b05hbWUiLCJhdmF0YXJJbWciLCJ0b0ltZyIsImZyb21BdmF0YXIiLCJnZXRBcHAiLCJnbG9iYWxEYXRhIiwibWVtYmVyTGlzdCIsInNvbWUiLCJtYXAiLCJpdGVtIiwiaW5kZXgiLCJuYW1lIiwiYSIsIm5pY2tOYW1lIiwiYXZhdGFyIiwic3BsaWNlIiwidW5zaGlmdCIsImFyciIsImFOYW1lIiwic2V0U3RvcmFnZVN5bmMiLCJzZXRTdG9yYWdlIiwia2V5Iiwic3VjY2VzcyIsIlZJREVPIiwiZmlyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJrREFBQSxJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsc0JBQUQsQ0FBbEI7QUFDQSxJQUFJQyxXQUFXLEdBQUdELG1CQUFPLENBQUMsdUJBQUQsQ0FBekI7QUFDQSxJQUFJRSxPQUFPLEdBQUdG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aXNwID0gcmVxdWlyZShcIi4vRGlzcGF0Y2hlclwiKTtcclxubGV0IG1zZ1BhY2thZ2VyID0gcmVxdWlyZShcIi4vbXNncGFja2FnZXJcIik7XHJcbmxldCBtc2dUeXBlID0gcmVxdWlyZShcIi4vbXNndHlwZVwiKTtcclxubGV0IG1zZ1N0b3JhZ2UgPSBuZXcgRGlzcCgpO1xyXG5sZXQgZGlzcCA9IHJlcXVpcmUoXCIuL2Jyb2FkY2FzdFwiKTtcclxuLyoqXHJcbiAqIEByZWNlaXZlTXNnIDog5o6l5pS25Yiw55qE5raI5oGv5Y2V5Liq5raI5oGv5a+56LGh77yMXHJcbiAqIEB0eXBlOiDmjqXmlLbliLDnmoTmtojmga/nmoTnsbvlnotcclxuICogKi9cclxubXNnU3RvcmFnZS5zYXZlUmVjZWl2ZU1zZyA9IGZ1bmN0aW9uKHJlY2VpdmVNc2csIHR5cGUpIHtcclxuXHRsZXQgc2VuZGFibGVNc2c7XHJcblx0aWYgKHR5cGUgPT0gbXNnVHlwZS5JTUFHRSkge1xyXG5cdFx0c2VuZGFibGVNc2cgPSB7XHJcblx0XHRcdGlkOiByZWNlaXZlTXNnLmlkLFxyXG5cdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRib2R5OiB7XHJcblx0XHRcdFx0aWQ6IHJlY2VpdmVNc2cuaWQsXHJcblx0XHRcdFx0ZnJvbTogcmVjZWl2ZU1zZy5mcm9tLFxyXG5cdFx0XHRcdHRvOiByZWNlaXZlTXNnLnRvLFxyXG5cdFx0XHRcdHR5cGU6IHJlY2VpdmVNc2cudHlwZSxcclxuXHRcdFx0XHRleHQ6IHJlY2VpdmVNc2cuZXh0LFxyXG5cdFx0XHRcdGNoYXRUeXBlOiByZWNlaXZlTXNnLnR5cGUsXHJcblx0XHRcdFx0dG9KaWQ6IFwiXCIsXHJcblx0XHRcdFx0Ym9keToge1xyXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRcdHVybDogcmVjZWl2ZU1zZy51cmwsXHJcblx0XHRcdFx0XHRmaWxlbmFtZTogcmVjZWl2ZU1zZy5maWxlbmFtZSxcclxuXHRcdFx0XHRcdGZpbGV0eXBlOiByZWNlaXZlTXNnLmZpbGV0eXBlLFxyXG5cdFx0XHRcdFx0c2l6ZToge1xyXG5cdFx0XHRcdFx0XHR3aWR0aDogcmVjZWl2ZU1zZy53aWR0aCxcclxuXHRcdFx0XHRcdFx0aGVpZ2h0OiByZWNlaXZlTXNnLmhlaWdodFxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9LFxyXG5cdFx0fTtcclxuXHR9IGVsc2UgaWYgKHR5cGUgPT0gbXNnVHlwZS5URVhUIHx8IHR5cGUgPT0gbXNnVHlwZS5FTU9KSSkge1xyXG5cdFx0Ly8g5Yik5pat5aaC5p6c5piv5paH5pys5ZKM6KGo5oOF5raI5oGv44CCXHJcblx0XHRzZW5kYWJsZU1zZyA9IHtcclxuXHRcdFx0aWQ6IHJlY2VpdmVNc2cuaWQsXHJcblx0XHRcdHR5cGU6IHR5cGUsXHJcblx0XHRcdGJvZHk6IHtcclxuXHRcdFx0XHRpZDogcmVjZWl2ZU1zZy5pZCxcclxuXHRcdFx0XHRmcm9tOiByZWNlaXZlTXNnLmZyb20sXHJcblx0XHRcdFx0dG86IHJlY2VpdmVNc2cudG8sXHJcblx0XHRcdFx0dHlwZTogcmVjZWl2ZU1zZy50eXBlLCAvLyDogYrlpKnnsbvlnovvvIwgY2hhdO+8jOiBiuWkqeexu+WeiyAg5LiN5piv5raI5oGv57G75Z6LXHJcblx0XHRcdFx0ZXh0OiByZWNlaXZlTXNnLmV4dCwgLy8g5omp5bGV5raI5oGvXHJcblx0XHRcdFx0Y2hhdFR5cGU6IHJlY2VpdmVNc2cudHlwZSwgLy8g576k6IGK57G75Z6L77yMdHJ1ZeaXtuS4uuiBiuWkqeWupO+8jGZhbHNl5pe25Li6576k57uEXHJcblx0XHRcdFx0dG9KaWQ6IFwiXCIsXHJcblx0XHRcdFx0Ym9keToge1xyXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRcdG1zZzogcmVjZWl2ZU1zZy5kYXRhLFxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0sXHJcblx0XHRcdHZhbHVlOiByZWNlaXZlTXNnLmRhdGFcclxuXHRcdH07XHJcblx0fSBlbHNlIGlmICh0eXBlID09IG1zZ1R5cGUuRklMRSkge1xyXG5cdFx0c2VuZGFibGVNc2cgPSB7XHJcblx0XHRcdGlkOiByZWNlaXZlTXNnLmlkLFxyXG5cdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRib2R5OiB7XHJcblx0XHRcdFx0aWQ6IHJlY2VpdmVNc2cuaWQsXHJcblx0XHRcdFx0bGVuZ3RoOiByZWNlaXZlTXNnLmZpbGVfbGVuZ3RoLFxyXG5cdFx0XHRcdGZyb206IHJlY2VpdmVNc2cuZnJvbSxcclxuXHRcdFx0XHR0bzogcmVjZWl2ZU1zZy50byxcclxuXHRcdFx0XHR0eXBlOiByZWNlaXZlTXNnLnR5cGUsXHJcblx0XHRcdFx0ZXh0OiByZWNlaXZlTXNnLmV4dCxcclxuXHRcdFx0XHRjaGF0VHlwZTogcmVjZWl2ZU1zZy50eXBlLFxyXG5cdFx0XHRcdHRvSmlkOiBcIlwiLFxyXG5cdFx0XHRcdGJvZHk6IHtcclxuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXHJcblx0XHRcdFx0XHR1cmw6IHJlY2VpdmVNc2cudXJsLFxyXG5cdFx0XHRcdFx0ZmlsZW5hbWU6IHJlY2VpdmVNc2cuZmlsZW5hbWUsXHJcblx0XHRcdFx0XHRtc2c6IFwi5b2T5YmN5LiN5pSv5oyB5q2k5qC85byP5raI5oGv5bGV56S6XCIsXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSxcclxuXHRcdFx0dmFsdWU6IHJlY2VpdmVNc2cuZGF0YVxyXG5cdFx0fTtcclxuXHR9IGVsc2UgaWYgKHR5cGUgPT0gbXNnVHlwZS5BVURJTykge1xyXG5cdFx0c2VuZGFibGVNc2cgPSB7XHJcblx0XHRcdGlkOiByZWNlaXZlTXNnLmlkLFxyXG5cdFx0XHR0eXBlOiB0eXBlLFxyXG5cdFx0XHRhY2Nlc3NUb2tlbjogcmVjZWl2ZU1zZy50b2tlbiB8fCByZWNlaXZlTXNnLmFjY2Vzc1Rva2VuLFxyXG5cdFx0XHRib2R5OiB7XHJcblx0XHRcdFx0aWQ6IHJlY2VpdmVNc2cuaWQsXHJcblx0XHRcdFx0bGVuZ3RoOiByZWNlaXZlTXNnLmxlbmd0aCxcclxuXHRcdFx0XHRmcm9tOiByZWNlaXZlTXNnLmZyb20sXHJcblx0XHRcdFx0dG86IHJlY2VpdmVNc2cudG8sXHJcblx0XHRcdFx0dHlwZTogcmVjZWl2ZU1zZy50eXBlLFxyXG5cdFx0XHRcdGV4dDogcmVjZWl2ZU1zZy5leHQsXHJcblx0XHRcdFx0Y2hhdFR5cGU6IHR5cGUsXHJcblx0XHRcdFx0dG9KaWQ6IFwiXCIsXHJcblx0XHRcdFx0Ym9keToge1xyXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0XHRcdHVybDogcmVjZWl2ZU1zZy51cmwsXHJcblx0XHRcdFx0XHRmaWxlbmFtZTogcmVjZWl2ZU1zZy5maWxlbmFtZSxcclxuXHRcdFx0XHRcdGZpbGV0eXBlOiByZWNlaXZlTXNnLmZpbGV0eXBlLFxyXG5cdFx0XHRcdFx0ZnJvbTogcmVjZWl2ZU1zZy5mcm9tLFxyXG5cdFx0XHRcdFx0dG86IHJlY2VpdmVNc2cudG9cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9LFxyXG5cdFx0fTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0cmV0dXJuO1xyXG5cdH1cclxuXHR0aGlzLnNhdmVNc2coc2VuZGFibGVNc2csIHR5cGUsIHJlY2VpdmVNc2cpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIHNlbmRhYmxlTXNn77ya5LiK5pa55qC85byP5YyW55qE5pWw5o2uXHJcbiAqIHR5cGU6IOa2iOaBr+exu+Wei1xyXG4gKiByZWNlaXZlTXNn77yaIOaOpeaUtueahOWOn+Wni+a2iOaBr+aVsOaNrlxyXG4gKiAqL1xyXG5tc2dTdG9yYWdlLnNhdmVNc2cgPSBmdW5jdGlvbihzZW5kYWJsZU1zZywgdHlwZSwgcmVjZWl2ZU1zZykge1xyXG5cdC8vIGNvbnNvbGUubG9nKCdzZW5kYWJsZU1zZ3NlbmRhYmxlTXNnJywgc2VuZGFibGVNc2cpXHJcblx0bGV0IG1lID0gdGhpcztcclxuXHRsZXQgbXlOYW1lID0gdW5pLmdldFN0b3JhZ2VTeW5jKFwibXlVc2VybmFtZVwiKTsgLy8g6I635Y+W5Yiw5b2T5YmN55So5oi355qE5ZCN56ewXHJcblx0Y29uc29sZS5sb2cobXlOYW1lKVxyXG5cdGxldCBzZXNzaW9uS2V5O1xyXG5cdC8vIOS7heeUqOS9nOe+pOiBiuaUtua2iOaBr++8jOWPkea2iOaBr+ayoeaciSByZWNlaXZlTXNnXHJcblx0aWYgKHJlY2VpdmVNc2cgJiYgcmVjZWl2ZU1zZy50eXBlID09IFwiZ3JvdXBjaGF0XCIpIHtcclxuXHRcdHNlc3Npb25LZXkgPSByZWNlaXZlTXNnLnRvICsgbXlOYW1lO1xyXG5cdH1cclxuXHQvLyDnvqTogYrlj5EgJiDljZXlj5EgJiDljZXmlLZcclxuXHRlbHNlIHtcclxuXHRcdC8vIOWIpOaWrea2iOaBr2Zyb20g5piv5ZCmIOadpeiHquS6juW9k+WJjeeUqOaIt++8jCDlpoLmnpzmmK9zZXNzaW9uS2V5IOeahOWAvOS4uiAgdG/liqBuYW1lICDlkKbliJkg5pivZnJvbSDliqBuYW1lXHJcblx0XHRzZXNzaW9uS2V5ID0gc2VuZGFibGVNc2cuYm9keS5mcm9tID09IG15TmFtZSA/XHJcblx0XHRcdHNlbmRhYmxlTXNnLmJvZHkudG8gKyBteU5hbWUgOlxyXG5cdFx0XHRzZW5kYWJsZU1zZy5ib2R5LmZyb20gKyBteU5hbWU7XHJcblxyXG5cdFx0Y29uc29sZS5sb2coc2VuZGFibGVNc2cpXHJcblx0XHRjb25zb2xlLmxvZyhzZXNzaW9uS2V5KVxyXG5cdH1cclxuXHRsZXQgY3VyQ2hhdE1zZyA9IHd4LmdldFN0b3JhZ2VTeW5jKHNlc3Npb25LZXkpIHx8IFtdO1xyXG5cdGxldCByZW5kZXJhYmxlTXNnID0gbXNnUGFja2FnZXIoc2VuZGFibGVNc2csIHR5cGUsIG15TmFtZSk7XHJcblx0aWYgKHR5cGUgPT0gbXNnVHlwZS5BVURJTykge1xyXG5cdFx0cmVuZGVyYWJsZU1zZy5tc2cubGVuZ3RoID0gc2VuZGFibGVNc2cuYm9keS5sZW5ndGg7XHJcblx0XHRyZW5kZXJhYmxlTXNnLm1zZy50b2tlbiA9IHNlbmRhYmxlTXNnLmFjY2Vzc1Rva2VuO1xyXG5cdH1cclxuXHRjdXJDaGF0TXNnLnB1c2gocmVuZGVyYWJsZU1zZyk7XHJcblx0Ly9jb25zb2xlLmxvZygncmVuZGVyYWJsZU1zZ3JlbmRlcmFibGVNc2cnLCByZW5kZXJhYmxlTXNnKVxyXG5cdGlmICh0eXBlID09IG1zZ1R5cGUuQVVESU8pIHtcclxuXHRcdHJlbmRlcmFibGVNc2cubXNnLnRva2VuID0gc2VuZGFibGVNc2cuYWNjZXNzVG9rZW47XHJcblx0XHQvL+WmguaenOaYr+mfs+mikeWImeivt+axguacjeWKoeWZqOi9rOeggVxyXG5cdFx0Ly8gd3guZG93bmxvYWRGaWxlKHtcclxuXHRcdC8vIFx0dXJsOiBzZW5kYWJsZU1zZy5ib2R5LmJvZHkudXJsLFxyXG5cdFx0Ly8gXHRoZWFkZXI6IHtcclxuXHRcdC8vIFx0XHRcIlgtUmVxdWVzdGVkLVdpdGhcIjogXCJYTUxIdHRwUmVxdWVzdFwiLFxyXG5cdFx0Ly8gXHRcdEFjY2VwdDogXCJhdWRpby9tcDNcIixcclxuXHRcdC8vIFx0XHRBdXRob3JpemF0aW9uOiBcIkJlYXJlciBcIiArIHNlbmRhYmxlTXNnLmFjY2Vzc1Rva2VuXHJcblx0XHQvLyBcdH0sXHJcblx0XHQvLyBcdHN1Y2Nlc3MocmVzKXtcclxuXHRcdC8vIFx0XHQvLyB3eC5wbGF5Vm9pY2Uoe1xyXG5cdFx0Ly8gXHRcdC8vIFx0ZmlsZVBhdGg6IHJlcy50ZW1wRmlsZVBhdGhcclxuXHRcdC8vIFx0XHQvLyB9KTtcclxuXHRcdC8vIFx0XHRyZW5kZXJhYmxlTXNnLm1zZy51cmwgPSByZXMudGVtcEZpbGVQYXRoO1xyXG5cclxuXHRcdC8vIFx0XHRzYXZlKCk7XHJcblx0XHQvLyBcdH0sXHJcblx0XHQvLyBcdGZhaWwoZSl7XHJcblx0XHQvLyBcdFx0Y29uc29sZS5sb2coXCJkb3dubG9hZEZpbGUgZmFpbGVkXCIsIGUpO1xyXG5cdFx0Ly8gXHR9XHJcblx0XHQvLyB9KTtcclxuXHR9XHJcblx0Ly8gZWxzZXtcclxuXHQvLyBcdHNhdmUoKTtcclxuXHQvLyB9XHJcblxyXG5cdHNhdmUoKTtcclxuXHJcblx0ZnVuY3Rpb24gc2F2ZSgpIHtcclxuXHRcdGNvbnNvbGUubG9nKFwi5L+d5a2Y5raI5oGvXCIsIGN1ckNoYXRNc2cpXHJcblxyXG5cdFx0bGV0IG1lbU5hbWUgPSBjdXJDaGF0TXNnWzBdLmluZm8uZnJvbSA9PSBteU5hbWUgPyBjdXJDaGF0TXNnWzBdLmluZm8udG8gOiBjdXJDaGF0TXNnWzBdLmluZm8uZnJvbVxyXG5cdFx0bGV0IGZyb21OYW1lID0gY3VyQ2hhdE1zZ1swXS5pbmZvLmZyb20gPT0gbXlOYW1lID8gY3VyQ2hhdE1zZ1swXS5leHQudG9OYW1lIDogY3VyQ2hhdE1zZ1swXS5leHQubXlOYW1lXHJcblx0XHRsZXQgYXZhdGFySW1nID0gY3VyQ2hhdE1zZ1swXS5pbmZvLmZyb20gPT0gbXlOYW1lID8gY3VyQ2hhdE1zZ1swXS5leHQudG9JbWcgOiBjdXJDaGF0TXNnWzBdLmV4dC5mcm9tQXZhdGFyXHJcblx0XHRjb25zb2xlLmxvZyhnZXRBcHAoKS5nbG9iYWxEYXRhLm1lbWJlckxpc3QpXHJcblx0XHRjb25zb2xlLmxvZyhtZW1OYW1lKVxyXG5cdFx0Ly8gZ2V0QXBwKCkuZ2xvYmFsRGF0YS5tZW1iZXJMaXN0Lm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcclxuXHRcdC8vIFx0aWYgKGl0ZW0ubmFtZSA9PT0gbWVtTmFtZSkge1xyXG5cdFx0Ly8gXHRcdGNvbnNvbGUubG9nKCfmiJHkuI3mmK/nrKzkuIDmnaHmlrDmtojmga8nKVxyXG5cdFx0Ly8gXHRcdGxldCBhPXtcclxuXHRcdC8vIFx0XHRcdG5hbWU6IG1lbU5hbWUsXHJcblx0XHQvLyBcdFx0XHQvLyBuaWNrTmFtZTogaXRlbS5uaWNrTmFtZSxcclxuXHRcdC8vIFx0XHRcdC8vIGF2YXRhcjogaXRlbS5hdmF0YXJcclxuXHRcdC8vIFx0XHRcdG5pY2tOYW1lOiBmcm9tTmFtZSxcclxuXHRcdC8vIFx0XHRcdGF2YXRhcjogYXZhdGFySW1nXHJcblx0XHQvLyBcdFx0fVxyXG5cdFx0Ly8gXHRcdGdldEFwcCgpLmdsb2JhbERhdGEubWVtYmVyTGlzdC5zcGxpY2UoaW5kZXgsIDEpXHJcblx0XHQvLyBcdFx0Z2V0QXBwKCkuZ2xvYmFsRGF0YS5tZW1iZXJMaXN0LnVuc2hpZnQoYSlcclxuXHRcdC8vIFx0fVxyXG5cdFx0Ly8gfSlcclxuXHRcdGlmIChzb21lKGdldEFwcCgpLmdsb2JhbERhdGEubWVtYmVyTGlzdCwgbWVtTmFtZSkpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coJ+aIkeW3sue7j+acieS6hicpXHJcblx0XHRcdGdldEFwcCgpLmdsb2JhbERhdGEubWVtYmVyTGlzdC5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XHJcblx0XHRcdFx0aWYgKGl0ZW0ubmFtZSA9PT0gbWVtTmFtZSkge1xyXG5cdFx0XHRcdFx0Y29uc29sZS5sb2coJ+aIkeS4jeaYr+esrOS4gOadoeaWsOa2iOaBrycpXHJcblx0XHRcdFx0XHRsZXQgYT17XHJcblx0XHRcdFx0XHRcdG5hbWU6IG1lbU5hbWUsXHJcblx0XHRcdFx0XHRcdC8vIG5pY2tOYW1lOiBpdGVtLm5pY2tOYW1lLFxyXG5cdFx0XHRcdFx0XHQvLyBhdmF0YXI6IGl0ZW0uYXZhdGFyXHJcblx0XHRcdFx0XHRcdG5pY2tOYW1lOiBmcm9tTmFtZSxcclxuXHRcdFx0XHRcdFx0YXZhdGFyOiBhdmF0YXJJbWdcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGdldEFwcCgpLmdsb2JhbERhdGEubWVtYmVyTGlzdC5zcGxpY2UoaW5kZXgsIDEpXHJcblx0XHRcdFx0XHRnZXRBcHAoKS5nbG9iYWxEYXRhLm1lbWJlckxpc3QudW5zaGlmdChhKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdH1lbHNle1xyXG5cdFx0XHRjb25zb2xlLmxvZygn5oiR6L+Y5rKh5pyJJylcclxuXHRcdFx0bGV0IGEgPSB7XHJcblx0XHRcdFx0bmFtZTogbWVtTmFtZSxcclxuXHRcdFx0XHQvLyBuaWNrTmFtZTogaXRlbS5uaWNrTmFtZSxcclxuXHRcdFx0XHQvLyBhdmF0YXI6IGl0ZW0uYXZhdGFyXHJcblx0XHRcdFx0bmlja05hbWU6IGZyb21OYW1lLFxyXG5cdFx0XHRcdGF2YXRhcjogYXZhdGFySW1nXHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gZ2V0QXBwKCkuZ2xvYmFsRGF0YS5tZW1iZXJMaXN0LnNwbGljZShpbmRleCwgMSlcclxuXHRcdFx0Z2V0QXBwKCkuZ2xvYmFsRGF0YS5tZW1iZXJMaXN0LnVuc2hpZnQoYSlcclxuXHRcdH1cclxuXHJcblx0XHRmdW5jdGlvbiBzb21lKGFyciwgYU5hbWUpIHtcclxuXHRcdFx0cmV0dXJuIGFyci5zb21lKChpdGVtLCBpbmRleCkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiBpdGVtLm5hbWUgPT0gYU5hbWVcclxuXHRcdFx0fSlcclxuXHJcblx0XHR9XHJcblx0XHQvLyDlpoLmnpzkuLrnqbos5YiZ5piv56ys5LiA5p2h5raI5oGvXHJcblx0XHRpZiAoZ2V0QXBwKCkuZ2xvYmFsRGF0YS5tZW1iZXJMaXN0ID09IFwiXCIpIHtcclxuXHRcdFx0Y29uc29sZS5sb2coJ+aIkeaYr+esrOS4gOadoeaWsOa2iOaBrycpXHJcblx0XHRcdGxldCBhID0ge1xyXG5cdFx0XHRcdG5hbWU6IG1lbU5hbWUsXHJcblx0XHRcdFx0bmlja05hbWU6IGZyb21OYW1lLFxyXG5cdFx0XHRcdGF2YXRhcjogYXZhdGFySW1nXHJcblx0XHRcdH1cclxuXHRcdFx0Z2V0QXBwKCkuZ2xvYmFsRGF0YS5tZW1iZXJMaXN0LnVuc2hpZnQoYSlcclxuXHRcdH1cclxuXHRcdGNvbnNvbGUubG9nKGdldEFwcCgpLmdsb2JhbERhdGEubWVtYmVyTGlzdClcclxuXHRcdGxldCBhID0gZ2V0QXBwKCkuZ2xvYmFsRGF0YS5tZW1iZXJMaXN0XHJcblx0XHR1bmkuc2V0U3RvcmFnZVN5bmMoXCJtZW1iZXJMaXN0XCIsIGEpXHJcblxyXG5cdFx0d3guc2V0U3RvcmFnZSh7XHJcblx0XHRcdGtleTogc2Vzc2lvbktleSxcclxuXHRcdFx0ZGF0YTogY3VyQ2hhdE1zZyxcclxuXHRcdFx0c3VjY2VzcygpIHtcclxuXHRcdFx0XHRpZiAodHlwZSA9PSBtc2dUeXBlLkFVRElPIHx8IHR5cGUgPT0gbXNnVHlwZS5WSURFTykge1xyXG5cdFx0XHRcdFx0ZGlzcC5maXJlKCdlbS5jaGF0LmF1ZGlvLmZpbGVMb2FkZWQnKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bWUuZmlyZShcIm5ld0NoYXRNc2dcIiwgcmVuZGVyYWJsZU1zZywgdHlwZSwgY3VyQ2hhdE1zZywgc2Vzc2lvbktleSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxufTtcclxubW9kdWxlLmV4cG9ydHMgPSBtc2dTdG9yYWdlO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n");

/***/ }),

/***/ 174:
/*!************************************************!*\
  !*** D:/张总新版app/maiYa01/components/uqrcode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__, uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; //---------------------------------------------------------------------\n// github https://github.com/Sansnn/uQRCode\n//---------------------------------------------------------------------\n\nvar uQRCode = {};\n\n(function () {\n  //---------------------------------------------------------------------\n  // QRCode for JavaScript\n  //\n  // Copyright (c) 2009 Kazuhiko Arase\n  //\n  // URL: http://www.d-project.com/\n  //\n  // Licensed under the MIT license:\n  //   http://www.opensource.org/licenses/mit-license.php\n  //\n  // The word \"QR Code\" is registered trademark of \n  // DENSO WAVE INCORPORATED\n  //   http://www.denso-wave.com/qrcode/faqpatent-e.html\n  //\n  //---------------------------------------------------------------------\n\n  //---------------------------------------------------------------------\n  // QR8bitByte\n  //---------------------------------------------------------------------\n\n  function QR8bitByte(data) {\n    this.mode = QRMode.MODE_8BIT_BYTE;\n    this.data = data;\n  }\n\n  QR8bitByte.prototype = {\n\n    getLength: function getLength(buffer) {\n      return this.data.length;\n    },\n\n    write: function write(buffer) {\n      for (var i = 0; i < this.data.length; i++) {\n        // not JIS ...\n        buffer.put(this.data.charCodeAt(i), 8);\n      }\n    } };\n\n\n  //---------------------------------------------------------------------\n  // QRCode\n  //---------------------------------------------------------------------\n\n  function QRCode(typeNumber, errorCorrectLevel) {\n    this.typeNumber = typeNumber;\n    this.errorCorrectLevel = errorCorrectLevel;\n    this.modules = null;\n    this.moduleCount = 0;\n    this.dataCache = null;\n    this.dataList = new Array();\n  }\n\n  QRCode.prototype = {\n\n    addData: function addData(data) {\n      var newData = new QR8bitByte(data);\n      this.dataList.push(newData);\n      this.dataCache = null;\n    },\n\n    isDark: function isDark(row, col) {\n      if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {\n        throw new Error(row + \",\" + col);\n      }\n      return this.modules[row][col];\n    },\n\n    getModuleCount: function getModuleCount() {\n      return this.moduleCount;\n    },\n\n    make: function make() {\n      // Calculate automatically typeNumber if provided is < 1\n      if (this.typeNumber < 1) {\n        var typeNumber = 1;\n        for (typeNumber = 1; typeNumber < 40; typeNumber++) {\n          var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);\n\n          var buffer = new QRBitBuffer();\n          var totalDataCount = 0;\n          for (var i = 0; i < rsBlocks.length; i++) {\n            totalDataCount += rsBlocks[i].dataCount;\n          }\n\n          for (var i = 0; i < this.dataList.length; i++) {\n            var data = this.dataList[i];\n            buffer.put(data.mode, 4);\n            buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));\n            data.write(buffer);\n          }\n          if (buffer.getLengthInBits() <= totalDataCount * 8)\n          break;\n        }\n        this.typeNumber = typeNumber;\n      }\n      this.makeImpl(false, this.getBestMaskPattern());\n    },\n\n    makeImpl: function makeImpl(test, maskPattern) {\n\n      this.moduleCount = this.typeNumber * 4 + 17;\n      this.modules = new Array(this.moduleCount);\n\n      for (var row = 0; row < this.moduleCount; row++) {\n\n        this.modules[row] = new Array(this.moduleCount);\n\n        for (var col = 0; col < this.moduleCount; col++) {\n          this.modules[row][col] = null; //(col + row) % 3;\n        }\n      }\n\n      this.setupPositionProbePattern(0, 0);\n      this.setupPositionProbePattern(this.moduleCount - 7, 0);\n      this.setupPositionProbePattern(0, this.moduleCount - 7);\n      this.setupPositionAdjustPattern();\n      this.setupTimingPattern();\n      this.setupTypeInfo(test, maskPattern);\n\n      if (this.typeNumber >= 7) {\n        this.setupTypeNumber(test);\n      }\n\n      if (this.dataCache == null) {\n        this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);\n      }\n\n      this.mapData(this.dataCache, maskPattern);\n    },\n\n    setupPositionProbePattern: function setupPositionProbePattern(row, col) {\n\n      for (var r = -1; r <= 7; r++) {\n\n        if (row + r <= -1 || this.moduleCount <= row + r) continue;\n\n        for (var c = -1; c <= 7; c++) {\n\n          if (col + c <= -1 || this.moduleCount <= col + c) continue;\n\n          if (0 <= r && r <= 6 && (c == 0 || c == 6) ||\n          0 <= c && c <= 6 && (r == 0 || r == 6) ||\n          2 <= r && r <= 4 && 2 <= c && c <= 4) {\n            this.modules[row + r][col + c] = true;\n          } else {\n            this.modules[row + r][col + c] = false;\n          }\n        }\n      }\n    },\n\n    getBestMaskPattern: function getBestMaskPattern() {\n\n      var minLostPoint = 0;\n      var pattern = 0;\n\n      for (var i = 0; i < 8; i++) {\n\n        this.makeImpl(true, i);\n\n        var lostPoint = QRUtil.getLostPoint(this);\n\n        if (i == 0 || minLostPoint > lostPoint) {\n          minLostPoint = lostPoint;\n          pattern = i;\n        }\n      }\n\n      return pattern;\n    },\n\n    createMovieClip: function createMovieClip(target_mc, instance_name, depth) {\n\n      var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);\n      var cs = 1;\n\n      this.make();\n\n      for (var row = 0; row < this.modules.length; row++) {\n\n        var y = row * cs;\n\n        for (var col = 0; col < this.modules[row].length; col++) {\n\n          var x = col * cs;\n          var dark = this.modules[row][col];\n\n          if (dark) {\n            qr_mc.beginFill(0, 100);\n            qr_mc.moveTo(x, y);\n            qr_mc.lineTo(x + cs, y);\n            qr_mc.lineTo(x + cs, y + cs);\n            qr_mc.lineTo(x, y + cs);\n            qr_mc.endFill();\n          }\n        }\n      }\n\n      return qr_mc;\n    },\n\n    setupTimingPattern: function setupTimingPattern() {\n\n      for (var r = 8; r < this.moduleCount - 8; r++) {\n        if (this.modules[r][6] != null) {\n          continue;\n        }\n        this.modules[r][6] = r % 2 == 0;\n      }\n\n      for (var c = 8; c < this.moduleCount - 8; c++) {\n        if (this.modules[6][c] != null) {\n          continue;\n        }\n        this.modules[6][c] = c % 2 == 0;\n      }\n    },\n\n    setupPositionAdjustPattern: function setupPositionAdjustPattern() {\n\n      var pos = QRUtil.getPatternPosition(this.typeNumber);\n\n      for (var i = 0; i < pos.length; i++) {\n\n        for (var j = 0; j < pos.length; j++) {\n\n          var row = pos[i];\n          var col = pos[j];\n\n          if (this.modules[row][col] != null) {\n            continue;\n          }\n\n          for (var r = -2; r <= 2; r++) {\n\n            for (var c = -2; c <= 2; c++) {\n\n              if (r == -2 || r == 2 || c == -2 || c == 2 ||\n              r == 0 && c == 0) {\n                this.modules[row + r][col + c] = true;\n              } else {\n                this.modules[row + r][col + c] = false;\n              }\n            }\n          }\n        }\n      }\n    },\n\n    setupTypeNumber: function setupTypeNumber(test) {\n\n      var bits = QRUtil.getBCHTypeNumber(this.typeNumber);\n\n      for (var i = 0; i < 18; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n        this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;\n      }\n\n      for (var i = 0; i < 18; i++) {\n        var mod = !test && (bits >> i & 1) == 1;\n        this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;\n      }\n    },\n\n    setupTypeInfo: function setupTypeInfo(test, maskPattern) {\n\n      var data = this.errorCorrectLevel << 3 | maskPattern;\n      var bits = QRUtil.getBCHTypeInfo(data);\n\n      // vertical\t\t\n      for (var i = 0; i < 15; i++) {\n\n        var mod = !test && (bits >> i & 1) == 1;\n\n        if (i < 6) {\n          this.modules[i][8] = mod;\n        } else if (i < 8) {\n          this.modules[i + 1][8] = mod;\n        } else {\n          this.modules[this.moduleCount - 15 + i][8] = mod;\n        }\n      }\n\n      // horizontal\n      for (var i = 0; i < 15; i++) {\n\n        var mod = !test && (bits >> i & 1) == 1;\n\n        if (i < 8) {\n          this.modules[8][this.moduleCount - i - 1] = mod;\n        } else if (i < 9) {\n          this.modules[8][15 - i - 1 + 1] = mod;\n        } else {\n          this.modules[8][15 - i - 1] = mod;\n        }\n      }\n\n      // fixed module\n      this.modules[this.moduleCount - 8][8] = !test;\n\n    },\n\n    mapData: function mapData(data, maskPattern) {\n\n      var inc = -1;\n      var row = this.moduleCount - 1;\n      var bitIndex = 7;\n      var byteIndex = 0;\n\n      for (var col = this.moduleCount - 1; col > 0; col -= 2) {\n\n        if (col == 6) col--;\n\n        while (true) {\n\n          for (var c = 0; c < 2; c++) {\n\n            if (this.modules[row][col - c] == null) {\n\n              var dark = false;\n\n              if (byteIndex < data.length) {\n                dark = (data[byteIndex] >>> bitIndex & 1) == 1;\n              }\n\n              var mask = QRUtil.getMask(maskPattern, row, col - c);\n\n              if (mask) {\n                dark = !dark;\n              }\n\n              this.modules[row][col - c] = dark;\n              bitIndex--;\n\n              if (bitIndex == -1) {\n                byteIndex++;\n                bitIndex = 7;\n              }\n            }\n          }\n\n          row += inc;\n\n          if (row < 0 || this.moduleCount <= row) {\n            row -= inc;\n            inc = -inc;\n            break;\n          }\n        }\n      }\n\n    } };\n\n\n\n  QRCode.PAD0 = 0xEC;\n  QRCode.PAD1 = 0x11;\n\n  QRCode.createData = function (typeNumber, errorCorrectLevel, dataList) {\n\n    var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);\n\n    var buffer = new QRBitBuffer();\n\n    for (var i = 0; i < dataList.length; i++) {\n      var data = dataList[i];\n      buffer.put(data.mode, 4);\n      buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));\n      data.write(buffer);\n    }\n\n    // calc num max data.\n    var totalDataCount = 0;\n    for (var i = 0; i < rsBlocks.length; i++) {\n      totalDataCount += rsBlocks[i].dataCount;\n    }\n\n    if (buffer.getLengthInBits() > totalDataCount * 8) {\n      throw new Error(\"code length overflow. (\" +\n      buffer.getLengthInBits() +\n      \">\" +\n      totalDataCount * 8 +\n      \")\");\n    }\n\n    // end code\n    if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {\n      buffer.put(0, 4);\n    }\n\n    // padding\n    while (buffer.getLengthInBits() % 8 != 0) {\n      buffer.putBit(false);\n    }\n\n    // padding\n    while (true) {\n\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(QRCode.PAD0, 8);\n\n      if (buffer.getLengthInBits() >= totalDataCount * 8) {\n        break;\n      }\n      buffer.put(QRCode.PAD1, 8);\n    }\n\n    return QRCode.createBytes(buffer, rsBlocks);\n  };\n\n  QRCode.createBytes = function (buffer, rsBlocks) {\n\n    var offset = 0;\n\n    var maxDcCount = 0;\n    var maxEcCount = 0;\n\n    var dcdata = new Array(rsBlocks.length);\n    var ecdata = new Array(rsBlocks.length);\n\n    for (var r = 0; r < rsBlocks.length; r++) {\n\n      var dcCount = rsBlocks[r].dataCount;\n      var ecCount = rsBlocks[r].totalCount - dcCount;\n\n      maxDcCount = Math.max(maxDcCount, dcCount);\n      maxEcCount = Math.max(maxEcCount, ecCount);\n\n      dcdata[r] = new Array(dcCount);\n\n      for (var i = 0; i < dcdata[r].length; i++) {\n        dcdata[r][i] = 0xff & buffer.buffer[i + offset];\n      }\n      offset += dcCount;\n\n      var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);\n      var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);\n\n      var modPoly = rawPoly.mod(rsPoly);\n      ecdata[r] = new Array(rsPoly.getLength() - 1);\n      for (var i = 0; i < ecdata[r].length; i++) {\n        var modIndex = i + modPoly.getLength() - ecdata[r].length;\n        ecdata[r][i] = modIndex >= 0 ? modPoly.get(modIndex) : 0;\n      }\n\n    }\n\n    var totalCodeCount = 0;\n    for (var i = 0; i < rsBlocks.length; i++) {\n      totalCodeCount += rsBlocks[i].totalCount;\n    }\n\n    var data = new Array(totalCodeCount);\n    var index = 0;\n\n    for (var i = 0; i < maxDcCount; i++) {\n      for (var r = 0; r < rsBlocks.length; r++) {\n        if (i < dcdata[r].length) {\n          data[index++] = dcdata[r][i];\n        }\n      }\n    }\n\n    for (var i = 0; i < maxEcCount; i++) {\n      for (var r = 0; r < rsBlocks.length; r++) {\n        if (i < ecdata[r].length) {\n          data[index++] = ecdata[r][i];\n        }\n      }\n    }\n\n    return data;\n\n  };\n\n  //---------------------------------------------------------------------\n  // QRMode\n  //---------------------------------------------------------------------\n\n  var QRMode = {\n    MODE_NUMBER: 1 << 0,\n    MODE_ALPHA_NUM: 1 << 1,\n    MODE_8BIT_BYTE: 1 << 2,\n    MODE_KANJI: 1 << 3 };\n\n\n  //---------------------------------------------------------------------\n  // QRErrorCorrectLevel\n  //---------------------------------------------------------------------\n\n  var QRErrorCorrectLevel = {\n    L: 1,\n    M: 0,\n    Q: 3,\n    H: 2 };\n\n\n  //---------------------------------------------------------------------\n  // QRMaskPattern\n  //---------------------------------------------------------------------\n\n  var QRMaskPattern = {\n    PATTERN000: 0,\n    PATTERN001: 1,\n    PATTERN010: 2,\n    PATTERN011: 3,\n    PATTERN100: 4,\n    PATTERN101: 5,\n    PATTERN110: 6,\n    PATTERN111: 7 };\n\n\n  //---------------------------------------------------------------------\n  // QRUtil\n  //---------------------------------------------------------------------\n\n  var QRUtil = {\n\n    PATTERN_POSITION_TABLE: [\n    [],\n    [6, 18],\n    [6, 22],\n    [6, 26],\n    [6, 30],\n    [6, 34],\n    [6, 22, 38],\n    [6, 24, 42],\n    [6, 26, 46],\n    [6, 28, 50],\n    [6, 30, 54],\n    [6, 32, 58],\n    [6, 34, 62],\n    [6, 26, 46, 66],\n    [6, 26, 48, 70],\n    [6, 26, 50, 74],\n    [6, 30, 54, 78],\n    [6, 30, 56, 82],\n    [6, 30, 58, 86],\n    [6, 34, 62, 90],\n    [6, 28, 50, 72, 94],\n    [6, 26, 50, 74, 98],\n    [6, 30, 54, 78, 102],\n    [6, 28, 54, 80, 106],\n    [6, 32, 58, 84, 110],\n    [6, 30, 58, 86, 114],\n    [6, 34, 62, 90, 118],\n    [6, 26, 50, 74, 98, 122],\n    [6, 30, 54, 78, 102, 126],\n    [6, 26, 52, 78, 104, 130],\n    [6, 30, 56, 82, 108, 134],\n    [6, 34, 60, 86, 112, 138],\n    [6, 30, 58, 86, 114, 142],\n    [6, 34, 62, 90, 118, 146],\n    [6, 30, 54, 78, 102, 126, 150],\n    [6, 24, 50, 76, 102, 128, 154],\n    [6, 28, 54, 80, 106, 132, 158],\n    [6, 32, 58, 84, 110, 136, 162],\n    [6, 26, 54, 82, 110, 138, 166],\n    [6, 30, 58, 86, 114, 142, 170]],\n\n\n    G15: 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0,\n    G18: 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0,\n    G15_MASK: 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1,\n\n    getBCHTypeInfo: function getBCHTypeInfo(data) {\n      var d = data << 10;\n      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {\n        d ^= QRUtil.G15 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15);\n      }\n      return (data << 10 | d) ^ QRUtil.G15_MASK;\n    },\n\n    getBCHTypeNumber: function getBCHTypeNumber(data) {\n      var d = data << 12;\n      while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {\n        d ^= QRUtil.G18 << QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18);\n      }\n      return data << 12 | d;\n    },\n\n    getBCHDigit: function getBCHDigit(data) {\n\n      var digit = 0;\n\n      while (data != 0) {\n        digit++;\n        data >>>= 1;\n      }\n\n      return digit;\n    },\n\n    getPatternPosition: function getPatternPosition(typeNumber) {\n      return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];\n    },\n\n    getMask: function getMask(maskPattern, i, j) {\n\n      switch (maskPattern) {\n\n        case QRMaskPattern.PATTERN000:\n          return (i + j) % 2 == 0;\n        case QRMaskPattern.PATTERN001:\n          return i % 2 == 0;\n        case QRMaskPattern.PATTERN010:\n          return j % 3 == 0;\n        case QRMaskPattern.PATTERN011:\n          return (i + j) % 3 == 0;\n        case QRMaskPattern.PATTERN100:\n          return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;\n        case QRMaskPattern.PATTERN101:\n          return i * j % 2 + i * j % 3 == 0;\n        case QRMaskPattern.PATTERN110:\n          return (i * j % 2 + i * j % 3) % 2 == 0;\n        case QRMaskPattern.PATTERN111:\n          return (i * j % 3 + (i + j) % 2) % 2 == 0;\n\n        default:\n          throw new Error(\"bad maskPattern:\" + maskPattern);}\n\n    },\n\n    getErrorCorrectPolynomial: function getErrorCorrectPolynomial(errorCorrectLength) {\n\n      var a = new QRPolynomial([1], 0);\n\n      for (var i = 0; i < errorCorrectLength; i++) {\n        a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));\n      }\n\n      return a;\n    },\n\n    getLengthInBits: function getLengthInBits(mode, type) {\n\n      if (1 <= type && type < 10) {\n\n        // 1 - 9\n\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 10;\n          case QRMode.MODE_ALPHA_NUM:\n            return 9;\n          case QRMode.MODE_8BIT_BYTE:\n            return 8;\n          case QRMode.MODE_KANJI:\n            return 8;\n          default:\n            throw new Error(\"mode:\" + mode);}\n\n\n      } else if (type < 27) {\n\n        // 10 - 26\n\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 12;\n          case QRMode.MODE_ALPHA_NUM:\n            return 11;\n          case QRMode.MODE_8BIT_BYTE:\n            return 16;\n          case QRMode.MODE_KANJI:\n            return 10;\n          default:\n            throw new Error(\"mode:\" + mode);}\n\n\n      } else if (type < 41) {\n\n        // 27 - 40\n\n        switch (mode) {\n          case QRMode.MODE_NUMBER:\n            return 14;\n          case QRMode.MODE_ALPHA_NUM:\n            return 13;\n          case QRMode.MODE_8BIT_BYTE:\n            return 16;\n          case QRMode.MODE_KANJI:\n            return 12;\n          default:\n            throw new Error(\"mode:\" + mode);}\n\n\n      } else {\n        throw new Error(\"type:\" + type);\n      }\n    },\n\n    getLostPoint: function getLostPoint(qrCode) {\n\n      var moduleCount = qrCode.getModuleCount();\n\n      var lostPoint = 0;\n\n      // LEVEL1\n\n      for (var row = 0; row < moduleCount; row++) {\n\n        for (var col = 0; col < moduleCount; col++) {\n\n          var sameCount = 0;\n          var dark = qrCode.isDark(row, col);\n\n          for (var r = -1; r <= 1; r++) {\n\n            if (row + r < 0 || moduleCount <= row + r) {\n              continue;\n            }\n\n            for (var c = -1; c <= 1; c++) {\n\n              if (col + c < 0 || moduleCount <= col + c) {\n                continue;\n              }\n\n              if (r == 0 && c == 0) {\n                continue;\n              }\n\n              if (dark == qrCode.isDark(row + r, col + c)) {\n                sameCount++;\n              }\n            }\n          }\n\n          if (sameCount > 5) {\n            lostPoint += 3 + sameCount - 5;\n          }\n        }\n      }\n\n      // LEVEL2\n\n      for (var row = 0; row < moduleCount - 1; row++) {\n        for (var col = 0; col < moduleCount - 1; col++) {\n          var count = 0;\n          if (qrCode.isDark(row, col)) count++;\n          if (qrCode.isDark(row + 1, col)) count++;\n          if (qrCode.isDark(row, col + 1)) count++;\n          if (qrCode.isDark(row + 1, col + 1)) count++;\n          if (count == 0 || count == 4) {\n            lostPoint += 3;\n          }\n        }\n      }\n\n      // LEVEL3\n\n      for (var row = 0; row < moduleCount; row++) {\n        for (var col = 0; col < moduleCount - 6; col++) {\n          if (qrCode.isDark(row, col) &&\n          !qrCode.isDark(row, col + 1) &&\n          qrCode.isDark(row, col + 2) &&\n          qrCode.isDark(row, col + 3) &&\n          qrCode.isDark(row, col + 4) &&\n          !qrCode.isDark(row, col + 5) &&\n          qrCode.isDark(row, col + 6)) {\n            lostPoint += 40;\n          }\n        }\n      }\n\n      for (var col = 0; col < moduleCount; col++) {\n        for (var row = 0; row < moduleCount - 6; row++) {\n          if (qrCode.isDark(row, col) &&\n          !qrCode.isDark(row + 1, col) &&\n          qrCode.isDark(row + 2, col) &&\n          qrCode.isDark(row + 3, col) &&\n          qrCode.isDark(row + 4, col) &&\n          !qrCode.isDark(row + 5, col) &&\n          qrCode.isDark(row + 6, col)) {\n            lostPoint += 40;\n          }\n        }\n      }\n\n      // LEVEL4\n\n      var darkCount = 0;\n\n      for (var col = 0; col < moduleCount; col++) {\n        for (var row = 0; row < moduleCount; row++) {\n          if (qrCode.isDark(row, col)) {\n            darkCount++;\n          }\n        }\n      }\n\n      var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;\n      lostPoint += ratio * 10;\n\n      return lostPoint;\n    } };\n\n\n\n\n  //---------------------------------------------------------------------\n  // QRMath\n  //---------------------------------------------------------------------\n\n  var QRMath = {\n\n    glog: function glog(n) {\n\n      if (n < 1) {\n        throw new Error(\"glog(\" + n + \")\");\n      }\n\n      return QRMath.LOG_TABLE[n];\n    },\n\n    gexp: function gexp(n) {\n\n      while (n < 0) {\n        n += 255;\n      }\n\n      while (n >= 256) {\n        n -= 255;\n      }\n\n      return QRMath.EXP_TABLE[n];\n    },\n\n    EXP_TABLE: new Array(256),\n\n    LOG_TABLE: new Array(256) };\n\n\n\n  for (var i = 0; i < 8; i++) {\n    QRMath.EXP_TABLE[i] = 1 << i;\n  }\n  for (var i = 8; i < 256; i++) {\n    QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^\n    QRMath.EXP_TABLE[i - 5] ^\n    QRMath.EXP_TABLE[i - 6] ^\n    QRMath.EXP_TABLE[i - 8];\n  }\n  for (var i = 0; i < 255; i++) {\n    QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;\n  }\n\n  //---------------------------------------------------------------------\n  // QRPolynomial\n  //---------------------------------------------------------------------\n\n  function QRPolynomial(num, shift) {\n\n    if (num.length == undefined) {\n      throw new Error(num.length + \"/\" + shift);\n    }\n\n    var offset = 0;\n\n    while (offset < num.length && num[offset] == 0) {\n      offset++;\n    }\n\n    this.num = new Array(num.length - offset + shift);\n    for (var i = 0; i < num.length - offset; i++) {\n      this.num[i] = num[i + offset];\n    }\n  }\n\n  QRPolynomial.prototype = {\n\n    get: function get(index) {\n      return this.num[index];\n    },\n\n    getLength: function getLength() {\n      return this.num.length;\n    },\n\n    multiply: function multiply(e) {\n\n      var num = new Array(this.getLength() + e.getLength() - 1);\n\n      for (var i = 0; i < this.getLength(); i++) {\n        for (var j = 0; j < e.getLength(); j++) {\n          num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));\n        }\n      }\n\n      return new QRPolynomial(num, 0);\n    },\n\n    mod: function mod(e) {\n\n      if (this.getLength() - e.getLength() < 0) {\n        return this;\n      }\n\n      var ratio = QRMath.glog(this.get(0)) - QRMath.glog(e.get(0));\n\n      var num = new Array(this.getLength());\n\n      for (var i = 0; i < this.getLength(); i++) {\n        num[i] = this.get(i);\n      }\n\n      for (var i = 0; i < e.getLength(); i++) {\n        num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);\n      }\n\n      // recursive call\n      return new QRPolynomial(num, 0).mod(e);\n    } };\n\n\n  //---------------------------------------------------------------------\n  // QRRSBlock\n  //---------------------------------------------------------------------\n\n  function QRRSBlock(totalCount, dataCount) {\n    this.totalCount = totalCount;\n    this.dataCount = dataCount;\n  }\n\n  QRRSBlock.RS_BLOCK_TABLE = [\n\n  // L\n  // M\n  // Q\n  // H\n\n  // 1\n  [1, 26, 19],\n  [1, 26, 16],\n  [1, 26, 13],\n  [1, 26, 9],\n\n  // 2\n  [1, 44, 34],\n  [1, 44, 28],\n  [1, 44, 22],\n  [1, 44, 16],\n\n  // 3\n  [1, 70, 55],\n  [1, 70, 44],\n  [2, 35, 17],\n  [2, 35, 13],\n\n  // 4\t\t\n  [1, 100, 80],\n  [2, 50, 32],\n  [2, 50, 24],\n  [4, 25, 9],\n\n  // 5\n  [1, 134, 108],\n  [2, 67, 43],\n  [2, 33, 15, 2, 34, 16],\n  [2, 33, 11, 2, 34, 12],\n\n  // 6\n  [2, 86, 68],\n  [4, 43, 27],\n  [4, 43, 19],\n  [4, 43, 15],\n\n  // 7\t\t\n  [2, 98, 78],\n  [4, 49, 31],\n  [2, 32, 14, 4, 33, 15],\n  [4, 39, 13, 1, 40, 14],\n\n  // 8\n  [2, 121, 97],\n  [2, 60, 38, 2, 61, 39],\n  [4, 40, 18, 2, 41, 19],\n  [4, 40, 14, 2, 41, 15],\n\n  // 9\n  [2, 146, 116],\n  [3, 58, 36, 2, 59, 37],\n  [4, 36, 16, 4, 37, 17],\n  [4, 36, 12, 4, 37, 13],\n\n  // 10\t\t\n  [2, 86, 68, 2, 87, 69],\n  [4, 69, 43, 1, 70, 44],\n  [6, 43, 19, 2, 44, 20],\n  [6, 43, 15, 2, 44, 16],\n\n  // 11\n  [4, 101, 81],\n  [1, 80, 50, 4, 81, 51],\n  [4, 50, 22, 4, 51, 23],\n  [3, 36, 12, 8, 37, 13],\n\n  // 12\n  [2, 116, 92, 2, 117, 93],\n  [6, 58, 36, 2, 59, 37],\n  [4, 46, 20, 6, 47, 21],\n  [7, 42, 14, 4, 43, 15],\n\n  // 13\n  [4, 133, 107],\n  [8, 59, 37, 1, 60, 38],\n  [8, 44, 20, 4, 45, 21],\n  [12, 33, 11, 4, 34, 12],\n\n  // 14\n  [3, 145, 115, 1, 146, 116],\n  [4, 64, 40, 5, 65, 41],\n  [11, 36, 16, 5, 37, 17],\n  [11, 36, 12, 5, 37, 13],\n\n  // 15\n  [5, 109, 87, 1, 110, 88],\n  [5, 65, 41, 5, 66, 42],\n  [5, 54, 24, 7, 55, 25],\n  [11, 36, 12],\n\n  // 16\n  [5, 122, 98, 1, 123, 99],\n  [7, 73, 45, 3, 74, 46],\n  [15, 43, 19, 2, 44, 20],\n  [3, 45, 15, 13, 46, 16],\n\n  // 17\n  [1, 135, 107, 5, 136, 108],\n  [10, 74, 46, 1, 75, 47],\n  [1, 50, 22, 15, 51, 23],\n  [2, 42, 14, 17, 43, 15],\n\n  // 18\n  [5, 150, 120, 1, 151, 121],\n  [9, 69, 43, 4, 70, 44],\n  [17, 50, 22, 1, 51, 23],\n  [2, 42, 14, 19, 43, 15],\n\n  // 19\n  [3, 141, 113, 4, 142, 114],\n  [3, 70, 44, 11, 71, 45],\n  [17, 47, 21, 4, 48, 22],\n  [9, 39, 13, 16, 40, 14],\n\n  // 20\n  [3, 135, 107, 5, 136, 108],\n  [3, 67, 41, 13, 68, 42],\n  [15, 54, 24, 5, 55, 25],\n  [15, 43, 15, 10, 44, 16],\n\n  // 21\n  [4, 144, 116, 4, 145, 117],\n  [17, 68, 42],\n  [17, 50, 22, 6, 51, 23],\n  [19, 46, 16, 6, 47, 17],\n\n  // 22\n  [2, 139, 111, 7, 140, 112],\n  [17, 74, 46],\n  [7, 54, 24, 16, 55, 25],\n  [34, 37, 13],\n\n  // 23\n  [4, 151, 121, 5, 152, 122],\n  [4, 75, 47, 14, 76, 48],\n  [11, 54, 24, 14, 55, 25],\n  [16, 45, 15, 14, 46, 16],\n\n  // 24\n  [6, 147, 117, 4, 148, 118],\n  [6, 73, 45, 14, 74, 46],\n  [11, 54, 24, 16, 55, 25],\n  [30, 46, 16, 2, 47, 17],\n\n  // 25\n  [8, 132, 106, 4, 133, 107],\n  [8, 75, 47, 13, 76, 48],\n  [7, 54, 24, 22, 55, 25],\n  [22, 45, 15, 13, 46, 16],\n\n  // 26\n  [10, 142, 114, 2, 143, 115],\n  [19, 74, 46, 4, 75, 47],\n  [28, 50, 22, 6, 51, 23],\n  [33, 46, 16, 4, 47, 17],\n\n  // 27\n  [8, 152, 122, 4, 153, 123],\n  [22, 73, 45, 3, 74, 46],\n  [8, 53, 23, 26, 54, 24],\n  [12, 45, 15, 28, 46, 16],\n\n  // 28\n  [3, 147, 117, 10, 148, 118],\n  [3, 73, 45, 23, 74, 46],\n  [4, 54, 24, 31, 55, 25],\n  [11, 45, 15, 31, 46, 16],\n\n  // 29\n  [7, 146, 116, 7, 147, 117],\n  [21, 73, 45, 7, 74, 46],\n  [1, 53, 23, 37, 54, 24],\n  [19, 45, 15, 26, 46, 16],\n\n  // 30\n  [5, 145, 115, 10, 146, 116],\n  [19, 75, 47, 10, 76, 48],\n  [15, 54, 24, 25, 55, 25],\n  [23, 45, 15, 25, 46, 16],\n\n  // 31\n  [13, 145, 115, 3, 146, 116],\n  [2, 74, 46, 29, 75, 47],\n  [42, 54, 24, 1, 55, 25],\n  [23, 45, 15, 28, 46, 16],\n\n  // 32\n  [17, 145, 115],\n  [10, 74, 46, 23, 75, 47],\n  [10, 54, 24, 35, 55, 25],\n  [19, 45, 15, 35, 46, 16],\n\n  // 33\n  [17, 145, 115, 1, 146, 116],\n  [14, 74, 46, 21, 75, 47],\n  [29, 54, 24, 19, 55, 25],\n  [11, 45, 15, 46, 46, 16],\n\n  // 34\n  [13, 145, 115, 6, 146, 116],\n  [14, 74, 46, 23, 75, 47],\n  [44, 54, 24, 7, 55, 25],\n  [59, 46, 16, 1, 47, 17],\n\n  // 35\n  [12, 151, 121, 7, 152, 122],\n  [12, 75, 47, 26, 76, 48],\n  [39, 54, 24, 14, 55, 25],\n  [22, 45, 15, 41, 46, 16],\n\n  // 36\n  [6, 151, 121, 14, 152, 122],\n  [6, 75, 47, 34, 76, 48],\n  [46, 54, 24, 10, 55, 25],\n  [2, 45, 15, 64, 46, 16],\n\n  // 37\n  [17, 152, 122, 4, 153, 123],\n  [29, 74, 46, 14, 75, 47],\n  [49, 54, 24, 10, 55, 25],\n  [24, 45, 15, 46, 46, 16],\n\n  // 38\n  [4, 152, 122, 18, 153, 123],\n  [13, 74, 46, 32, 75, 47],\n  [48, 54, 24, 14, 55, 25],\n  [42, 45, 15, 32, 46, 16],\n\n  // 39\n  [20, 147, 117, 4, 148, 118],\n  [40, 75, 47, 7, 76, 48],\n  [43, 54, 24, 22, 55, 25],\n  [10, 45, 15, 67, 46, 16],\n\n  // 40\n  [19, 148, 118, 6, 149, 119],\n  [18, 75, 47, 31, 76, 48],\n  [34, 54, 24, 34, 55, 25],\n  [20, 45, 15, 61, 46, 16]];\n\n\n  QRRSBlock.getRSBlocks = function (typeNumber, errorCorrectLevel) {\n\n    var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);\n\n    if (rsBlock == undefined) {\n      throw new Error(\"bad rs block @ typeNumber:\" + typeNumber + \"/errorCorrectLevel:\" + errorCorrectLevel);\n    }\n\n    var length = rsBlock.length / 3;\n\n    var list = new Array();\n\n    for (var i = 0; i < length; i++) {\n\n      var count = rsBlock[i * 3 + 0];\n      var totalCount = rsBlock[i * 3 + 1];\n      var dataCount = rsBlock[i * 3 + 2];\n\n      for (var j = 0; j < count; j++) {\n        list.push(new QRRSBlock(totalCount, dataCount));\n      }\n    }\n\n    return list;\n  };\n\n  QRRSBlock.getRsBlockTable = function (typeNumber, errorCorrectLevel) {\n\n    switch (errorCorrectLevel) {\n      case QRErrorCorrectLevel.L:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];\n      case QRErrorCorrectLevel.M:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];\n      case QRErrorCorrectLevel.Q:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];\n      case QRErrorCorrectLevel.H:\n        return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];\n      default:\n        return undefined;}\n\n  };\n\n  //---------------------------------------------------------------------\n  // QRBitBuffer\n  //---------------------------------------------------------------------\n\n  function QRBitBuffer() {\n    this.buffer = new Array();\n    this.length = 0;\n  }\n\n  QRBitBuffer.prototype = {\n\n    get: function get(index) {\n      var bufIndex = Math.floor(index / 8);\n      return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) == 1;\n    },\n\n    put: function put(num, length) {\n      for (var i = 0; i < length; i++) {\n        this.putBit((num >>> length - i - 1 & 1) == 1);\n      }\n    },\n\n    getLengthInBits: function getLengthInBits() {\n      return this.length;\n    },\n\n    putBit: function putBit(bit) {\n\n      var bufIndex = Math.floor(this.length / 8);\n      if (this.buffer.length <= bufIndex) {\n        this.buffer.push(0);\n      }\n\n      if (bit) {\n        this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n      }\n\n      this.length++;\n    } };\n\n\n  //---------------------------------------------------------------------\n  // Support Chinese\n  //---------------------------------------------------------------------\n  function utf16To8(text) {\n    var result = '';\n    var c;\n    for (var i = 0; i < text.length; i++) {\n      c = text.charCodeAt(i);\n      if (c >= 0x0001 && c <= 0x007F) {\n        result += text.charAt(i);\n      } else if (c > 0x07FF) {\n        result += String.fromCharCode(0xE0 | c >> 12 & 0x0F);\n        result += String.fromCharCode(0x80 | c >> 6 & 0x3F);\n        result += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n      } else {\n        result += String.fromCharCode(0xC0 | c >> 6 & 0x1F);\n        result += String.fromCharCode(0x80 | c >> 0 & 0x3F);\n      }\n    }\n    return result;\n  }\n\n  uQRCode = {\n\n    defaults: {\n      size: 258,\n      margin: 0,\n      backgroundColor: '#ffffff',\n      foregroundColor: '#000000',\n      fileType: 'png', // 'jpg', 'png'\n      correctLevel: 3,\n      typeNumber: -1 },\n\n\n    make: function make(options) {\n      var defaultOptions = {\n        canvasId: options.canvasId,\n        componentInstance: options.componentInstance,\n        text: options.text,\n        size: this.defaults.size,\n        margin: this.defaults.margin,\n        backgroundColor: this.defaults.backgroundColor,\n        foregroundColor: this.defaults.foregroundColor,\n        fileType: this.defaults.fileType,\n        correctLevel: this.defaults.correctLevel,\n        typeNumber: this.defaults.typeNumber };\n\n      if (options) {\n        for (var i in options) {\n          defaultOptions[i] = options[i];\n        }\n      }\n      options = defaultOptions;\n      if (!options.canvasId) {\n        __f__(\"error\", 'uQRCode: Please set canvasId!', \" at components\\\\uqrcode.js:1320\");\n        return;\n      }\n\n      function createCanvas() {\n        var qrcode = new QRCode(options.typeNumber, options.correctLevel);\n        qrcode.addData(utf16To8(options.text));\n        qrcode.make();\n\n        var ctx = uni.createCanvasContext(options.canvasId, options.componentInstance);\n        ctx.setFillStyle(options.backgroundColor);\n        ctx.fillRect(0, 0, options.size, options.size);\n\n        var tileW = (options.size - options.margin * 2) / qrcode.getModuleCount();\n        var tileH = tileW;\n\n        for (var row = 0; row < qrcode.getModuleCount(); row++) {\n          for (var col = 0; col < qrcode.getModuleCount(); col++) {\n            var style = qrcode.isDark(row, col) ? options.foregroundColor : options.backgroundColor;\n            ctx.setFillStyle(style);\n            var x = Math.round(col * tileW) + options.margin;\n            var y = Math.round(row * tileH) + options.margin;\n            var w = Math.ceil((col + 1) * tileW) - Math.floor(col * tileW);\n            var h = Math.ceil((row + 1) * tileW) - Math.floor(row * tileW);\n            ctx.fillRect(x, y, w, h);\n          }\n        }\n\n        setTimeout(function () {\n          ctx.draw(false, function () {\n            setTimeout(function () {\n              uni.canvasToTempFilePath({\n                canvasId: options.canvasId,\n                fileType: options.fileType,\n                width: options.size,\n                height: options.size,\n                destWidth: options.size,\n                destHeight: options.size,\n                success: function success(res) {\n                  options.success && options.success(res.tempFilePath);\n                },\n                fail: function fail(error) {\n                  options.fail && options.fail(error);\n                },\n                complete: function complete(res) {\n                  options.complete && options.complete(res);\n                } },\n              options.componentInstance);\n            }, options.text.length + 100);\n          });\n        }, 150);\n      }\n\n      createCanvas();\n    } };\n\n\n\n})();var _default =\n\nuQRCode;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///174\n");

/***/ }),

/***/ 18:
/*!****************************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/utils/Dispatcher.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var dispCbs = [];\nvar dispIns = [];\n\nfunction Dispatcher() {\n  dispIns.push(this);\n  dispCbs.push({});\n}\nDispatcher.prototype = {\n  on: function on(type, cb) {\n    var cbtypes = dispCbs[dispIns.indexOf(this)];\n    var cbs = cbtypes[type] = cbtypes[type] || [];\n    if (!~cbs.indexOf(cb)) {\n      cbs.push(cb);\n    }\n  },\n  off: function off(type, cb) {\n    var cbtypes = dispCbs[dispIns.indexOf(this)];\n    var cbs = cbtypes[type] = cbtypes[type] || [];\n    var curTypeCbIdx = cbs.indexOf(cb);\n    if (~curTypeCbIdx) {\n      cbs.splice(curTypeCbIdx, 1);\n    }\n  },\n  fire: function fire(type) {\n    var cbtypes = dispCbs[dispIns.indexOf(this)];\n    var cbs = cbtypes[type] = cbtypes[type] || [];for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {args[_key - 1] = arguments[_key];}\n    for (var i = 0; i < cbs.length; i++) {\n      cbs[i].apply(null, args);\n    }\n  } };\n\nmodule.exports = Dispatcher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vd2ViSU0vdXRpbHMvRGlzcGF0Y2hlci5qcyJdLCJuYW1lcyI6WyJkaXNwQ2JzIiwiZGlzcElucyIsIkRpc3BhdGNoZXIiLCJwdXNoIiwicHJvdG90eXBlIiwib24iLCJ0eXBlIiwiY2IiLCJjYnR5cGVzIiwiaW5kZXhPZiIsImNicyIsIm9mZiIsImN1clR5cGVDYklkeCIsInNwbGljZSIsImZpcmUiLCJhcmdzIiwiaSIsImxlbmd0aCIsImFwcGx5IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsT0FBTyxHQUFHLEVBQWQ7QUFDQSxJQUFJQyxPQUFPLEdBQUcsRUFBZDs7QUFFQSxTQUFTQyxVQUFULEdBQXFCO0FBQ3BCRCxTQUFPLENBQUNFLElBQVIsQ0FBYSxJQUFiO0FBQ0FILFNBQU8sQ0FBQ0csSUFBUixDQUFhLEVBQWI7QUFDQTtBQUNERCxVQUFVLENBQUNFLFNBQVgsR0FBdUI7QUFDdEJDLElBRHNCLGNBQ25CQyxJQURtQixFQUNiQyxFQURhLEVBQ1Y7QUFDWCxRQUFJQyxPQUFPLEdBQUdSLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDUSxPQUFSLENBQWdCLElBQWhCLENBQUQsQ0FBckI7QUFDQSxRQUFJQyxHQUFHLEdBQUdGLE9BQU8sQ0FBQ0YsSUFBRCxDQUFQLEdBQWlCRSxPQUFPLENBQUNGLElBQUQsQ0FBUCxJQUFpQixFQUE1QztBQUNBLFFBQUcsQ0FBQyxDQUFDSSxHQUFHLENBQUNELE9BQUosQ0FBWUYsRUFBWixDQUFMLEVBQXFCO0FBQ3BCRyxTQUFHLENBQUNQLElBQUosQ0FBU0ksRUFBVDtBQUNBO0FBQ0QsR0FQcUI7QUFRdEJJLEtBUnNCLGVBUWxCTCxJQVJrQixFQVFaQyxFQVJZLEVBUVQ7QUFDWixRQUFJQyxPQUFPLEdBQUdSLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDUSxPQUFSLENBQWdCLElBQWhCLENBQUQsQ0FBckI7QUFDQSxRQUFJQyxHQUFHLEdBQUdGLE9BQU8sQ0FBQ0YsSUFBRCxDQUFQLEdBQWlCRSxPQUFPLENBQUNGLElBQUQsQ0FBUCxJQUFpQixFQUE1QztBQUNBLFFBQUlNLFlBQVksR0FBR0YsR0FBRyxDQUFDRCxPQUFKLENBQVlGLEVBQVosQ0FBbkI7QUFDQSxRQUFHLENBQUNLLFlBQUosRUFBaUI7QUFDaEJGLFNBQUcsQ0FBQ0csTUFBSixDQUFXRCxZQUFYLEVBQXlCLENBQXpCO0FBQ0E7QUFDRCxHQWZxQjtBQWdCdEJFLE1BaEJzQixnQkFnQmpCUixJQWhCaUIsRUFnQkg7QUFDbEIsUUFBSUUsT0FBTyxHQUFHUixPQUFPLENBQUNDLE9BQU8sQ0FBQ1EsT0FBUixDQUFnQixJQUFoQixDQUFELENBQXJCO0FBQ0EsUUFBSUMsR0FBRyxHQUFHRixPQUFPLENBQUNGLElBQUQsQ0FBUCxHQUFpQkUsT0FBTyxDQUFDRixJQUFELENBQVAsSUFBaUIsRUFBNUMsQ0FGa0Isa0NBQUxTLElBQUssdUVBQUxBLElBQUs7QUFHbEIsU0FBSSxJQUFJQyxDQUFDLEdBQUcsQ0FBWixFQUFlQSxDQUFDLEdBQUdOLEdBQUcsQ0FBQ08sTUFBdkIsRUFBK0JELENBQUMsRUFBaEMsRUFBbUM7QUFDbENOLFNBQUcsQ0FBQ00sQ0FBRCxDQUFILENBQU9FLEtBQVAsQ0FBYSxJQUFiLEVBQW1CSCxJQUFuQjtBQUNBO0FBQ0QsR0F0QnFCLEVBQXZCOztBQXdCQUksTUFBTSxDQUFDQyxPQUFQLEdBQWlCbEIsVUFBakIiLCJmaWxlIjoiMTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZGlzcENicyA9IFtdO1xudmFyIGRpc3BJbnMgPSBbXTtcblxuZnVuY3Rpb24gRGlzcGF0Y2hlcigpe1xuXHRkaXNwSW5zLnB1c2godGhpcyk7XG5cdGRpc3BDYnMucHVzaCh7fSk7XG59XG5EaXNwYXRjaGVyLnByb3RvdHlwZSA9IHtcblx0b24odHlwZSwgY2Ipe1xuXHRcdGxldCBjYnR5cGVzID0gZGlzcENic1tkaXNwSW5zLmluZGV4T2YodGhpcyldO1xuXHRcdGxldCBjYnMgPSBjYnR5cGVzW3R5cGVdID0gKGNidHlwZXNbdHlwZV0gfHwgW10pO1xuXHRcdGlmKCF+Y2JzLmluZGV4T2YoY2IpKXtcblx0XHRcdGNicy5wdXNoKGNiKTtcblx0XHR9XG5cdH0sXG5cdG9mZih0eXBlLCBjYil7XG5cdFx0bGV0IGNidHlwZXMgPSBkaXNwQ2JzW2Rpc3BJbnMuaW5kZXhPZih0aGlzKV07XG5cdFx0bGV0IGNicyA9IGNidHlwZXNbdHlwZV0gPSAoY2J0eXBlc1t0eXBlXSB8fCBbXSk7XG5cdFx0bGV0IGN1clR5cGVDYklkeCA9IGNicy5pbmRleE9mKGNiKTtcblx0XHRpZih+Y3VyVHlwZUNiSWR4KXtcblx0XHRcdGNicy5zcGxpY2UoY3VyVHlwZUNiSWR4LCAxKTtcblx0XHR9XG5cdH0sXG5cdGZpcmUodHlwZSwgLi4uYXJncyl7XG5cdFx0bGV0IGNidHlwZXMgPSBkaXNwQ2JzW2Rpc3BJbnMuaW5kZXhPZih0aGlzKV07XG5cdFx0bGV0IGNicyA9IGNidHlwZXNbdHlwZV0gPSAoY2J0eXBlc1t0eXBlXSB8fCBbXSk7XG5cdFx0Zm9yKGxldCBpID0gMDsgaSA8IGNicy5sZW5ndGg7IGkrKyl7XG5cdFx0XHRjYnNbaV0uYXBwbHkobnVsbCwgYXJncyk7XG5cdFx0fVxuXHR9XG59O1xubW9kdWxlLmV4cG9ydHMgPSBEaXNwYXRjaGVyO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n");

/***/ }),

/***/ 180:
/*!**************************************************************************************!*\
  !*** D:/张总新版app/maiYa01/components/uniapp-components/w-picker/city-data/province.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /* eslint-disable */\nvar provinceData = [{\n  \"label\": \"北京市\",\n  \"value\": \"11\" },\n\n{\n  \"label\": \"天津市\",\n  \"value\": \"12\" },\n\n{\n  \"label\": \"河北省\",\n  \"value\": \"13\" },\n\n{\n  \"label\": \"山西省\",\n  \"value\": \"14\" },\n\n{\n  \"label\": \"内蒙古自治区\",\n  \"value\": \"15\" },\n\n{\n  \"label\": \"辽宁省\",\n  \"value\": \"21\" },\n\n{\n  \"label\": \"吉林省\",\n  \"value\": \"22\" },\n\n{\n  \"label\": \"黑龙江省\",\n  \"value\": \"23\" },\n\n{\n  \"label\": \"上海市\",\n  \"value\": \"31\" },\n\n{\n  \"label\": \"江苏省\",\n  \"value\": \"32\" },\n\n{\n  \"label\": \"浙江省\",\n  \"value\": \"33\" },\n\n{\n  \"label\": \"安徽省\",\n  \"value\": \"34\" },\n\n{\n  \"label\": \"福建省\",\n  \"value\": \"35\" },\n\n{\n  \"label\": \"江西省\",\n  \"value\": \"36\" },\n\n{\n  \"label\": \"山东省\",\n  \"value\": \"37\" },\n\n{\n  \"label\": \"河南省\",\n  \"value\": \"41\" },\n\n{\n  \"label\": \"湖北省\",\n  \"value\": \"42\" },\n\n{\n  \"label\": \"湖南省\",\n  \"value\": \"43\" },\n\n{\n  \"label\": \"广东省\",\n  \"value\": \"44\" },\n\n{\n  \"label\": \"广西壮族自治区\",\n  \"value\": \"45\" },\n\n{\n  \"label\": \"海南省\",\n  \"value\": \"46\" },\n\n{\n  \"label\": \"重庆市\",\n  \"value\": \"50\" },\n\n{\n  \"label\": \"四川省\",\n  \"value\": \"51\" },\n\n{\n  \"label\": \"贵州省\",\n  \"value\": \"52\" },\n\n{\n  \"label\": \"云南省\",\n  \"value\": \"53\" },\n\n{\n  \"label\": \"西藏自治区\",\n  \"value\": \"54\" },\n\n{\n  \"label\": \"陕西省\",\n  \"value\": \"61\" },\n\n{\n  \"label\": \"甘肃省\",\n  \"value\": \"62\" },\n\n{\n  \"label\": \"青海省\",\n  \"value\": \"63\" },\n\n{\n  \"label\": \"宁夏回族自治区\",\n  \"value\": \"64\" },\n\n{\n  \"label\": \"新疆维吾尔自治区\",\n  \"value\": \"65\" },\n\n{\n  \"label\": \"台湾\",\n  \"value\": \"66\" },\n\n{\n  \"label\": \"香港\",\n  \"value\": \"67\" },\n\n{\n  \"label\": \"澳门\",\n  \"value\": \"68\" }];var _default =\n\n\nprovinceData;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tcG9uZW50cy91bmlhcHAtY29tcG9uZW50cy93LXBpY2tlci9jaXR5LWRhdGEvcHJvdmluY2UuanMiXSwibmFtZXMiOlsicHJvdmluY2VEYXRhIl0sIm1hcHBpbmdzIjoid0ZBQUE7QUFDQSxJQUFJQSxZQUFZLEdBQUcsQ0FBQztBQUNoQixXQUFTLEtBRE87QUFFaEIsV0FBUyxJQUZPLEVBQUQ7O0FBSWpCO0FBQ0UsV0FBUyxLQURYO0FBRUUsV0FBUyxJQUZYLEVBSmlCOztBQVFqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQVJpQjs7QUFZakI7QUFDRSxXQUFTLEtBRFg7QUFFRSxXQUFTLElBRlgsRUFaaUI7O0FBZ0JqQjtBQUNFLFdBQVMsUUFEWDtBQUVFLFdBQVMsSUFGWCxFQWhCaUI7O0FBb0JqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQXBCaUI7O0FBd0JqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQXhCaUI7O0FBNEJqQjtBQUNFLFdBQVMsTUFEWDtBQUVFLFdBQVMsSUFGWCxFQTVCaUI7O0FBZ0NqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQWhDaUI7O0FBb0NqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQXBDaUI7O0FBd0NqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQXhDaUI7O0FBNENqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQTVDaUI7O0FBZ0RqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQWhEaUI7O0FBb0RqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQXBEaUI7O0FBd0RqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQXhEaUI7O0FBNERqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQTVEaUI7O0FBZ0VqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQWhFaUI7O0FBb0VqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQXBFaUI7O0FBd0VqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQXhFaUI7O0FBNEVqQjtBQUNFLFdBQVMsU0FEWDtBQUVFLFdBQVMsSUFGWCxFQTVFaUI7O0FBZ0ZqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQWhGaUI7O0FBb0ZqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQXBGaUI7O0FBd0ZqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQXhGaUI7O0FBNEZqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQTVGaUI7O0FBZ0dqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQWhHaUI7O0FBb0dqQjtBQUNFLFdBQVMsT0FEWDtBQUVFLFdBQVMsSUFGWCxFQXBHaUI7O0FBd0dqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQXhHaUI7O0FBNEdqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQTVHaUI7O0FBZ0hqQjtBQUNFLFdBQVMsS0FEWDtBQUVFLFdBQVMsSUFGWCxFQWhIaUI7O0FBb0hqQjtBQUNFLFdBQVMsU0FEWDtBQUVFLFdBQVMsSUFGWCxFQXBIaUI7O0FBd0hqQjtBQUNFLFdBQVMsVUFEWDtBQUVFLFdBQVMsSUFGWCxFQXhIaUI7O0FBNEhqQjtBQUNFLFdBQVMsSUFEWDtBQUVFLFdBQVMsSUFGWCxFQTVIaUI7O0FBZ0lqQjtBQUNFLFdBQVMsSUFEWDtBQUVFLFdBQVMsSUFGWCxFQWhJaUI7O0FBb0lqQjtBQUNFLFdBQVMsSUFEWDtBQUVFLFdBQVMsSUFGWCxFQXBJaUIsQ0FBbkIsQzs7O0FBeUllQSxZIiwiZmlsZSI6IjE4MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgcHJvdmluY2VEYXRhID0gW3tcbiAgICBcImxhYmVsXCI6IFwi5YyX5Lqs5biCXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjExXCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLlpKnmtKXluIJcIixcbiAgICBcInZhbHVlXCI6IFwiMTJcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIuays+WMl+ecgVwiLFxuICAgIFwidmFsdWVcIjogXCIxM1wiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5bGx6KW/55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjE0XCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLlhoXokpnlj6Toh6rmsrvljLpcIixcbiAgICBcInZhbHVlXCI6IFwiMTVcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIui+veWugeecgVwiLFxuICAgIFwidmFsdWVcIjogXCIyMVwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5ZCJ5p6X55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjIyXCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLpu5HpvpnmsZ/nnIFcIixcbiAgICBcInZhbHVlXCI6IFwiMjNcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIuS4iua1t+W4glwiLFxuICAgIFwidmFsdWVcIjogXCIzMVwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5rGf6IuP55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjMyXCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLmtZnmsZ/nnIFcIixcbiAgICBcInZhbHVlXCI6IFwiMzNcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIuWuieW+veecgVwiLFxuICAgIFwidmFsdWVcIjogXCIzNFwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi56aP5bu655yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjM1XCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLmsZ/opb/nnIFcIixcbiAgICBcInZhbHVlXCI6IFwiMzZcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIuWxseS4nOecgVwiLFxuICAgIFwidmFsdWVcIjogXCIzN1wiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5rKz5Y2X55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjQxXCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLmuZbljJfnnIFcIixcbiAgICBcInZhbHVlXCI6IFwiNDJcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIua5luWNl+ecgVwiLFxuICAgIFwidmFsdWVcIjogXCI0M1wiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5bm/5Lic55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjQ0XCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLlub/opb/lo67ml4/oh6rmsrvljLpcIixcbiAgICBcInZhbHVlXCI6IFwiNDVcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIua1t+WNl+ecgVwiLFxuICAgIFwidmFsdWVcIjogXCI0NlwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi6YeN5bqG5biCXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjUwXCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLlm5vlt53nnIFcIixcbiAgICBcInZhbHVlXCI6IFwiNTFcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIui0teW3nuecgVwiLFxuICAgIFwidmFsdWVcIjogXCI1MlwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5LqR5Y2X55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjUzXCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLopb/ol4/oh6rmsrvljLpcIixcbiAgICBcInZhbHVlXCI6IFwiNTRcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIumZleilv+ecgVwiLFxuICAgIFwidmFsdWVcIjogXCI2MVwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi55SY6IKD55yBXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjYyXCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLpnZLmtbfnnIFcIixcbiAgICBcInZhbHVlXCI6IFwiNjNcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIuWugeWkj+WbnuaXj+iHquayu+WMulwiLFxuICAgIFwidmFsdWVcIjogXCI2NFwiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5paw55aG57u05ZC+5bCU6Ieq5rK75Yy6XCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjY1XCJcbiAgfSxcbiAge1xuICAgIFwibGFiZWxcIjogXCLlj7Dmub5cIixcbiAgICBcInZhbHVlXCI6IFwiNjZcIlxuICB9LFxuICB7XG4gICAgXCJsYWJlbFwiOiBcIummmea4r1wiLFxuICAgIFwidmFsdWVcIjogXCI2N1wiXG4gIH0sXG4gIHtcbiAgICBcImxhYmVsXCI6IFwi5r6z6ZeoXCIsXG4gICAgXCJ2YWx1ZVwiOiBcIjY4XCJcbiAgfVxuXVxuZXhwb3J0IGRlZmF1bHQgcHJvdmluY2VEYXRhO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///180\n");

/***/ }),

/***/ 181:
/*!**********************************************************************************!*\
  !*** D:/张总新版app/maiYa01/components/uniapp-components/w-picker/city-data/city.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /* eslint-disable */\nvar cityData = [\n[{\n  \"label\": \"市辖区\",\n  \"value\": \"1101\" }],\n\n[{\n  \"label\": \"市辖区\",\n  \"value\": \"1201\" }],\n\n[{\n  \"label\": \"石家庄市\",\n  \"value\": \"1301\" },\n\n{\n  \"label\": \"唐山市\",\n  \"value\": \"1302\" },\n\n{\n  \"label\": \"秦皇岛市\",\n  \"value\": \"1303\" },\n\n{\n  \"label\": \"邯郸市\",\n  \"value\": \"1304\" },\n\n{\n  \"label\": \"邢台市\",\n  \"value\": \"1305\" },\n\n{\n  \"label\": \"保定市\",\n  \"value\": \"1306\" },\n\n{\n  \"label\": \"张家口市\",\n  \"value\": \"1307\" },\n\n{\n  \"label\": \"承德市\",\n  \"value\": \"1308\" },\n\n{\n  \"label\": \"沧州市\",\n  \"value\": \"1309\" },\n\n{\n  \"label\": \"廊坊市\",\n  \"value\": \"1310\" },\n\n{\n  \"label\": \"衡水市\",\n  \"value\": \"1311\" }],\n\n\n[{\n  \"label\": \"太原市\",\n  \"value\": \"1401\" },\n\n{\n  \"label\": \"大同市\",\n  \"value\": \"1402\" },\n\n{\n  \"label\": \"阳泉市\",\n  \"value\": \"1403\" },\n\n{\n  \"label\": \"长治市\",\n  \"value\": \"1404\" },\n\n{\n  \"label\": \"晋城市\",\n  \"value\": \"1405\" },\n\n{\n  \"label\": \"朔州市\",\n  \"value\": \"1406\" },\n\n{\n  \"label\": \"晋中市\",\n  \"value\": \"1407\" },\n\n{\n  \"label\": \"运城市\",\n  \"value\": \"1408\" },\n\n{\n  \"label\": \"忻州市\",\n  \"value\": \"1409\" },\n\n{\n  \"label\": \"临汾市\",\n  \"value\": \"1410\" },\n\n{\n  \"label\": \"吕梁市\",\n  \"value\": \"1411\" }],\n\n\n[{\n  \"label\": \"呼和浩特市\",\n  \"value\": \"1501\" },\n\n{\n  \"label\": \"包头市\",\n  \"value\": \"1502\" },\n\n{\n  \"label\": \"乌海市\",\n  \"value\": \"1503\" },\n\n{\n  \"label\": \"赤峰市\",\n  \"value\": \"1504\" },\n\n{\n  \"label\": \"通辽市\",\n  \"value\": \"1505\" },\n\n{\n  \"label\": \"鄂尔多斯市\",\n  \"value\": \"1506\" },\n\n{\n  \"label\": \"呼伦贝尔市\",\n  \"value\": \"1507\" },\n\n{\n  \"label\": \"巴彦淖尔市\",\n  \"value\": \"1508\" },\n\n{\n  \"label\": \"乌兰察布市\",\n  \"value\": \"1509\" },\n\n{\n  \"label\": \"兴安盟\",\n  \"value\": \"1522\" },\n\n{\n  \"label\": \"锡林郭勒盟\",\n  \"value\": \"1525\" },\n\n{\n  \"label\": \"阿拉善盟\",\n  \"value\": \"1529\" }],\n\n\n[{\n  \"label\": \"沈阳市\",\n  \"value\": \"2101\" },\n\n{\n  \"label\": \"大连市\",\n  \"value\": \"2102\" },\n\n{\n  \"label\": \"鞍山市\",\n  \"value\": \"2103\" },\n\n{\n  \"label\": \"抚顺市\",\n  \"value\": \"2104\" },\n\n{\n  \"label\": \"本溪市\",\n  \"value\": \"2105\" },\n\n{\n  \"label\": \"丹东市\",\n  \"value\": \"2106\" },\n\n{\n  \"label\": \"锦州市\",\n  \"value\": \"2107\" },\n\n{\n  \"label\": \"营口市\",\n  \"value\": \"2108\" },\n\n{\n  \"label\": \"阜新市\",\n  \"value\": \"2109\" },\n\n{\n  \"label\": \"辽阳市\",\n  \"value\": \"2110\" },\n\n{\n  \"label\": \"盘锦市\",\n  \"value\": \"2111\" },\n\n{\n  \"label\": \"铁岭市\",\n  \"value\": \"2112\" },\n\n{\n  \"label\": \"朝阳市\",\n  \"value\": \"2113\" },\n\n{\n  \"label\": \"葫芦岛市\",\n  \"value\": \"2114\" }],\n\n\n[{\n  \"label\": \"长春市\",\n  \"value\": \"2201\" },\n\n{\n  \"label\": \"吉林市\",\n  \"value\": \"2202\" },\n\n{\n  \"label\": \"四平市\",\n  \"value\": \"2203\" },\n\n{\n  \"label\": \"辽源市\",\n  \"value\": \"2204\" },\n\n{\n  \"label\": \"通化市\",\n  \"value\": \"2205\" },\n\n{\n  \"label\": \"白山市\",\n  \"value\": \"2206\" },\n\n{\n  \"label\": \"松原市\",\n  \"value\": \"2207\" },\n\n{\n  \"label\": \"白城市\",\n  \"value\": \"2208\" },\n\n{\n  \"label\": \"延边朝鲜族自治州\",\n  \"value\": \"2224\" }],\n\n\n[{\n  \"label\": \"哈尔滨市\",\n  \"value\": \"2301\" },\n\n{\n  \"label\": \"齐齐哈尔市\",\n  \"value\": \"2302\" },\n\n{\n  \"label\": \"鸡西市\",\n  \"value\": \"2303\" },\n\n{\n  \"label\": \"鹤岗市\",\n  \"value\": \"2304\" },\n\n{\n  \"label\": \"双鸭山市\",\n  \"value\": \"2305\" },\n\n{\n  \"label\": \"大庆市\",\n  \"value\": \"2306\" },\n\n{\n  \"label\": \"伊春市\",\n  \"value\": \"2307\" },\n\n{\n  \"label\": \"佳木斯市\",\n  \"value\": \"2308\" },\n\n{\n  \"label\": \"七台河市\",\n  \"value\": \"2309\" },\n\n{\n  \"label\": \"牡丹江市\",\n  \"value\": \"2310\" },\n\n{\n  \"label\": \"黑河市\",\n  \"value\": \"2311\" },\n\n{\n  \"label\": \"绥化市\",\n  \"value\": \"2312\" },\n\n{\n  \"label\": \"大兴安岭地区\",\n  \"value\": \"2327\" }],\n\n\n[{\n  \"label\": \"市辖区\",\n  \"value\": \"3101\" }],\n\n[{\n  \"label\": \"南京市\",\n  \"value\": \"3201\" },\n\n{\n  \"label\": \"无锡市\",\n  \"value\": \"3202\" },\n\n{\n  \"label\": \"徐州市\",\n  \"value\": \"3203\" },\n\n{\n  \"label\": \"常州市\",\n  \"value\": \"3204\" },\n\n{\n  \"label\": \"苏州市\",\n  \"value\": \"3205\" },\n\n{\n  \"label\": \"南通市\",\n  \"value\": \"3206\" },\n\n{\n  \"label\": \"连云港市\",\n  \"value\": \"3207\" },\n\n{\n  \"label\": \"淮安市\",\n  \"value\": \"3208\" },\n\n{\n  \"label\": \"盐城市\",\n  \"value\": \"3209\" },\n\n{\n  \"label\": \"扬州市\",\n  \"value\": \"3210\" },\n\n{\n  \"label\": \"镇江市\",\n  \"value\": \"3211\" },\n\n{\n  \"label\": \"泰州市\",\n  \"value\": \"3212\" },\n\n{\n  \"label\": \"宿迁市\",\n  \"value\": \"3213\" }],\n\n\n[{\n  \"label\": \"杭州市\",\n  \"value\": \"3301\" },\n\n{\n  \"label\": \"宁波市\",\n  \"value\": \"3302\" },\n\n{\n  \"label\": \"温州市\",\n  \"value\": \"3303\" },\n\n{\n  \"label\": \"嘉兴市\",\n  \"value\": \"3304\" },\n\n{\n  \"label\": \"湖州市\",\n  \"value\": \"3305\" },\n\n{\n  \"label\": \"绍兴市\",\n  \"value\": \"3306\" },\n\n{\n  \"label\": \"金华市\",\n  \"value\": \"3307\" },\n\n{\n  \"label\": \"衢州市\",\n  \"value\": \"3308\" },\n\n{\n  \"label\": \"舟山市\",\n  \"value\": \"3309\" },\n\n{\n  \"label\": \"台州市\",\n  \"value\": \"3310\" },\n\n{\n  \"label\": \"丽水市\",\n  \"value\": \"3311\" }],\n\n\n[{\n  \"label\": \"合肥市\",\n  \"value\": \"3401\" },\n\n{\n  \"label\": \"芜湖市\",\n  \"value\": \"3402\" },\n\n{\n  \"label\": \"蚌埠市\",\n  \"value\": \"3403\" },\n\n{\n  \"label\": \"淮南市\",\n  \"value\": \"3404\" },\n\n{\n  \"label\": \"马鞍山市\",\n  \"value\": \"3405\" },\n\n{\n  \"label\": \"淮北市\",\n  \"value\": \"3406\" },\n\n{\n  \"label\": \"铜陵市\",\n  \"value\": \"3407\" },\n\n{\n  \"label\": \"安庆市\",\n  \"value\": \"3408\" },\n\n{\n  \"label\": \"黄山市\",\n  \"value\": \"3410\" },\n\n{\n  \"label\": \"滁州市\",\n  \"value\": \"3411\" },\n\n{\n  \"label\": \"阜阳市\",\n  \"value\": \"3412\" },\n\n{\n  \"label\": \"宿州市\",\n  \"value\": \"3413\" },\n\n{\n  \"label\": \"六安市\",\n  \"value\": \"3415\" },\n\n{\n  \"label\": \"亳州市\",\n  \"value\": \"3416\" },\n\n{\n  \"label\": \"池州市\",\n  \"value\": \"3417\" },\n\n{\n  \"label\": \"宣城市\",\n  \"value\": \"3418\" }],\n\n\n[{\n  \"label\": \"福州市\",\n  \"value\": \"3501\" },\n\n{\n  \"label\": \"厦门市\",\n  \"value\": \"3502\" },\n\n{\n  \"label\": \"莆田市\",\n  \"value\": \"3503\" },\n\n{\n  \"label\": \"三明市\",\n  \"value\": \"3504\" },\n\n{\n  \"label\": \"泉州市\",\n  \"value\": \"3505\" },\n\n{\n  \"label\": \"漳州市\",\n  \"value\": \"3506\" },\n\n{\n  \"label\": \"南平市\",\n  \"value\": \"3507\" },\n\n{\n  \"label\": \"龙岩市\",\n  \"value\": \"3508\" },\n\n{\n  \"label\": \"宁德市\",\n  \"value\": \"3509\" }],\n\n\n[{\n  \"label\": \"南昌市\",\n  \"value\": \"3601\" },\n\n{\n  \"label\": \"景德镇市\",\n  \"value\": \"3602\" },\n\n{\n  \"label\": \"萍乡市\",\n  \"value\": \"3603\" },\n\n{\n  \"label\": \"九江市\",\n  \"value\": \"3604\" },\n\n{\n  \"label\": \"新余市\",\n  \"value\": \"3605\" },\n\n{\n  \"label\": \"鹰潭市\",\n  \"value\": \"3606\" },\n\n{\n  \"label\": \"赣州市\",\n  \"value\": \"3607\" },\n\n{\n  \"label\": \"吉安市\",\n  \"value\": \"3608\" },\n\n{\n  \"label\": \"宜春市\",\n  \"value\": \"3609\" },\n\n{\n  \"label\": \"抚州市\",\n  \"value\": \"3610\" },\n\n{\n  \"label\": \"上饶市\",\n  \"value\": \"3611\" }],\n\n\n[{\n  \"label\": \"济南市\",\n  \"value\": \"3701\" },\n\n{\n  \"label\": \"青岛市\",\n  \"value\": \"3702\" },\n\n{\n  \"label\": \"淄博市\",\n  \"value\": \"3703\" },\n\n{\n  \"label\": \"枣庄市\",\n  \"value\": \"3704\" },\n\n{\n  \"label\": \"东营市\",\n  \"value\": \"3705\" },\n\n{\n  \"label\": \"烟台市\",\n  \"value\": \"3706\" },\n\n{\n  \"label\": \"潍坊市\",\n  \"value\": \"3707\" },\n\n{\n  \"label\": \"济宁市\",\n  \"value\": \"3708\" },\n\n{\n  \"label\": \"泰安市\",\n  \"value\": \"3709\" },\n\n{\n  \"label\": \"威海市\",\n  \"value\": \"3710\" },\n\n{\n  \"label\": \"日照市\",\n  \"value\": \"3711\" },\n\n{\n  \"label\": \"莱芜市\",\n  \"value\": \"3712\" },\n\n{\n  \"label\": \"临沂市\",\n  \"value\": \"3713\" },\n\n{\n  \"label\": \"德州市\",\n  \"value\": \"3714\" },\n\n{\n  \"label\": \"聊城市\",\n  \"value\": \"3715\" },\n\n{\n  \"label\": \"滨州市\",\n  \"value\": \"3716\" },\n\n{\n  \"label\": \"菏泽市\",\n  \"value\": \"3717\" }],\n\n\n[{\n  \"label\": \"郑州市\",\n  \"value\": \"4101\" },\n\n{\n  \"label\": \"开封市\",\n  \"value\": \"4102\" },\n\n{\n  \"label\": \"洛阳市\",\n  \"value\": \"4103\" },\n\n{\n  \"label\": \"平顶山市\",\n  \"value\": \"4104\" },\n\n{\n  \"label\": \"安阳市\",\n  \"value\": \"4105\" },\n\n{\n  \"label\": \"鹤壁市\",\n  \"value\": \"4106\" },\n\n{\n  \"label\": \"新乡市\",\n  \"value\": \"4107\" },\n\n{\n  \"label\": \"焦作市\",\n  \"value\": \"4108\" },\n\n{\n  \"label\": \"濮阳市\",\n  \"value\": \"4109\" },\n\n{\n  \"label\": \"许昌市\",\n  \"value\": \"4110\" },\n\n{\n  \"label\": \"漯河市\",\n  \"value\": \"4111\" },\n\n{\n  \"label\": \"三门峡市\",\n  \"value\": \"4112\" },\n\n{\n  \"label\": \"南阳市\",\n  \"value\": \"4113\" },\n\n{\n  \"label\": \"商丘市\",\n  \"value\": \"4114\" },\n\n{\n  \"label\": \"信阳市\",\n  \"value\": \"4115\" },\n\n{\n  \"label\": \"周口市\",\n  \"value\": \"4116\" },\n\n{\n  \"label\": \"驻马店市\",\n  \"value\": \"4117\" },\n\n{\n  \"label\": \"省直辖县级行政区划\",\n  \"value\": \"4190\" }],\n\n\n[{\n  \"label\": \"武汉市\",\n  \"value\": \"4201\" },\n\n{\n  \"label\": \"黄石市\",\n  \"value\": \"4202\" },\n\n{\n  \"label\": \"十堰市\",\n  \"value\": \"4203\" },\n\n{\n  \"label\": \"宜昌市\",\n  \"value\": \"4205\" },\n\n{\n  \"label\": \"襄阳市\",\n  \"value\": \"4206\" },\n\n{\n  \"label\": \"鄂州市\",\n  \"value\": \"4207\" },\n\n{\n  \"label\": \"荆门市\",\n  \"value\": \"4208\" },\n\n{\n  \"label\": \"孝感市\",\n  \"value\": \"4209\" },\n\n{\n  \"label\": \"荆州市\",\n  \"value\": \"4210\" },\n\n{\n  \"label\": \"黄冈市\",\n  \"value\": \"4211\" },\n\n{\n  \"label\": \"咸宁市\",\n  \"value\": \"4212\" },\n\n{\n  \"label\": \"随州市\",\n  \"value\": \"4213\" },\n\n{\n  \"label\": \"恩施土家族苗族自治州\",\n  \"value\": \"4228\" },\n\n{\n  \"label\": \"省直辖县级行政区划\",\n  \"value\": \"4290\" }],\n\n\n[{\n  \"label\": \"长沙市\",\n  \"value\": \"4301\" },\n\n{\n  \"label\": \"株洲市\",\n  \"value\": \"4302\" },\n\n{\n  \"label\": \"湘潭市\",\n  \"value\": \"4303\" },\n\n{\n  \"label\": \"衡阳市\",\n  \"value\": \"4304\" },\n\n{\n  \"label\": \"邵阳市\",\n  \"value\": \"4305\" },\n\n{\n  \"label\": \"岳阳市\",\n  \"value\": \"4306\" },\n\n{\n  \"label\": \"常德市\",\n  \"value\": \"4307\" },\n\n{\n  \"label\": \"张家界市\",\n  \"value\": \"4308\" },\n\n{\n  \"label\": \"益阳市\",\n  \"value\": \"4309\" },\n\n{\n  \"label\": \"郴州市\",\n  \"value\": \"4310\" },\n\n{\n  \"label\": \"永州市\",\n  \"value\": \"4311\" },\n\n{\n  \"label\": \"怀化市\",\n  \"value\": \"4312\" },\n\n{\n  \"label\": \"娄底市\",\n  \"value\": \"4313\" },\n\n{\n  \"label\": \"湘西土家族苗族自治州\",\n  \"value\": \"4331\" }],\n\n\n[{\n  \"label\": \"广州市\",\n  \"value\": \"4401\" },\n\n{\n  \"label\": \"韶关市\",\n  \"value\": \"4402\" },\n\n{\n  \"label\": \"深圳市\",\n  \"value\": \"4403\" },\n\n{\n  \"label\": \"珠海市\",\n  \"value\": \"4404\" },\n\n{\n  \"label\": \"汕头市\",\n  \"value\": \"4405\" },\n\n{\n  \"label\": \"佛山市\",\n  \"value\": \"4406\" },\n\n{\n  \"label\": \"江门市\",\n  \"value\": \"4407\" },\n\n{\n  \"label\": \"湛江市\",\n  \"value\": \"4408\" },\n\n{\n  \"label\": \"茂名市\",\n  \"value\": \"4409\" },\n\n{\n  \"label\": \"肇庆市\",\n  \"value\": \"4412\" },\n\n{\n  \"label\": \"惠州市\",\n  \"value\": \"4413\" },\n\n{\n  \"label\": \"梅州市\",\n  \"value\": \"4414\" },\n\n{\n  \"label\": \"汕尾市\",\n  \"value\": \"4415\" },\n\n{\n  \"label\": \"河源市\",\n  \"value\": \"4416\" },\n\n{\n  \"label\": \"阳江市\",\n  \"value\": \"4417\" },\n\n{\n  \"label\": \"清远市\",\n  \"value\": \"4418\" },\n\n{\n  \"label\": \"东莞市\",\n  \"value\": \"4419\" },\n\n{\n  \"label\": \"中山市\",\n  \"value\": \"4420\" },\n\n{\n  \"label\": \"潮州市\",\n  \"value\": \"4451\" },\n\n{\n  \"label\": \"揭阳市\",\n  \"value\": \"4452\" },\n\n{\n  \"label\": \"云浮市\",\n  \"value\": \"4453\" }],\n\n\n[{\n  \"label\": \"南宁市\",\n  \"value\": \"4501\" },\n\n{\n  \"label\": \"柳州市\",\n  \"value\": \"4502\" },\n\n{\n  \"label\": \"桂林市\",\n  \"value\": \"4503\" },\n\n{\n  \"label\": \"梧州市\",\n  \"value\": \"4504\" },\n\n{\n  \"label\": \"北海市\",\n  \"value\": \"4505\" },\n\n{\n  \"label\": \"防城港市\",\n  \"value\": \"4506\" },\n\n{\n  \"label\": \"钦州市\",\n  \"value\": \"4507\" },\n\n{\n  \"label\": \"贵港市\",\n  \"value\": \"4508\" },\n\n{\n  \"label\": \"玉林市\",\n  \"value\": \"4509\" },\n\n{\n  \"label\": \"百色市\",\n  \"value\": \"4510\" },\n\n{\n  \"label\": \"贺州市\",\n  \"value\": \"4511\" },\n\n{\n  \"label\": \"河池市\",\n  \"value\": \"4512\" },\n\n{\n  \"label\": \"来宾市\",\n  \"value\": \"4513\" },\n\n{\n  \"label\": \"崇左市\",\n  \"value\": \"4514\" }],\n\n\n[{\n  \"label\": \"海口市\",\n  \"value\": \"4601\" },\n\n{\n  \"label\": \"三亚市\",\n  \"value\": \"4602\" },\n\n{\n  \"label\": \"三沙市\",\n  \"value\": \"4603\" },\n\n{\n  \"label\": \"儋州市\",\n  \"value\": \"4604\" },\n\n{\n  \"label\": \"省直辖县级行政区划\",\n  \"value\": \"4690\" }],\n\n\n[{\n  \"label\": \"市辖区\",\n  \"value\": \"5001\" },\n\n{\n  \"label\": \"县\",\n  \"value\": \"5002\" }],\n\n\n[{\n  \"label\": \"成都市\",\n  \"value\": \"5101\" },\n\n{\n  \"label\": \"自贡市\",\n  \"value\": \"5103\" },\n\n{\n  \"label\": \"攀枝花市\",\n  \"value\": \"5104\" },\n\n{\n  \"label\": \"泸州市\",\n  \"value\": \"5105\" },\n\n{\n  \"label\": \"德阳市\",\n  \"value\": \"5106\" },\n\n{\n  \"label\": \"绵阳市\",\n  \"value\": \"5107\" },\n\n{\n  \"label\": \"广元市\",\n  \"value\": \"5108\" },\n\n{\n  \"label\": \"遂宁市\",\n  \"value\": \"5109\" },\n\n{\n  \"label\": \"内江市\",\n  \"value\": \"5110\" },\n\n{\n  \"label\": \"乐山市\",\n  \"value\": \"5111\" },\n\n{\n  \"label\": \"南充市\",\n  \"value\": \"5113\" },\n\n{\n  \"label\": \"眉山市\",\n  \"value\": \"5114\" },\n\n{\n  \"label\": \"宜宾市\",\n  \"value\": \"5115\" },\n\n{\n  \"label\": \"广安市\",\n  \"value\": \"5116\" },\n\n{\n  \"label\": \"达州市\",\n  \"value\": \"5117\" },\n\n{\n  \"label\": \"雅安市\",\n  \"value\": \"5118\" },\n\n{\n  \"label\": \"巴中市\",\n  \"value\": \"5119\" },\n\n{\n  \"label\": \"资阳市\",\n  \"value\": \"5120\" },\n\n{\n  \"label\": \"阿坝藏族羌族自治州\",\n  \"value\": \"5132\" },\n\n{\n  \"label\": \"甘孜藏族自治州\",\n  \"value\": \"5133\" },\n\n{\n  \"label\": \"凉山彝族自治州\",\n  \"value\": \"5134\" }],\n\n\n[{\n  \"label\": \"贵阳市\",\n  \"value\": \"5201\" },\n\n{\n  \"label\": \"六盘水市\",\n  \"value\": \"5202\" },\n\n{\n  \"label\": \"遵义市\",\n  \"value\": \"5203\" },\n\n{\n  \"label\": \"安顺市\",\n  \"value\": \"5204\" },\n\n{\n  \"label\": \"毕节市\",\n  \"value\": \"5205\" },\n\n{\n  \"label\": \"铜仁市\",\n  \"value\": \"5206\" },\n\n{\n  \"label\": \"黔西南布依族苗族自治州\",\n  \"value\": \"5223\" },\n\n{\n  \"label\": \"黔东南苗族侗族自治州\",\n  \"value\": \"5226\" },\n\n{\n  \"label\": \"黔南布依族苗族自治州\",\n  \"value\": \"5227\" }],\n\n\n[{\n  \"label\": \"昆明市\",\n  \"value\": \"5301\" },\n\n{\n  \"label\": \"曲靖市\",\n  \"value\": \"5303\" },\n\n{\n  \"label\": \"玉溪市\",\n  \"value\": \"5304\" },\n\n{\n  \"label\": \"保山市\",\n  \"value\": \"5305\" },\n\n{\n  \"label\": \"昭通市\",\n  \"value\": \"5306\" },\n\n{\n  \"label\": \"丽江市\",\n  \"value\": \"5307\" },\n\n{\n  \"label\": \"普洱市\",\n  \"value\": \"5308\" },\n\n{\n  \"label\": \"临沧市\",\n  \"value\": \"5309\" },\n\n{\n  \"label\": \"楚雄彝族自治州\",\n  \"value\": \"5323\" },\n\n{\n  \"label\": \"红河哈尼族彝族自治州\",\n  \"value\": \"5325\" },\n\n{\n  \"label\": \"文山壮族苗族自治州\",\n  \"value\": \"5326\" },\n\n{\n  \"label\": \"西双版纳傣族自治州\",\n  \"value\": \"5328\" },\n\n{\n  \"label\": \"大理白族自治州\",\n  \"value\": \"5329\" },\n\n{\n  \"label\": \"德宏傣族景颇族自治州\",\n  \"value\": \"5331\" },\n\n{\n  \"label\": \"怒江傈僳族自治州\",\n  \"value\": \"5333\" },\n\n{\n  \"label\": \"迪庆藏族自治州\",\n  \"value\": \"5334\" }],\n\n\n[{\n  \"label\": \"拉萨市\",\n  \"value\": \"5401\" },\n\n{\n  \"label\": \"日喀则市\",\n  \"value\": \"5402\" },\n\n{\n  \"label\": \"昌都市\",\n  \"value\": \"5403\" },\n\n{\n  \"label\": \"林芝市\",\n  \"value\": \"5404\" },\n\n{\n  \"label\": \"山南市\",\n  \"value\": \"5405\" },\n\n{\n  \"label\": \"那曲地区\",\n  \"value\": \"5424\" },\n\n{\n  \"label\": \"阿里地区\",\n  \"value\": \"5425\" }],\n\n\n[{\n  \"label\": \"西安市\",\n  \"value\": \"6101\" },\n\n{\n  \"label\": \"铜川市\",\n  \"value\": \"6102\" },\n\n{\n  \"label\": \"宝鸡市\",\n  \"value\": \"6103\" },\n\n{\n  \"label\": \"咸阳市\",\n  \"value\": \"6104\" },\n\n{\n  \"label\": \"渭南市\",\n  \"value\": \"6105\" },\n\n{\n  \"label\": \"延安市\",\n  \"value\": \"6106\" },\n\n{\n  \"label\": \"汉中市\",\n  \"value\": \"6107\" },\n\n{\n  \"label\": \"榆林市\",\n  \"value\": \"6108\" },\n\n{\n  \"label\": \"安康市\",\n  \"value\": \"6109\" },\n\n{\n  \"label\": \"商洛市\",\n  \"value\": \"6110\" }],\n\n\n[{\n  \"label\": \"兰州市\",\n  \"value\": \"6201\" },\n\n{\n  \"label\": \"嘉峪关市\",\n  \"value\": \"6202\" },\n\n{\n  \"label\": \"金昌市\",\n  \"value\": \"6203\" },\n\n{\n  \"label\": \"白银市\",\n  \"value\": \"6204\" },\n\n{\n  \"label\": \"天水市\",\n  \"value\": \"6205\" },\n\n{\n  \"label\": \"武威市\",\n  \"value\": \"6206\" },\n\n{\n  \"label\": \"张掖市\",\n  \"value\": \"6207\" },\n\n{\n  \"label\": \"平凉市\",\n  \"value\": \"6208\" },\n\n{\n  \"label\": \"酒泉市\",\n  \"value\": \"6209\" },\n\n{\n  \"label\": \"庆阳市\",\n  \"value\": \"6210\" },\n\n{\n  \"label\": \"定西市\",\n  \"value\": \"6211\" },\n\n{\n  \"label\": \"陇南市\",\n  \"value\": \"6212\" },\n\n{\n  \"label\": \"临夏回族自治州\",\n  \"value\": \"6229\" },\n\n{\n  \"label\": \"甘南藏族自治州\",\n  \"value\": \"6230\" }],\n\n\n[{\n  \"label\": \"西宁市\",\n  \"value\": \"6301\" },\n\n{\n  \"label\": \"海东市\",\n  \"value\": \"6302\" },\n\n{\n  \"label\": \"海北藏族自治州\",\n  \"value\": \"6322\" },\n\n{\n  \"label\": \"黄南藏族自治州\",\n  \"value\": \"6323\" },\n\n{\n  \"label\": \"海南藏族自治州\",\n  \"value\": \"6325\" },\n\n{\n  \"label\": \"果洛藏族自治州\",\n  \"value\": \"6326\" },\n\n{\n  \"label\": \"玉树藏族自治州\",\n  \"value\": \"6327\" },\n\n{\n  \"label\": \"海西蒙古族藏族自治州\",\n  \"value\": \"6328\" }],\n\n\n[{\n  \"label\": \"银川市\",\n  \"value\": \"6401\" },\n\n{\n  \"label\": \"石嘴山市\",\n  \"value\": \"6402\" },\n\n{\n  \"label\": \"吴忠市\",\n  \"value\": \"6403\" },\n\n{\n  \"label\": \"固原市\",\n  \"value\": \"6404\" },\n\n{\n  \"label\": \"中卫市\",\n  \"value\": \"6405\" }],\n\n\n[{\n  \"label\": \"乌鲁木齐市\",\n  \"value\": \"6501\" },\n\n{\n  \"label\": \"克拉玛依市\",\n  \"value\": \"6502\" },\n\n{\n  \"label\": \"吐鲁番市\",\n  \"value\": \"6504\" },\n\n{\n  \"label\": \"哈密市\",\n  \"value\": \"6505\" },\n\n{\n  \"label\": \"昌吉回族自治州\",\n  \"value\": \"6523\" },\n\n{\n  \"label\": \"博尔塔拉蒙古自治州\",\n  \"value\": \"6527\" },\n\n{\n  \"label\": \"巴音郭楞蒙古自治州\",\n  \"value\": \"6528\" },\n\n{\n  \"label\": \"阿克苏地区\",\n  \"value\": \"6529\" },\n\n{\n  \"label\": \"克孜勒苏柯尔克孜自治州\",\n  \"value\": \"6530\" },\n\n{\n  \"label\": \"喀什地区\",\n  \"value\": \"6531\" },\n\n{\n  \"label\": \"和田地区\",\n  \"value\": \"6532\" },\n\n{\n  \"label\": \"伊犁哈萨克自治州\",\n  \"value\": \"6540\" },\n\n{\n  \"label\": \"塔城地区\",\n  \"value\": \"6542\" },\n\n{\n  \"label\": \"阿勒泰地区\",\n  \"value\": \"6543\" },\n\n{\n  \"label\": \"自治区直辖县级行政区划\",\n  \"value\": \"6590\" }],\n\n\n[{\n  \"label\": \"台北\",\n  \"value\": \"6601\" },\n\n{\n  \"label\": \"高雄\",\n  \"value\": \"6602\" },\n\n{\n  \"label\": \"基隆\",\n  \"value\": \"6603\" },\n\n{\n  \"label\": \"台中\",\n  \"value\": \"6604\" },\n\n{\n  \"label\": \"台南\",\n  \"value\": \"6605\" },\n\n{\n  \"label\": \"新竹\",\n  \"value\": \"6606\" },\n\n{\n  \"label\": \"嘉义\",\n  \"value\": \"6607\" },\n\n{\n  \"label\": \"宜兰\",\n  \"value\": \"6608\" },\n\n{\n  \"label\": \"桃园\",\n  \"value\": \"6609\" },\n\n{\n  \"label\": \"苗栗\",\n  \"value\": \"6610\" },\n\n{\n  \"label\": \"彰化\",\n  \"value\": \"6611\" },\n\n{\n  \"label\": \"南投\",\n  \"value\": \"6612\" },\n\n{\n  \"label\": \"云林\",\n  \"value\": \"6613\" },\n\n{\n  \"label\": \"屏东\",\n  \"value\": \"6614\" },\n\n{\n  \"label\": \"台东\",\n  \"value\": \"6615\" },\n\n{\n  \"label\": \"花莲\",\n  \"value\": \"6616\" },\n\n{\n  \"label\": \"澎湖\",\n  \"value\": \"6617\" }],\n\n\n[{\n  \"label\": \"香港岛\",\n  \"value\": \"6701\" },\n\n{\n  \"label\": \"九龙\",\n  \"value\": \"6702\" },\n\n{\n  \"label\": \"新界\",\n  \"value\": \"6703\" }],\n\n\n[{\n  \"label\": \"澳门半岛\",\n  \"value\": \"6801\" },\n\n{\n  \"label\": \"氹仔岛\",\n  \"value\": \"6802\" },\n\n{\n  \"label\": \"路环岛\",\n  \"value\": \"6803\" },\n\n{\n  \"label\": \"路氹城\",\n  \"value\": \"6804\" }]];var _default =\n\n\n\ncityData;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///181\n");

/***/ }),

/***/ 182:
/*!**********************************************************************************!*\
  !*** D:/张总新版app/maiYa01/components/uniapp-components/w-picker/city-data/area.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /* eslint-disable */\nvar areaData = [\n[\n[{\n  \"label\": \"东城区\",\n  \"value\": \"110101\" },\n\n{\n  \"label\": \"西城区\",\n  \"value\": \"110102\" },\n\n{\n  \"label\": \"朝阳区\",\n  \"value\": \"110105\" },\n\n{\n  \"label\": \"丰台区\",\n  \"value\": \"110106\" },\n\n{\n  \"label\": \"石景山区\",\n  \"value\": \"110107\" },\n\n{\n  \"label\": \"海淀区\",\n  \"value\": \"110108\" },\n\n{\n  \"label\": \"门头沟区\",\n  \"value\": \"110109\" },\n\n{\n  \"label\": \"房山区\",\n  \"value\": \"110111\" },\n\n{\n  \"label\": \"通州区\",\n  \"value\": \"110112\" },\n\n{\n  \"label\": \"顺义区\",\n  \"value\": \"110113\" },\n\n{\n  \"label\": \"昌平区\",\n  \"value\": \"110114\" },\n\n{\n  \"label\": \"大兴区\",\n  \"value\": \"110115\" },\n\n{\n  \"label\": \"怀柔区\",\n  \"value\": \"110116\" },\n\n{\n  \"label\": \"平谷区\",\n  \"value\": \"110117\" },\n\n{\n  \"label\": \"密云区\",\n  \"value\": \"110118\" },\n\n{\n  \"label\": \"延庆区\",\n  \"value\": \"110119\" }]],\n\n\n\n[\n[{\n  \"label\": \"和平区\",\n  \"value\": \"120101\" },\n\n{\n  \"label\": \"河东区\",\n  \"value\": \"120102\" },\n\n{\n  \"label\": \"河西区\",\n  \"value\": \"120103\" },\n\n{\n  \"label\": \"南开区\",\n  \"value\": \"120104\" },\n\n{\n  \"label\": \"河北区\",\n  \"value\": \"120105\" },\n\n{\n  \"label\": \"红桥区\",\n  \"value\": \"120106\" },\n\n{\n  \"label\": \"东丽区\",\n  \"value\": \"120110\" },\n\n{\n  \"label\": \"西青区\",\n  \"value\": \"120111\" },\n\n{\n  \"label\": \"津南区\",\n  \"value\": \"120112\" },\n\n{\n  \"label\": \"北辰区\",\n  \"value\": \"120113\" },\n\n{\n  \"label\": \"武清区\",\n  \"value\": \"120114\" },\n\n{\n  \"label\": \"宝坻区\",\n  \"value\": \"120115\" },\n\n{\n  \"label\": \"滨海新区\",\n  \"value\": \"120116\" },\n\n{\n  \"label\": \"宁河区\",\n  \"value\": \"120117\" },\n\n{\n  \"label\": \"静海区\",\n  \"value\": \"120118\" },\n\n{\n  \"label\": \"蓟州区\",\n  \"value\": \"120119\" }]],\n\n\n\n[\n[{\n  \"label\": \"长安区\",\n  \"value\": \"130102\" },\n\n{\n  \"label\": \"桥西区\",\n  \"value\": \"130104\" },\n\n{\n  \"label\": \"新华区\",\n  \"value\": \"130105\" },\n\n{\n  \"label\": \"井陉矿区\",\n  \"value\": \"130107\" },\n\n{\n  \"label\": \"裕华区\",\n  \"value\": \"130108\" },\n\n{\n  \"label\": \"藁城区\",\n  \"value\": \"130109\" },\n\n{\n  \"label\": \"鹿泉区\",\n  \"value\": \"130110\" },\n\n{\n  \"label\": \"栾城区\",\n  \"value\": \"130111\" },\n\n{\n  \"label\": \"井陉县\",\n  \"value\": \"130121\" },\n\n{\n  \"label\": \"正定县\",\n  \"value\": \"130123\" },\n\n{\n  \"label\": \"行唐县\",\n  \"value\": \"130125\" },\n\n{\n  \"label\": \"灵寿县\",\n  \"value\": \"130126\" },\n\n{\n  \"label\": \"高邑县\",\n  \"value\": \"130127\" },\n\n{\n  \"label\": \"深泽县\",\n  \"value\": \"130128\" },\n\n{\n  \"label\": \"赞皇县\",\n  \"value\": \"130129\" },\n\n{\n  \"label\": \"无极县\",\n  \"value\": \"130130\" },\n\n{\n  \"label\": \"平山县\",\n  \"value\": \"130131\" },\n\n{\n  \"label\": \"元氏县\",\n  \"value\": \"130132\" },\n\n{\n  \"label\": \"赵县\",\n  \"value\": \"130133\" },\n\n{\n  \"label\": \"石家庄高新技术产业开发区\",\n  \"value\": \"130171\" },\n\n{\n  \"label\": \"石家庄循环化工园区\",\n  \"value\": \"130172\" },\n\n{\n  \"label\": \"辛集市\",\n  \"value\": \"130181\" },\n\n{\n  \"label\": \"晋州市\",\n  \"value\": \"130183\" },\n\n{\n  \"label\": \"新乐市\",\n  \"value\": \"130184\" }],\n\n\n[{\n  \"label\": \"路南区\",\n  \"value\": \"130202\" },\n\n{\n  \"label\": \"路北区\",\n  \"value\": \"130203\" },\n\n{\n  \"label\": \"古冶区\",\n  \"value\": \"130204\" },\n\n{\n  \"label\": \"开平区\",\n  \"value\": \"130205\" },\n\n{\n  \"label\": \"丰南区\",\n  \"value\": \"130207\" },\n\n{\n  \"label\": \"丰润区\",\n  \"value\": \"130208\" },\n\n{\n  \"label\": \"曹妃甸区\",\n  \"value\": \"130209\" },\n\n{\n  \"label\": \"滦县\",\n  \"value\": \"130223\" },\n\n{\n  \"label\": \"滦南县\",\n  \"value\": \"130224\" },\n\n{\n  \"label\": \"乐亭县\",\n  \"value\": \"130225\" },\n\n{\n  \"label\": \"迁西县\",\n  \"value\": \"130227\" },\n\n{\n  \"label\": \"玉田县\",\n  \"value\": \"130229\" },\n\n{\n  \"label\": \"唐山市芦台经济技术开发区\",\n  \"value\": \"130271\" },\n\n{\n  \"label\": \"唐山市汉沽管理区\",\n  \"value\": \"130272\" },\n\n{\n  \"label\": \"唐山高新技术产业开发区\",\n  \"value\": \"130273\" },\n\n{\n  \"label\": \"河北唐山海港经济开发区\",\n  \"value\": \"130274\" },\n\n{\n  \"label\": \"遵化市\",\n  \"value\": \"130281\" },\n\n{\n  \"label\": \"迁安市\",\n  \"value\": \"130283\" }],\n\n\n[{\n  \"label\": \"海港区\",\n  \"value\": \"130302\" },\n\n{\n  \"label\": \"山海关区\",\n  \"value\": \"130303\" },\n\n{\n  \"label\": \"北戴河区\",\n  \"value\": \"130304\" },\n\n{\n  \"label\": \"抚宁区\",\n  \"value\": \"130306\" },\n\n{\n  \"label\": \"青龙满族自治县\",\n  \"value\": \"130321\" },\n\n{\n  \"label\": \"昌黎县\",\n  \"value\": \"130322\" },\n\n{\n  \"label\": \"卢龙县\",\n  \"value\": \"130324\" },\n\n{\n  \"label\": \"秦皇岛市经济技术开发区\",\n  \"value\": \"130371\" },\n\n{\n  \"label\": \"北戴河新区\",\n  \"value\": \"130372\" }],\n\n\n[{\n  \"label\": \"邯山区\",\n  \"value\": \"130402\" },\n\n{\n  \"label\": \"丛台区\",\n  \"value\": \"130403\" },\n\n{\n  \"label\": \"复兴区\",\n  \"value\": \"130404\" },\n\n{\n  \"label\": \"峰峰矿区\",\n  \"value\": \"130406\" },\n\n{\n  \"label\": \"肥乡区\",\n  \"value\": \"130407\" },\n\n{\n  \"label\": \"永年区\",\n  \"value\": \"130408\" },\n\n{\n  \"label\": \"临漳县\",\n  \"value\": \"130423\" },\n\n{\n  \"label\": \"成安县\",\n  \"value\": \"130424\" },\n\n{\n  \"label\": \"大名县\",\n  \"value\": \"130425\" },\n\n{\n  \"label\": \"涉县\",\n  \"value\": \"130426\" },\n\n{\n  \"label\": \"磁县\",\n  \"value\": \"130427\" },\n\n{\n  \"label\": \"邱县\",\n  \"value\": \"130430\" },\n\n{\n  \"label\": \"鸡泽县\",\n  \"value\": \"130431\" },\n\n{\n  \"label\": \"广平县\",\n  \"value\": \"130432\" },\n\n{\n  \"label\": \"馆陶县\",\n  \"value\": \"130433\" },\n\n{\n  \"label\": \"魏县\",\n  \"value\": \"130434\" },\n\n{\n  \"label\": \"曲周县\",\n  \"value\": \"130435\" },\n\n{\n  \"label\": \"邯郸经济技术开发区\",\n  \"value\": \"130471\" },\n\n{\n  \"label\": \"邯郸冀南新区\",\n  \"value\": \"130473\" },\n\n{\n  \"label\": \"武安市\",\n  \"value\": \"130481\" }],\n\n\n[{\n  \"label\": \"桥东区\",\n  \"value\": \"130502\" },\n\n{\n  \"label\": \"桥西区\",\n  \"value\": \"130503\" },\n\n{\n  \"label\": \"邢台县\",\n  \"value\": \"130521\" },\n\n{\n  \"label\": \"临城县\",\n  \"value\": \"130522\" },\n\n{\n  \"label\": \"内丘县\",\n  \"value\": \"130523\" },\n\n{\n  \"label\": \"柏乡县\",\n  \"value\": \"130524\" },\n\n{\n  \"label\": \"隆尧县\",\n  \"value\": \"130525\" },\n\n{\n  \"label\": \"任县\",\n  \"value\": \"130526\" },\n\n{\n  \"label\": \"南和县\",\n  \"value\": \"130527\" },\n\n{\n  \"label\": \"宁晋县\",\n  \"value\": \"130528\" },\n\n{\n  \"label\": \"巨鹿县\",\n  \"value\": \"130529\" },\n\n{\n  \"label\": \"新河县\",\n  \"value\": \"130530\" },\n\n{\n  \"label\": \"广宗县\",\n  \"value\": \"130531\" },\n\n{\n  \"label\": \"平乡县\",\n  \"value\": \"130532\" },\n\n{\n  \"label\": \"威县\",\n  \"value\": \"130533\" },\n\n{\n  \"label\": \"清河县\",\n  \"value\": \"130534\" },\n\n{\n  \"label\": \"临西县\",\n  \"value\": \"130535\" },\n\n{\n  \"label\": \"河北邢台经济开发区\",\n  \"value\": \"130571\" },\n\n{\n  \"label\": \"南宫市\",\n  \"value\": \"130581\" },\n\n{\n  \"label\": \"沙河市\",\n  \"value\": \"130582\" }],\n\n\n[{\n  \"label\": \"竞秀区\",\n  \"value\": \"130602\" },\n\n{\n  \"label\": \"莲池区\",\n  \"value\": \"130606\" },\n\n{\n  \"label\": \"满城区\",\n  \"value\": \"130607\" },\n\n{\n  \"label\": \"清苑区\",\n  \"value\": \"130608\" },\n\n{\n  \"label\": \"徐水区\",\n  \"value\": \"130609\" },\n\n{\n  \"label\": \"涞水县\",\n  \"value\": \"130623\" },\n\n{\n  \"label\": \"阜平县\",\n  \"value\": \"130624\" },\n\n{\n  \"label\": \"定兴县\",\n  \"value\": \"130626\" },\n\n{\n  \"label\": \"唐县\",\n  \"value\": \"130627\" },\n\n{\n  \"label\": \"高阳县\",\n  \"value\": \"130628\" },\n\n{\n  \"label\": \"容城县\",\n  \"value\": \"130629\" },\n\n{\n  \"label\": \"涞源县\",\n  \"value\": \"130630\" },\n\n{\n  \"label\": \"望都县\",\n  \"value\": \"130631\" },\n\n{\n  \"label\": \"安新县\",\n  \"value\": \"130632\" },\n\n{\n  \"label\": \"易县\",\n  \"value\": \"130633\" },\n\n{\n  \"label\": \"曲阳县\",\n  \"value\": \"130634\" },\n\n{\n  \"label\": \"蠡县\",\n  \"value\": \"130635\" },\n\n{\n  \"label\": \"顺平县\",\n  \"value\": \"130636\" },\n\n{\n  \"label\": \"博野县\",\n  \"value\": \"130637\" },\n\n{\n  \"label\": \"雄县\",\n  \"value\": \"130638\" },\n\n{\n  \"label\": \"保定高新技术产业开发区\",\n  \"value\": \"130671\" },\n\n{\n  \"label\": \"保定白沟新城\",\n  \"value\": \"130672\" },\n\n{\n  \"label\": \"涿州市\",\n  \"value\": \"130681\" },\n\n{\n  \"label\": \"定州市\",\n  \"value\": \"130682\" },\n\n{\n  \"label\": \"安国市\",\n  \"value\": \"130683\" },\n\n{\n  \"label\": \"高碑店市\",\n  \"value\": \"130684\" }],\n\n\n[{\n  \"label\": \"桥东区\",\n  \"value\": \"130702\" },\n\n{\n  \"label\": \"桥西区\",\n  \"value\": \"130703\" },\n\n{\n  \"label\": \"宣化区\",\n  \"value\": \"130705\" },\n\n{\n  \"label\": \"下花园区\",\n  \"value\": \"130706\" },\n\n{\n  \"label\": \"万全区\",\n  \"value\": \"130708\" },\n\n{\n  \"label\": \"崇礼区\",\n  \"value\": \"130709\" },\n\n{\n  \"label\": \"张北县\",\n  \"value\": \"130722\" },\n\n{\n  \"label\": \"康保县\",\n  \"value\": \"130723\" },\n\n{\n  \"label\": \"沽源县\",\n  \"value\": \"130724\" },\n\n{\n  \"label\": \"尚义县\",\n  \"value\": \"130725\" },\n\n{\n  \"label\": \"蔚县\",\n  \"value\": \"130726\" },\n\n{\n  \"label\": \"阳原县\",\n  \"value\": \"130727\" },\n\n{\n  \"label\": \"怀安县\",\n  \"value\": \"130728\" },\n\n{\n  \"label\": \"怀来县\",\n  \"value\": \"130730\" },\n\n{\n  \"label\": \"涿鹿县\",\n  \"value\": \"130731\" },\n\n{\n  \"label\": \"赤城县\",\n  \"value\": \"130732\" },\n\n{\n  \"label\": \"张家口市高新技术产业开发区\",\n  \"value\": \"130771\" },\n\n{\n  \"label\": \"张家口市察北管理区\",\n  \"value\": \"130772\" },\n\n{\n  \"label\": \"张家口市塞北管理区\",\n  \"value\": \"130773\" }],\n\n\n[{\n  \"label\": \"双桥区\",\n  \"value\": \"130802\" },\n\n{\n  \"label\": \"双滦区\",\n  \"value\": \"130803\" },\n\n{\n  \"label\": \"鹰手营子矿区\",\n  \"value\": \"130804\" },\n\n{\n  \"label\": \"承德县\",\n  \"value\": \"130821\" },\n\n{\n  \"label\": \"兴隆县\",\n  \"value\": \"130822\" },\n\n{\n  \"label\": \"滦平县\",\n  \"value\": \"130824\" },\n\n{\n  \"label\": \"隆化县\",\n  \"value\": \"130825\" },\n\n{\n  \"label\": \"丰宁满族自治县\",\n  \"value\": \"130826\" },\n\n{\n  \"label\": \"宽城满族自治县\",\n  \"value\": \"130827\" },\n\n{\n  \"label\": \"围场满族蒙古族自治县\",\n  \"value\": \"130828\" },\n\n{\n  \"label\": \"承德高新技术产业开发区\",\n  \"value\": \"130871\" },\n\n{\n  \"label\": \"平泉市\",\n  \"value\": \"130881\" }],\n\n\n[{\n  \"label\": \"新华区\",\n  \"value\": \"130902\" },\n\n{\n  \"label\": \"运河区\",\n  \"value\": \"130903\" },\n\n{\n  \"label\": \"沧县\",\n  \"value\": \"130921\" },\n\n{\n  \"label\": \"青县\",\n  \"value\": \"130922\" },\n\n{\n  \"label\": \"东光县\",\n  \"value\": \"130923\" },\n\n{\n  \"label\": \"海兴县\",\n  \"value\": \"130924\" },\n\n{\n  \"label\": \"盐山县\",\n  \"value\": \"130925\" },\n\n{\n  \"label\": \"肃宁县\",\n  \"value\": \"130926\" },\n\n{\n  \"label\": \"南皮县\",\n  \"value\": \"130927\" },\n\n{\n  \"label\": \"吴桥县\",\n  \"value\": \"130928\" },\n\n{\n  \"label\": \"献县\",\n  \"value\": \"130929\" },\n\n{\n  \"label\": \"孟村回族自治县\",\n  \"value\": \"130930\" },\n\n{\n  \"label\": \"河北沧州经济开发区\",\n  \"value\": \"130971\" },\n\n{\n  \"label\": \"沧州高新技术产业开发区\",\n  \"value\": \"130972\" },\n\n{\n  \"label\": \"沧州渤海新区\",\n  \"value\": \"130973\" },\n\n{\n  \"label\": \"泊头市\",\n  \"value\": \"130981\" },\n\n{\n  \"label\": \"任丘市\",\n  \"value\": \"130982\" },\n\n{\n  \"label\": \"黄骅市\",\n  \"value\": \"130983\" },\n\n{\n  \"label\": \"河间市\",\n  \"value\": \"130984\" }],\n\n\n[{\n  \"label\": \"安次区\",\n  \"value\": \"131002\" },\n\n{\n  \"label\": \"广阳区\",\n  \"value\": \"131003\" },\n\n{\n  \"label\": \"固安县\",\n  \"value\": \"131022\" },\n\n{\n  \"label\": \"永清县\",\n  \"value\": \"131023\" },\n\n{\n  \"label\": \"香河县\",\n  \"value\": \"131024\" },\n\n{\n  \"label\": \"大城县\",\n  \"value\": \"131025\" },\n\n{\n  \"label\": \"文安县\",\n  \"value\": \"131026\" },\n\n{\n  \"label\": \"大厂回族自治县\",\n  \"value\": \"131028\" },\n\n{\n  \"label\": \"廊坊经济技术开发区\",\n  \"value\": \"131071\" },\n\n{\n  \"label\": \"霸州市\",\n  \"value\": \"131081\" },\n\n{\n  \"label\": \"三河市\",\n  \"value\": \"131082\" }],\n\n\n[{\n  \"label\": \"桃城区\",\n  \"value\": \"131102\" },\n\n{\n  \"label\": \"冀州区\",\n  \"value\": \"131103\" },\n\n{\n  \"label\": \"枣强县\",\n  \"value\": \"131121\" },\n\n{\n  \"label\": \"武邑县\",\n  \"value\": \"131122\" },\n\n{\n  \"label\": \"武强县\",\n  \"value\": \"131123\" },\n\n{\n  \"label\": \"饶阳县\",\n  \"value\": \"131124\" },\n\n{\n  \"label\": \"安平县\",\n  \"value\": \"131125\" },\n\n{\n  \"label\": \"故城县\",\n  \"value\": \"131126\" },\n\n{\n  \"label\": \"景县\",\n  \"value\": \"131127\" },\n\n{\n  \"label\": \"阜城县\",\n  \"value\": \"131128\" },\n\n{\n  \"label\": \"河北衡水经济开发区\",\n  \"value\": \"131171\" },\n\n{\n  \"label\": \"衡水滨湖新区\",\n  \"value\": \"131172\" },\n\n{\n  \"label\": \"深州市\",\n  \"value\": \"131182\" }]],\n\n\n\n[\n[{\n  \"label\": \"小店区\",\n  \"value\": \"140105\" },\n\n{\n  \"label\": \"迎泽区\",\n  \"value\": \"140106\" },\n\n{\n  \"label\": \"杏花岭区\",\n  \"value\": \"140107\" },\n\n{\n  \"label\": \"尖草坪区\",\n  \"value\": \"140108\" },\n\n{\n  \"label\": \"万柏林区\",\n  \"value\": \"140109\" },\n\n{\n  \"label\": \"晋源区\",\n  \"value\": \"140110\" },\n\n{\n  \"label\": \"清徐县\",\n  \"value\": \"140121\" },\n\n{\n  \"label\": \"阳曲县\",\n  \"value\": \"140122\" },\n\n{\n  \"label\": \"娄烦县\",\n  \"value\": \"140123\" },\n\n{\n  \"label\": \"山西转型综合改革示范区\",\n  \"value\": \"140171\" },\n\n{\n  \"label\": \"古交市\",\n  \"value\": \"140181\" }],\n\n\n[{\n  \"label\": \"城区\",\n  \"value\": \"140202\" },\n\n{\n  \"label\": \"矿区\",\n  \"value\": \"140203\" },\n\n{\n  \"label\": \"南郊区\",\n  \"value\": \"140211\" },\n\n{\n  \"label\": \"新荣区\",\n  \"value\": \"140212\" },\n\n{\n  \"label\": \"阳高县\",\n  \"value\": \"140221\" },\n\n{\n  \"label\": \"天镇县\",\n  \"value\": \"140222\" },\n\n{\n  \"label\": \"广灵县\",\n  \"value\": \"140223\" },\n\n{\n  \"label\": \"灵丘县\",\n  \"value\": \"140224\" },\n\n{\n  \"label\": \"浑源县\",\n  \"value\": \"140225\" },\n\n{\n  \"label\": \"左云县\",\n  \"value\": \"140226\" },\n\n{\n  \"label\": \"大同县\",\n  \"value\": \"140227\" },\n\n{\n  \"label\": \"山西大同经济开发区\",\n  \"value\": \"140271\" }],\n\n\n[{\n  \"label\": \"城区\",\n  \"value\": \"140302\" },\n\n{\n  \"label\": \"矿区\",\n  \"value\": \"140303\" },\n\n{\n  \"label\": \"郊区\",\n  \"value\": \"140311\" },\n\n{\n  \"label\": \"平定县\",\n  \"value\": \"140321\" },\n\n{\n  \"label\": \"盂县\",\n  \"value\": \"140322\" },\n\n{\n  \"label\": \"山西阳泉经济开发区\",\n  \"value\": \"140371\" }],\n\n\n[{\n  \"label\": \"城区\",\n  \"value\": \"140402\" },\n\n{\n  \"label\": \"郊区\",\n  \"value\": \"140411\" },\n\n{\n  \"label\": \"长治县\",\n  \"value\": \"140421\" },\n\n{\n  \"label\": \"襄垣县\",\n  \"value\": \"140423\" },\n\n{\n  \"label\": \"屯留县\",\n  \"value\": \"140424\" },\n\n{\n  \"label\": \"平顺县\",\n  \"value\": \"140425\" },\n\n{\n  \"label\": \"黎城县\",\n  \"value\": \"140426\" },\n\n{\n  \"label\": \"壶关县\",\n  \"value\": \"140427\" },\n\n{\n  \"label\": \"长子县\",\n  \"value\": \"140428\" },\n\n{\n  \"label\": \"武乡县\",\n  \"value\": \"140429\" },\n\n{\n  \"label\": \"沁县\",\n  \"value\": \"140430\" },\n\n{\n  \"label\": \"沁源县\",\n  \"value\": \"140431\" },\n\n{\n  \"label\": \"山西长治高新技术产业园区\",\n  \"value\": \"140471\" },\n\n{\n  \"label\": \"潞城市\",\n  \"value\": \"140481\" }],\n\n\n[{\n  \"label\": \"城区\",\n  \"value\": \"140502\" },\n\n{\n  \"label\": \"沁水县\",\n  \"value\": \"140521\" },\n\n{\n  \"label\": \"阳城县\",\n  \"value\": \"140522\" },\n\n{\n  \"label\": \"陵川县\",\n  \"value\": \"140524\" },\n\n{\n  \"label\": \"泽州县\",\n  \"value\": \"140525\" },\n\n{\n  \"label\": \"高平市\",\n  \"value\": \"140581\" }],\n\n\n[{\n  \"label\": \"朔城区\",\n  \"value\": \"140602\" },\n\n{\n  \"label\": \"平鲁区\",\n  \"value\": \"140603\" },\n\n{\n  \"label\": \"山阴县\",\n  \"value\": \"140621\" },\n\n{\n  \"label\": \"应县\",\n  \"value\": \"140622\" },\n\n{\n  \"label\": \"右玉县\",\n  \"value\": \"140623\" },\n\n{\n  \"label\": \"怀仁县\",\n  \"value\": \"140624\" },\n\n{\n  \"label\": \"山西朔州经济开发区\",\n  \"value\": \"140671\" }],\n\n\n[{\n  \"label\": \"榆次区\",\n  \"value\": \"140702\" },\n\n{\n  \"label\": \"榆社县\",\n  \"value\": \"140721\" },\n\n{\n  \"label\": \"左权县\",\n  \"value\": \"140722\" },\n\n{\n  \"label\": \"和顺县\",\n  \"value\": \"140723\" },\n\n{\n  \"label\": \"昔阳县\",\n  \"value\": \"140724\" },\n\n{\n  \"label\": \"寿阳县\",\n  \"value\": \"140725\" },\n\n{\n  \"label\": \"太谷县\",\n  \"value\": \"140726\" },\n\n{\n  \"label\": \"祁县\",\n  \"value\": \"140727\" },\n\n{\n  \"label\": \"平遥县\",\n  \"value\": \"140728\" },\n\n{\n  \"label\": \"灵石县\",\n  \"value\": \"140729\" },\n\n{\n  \"label\": \"介休市\",\n  \"value\": \"140781\" }],\n\n\n[{\n  \"label\": \"盐湖区\",\n  \"value\": \"140802\" },\n\n{\n  \"label\": \"临猗县\",\n  \"value\": \"140821\" },\n\n{\n  \"label\": \"万荣县\",\n  \"value\": \"140822\" },\n\n{\n  \"label\": \"闻喜县\",\n  \"value\": \"140823\" },\n\n{\n  \"label\": \"稷山县\",\n  \"value\": \"140824\" },\n\n{\n  \"label\": \"新绛县\",\n  \"value\": \"140825\" },\n\n{\n  \"label\": \"绛县\",\n  \"value\": \"140826\" },\n\n{\n  \"label\": \"垣曲县\",\n  \"value\": \"140827\" },\n\n{\n  \"label\": \"夏县\",\n  \"value\": \"140828\" },\n\n{\n  \"label\": \"平陆县\",\n  \"value\": \"140829\" },\n\n{\n  \"label\": \"芮城县\",\n  \"value\": \"140830\" },\n\n{\n  \"label\": \"永济市\",\n  \"value\": \"140881\" },\n\n{\n  \"label\": \"河津市\",\n  \"value\": \"140882\" }],\n\n\n[{\n  \"label\": \"忻府区\",\n  \"value\": \"140902\" },\n\n{\n  \"label\": \"定襄县\",\n  \"value\": \"140921\" },\n\n{\n  \"label\": \"五台县\",\n  \"value\": \"140922\" },\n\n{\n  \"label\": \"代县\",\n  \"value\": \"140923\" },\n\n{\n  \"label\": \"繁峙县\",\n  \"value\": \"140924\" },\n\n{\n  \"label\": \"宁武县\",\n  \"value\": \"140925\" },\n\n{\n  \"label\": \"静乐县\",\n  \"value\": \"140926\" },\n\n{\n  \"label\": \"神池县\",\n  \"value\": \"140927\" },\n\n{\n  \"label\": \"五寨县\",\n  \"value\": \"140928\" },\n\n{\n  \"label\": \"岢岚县\",\n  \"value\": \"140929\" },\n\n{\n  \"label\": \"河曲县\",\n  \"value\": \"140930\" },\n\n{\n  \"label\": \"保德县\",\n  \"value\": \"140931\" },\n\n{\n  \"label\": \"偏关县\",\n  \"value\": \"140932\" },\n\n{\n  \"label\": \"五台山风景名胜区\",\n  \"value\": \"140971\" },\n\n{\n  \"label\": \"原平市\",\n  \"value\": \"140981\" }],\n\n\n[{\n  \"label\": \"尧都区\",\n  \"value\": \"141002\" },\n\n{\n  \"label\": \"曲沃县\",\n  \"value\": \"141021\" },\n\n{\n  \"label\": \"翼城县\",\n  \"value\": \"141022\" },\n\n{\n  \"label\": \"襄汾县\",\n  \"value\": \"141023\" },\n\n{\n  \"label\": \"洪洞县\",\n  \"value\": \"141024\" },\n\n{\n  \"label\": \"古县\",\n  \"value\": \"141025\" },\n\n{\n  \"label\": \"安泽县\",\n  \"value\": \"141026\" },\n\n{\n  \"label\": \"浮山县\",\n  \"value\": \"141027\" },\n\n{\n  \"label\": \"吉县\",\n  \"value\": \"141028\" },\n\n{\n  \"label\": \"乡宁县\",\n  \"value\": \"141029\" },\n\n{\n  \"label\": \"大宁县\",\n  \"value\": \"141030\" },\n\n{\n  \"label\": \"隰县\",\n  \"value\": \"141031\" },\n\n{\n  \"label\": \"永和县\",\n  \"value\": \"141032\" },\n\n{\n  \"label\": \"蒲县\",\n  \"value\": \"141033\" },\n\n{\n  \"label\": \"汾西县\",\n  \"value\": \"141034\" },\n\n{\n  \"label\": \"侯马市\",\n  \"value\": \"141081\" },\n\n{\n  \"label\": \"霍州市\",\n  \"value\": \"141082\" }],\n\n\n[{\n  \"label\": \"离石区\",\n  \"value\": \"141102\" },\n\n{\n  \"label\": \"文水县\",\n  \"value\": \"141121\" },\n\n{\n  \"label\": \"交城县\",\n  \"value\": \"141122\" },\n\n{\n  \"label\": \"兴县\",\n  \"value\": \"141123\" },\n\n{\n  \"label\": \"临县\",\n  \"value\": \"141124\" },\n\n{\n  \"label\": \"柳林县\",\n  \"value\": \"141125\" },\n\n{\n  \"label\": \"石楼县\",\n  \"value\": \"141126\" },\n\n{\n  \"label\": \"岚县\",\n  \"value\": \"141127\" },\n\n{\n  \"label\": \"方山县\",\n  \"value\": \"141128\" },\n\n{\n  \"label\": \"中阳县\",\n  \"value\": \"141129\" },\n\n{\n  \"label\": \"交口县\",\n  \"value\": \"141130\" },\n\n{\n  \"label\": \"孝义市\",\n  \"value\": \"141181\" },\n\n{\n  \"label\": \"汾阳市\",\n  \"value\": \"141182\" }]],\n\n\n\n[\n[{\n  \"label\": \"新城区\",\n  \"value\": \"150102\" },\n\n{\n  \"label\": \"回民区\",\n  \"value\": \"150103\" },\n\n{\n  \"label\": \"玉泉区\",\n  \"value\": \"150104\" },\n\n{\n  \"label\": \"赛罕区\",\n  \"value\": \"150105\" },\n\n{\n  \"label\": \"土默特左旗\",\n  \"value\": \"150121\" },\n\n{\n  \"label\": \"托克托县\",\n  \"value\": \"150122\" },\n\n{\n  \"label\": \"和林格尔县\",\n  \"value\": \"150123\" },\n\n{\n  \"label\": \"清水河县\",\n  \"value\": \"150124\" },\n\n{\n  \"label\": \"武川县\",\n  \"value\": \"150125\" },\n\n{\n  \"label\": \"呼和浩特金海工业园区\",\n  \"value\": \"150171\" },\n\n{\n  \"label\": \"呼和浩特经济技术开发区\",\n  \"value\": \"150172\" }],\n\n\n[{\n  \"label\": \"东河区\",\n  \"value\": \"150202\" },\n\n{\n  \"label\": \"昆都仑区\",\n  \"value\": \"150203\" },\n\n{\n  \"label\": \"青山区\",\n  \"value\": \"150204\" },\n\n{\n  \"label\": \"石拐区\",\n  \"value\": \"150205\" },\n\n{\n  \"label\": \"白云鄂博矿区\",\n  \"value\": \"150206\" },\n\n{\n  \"label\": \"九原区\",\n  \"value\": \"150207\" },\n\n{\n  \"label\": \"土默特右旗\",\n  \"value\": \"150221\" },\n\n{\n  \"label\": \"固阳县\",\n  \"value\": \"150222\" },\n\n{\n  \"label\": \"达尔罕茂明安联合旗\",\n  \"value\": \"150223\" },\n\n{\n  \"label\": \"包头稀土高新技术产业开发区\",\n  \"value\": \"150271\" }],\n\n\n[{\n  \"label\": \"海勃湾区\",\n  \"value\": \"150302\" },\n\n{\n  \"label\": \"海南区\",\n  \"value\": \"150303\" },\n\n{\n  \"label\": \"乌达区\",\n  \"value\": \"150304\" }],\n\n\n[{\n  \"label\": \"红山区\",\n  \"value\": \"150402\" },\n\n{\n  \"label\": \"元宝山区\",\n  \"value\": \"150403\" },\n\n{\n  \"label\": \"松山区\",\n  \"value\": \"150404\" },\n\n{\n  \"label\": \"阿鲁科尔沁旗\",\n  \"value\": \"150421\" },\n\n{\n  \"label\": \"巴林左旗\",\n  \"value\": \"150422\" },\n\n{\n  \"label\": \"巴林右旗\",\n  \"value\": \"150423\" },\n\n{\n  \"label\": \"林西县\",\n  \"value\": \"150424\" },\n\n{\n  \"label\": \"克什克腾旗\",\n  \"value\": \"150425\" },\n\n{\n  \"label\": \"翁牛特旗\",\n  \"value\": \"150426\" },\n\n{\n  \"label\": \"喀喇沁旗\",\n  \"value\": \"150428\" },\n\n{\n  \"label\": \"宁城县\",\n  \"value\": \"150429\" },\n\n{\n  \"label\": \"敖汉旗\",\n  \"value\": \"150430\" }],\n\n\n[{\n  \"label\": \"科尔沁区\",\n  \"value\": \"150502\" },\n\n{\n  \"label\": \"科尔沁左翼中旗\",\n  \"value\": \"150521\" },\n\n{\n  \"label\": \"科尔沁左翼后旗\",\n  \"value\": \"150522\" },\n\n{\n  \"label\": \"开鲁县\",\n  \"value\": \"150523\" },\n\n{\n  \"label\": \"库伦旗\",\n  \"value\": \"150524\" },\n\n{\n  \"label\": \"奈曼旗\",\n  \"value\": \"150525\" },\n\n{\n  \"label\": \"扎鲁特旗\",\n  \"value\": \"150526\" },\n\n{\n  \"label\": \"通辽经济技术开发区\",\n  \"value\": \"150571\" },\n\n{\n  \"label\": \"霍林郭勒市\",\n  \"value\": \"150581\" }],\n\n\n[{\n  \"label\": \"东胜区\",\n  \"value\": \"150602\" },\n\n{\n  \"label\": \"康巴什区\",\n  \"value\": \"150603\" },\n\n{\n  \"label\": \"达拉特旗\",\n  \"value\": \"150621\" },\n\n{\n  \"label\": \"准格尔旗\",\n  \"value\": \"150622\" },\n\n{\n  \"label\": \"鄂托克前旗\",\n  \"value\": \"150623\" },\n\n{\n  \"label\": \"鄂托克旗\",\n  \"value\": \"150624\" },\n\n{\n  \"label\": \"杭锦旗\",\n  \"value\": \"150625\" },\n\n{\n  \"label\": \"乌审旗\",\n  \"value\": \"150626\" },\n\n{\n  \"label\": \"伊金霍洛旗\",\n  \"value\": \"150627\" }],\n\n\n[{\n  \"label\": \"海拉尔区\",\n  \"value\": \"150702\" },\n\n{\n  \"label\": \"扎赉诺尔区\",\n  \"value\": \"150703\" },\n\n{\n  \"label\": \"阿荣旗\",\n  \"value\": \"150721\" },\n\n{\n  \"label\": \"莫力达瓦达斡尔族自治旗\",\n  \"value\": \"150722\" },\n\n{\n  \"label\": \"鄂伦春自治旗\",\n  \"value\": \"150723\" },\n\n{\n  \"label\": \"鄂温克族自治旗\",\n  \"value\": \"150724\" },\n\n{\n  \"label\": \"陈巴尔虎旗\",\n  \"value\": \"150725\" },\n\n{\n  \"label\": \"新巴尔虎左旗\",\n  \"value\": \"150726\" },\n\n{\n  \"label\": \"新巴尔虎右旗\",\n  \"value\": \"150727\" },\n\n{\n  \"label\": \"满洲里市\",\n  \"value\": \"150781\" },\n\n{\n  \"label\": \"牙克石市\",\n  \"value\": \"150782\" },\n\n{\n  \"label\": \"扎兰屯市\",\n  \"value\": \"150783\" },\n\n{\n  \"label\": \"额尔古纳市\",\n  \"value\": \"150784\" },\n\n{\n  \"label\": \"根河市\",\n  \"value\": \"150785\" }],\n\n\n[{\n  \"label\": \"临河区\",\n  \"value\": \"150802\" },\n\n{\n  \"label\": \"五原县\",\n  \"value\": \"150821\" },\n\n{\n  \"label\": \"磴口县\",\n  \"value\": \"150822\" },\n\n{\n  \"label\": \"乌拉特前旗\",\n  \"value\": \"150823\" },\n\n{\n  \"label\": \"乌拉特中旗\",\n  \"value\": \"150824\" },\n\n{\n  \"label\": \"乌拉特后旗\",\n  \"value\": \"150825\" },\n\n{\n  \"label\": \"杭锦后旗\",\n  \"value\": \"150826\" }],\n\n\n[{\n  \"label\": \"集宁区\",\n  \"value\": \"150902\" },\n\n{\n  \"label\": \"卓资县\",\n  \"value\": \"150921\" },\n\n{\n  \"label\": \"化德县\",\n  \"value\": \"150922\" },\n\n{\n  \"label\": \"商都县\",\n  \"value\": \"150923\" },\n\n{\n  \"label\": \"兴和县\",\n  \"value\": \"150924\" },\n\n{\n  \"label\": \"凉城县\",\n  \"value\": \"150925\" },\n\n{\n  \"label\": \"察哈尔右翼前旗\",\n  \"value\": \"150926\" },\n\n{\n  \"label\": \"察哈尔右翼中旗\",\n  \"value\": \"150927\" },\n\n{\n  \"label\": \"察哈尔右翼后旗\",\n  \"value\": \"150928\" },\n\n{\n  \"label\": \"四子王旗\",\n  \"value\": \"150929\" },\n\n{\n  \"label\": \"丰镇市\",\n  \"value\": \"150981\" }],\n\n\n[{\n  \"label\": \"乌兰浩特市\",\n  \"value\": \"152201\" },\n\n{\n  \"label\": \"阿尔山市\",\n  \"value\": \"152202\" },\n\n{\n  \"label\": \"科尔沁右翼前旗\",\n  \"value\": \"152221\" },\n\n{\n  \"label\": \"科尔沁右翼中旗\",\n  \"value\": \"152222\" },\n\n{\n  \"label\": \"扎赉特旗\",\n  \"value\": \"152223\" },\n\n{\n  \"label\": \"突泉县\",\n  \"value\": \"152224\" }],\n\n\n[{\n  \"label\": \"二连浩特市\",\n  \"value\": \"152501\" },\n\n{\n  \"label\": \"锡林浩特市\",\n  \"value\": \"152502\" },\n\n{\n  \"label\": \"阿巴嘎旗\",\n  \"value\": \"152522\" },\n\n{\n  \"label\": \"苏尼特左旗\",\n  \"value\": \"152523\" },\n\n{\n  \"label\": \"苏尼特右旗\",\n  \"value\": \"152524\" },\n\n{\n  \"label\": \"东乌珠穆沁旗\",\n  \"value\": \"152525\" },\n\n{\n  \"label\": \"西乌珠穆沁旗\",\n  \"value\": \"152526\" },\n\n{\n  \"label\": \"太仆寺旗\",\n  \"value\": \"152527\" },\n\n{\n  \"label\": \"镶黄旗\",\n  \"value\": \"152528\" },\n\n{\n  \"label\": \"正镶白旗\",\n  \"value\": \"152529\" },\n\n{\n  \"label\": \"正蓝旗\",\n  \"value\": \"152530\" },\n\n{\n  \"label\": \"多伦县\",\n  \"value\": \"152531\" },\n\n{\n  \"label\": \"乌拉盖管委会\",\n  \"value\": \"152571\" }],\n\n\n[{\n  \"label\": \"阿拉善左旗\",\n  \"value\": \"152921\" },\n\n{\n  \"label\": \"阿拉善右旗\",\n  \"value\": \"152922\" },\n\n{\n  \"label\": \"额济纳旗\",\n  \"value\": \"152923\" },\n\n{\n  \"label\": \"内蒙古阿拉善经济开发区\",\n  \"value\": \"152971\" }]],\n\n\n\n[\n[{\n  \"label\": \"和平区\",\n  \"value\": \"210102\" },\n\n{\n  \"label\": \"沈河区\",\n  \"value\": \"210103\" },\n\n{\n  \"label\": \"大东区\",\n  \"value\": \"210104\" },\n\n{\n  \"label\": \"皇姑区\",\n  \"value\": \"210105\" },\n\n{\n  \"label\": \"铁西区\",\n  \"value\": \"210106\" },\n\n{\n  \"label\": \"苏家屯区\",\n  \"value\": \"210111\" },\n\n{\n  \"label\": \"浑南区\",\n  \"value\": \"210112\" },\n\n{\n  \"label\": \"沈北新区\",\n  \"value\": \"210113\" },\n\n{\n  \"label\": \"于洪区\",\n  \"value\": \"210114\" },\n\n{\n  \"label\": \"辽中区\",\n  \"value\": \"210115\" },\n\n{\n  \"label\": \"康平县\",\n  \"value\": \"210123\" },\n\n{\n  \"label\": \"法库县\",\n  \"value\": \"210124\" },\n\n{\n  \"label\": \"新民市\",\n  \"value\": \"210181\" }],\n\n\n[{\n  \"label\": \"中山区\",\n  \"value\": \"210202\" },\n\n{\n  \"label\": \"西岗区\",\n  \"value\": \"210203\" },\n\n{\n  \"label\": \"沙河口区\",\n  \"value\": \"210204\" },\n\n{\n  \"label\": \"甘井子区\",\n  \"value\": \"210211\" },\n\n{\n  \"label\": \"旅顺口区\",\n  \"value\": \"210212\" },\n\n{\n  \"label\": \"金州区\",\n  \"value\": \"210213\" },\n\n{\n  \"label\": \"普兰店区\",\n  \"value\": \"210214\" },\n\n{\n  \"label\": \"长海县\",\n  \"value\": \"210224\" },\n\n{\n  \"label\": \"瓦房店市\",\n  \"value\": \"210281\" },\n\n{\n  \"label\": \"庄河市\",\n  \"value\": \"210283\" }],\n\n\n[{\n  \"label\": \"铁东区\",\n  \"value\": \"210302\" },\n\n{\n  \"label\": \"铁西区\",\n  \"value\": \"210303\" },\n\n{\n  \"label\": \"立山区\",\n  \"value\": \"210304\" },\n\n{\n  \"label\": \"千山区\",\n  \"value\": \"210311\" },\n\n{\n  \"label\": \"台安县\",\n  \"value\": \"210321\" },\n\n{\n  \"label\": \"岫岩满族自治县\",\n  \"value\": \"210323\" },\n\n{\n  \"label\": \"海城市\",\n  \"value\": \"210381\" }],\n\n\n[{\n  \"label\": \"新抚区\",\n  \"value\": \"210402\" },\n\n{\n  \"label\": \"东洲区\",\n  \"value\": \"210403\" },\n\n{\n  \"label\": \"望花区\",\n  \"value\": \"210404\" },\n\n{\n  \"label\": \"顺城区\",\n  \"value\": \"210411\" },\n\n{\n  \"label\": \"抚顺县\",\n  \"value\": \"210421\" },\n\n{\n  \"label\": \"新宾满族自治县\",\n  \"value\": \"210422\" },\n\n{\n  \"label\": \"清原满族自治县\",\n  \"value\": \"210423\" }],\n\n\n[{\n  \"label\": \"平山区\",\n  \"value\": \"210502\" },\n\n{\n  \"label\": \"溪湖区\",\n  \"value\": \"210503\" },\n\n{\n  \"label\": \"明山区\",\n  \"value\": \"210504\" },\n\n{\n  \"label\": \"南芬区\",\n  \"value\": \"210505\" },\n\n{\n  \"label\": \"本溪满族自治县\",\n  \"value\": \"210521\" },\n\n{\n  \"label\": \"桓仁满族自治县\",\n  \"value\": \"210522\" }],\n\n\n[{\n  \"label\": \"元宝区\",\n  \"value\": \"210602\" },\n\n{\n  \"label\": \"振兴区\",\n  \"value\": \"210603\" },\n\n{\n  \"label\": \"振安区\",\n  \"value\": \"210604\" },\n\n{\n  \"label\": \"宽甸满族自治县\",\n  \"value\": \"210624\" },\n\n{\n  \"label\": \"东港市\",\n  \"value\": \"210681\" },\n\n{\n  \"label\": \"凤城市\",\n  \"value\": \"210682\" }],\n\n\n[{\n  \"label\": \"古塔区\",\n  \"value\": \"210702\" },\n\n{\n  \"label\": \"凌河区\",\n  \"value\": \"210703\" },\n\n{\n  \"label\": \"太和区\",\n  \"value\": \"210711\" },\n\n{\n  \"label\": \"黑山县\",\n  \"value\": \"210726\" },\n\n{\n  \"label\": \"义县\",\n  \"value\": \"210727\" },\n\n{\n  \"label\": \"凌海市\",\n  \"value\": \"210781\" },\n\n{\n  \"label\": \"北镇市\",\n  \"value\": \"210782\" }],\n\n\n[{\n  \"label\": \"站前区\",\n  \"value\": \"210802\" },\n\n{\n  \"label\": \"西市区\",\n  \"value\": \"210803\" },\n\n{\n  \"label\": \"鲅鱼圈区\",\n  \"value\": \"210804\" },\n\n{\n  \"label\": \"老边区\",\n  \"value\": \"210811\" },\n\n{\n  \"label\": \"盖州市\",\n  \"value\": \"210881\" },\n\n{\n  \"label\": \"大石桥市\",\n  \"value\": \"210882\" }],\n\n\n[{\n  \"label\": \"海州区\",\n  \"value\": \"210902\" },\n\n{\n  \"label\": \"新邱区\",\n  \"value\": \"210903\" },\n\n{\n  \"label\": \"太平区\",\n  \"value\": \"210904\" },\n\n{\n  \"label\": \"清河门区\",\n  \"value\": \"210905\" },\n\n{\n  \"label\": \"细河区\",\n  \"value\": \"210911\" },\n\n{\n  \"label\": \"阜新蒙古族自治县\",\n  \"value\": \"210921\" },\n\n{\n  \"label\": \"彰武县\",\n  \"value\": \"210922\" }],\n\n\n[{\n  \"label\": \"白塔区\",\n  \"value\": \"211002\" },\n\n{\n  \"label\": \"文圣区\",\n  \"value\": \"211003\" },\n\n{\n  \"label\": \"宏伟区\",\n  \"value\": \"211004\" },\n\n{\n  \"label\": \"弓长岭区\",\n  \"value\": \"211005\" },\n\n{\n  \"label\": \"太子河区\",\n  \"value\": \"211011\" },\n\n{\n  \"label\": \"辽阳县\",\n  \"value\": \"211021\" },\n\n{\n  \"label\": \"灯塔市\",\n  \"value\": \"211081\" }],\n\n\n[{\n  \"label\": \"双台子区\",\n  \"value\": \"211102\" },\n\n{\n  \"label\": \"兴隆台区\",\n  \"value\": \"211103\" },\n\n{\n  \"label\": \"大洼区\",\n  \"value\": \"211104\" },\n\n{\n  \"label\": \"盘山县\",\n  \"value\": \"211122\" }],\n\n\n[{\n  \"label\": \"银州区\",\n  \"value\": \"211202\" },\n\n{\n  \"label\": \"清河区\",\n  \"value\": \"211204\" },\n\n{\n  \"label\": \"铁岭县\",\n  \"value\": \"211221\" },\n\n{\n  \"label\": \"西丰县\",\n  \"value\": \"211223\" },\n\n{\n  \"label\": \"昌图县\",\n  \"value\": \"211224\" },\n\n{\n  \"label\": \"调兵山市\",\n  \"value\": \"211281\" },\n\n{\n  \"label\": \"开原市\",\n  \"value\": \"211282\" }],\n\n\n[{\n  \"label\": \"双塔区\",\n  \"value\": \"211302\" },\n\n{\n  \"label\": \"龙城区\",\n  \"value\": \"211303\" },\n\n{\n  \"label\": \"朝阳县\",\n  \"value\": \"211321\" },\n\n{\n  \"label\": \"建平县\",\n  \"value\": \"211322\" },\n\n{\n  \"label\": \"喀喇沁左翼蒙古族自治县\",\n  \"value\": \"211324\" },\n\n{\n  \"label\": \"北票市\",\n  \"value\": \"211381\" },\n\n{\n  \"label\": \"凌源市\",\n  \"value\": \"211382\" }],\n\n\n[{\n  \"label\": \"连山区\",\n  \"value\": \"211402\" },\n\n{\n  \"label\": \"龙港区\",\n  \"value\": \"211403\" },\n\n{\n  \"label\": \"南票区\",\n  \"value\": \"211404\" },\n\n{\n  \"label\": \"绥中县\",\n  \"value\": \"211421\" },\n\n{\n  \"label\": \"建昌县\",\n  \"value\": \"211422\" },\n\n{\n  \"label\": \"兴城市\",\n  \"value\": \"211481\" }]],\n\n\n\n[\n[{\n  \"label\": \"南关区\",\n  \"value\": \"220102\" },\n\n{\n  \"label\": \"宽城区\",\n  \"value\": \"220103\" },\n\n{\n  \"label\": \"朝阳区\",\n  \"value\": \"220104\" },\n\n{\n  \"label\": \"二道区\",\n  \"value\": \"220105\" },\n\n{\n  \"label\": \"绿园区\",\n  \"value\": \"220106\" },\n\n{\n  \"label\": \"双阳区\",\n  \"value\": \"220112\" },\n\n{\n  \"label\": \"九台区\",\n  \"value\": \"220113\" },\n\n{\n  \"label\": \"农安县\",\n  \"value\": \"220122\" },\n\n{\n  \"label\": \"长春经济技术开发区\",\n  \"value\": \"220171\" },\n\n{\n  \"label\": \"长春净月高新技术产业开发区\",\n  \"value\": \"220172\" },\n\n{\n  \"label\": \"长春高新技术产业开发区\",\n  \"value\": \"220173\" },\n\n{\n  \"label\": \"长春汽车经济技术开发区\",\n  \"value\": \"220174\" },\n\n{\n  \"label\": \"榆树市\",\n  \"value\": \"220182\" },\n\n{\n  \"label\": \"德惠市\",\n  \"value\": \"220183\" }],\n\n\n[{\n  \"label\": \"昌邑区\",\n  \"value\": \"220202\" },\n\n{\n  \"label\": \"龙潭区\",\n  \"value\": \"220203\" },\n\n{\n  \"label\": \"船营区\",\n  \"value\": \"220204\" },\n\n{\n  \"label\": \"丰满区\",\n  \"value\": \"220211\" },\n\n{\n  \"label\": \"永吉县\",\n  \"value\": \"220221\" },\n\n{\n  \"label\": \"吉林经济开发区\",\n  \"value\": \"220271\" },\n\n{\n  \"label\": \"吉林高新技术产业开发区\",\n  \"value\": \"220272\" },\n\n{\n  \"label\": \"吉林中国新加坡食品区\",\n  \"value\": \"220273\" },\n\n{\n  \"label\": \"蛟河市\",\n  \"value\": \"220281\" },\n\n{\n  \"label\": \"桦甸市\",\n  \"value\": \"220282\" },\n\n{\n  \"label\": \"舒兰市\",\n  \"value\": \"220283\" },\n\n{\n  \"label\": \"磐石市\",\n  \"value\": \"220284\" }],\n\n\n[{\n  \"label\": \"铁西区\",\n  \"value\": \"220302\" },\n\n{\n  \"label\": \"铁东区\",\n  \"value\": \"220303\" },\n\n{\n  \"label\": \"梨树县\",\n  \"value\": \"220322\" },\n\n{\n  \"label\": \"伊通满族自治县\",\n  \"value\": \"220323\" },\n\n{\n  \"label\": \"公主岭市\",\n  \"value\": \"220381\" },\n\n{\n  \"label\": \"双辽市\",\n  \"value\": \"220382\" }],\n\n\n[{\n  \"label\": \"龙山区\",\n  \"value\": \"220402\" },\n\n{\n  \"label\": \"西安区\",\n  \"value\": \"220403\" },\n\n{\n  \"label\": \"东丰县\",\n  \"value\": \"220421\" },\n\n{\n  \"label\": \"东辽县\",\n  \"value\": \"220422\" }],\n\n\n[{\n  \"label\": \"东昌区\",\n  \"value\": \"220502\" },\n\n{\n  \"label\": \"二道江区\",\n  \"value\": \"220503\" },\n\n{\n  \"label\": \"通化县\",\n  \"value\": \"220521\" },\n\n{\n  \"label\": \"辉南县\",\n  \"value\": \"220523\" },\n\n{\n  \"label\": \"柳河县\",\n  \"value\": \"220524\" },\n\n{\n  \"label\": \"梅河口市\",\n  \"value\": \"220581\" },\n\n{\n  \"label\": \"集安市\",\n  \"value\": \"220582\" }],\n\n\n[{\n  \"label\": \"浑江区\",\n  \"value\": \"220602\" },\n\n{\n  \"label\": \"江源区\",\n  \"value\": \"220605\" },\n\n{\n  \"label\": \"抚松县\",\n  \"value\": \"220621\" },\n\n{\n  \"label\": \"靖宇县\",\n  \"value\": \"220622\" },\n\n{\n  \"label\": \"长白朝鲜族自治县\",\n  \"value\": \"220623\" },\n\n{\n  \"label\": \"临江市\",\n  \"value\": \"220681\" }],\n\n\n[{\n  \"label\": \"宁江区\",\n  \"value\": \"220702\" },\n\n{\n  \"label\": \"前郭尔罗斯蒙古族自治县\",\n  \"value\": \"220721\" },\n\n{\n  \"label\": \"长岭县\",\n  \"value\": \"220722\" },\n\n{\n  \"label\": \"乾安县\",\n  \"value\": \"220723\" },\n\n{\n  \"label\": \"吉林松原经济开发区\",\n  \"value\": \"220771\" },\n\n{\n  \"label\": \"扶余市\",\n  \"value\": \"220781\" }],\n\n\n[{\n  \"label\": \"洮北区\",\n  \"value\": \"220802\" },\n\n{\n  \"label\": \"镇赉县\",\n  \"value\": \"220821\" },\n\n{\n  \"label\": \"通榆县\",\n  \"value\": \"220822\" },\n\n{\n  \"label\": \"吉林白城经济开发区\",\n  \"value\": \"220871\" },\n\n{\n  \"label\": \"洮南市\",\n  \"value\": \"220881\" },\n\n{\n  \"label\": \"大安市\",\n  \"value\": \"220882\" }],\n\n\n[{\n  \"label\": \"延吉市\",\n  \"value\": \"222401\" },\n\n{\n  \"label\": \"图们市\",\n  \"value\": \"222402\" },\n\n{\n  \"label\": \"敦化市\",\n  \"value\": \"222403\" },\n\n{\n  \"label\": \"珲春市\",\n  \"value\": \"222404\" },\n\n{\n  \"label\": \"龙井市\",\n  \"value\": \"222405\" },\n\n{\n  \"label\": \"和龙市\",\n  \"value\": \"222406\" },\n\n{\n  \"label\": \"汪清县\",\n  \"value\": \"222424\" },\n\n{\n  \"label\": \"安图县\",\n  \"value\": \"222426\" }]],\n\n\n\n[\n[{\n  \"label\": \"道里区\",\n  \"value\": \"230102\" },\n\n{\n  \"label\": \"南岗区\",\n  \"value\": \"230103\" },\n\n{\n  \"label\": \"道外区\",\n  \"value\": \"230104\" },\n\n{\n  \"label\": \"平房区\",\n  \"value\": \"230108\" },\n\n{\n  \"label\": \"松北区\",\n  \"value\": \"230109\" },\n\n{\n  \"label\": \"香坊区\",\n  \"value\": \"230110\" },\n\n{\n  \"label\": \"呼兰区\",\n  \"value\": \"230111\" },\n\n{\n  \"label\": \"阿城区\",\n  \"value\": \"230112\" },\n\n{\n  \"label\": \"双城区\",\n  \"value\": \"230113\" },\n\n{\n  \"label\": \"依兰县\",\n  \"value\": \"230123\" },\n\n{\n  \"label\": \"方正县\",\n  \"value\": \"230124\" },\n\n{\n  \"label\": \"宾县\",\n  \"value\": \"230125\" },\n\n{\n  \"label\": \"巴彦县\",\n  \"value\": \"230126\" },\n\n{\n  \"label\": \"木兰县\",\n  \"value\": \"230127\" },\n\n{\n  \"label\": \"通河县\",\n  \"value\": \"230128\" },\n\n{\n  \"label\": \"延寿县\",\n  \"value\": \"230129\" },\n\n{\n  \"label\": \"尚志市\",\n  \"value\": \"230183\" },\n\n{\n  \"label\": \"五常市\",\n  \"value\": \"230184\" }],\n\n\n[{\n  \"label\": \"龙沙区\",\n  \"value\": \"230202\" },\n\n{\n  \"label\": \"建华区\",\n  \"value\": \"230203\" },\n\n{\n  \"label\": \"铁锋区\",\n  \"value\": \"230204\" },\n\n{\n  \"label\": \"昂昂溪区\",\n  \"value\": \"230205\" },\n\n{\n  \"label\": \"富拉尔基区\",\n  \"value\": \"230206\" },\n\n{\n  \"label\": \"碾子山区\",\n  \"value\": \"230207\" },\n\n{\n  \"label\": \"梅里斯达斡尔族区\",\n  \"value\": \"230208\" },\n\n{\n  \"label\": \"龙江县\",\n  \"value\": \"230221\" },\n\n{\n  \"label\": \"依安县\",\n  \"value\": \"230223\" },\n\n{\n  \"label\": \"泰来县\",\n  \"value\": \"230224\" },\n\n{\n  \"label\": \"甘南县\",\n  \"value\": \"230225\" },\n\n{\n  \"label\": \"富裕县\",\n  \"value\": \"230227\" },\n\n{\n  \"label\": \"克山县\",\n  \"value\": \"230229\" },\n\n{\n  \"label\": \"克东县\",\n  \"value\": \"230230\" },\n\n{\n  \"label\": \"拜泉县\",\n  \"value\": \"230231\" },\n\n{\n  \"label\": \"讷河市\",\n  \"value\": \"230281\" }],\n\n\n[{\n  \"label\": \"鸡冠区\",\n  \"value\": \"230302\" },\n\n{\n  \"label\": \"恒山区\",\n  \"value\": \"230303\" },\n\n{\n  \"label\": \"滴道区\",\n  \"value\": \"230304\" },\n\n{\n  \"label\": \"梨树区\",\n  \"value\": \"230305\" },\n\n{\n  \"label\": \"城子河区\",\n  \"value\": \"230306\" },\n\n{\n  \"label\": \"麻山区\",\n  \"value\": \"230307\" },\n\n{\n  \"label\": \"鸡东县\",\n  \"value\": \"230321\" },\n\n{\n  \"label\": \"虎林市\",\n  \"value\": \"230381\" },\n\n{\n  \"label\": \"密山市\",\n  \"value\": \"230382\" }],\n\n\n[{\n  \"label\": \"向阳区\",\n  \"value\": \"230402\" },\n\n{\n  \"label\": \"工农区\",\n  \"value\": \"230403\" },\n\n{\n  \"label\": \"南山区\",\n  \"value\": \"230404\" },\n\n{\n  \"label\": \"兴安区\",\n  \"value\": \"230405\" },\n\n{\n  \"label\": \"东山区\",\n  \"value\": \"230406\" },\n\n{\n  \"label\": \"兴山区\",\n  \"value\": \"230407\" },\n\n{\n  \"label\": \"萝北县\",\n  \"value\": \"230421\" },\n\n{\n  \"label\": \"绥滨县\",\n  \"value\": \"230422\" }],\n\n\n[{\n  \"label\": \"尖山区\",\n  \"value\": \"230502\" },\n\n{\n  \"label\": \"岭东区\",\n  \"value\": \"230503\" },\n\n{\n  \"label\": \"四方台区\",\n  \"value\": \"230505\" },\n\n{\n  \"label\": \"宝山区\",\n  \"value\": \"230506\" },\n\n{\n  \"label\": \"集贤县\",\n  \"value\": \"230521\" },\n\n{\n  \"label\": \"友谊县\",\n  \"value\": \"230522\" },\n\n{\n  \"label\": \"宝清县\",\n  \"value\": \"230523\" },\n\n{\n  \"label\": \"饶河县\",\n  \"value\": \"230524\" }],\n\n\n[{\n  \"label\": \"萨尔图区\",\n  \"value\": \"230602\" },\n\n{\n  \"label\": \"龙凤区\",\n  \"value\": \"230603\" },\n\n{\n  \"label\": \"让胡路区\",\n  \"value\": \"230604\" },\n\n{\n  \"label\": \"红岗区\",\n  \"value\": \"230605\" },\n\n{\n  \"label\": \"大同区\",\n  \"value\": \"230606\" },\n\n{\n  \"label\": \"肇州县\",\n  \"value\": \"230621\" },\n\n{\n  \"label\": \"肇源县\",\n  \"value\": \"230622\" },\n\n{\n  \"label\": \"林甸县\",\n  \"value\": \"230623\" },\n\n{\n  \"label\": \"杜尔伯特蒙古族自治县\",\n  \"value\": \"230624\" },\n\n{\n  \"label\": \"大庆高新技术产业开发区\",\n  \"value\": \"230671\" }],\n\n\n[{\n  \"label\": \"伊春区\",\n  \"value\": \"230702\" },\n\n{\n  \"label\": \"南岔区\",\n  \"value\": \"230703\" },\n\n{\n  \"label\": \"友好区\",\n  \"value\": \"230704\" },\n\n{\n  \"label\": \"西林区\",\n  \"value\": \"230705\" },\n\n{\n  \"label\": \"翠峦区\",\n  \"value\": \"230706\" },\n\n{\n  \"label\": \"新青区\",\n  \"value\": \"230707\" },\n\n{\n  \"label\": \"美溪区\",\n  \"value\": \"230708\" },\n\n{\n  \"label\": \"金山屯区\",\n  \"value\": \"230709\" },\n\n{\n  \"label\": \"五营区\",\n  \"value\": \"230710\" },\n\n{\n  \"label\": \"乌马河区\",\n  \"value\": \"230711\" },\n\n{\n  \"label\": \"汤旺河区\",\n  \"value\": \"230712\" },\n\n{\n  \"label\": \"带岭区\",\n  \"value\": \"230713\" },\n\n{\n  \"label\": \"乌伊岭区\",\n  \"value\": \"230714\" },\n\n{\n  \"label\": \"红星区\",\n  \"value\": \"230715\" },\n\n{\n  \"label\": \"上甘岭区\",\n  \"value\": \"230716\" },\n\n{\n  \"label\": \"嘉荫县\",\n  \"value\": \"230722\" },\n\n{\n  \"label\": \"铁力市\",\n  \"value\": \"230781\" }],\n\n\n[{\n  \"label\": \"向阳区\",\n  \"value\": \"230803\" },\n\n{\n  \"label\": \"前进区\",\n  \"value\": \"230804\" },\n\n{\n  \"label\": \"东风区\",\n  \"value\": \"230805\" },\n\n{\n  \"label\": \"郊区\",\n  \"value\": \"230811\" },\n\n{\n  \"label\": \"桦南县\",\n  \"value\": \"230822\" },\n\n{\n  \"label\": \"桦川县\",\n  \"value\": \"230826\" },\n\n{\n  \"label\": \"汤原县\",\n  \"value\": \"230828\" },\n\n{\n  \"label\": \"同江市\",\n  \"value\": \"230881\" },\n\n{\n  \"label\": \"富锦市\",\n  \"value\": \"230882\" },\n\n{\n  \"label\": \"抚远市\",\n  \"value\": \"230883\" }],\n\n\n[{\n  \"label\": \"新兴区\",\n  \"value\": \"230902\" },\n\n{\n  \"label\": \"桃山区\",\n  \"value\": \"230903\" },\n\n{\n  \"label\": \"茄子河区\",\n  \"value\": \"230904\" },\n\n{\n  \"label\": \"勃利县\",\n  \"value\": \"230921\" }],\n\n\n[{\n  \"label\": \"东安区\",\n  \"value\": \"231002\" },\n\n{\n  \"label\": \"阳明区\",\n  \"value\": \"231003\" },\n\n{\n  \"label\": \"爱民区\",\n  \"value\": \"231004\" },\n\n{\n  \"label\": \"西安区\",\n  \"value\": \"231005\" },\n\n{\n  \"label\": \"林口县\",\n  \"value\": \"231025\" },\n\n{\n  \"label\": \"牡丹江经济技术开发区\",\n  \"value\": \"231071\" },\n\n{\n  \"label\": \"绥芬河市\",\n  \"value\": \"231081\" },\n\n{\n  \"label\": \"海林市\",\n  \"value\": \"231083\" },\n\n{\n  \"label\": \"宁安市\",\n  \"value\": \"231084\" },\n\n{\n  \"label\": \"穆棱市\",\n  \"value\": \"231085\" },\n\n{\n  \"label\": \"东宁市\",\n  \"value\": \"231086\" }],\n\n\n[{\n  \"label\": \"爱辉区\",\n  \"value\": \"231102\" },\n\n{\n  \"label\": \"嫩江县\",\n  \"value\": \"231121\" },\n\n{\n  \"label\": \"逊克县\",\n  \"value\": \"231123\" },\n\n{\n  \"label\": \"孙吴县\",\n  \"value\": \"231124\" },\n\n{\n  \"label\": \"北安市\",\n  \"value\": \"231181\" },\n\n{\n  \"label\": \"五大连池市\",\n  \"value\": \"231182\" }],\n\n\n[{\n  \"label\": \"北林区\",\n  \"value\": \"231202\" },\n\n{\n  \"label\": \"望奎县\",\n  \"value\": \"231221\" },\n\n{\n  \"label\": \"兰西县\",\n  \"value\": \"231222\" },\n\n{\n  \"label\": \"青冈县\",\n  \"value\": \"231223\" },\n\n{\n  \"label\": \"庆安县\",\n  \"value\": \"231224\" },\n\n{\n  \"label\": \"明水县\",\n  \"value\": \"231225\" },\n\n{\n  \"label\": \"绥棱县\",\n  \"value\": \"231226\" },\n\n{\n  \"label\": \"安达市\",\n  \"value\": \"231281\" },\n\n{\n  \"label\": \"肇东市\",\n  \"value\": \"231282\" },\n\n{\n  \"label\": \"海伦市\",\n  \"value\": \"231283\" }],\n\n\n[{\n  \"label\": \"加格达奇区\",\n  \"value\": \"232701\" },\n\n{\n  \"label\": \"松岭区\",\n  \"value\": \"232702\" },\n\n{\n  \"label\": \"新林区\",\n  \"value\": \"232703\" },\n\n{\n  \"label\": \"呼中区\",\n  \"value\": \"232704\" },\n\n{\n  \"label\": \"呼玛县\",\n  \"value\": \"232721\" },\n\n{\n  \"label\": \"塔河县\",\n  \"value\": \"232722\" },\n\n{\n  \"label\": \"漠河县\",\n  \"value\": \"232723\" }]],\n\n\n\n[\n[{\n  \"label\": \"黄浦区\",\n  \"value\": \"310101\" },\n\n{\n  \"label\": \"徐汇区\",\n  \"value\": \"310104\" },\n\n{\n  \"label\": \"长宁区\",\n  \"value\": \"310105\" },\n\n{\n  \"label\": \"静安区\",\n  \"value\": \"310106\" },\n\n{\n  \"label\": \"普陀区\",\n  \"value\": \"310107\" },\n\n{\n  \"label\": \"虹口区\",\n  \"value\": \"310109\" },\n\n{\n  \"label\": \"杨浦区\",\n  \"value\": \"310110\" },\n\n{\n  \"label\": \"闵行区\",\n  \"value\": \"310112\" },\n\n{\n  \"label\": \"宝山区\",\n  \"value\": \"310113\" },\n\n{\n  \"label\": \"嘉定区\",\n  \"value\": \"310114\" },\n\n{\n  \"label\": \"浦东新区\",\n  \"value\": \"310115\" },\n\n{\n  \"label\": \"金山区\",\n  \"value\": \"310116\" },\n\n{\n  \"label\": \"松江区\",\n  \"value\": \"310117\" },\n\n{\n  \"label\": \"青浦区\",\n  \"value\": \"310118\" },\n\n{\n  \"label\": \"奉贤区\",\n  \"value\": \"310120\" },\n\n{\n  \"label\": \"崇明区\",\n  \"value\": \"310151\" }]],\n\n\n\n[\n[{\n  \"label\": \"玄武区\",\n  \"value\": \"320102\" },\n\n{\n  \"label\": \"秦淮区\",\n  \"value\": \"320104\" },\n\n{\n  \"label\": \"建邺区\",\n  \"value\": \"320105\" },\n\n{\n  \"label\": \"鼓楼区\",\n  \"value\": \"320106\" },\n\n{\n  \"label\": \"浦口区\",\n  \"value\": \"320111\" },\n\n{\n  \"label\": \"栖霞区\",\n  \"value\": \"320113\" },\n\n{\n  \"label\": \"雨花台区\",\n  \"value\": \"320114\" },\n\n{\n  \"label\": \"江宁区\",\n  \"value\": \"320115\" },\n\n{\n  \"label\": \"六合区\",\n  \"value\": \"320116\" },\n\n{\n  \"label\": \"溧水区\",\n  \"value\": \"320117\" },\n\n{\n  \"label\": \"高淳区\",\n  \"value\": \"320118\" }],\n\n\n[{\n  \"label\": \"锡山区\",\n  \"value\": \"320205\" },\n\n{\n  \"label\": \"惠山区\",\n  \"value\": \"320206\" },\n\n{\n  \"label\": \"滨湖区\",\n  \"value\": \"320211\" },\n\n{\n  \"label\": \"梁溪区\",\n  \"value\": \"320213\" },\n\n{\n  \"label\": \"新吴区\",\n  \"value\": \"320214\" },\n\n{\n  \"label\": \"江阴市\",\n  \"value\": \"320281\" },\n\n{\n  \"label\": \"宜兴市\",\n  \"value\": \"320282\" }],\n\n\n[{\n  \"label\": \"鼓楼区\",\n  \"value\": \"320302\" },\n\n{\n  \"label\": \"云龙区\",\n  \"value\": \"320303\" },\n\n{\n  \"label\": \"贾汪区\",\n  \"value\": \"320305\" },\n\n{\n  \"label\": \"泉山区\",\n  \"value\": \"320311\" },\n\n{\n  \"label\": \"铜山区\",\n  \"value\": \"320312\" },\n\n{\n  \"label\": \"丰县\",\n  \"value\": \"320321\" },\n\n{\n  \"label\": \"沛县\",\n  \"value\": \"320322\" },\n\n{\n  \"label\": \"睢宁县\",\n  \"value\": \"320324\" },\n\n{\n  \"label\": \"徐州经济技术开发区\",\n  \"value\": \"320371\" },\n\n{\n  \"label\": \"新沂市\",\n  \"value\": \"320381\" },\n\n{\n  \"label\": \"邳州市\",\n  \"value\": \"320382\" }],\n\n\n[{\n  \"label\": \"天宁区\",\n  \"value\": \"320402\" },\n\n{\n  \"label\": \"钟楼区\",\n  \"value\": \"320404\" },\n\n{\n  \"label\": \"新北区\",\n  \"value\": \"320411\" },\n\n{\n  \"label\": \"武进区\",\n  \"value\": \"320412\" },\n\n{\n  \"label\": \"金坛区\",\n  \"value\": \"320413\" },\n\n{\n  \"label\": \"溧阳市\",\n  \"value\": \"320481\" }],\n\n\n[{\n  \"label\": \"虎丘区\",\n  \"value\": \"320505\" },\n\n{\n  \"label\": \"吴中区\",\n  \"value\": \"320506\" },\n\n{\n  \"label\": \"相城区\",\n  \"value\": \"320507\" },\n\n{\n  \"label\": \"姑苏区\",\n  \"value\": \"320508\" },\n\n{\n  \"label\": \"吴江区\",\n  \"value\": \"320509\" },\n\n{\n  \"label\": \"苏州工业园区\",\n  \"value\": \"320571\" },\n\n{\n  \"label\": \"常熟市\",\n  \"value\": \"320581\" },\n\n{\n  \"label\": \"张家港市\",\n  \"value\": \"320582\" },\n\n{\n  \"label\": \"昆山市\",\n  \"value\": \"320583\" },\n\n{\n  \"label\": \"太仓市\",\n  \"value\": \"320585\" }],\n\n\n[{\n  \"label\": \"崇川区\",\n  \"value\": \"320602\" },\n\n{\n  \"label\": \"港闸区\",\n  \"value\": \"320611\" },\n\n{\n  \"label\": \"通州区\",\n  \"value\": \"320612\" },\n\n{\n  \"label\": \"海安县\",\n  \"value\": \"320621\" },\n\n{\n  \"label\": \"如东县\",\n  \"value\": \"320623\" },\n\n{\n  \"label\": \"南通经济技术开发区\",\n  \"value\": \"320671\" },\n\n{\n  \"label\": \"启东市\",\n  \"value\": \"320681\" },\n\n{\n  \"label\": \"如皋市\",\n  \"value\": \"320682\" },\n\n{\n  \"label\": \"海门市\",\n  \"value\": \"320684\" }],\n\n\n[{\n  \"label\": \"连云区\",\n  \"value\": \"320703\" },\n\n{\n  \"label\": \"海州区\",\n  \"value\": \"320706\" },\n\n{\n  \"label\": \"赣榆区\",\n  \"value\": \"320707\" },\n\n{\n  \"label\": \"东海县\",\n  \"value\": \"320722\" },\n\n{\n  \"label\": \"灌云县\",\n  \"value\": \"320723\" },\n\n{\n  \"label\": \"灌南县\",\n  \"value\": \"320724\" },\n\n{\n  \"label\": \"连云港经济技术开发区\",\n  \"value\": \"320771\" },\n\n{\n  \"label\": \"连云港高新技术产业开发区\",\n  \"value\": \"320772\" }],\n\n\n[{\n  \"label\": \"淮安区\",\n  \"value\": \"320803\" },\n\n{\n  \"label\": \"淮阴区\",\n  \"value\": \"320804\" },\n\n{\n  \"label\": \"清江浦区\",\n  \"value\": \"320812\" },\n\n{\n  \"label\": \"洪泽区\",\n  \"value\": \"320813\" },\n\n{\n  \"label\": \"涟水县\",\n  \"value\": \"320826\" },\n\n{\n  \"label\": \"盱眙县\",\n  \"value\": \"320830\" },\n\n{\n  \"label\": \"金湖县\",\n  \"value\": \"320831\" },\n\n{\n  \"label\": \"淮安经济技术开发区\",\n  \"value\": \"320871\" }],\n\n\n[{\n  \"label\": \"亭湖区\",\n  \"value\": \"320902\" },\n\n{\n  \"label\": \"盐都区\",\n  \"value\": \"320903\" },\n\n{\n  \"label\": \"大丰区\",\n  \"value\": \"320904\" },\n\n{\n  \"label\": \"响水县\",\n  \"value\": \"320921\" },\n\n{\n  \"label\": \"滨海县\",\n  \"value\": \"320922\" },\n\n{\n  \"label\": \"阜宁县\",\n  \"value\": \"320923\" },\n\n{\n  \"label\": \"射阳县\",\n  \"value\": \"320924\" },\n\n{\n  \"label\": \"建湖县\",\n  \"value\": \"320925\" },\n\n{\n  \"label\": \"盐城经济技术开发区\",\n  \"value\": \"320971\" },\n\n{\n  \"label\": \"东台市\",\n  \"value\": \"320981\" }],\n\n\n[{\n  \"label\": \"广陵区\",\n  \"value\": \"321002\" },\n\n{\n  \"label\": \"邗江区\",\n  \"value\": \"321003\" },\n\n{\n  \"label\": \"江都区\",\n  \"value\": \"321012\" },\n\n{\n  \"label\": \"宝应县\",\n  \"value\": \"321023\" },\n\n{\n  \"label\": \"扬州经济技术开发区\",\n  \"value\": \"321071\" },\n\n{\n  \"label\": \"仪征市\",\n  \"value\": \"321081\" },\n\n{\n  \"label\": \"高邮市\",\n  \"value\": \"321084\" }],\n\n\n[{\n  \"label\": \"京口区\",\n  \"value\": \"321102\" },\n\n{\n  \"label\": \"润州区\",\n  \"value\": \"321111\" },\n\n{\n  \"label\": \"丹徒区\",\n  \"value\": \"321112\" },\n\n{\n  \"label\": \"镇江新区\",\n  \"value\": \"321171\" },\n\n{\n  \"label\": \"丹阳市\",\n  \"value\": \"321181\" },\n\n{\n  \"label\": \"扬中市\",\n  \"value\": \"321182\" },\n\n{\n  \"label\": \"句容市\",\n  \"value\": \"321183\" }],\n\n\n[{\n  \"label\": \"海陵区\",\n  \"value\": \"321202\" },\n\n{\n  \"label\": \"高港区\",\n  \"value\": \"321203\" },\n\n{\n  \"label\": \"姜堰区\",\n  \"value\": \"321204\" },\n\n{\n  \"label\": \"泰州医药高新技术产业开发区\",\n  \"value\": \"321271\" },\n\n{\n  \"label\": \"兴化市\",\n  \"value\": \"321281\" },\n\n{\n  \"label\": \"靖江市\",\n  \"value\": \"321282\" },\n\n{\n  \"label\": \"泰兴市\",\n  \"value\": \"321283\" }],\n\n\n[{\n  \"label\": \"宿城区\",\n  \"value\": \"321302\" },\n\n{\n  \"label\": \"宿豫区\",\n  \"value\": \"321311\" },\n\n{\n  \"label\": \"沭阳县\",\n  \"value\": \"321322\" },\n\n{\n  \"label\": \"泗阳县\",\n  \"value\": \"321323\" },\n\n{\n  \"label\": \"泗洪县\",\n  \"value\": \"321324\" },\n\n{\n  \"label\": \"宿迁经济技术开发区\",\n  \"value\": \"321371\" }]],\n\n\n\n[\n[{\n  \"label\": \"上城区\",\n  \"value\": \"330102\" },\n\n{\n  \"label\": \"下城区\",\n  \"value\": \"330103\" },\n\n{\n  \"label\": \"江干区\",\n  \"value\": \"330104\" },\n\n{\n  \"label\": \"拱墅区\",\n  \"value\": \"330105\" },\n\n{\n  \"label\": \"西湖区\",\n  \"value\": \"330106\" },\n\n{\n  \"label\": \"滨江区\",\n  \"value\": \"330108\" },\n\n{\n  \"label\": \"萧山区\",\n  \"value\": \"330109\" },\n\n{\n  \"label\": \"余杭区\",\n  \"value\": \"330110\" },\n\n{\n  \"label\": \"富阳区\",\n  \"value\": \"330111\" },\n\n{\n  \"label\": \"临安区\",\n  \"value\": \"330112\" },\n\n{\n  \"label\": \"桐庐县\",\n  \"value\": \"330122\" },\n\n{\n  \"label\": \"淳安县\",\n  \"value\": \"330127\" },\n\n{\n  \"label\": \"建德市\",\n  \"value\": \"330182\" }],\n\n\n[{\n  \"label\": \"海曙区\",\n  \"value\": \"330203\" },\n\n{\n  \"label\": \"江北区\",\n  \"value\": \"330205\" },\n\n{\n  \"label\": \"北仑区\",\n  \"value\": \"330206\" },\n\n{\n  \"label\": \"镇海区\",\n  \"value\": \"330211\" },\n\n{\n  \"label\": \"鄞州区\",\n  \"value\": \"330212\" },\n\n{\n  \"label\": \"奉化区\",\n  \"value\": \"330213\" },\n\n{\n  \"label\": \"象山县\",\n  \"value\": \"330225\" },\n\n{\n  \"label\": \"宁海县\",\n  \"value\": \"330226\" },\n\n{\n  \"label\": \"余姚市\",\n  \"value\": \"330281\" },\n\n{\n  \"label\": \"慈溪市\",\n  \"value\": \"330282\" }],\n\n\n[{\n  \"label\": \"鹿城区\",\n  \"value\": \"330302\" },\n\n{\n  \"label\": \"龙湾区\",\n  \"value\": \"330303\" },\n\n{\n  \"label\": \"瓯海区\",\n  \"value\": \"330304\" },\n\n{\n  \"label\": \"洞头区\",\n  \"value\": \"330305\" },\n\n{\n  \"label\": \"永嘉县\",\n  \"value\": \"330324\" },\n\n{\n  \"label\": \"平阳县\",\n  \"value\": \"330326\" },\n\n{\n  \"label\": \"苍南县\",\n  \"value\": \"330327\" },\n\n{\n  \"label\": \"文成县\",\n  \"value\": \"330328\" },\n\n{\n  \"label\": \"泰顺县\",\n  \"value\": \"330329\" },\n\n{\n  \"label\": \"温州经济技术开发区\",\n  \"value\": \"330371\" },\n\n{\n  \"label\": \"瑞安市\",\n  \"value\": \"330381\" },\n\n{\n  \"label\": \"乐清市\",\n  \"value\": \"330382\" }],\n\n\n[{\n  \"label\": \"南湖区\",\n  \"value\": \"330402\" },\n\n{\n  \"label\": \"秀洲区\",\n  \"value\": \"330411\" },\n\n{\n  \"label\": \"嘉善县\",\n  \"value\": \"330421\" },\n\n{\n  \"label\": \"海盐县\",\n  \"value\": \"330424\" },\n\n{\n  \"label\": \"海宁市\",\n  \"value\": \"330481\" },\n\n{\n  \"label\": \"平湖市\",\n  \"value\": \"330482\" },\n\n{\n  \"label\": \"桐乡市\",\n  \"value\": \"330483\" }],\n\n\n[{\n  \"label\": \"吴兴区\",\n  \"value\": \"330502\" },\n\n{\n  \"label\": \"南浔区\",\n  \"value\": \"330503\" },\n\n{\n  \"label\": \"德清县\",\n  \"value\": \"330521\" },\n\n{\n  \"label\": \"长兴县\",\n  \"value\": \"330522\" },\n\n{\n  \"label\": \"安吉县\",\n  \"value\": \"330523\" }],\n\n\n[{\n  \"label\": \"越城区\",\n  \"value\": \"330602\" },\n\n{\n  \"label\": \"柯桥区\",\n  \"value\": \"330603\" },\n\n{\n  \"label\": \"上虞区\",\n  \"value\": \"330604\" },\n\n{\n  \"label\": \"新昌县\",\n  \"value\": \"330624\" },\n\n{\n  \"label\": \"诸暨市\",\n  \"value\": \"330681\" },\n\n{\n  \"label\": \"嵊州市\",\n  \"value\": \"330683\" }],\n\n\n[{\n  \"label\": \"婺城区\",\n  \"value\": \"330702\" },\n\n{\n  \"label\": \"金东区\",\n  \"value\": \"330703\" },\n\n{\n  \"label\": \"武义县\",\n  \"value\": \"330723\" },\n\n{\n  \"label\": \"浦江县\",\n  \"value\": \"330726\" },\n\n{\n  \"label\": \"磐安县\",\n  \"value\": \"330727\" },\n\n{\n  \"label\": \"兰溪市\",\n  \"value\": \"330781\" },\n\n{\n  \"label\": \"义乌市\",\n  \"value\": \"330782\" },\n\n{\n  \"label\": \"东阳市\",\n  \"value\": \"330783\" },\n\n{\n  \"label\": \"永康市\",\n  \"value\": \"330784\" }],\n\n\n[{\n  \"label\": \"柯城区\",\n  \"value\": \"330802\" },\n\n{\n  \"label\": \"衢江区\",\n  \"value\": \"330803\" },\n\n{\n  \"label\": \"常山县\",\n  \"value\": \"330822\" },\n\n{\n  \"label\": \"开化县\",\n  \"value\": \"330824\" },\n\n{\n  \"label\": \"龙游县\",\n  \"value\": \"330825\" },\n\n{\n  \"label\": \"江山市\",\n  \"value\": \"330881\" }],\n\n\n[{\n  \"label\": \"定海区\",\n  \"value\": \"330902\" },\n\n{\n  \"label\": \"普陀区\",\n  \"value\": \"330903\" },\n\n{\n  \"label\": \"岱山县\",\n  \"value\": \"330921\" },\n\n{\n  \"label\": \"嵊泗县\",\n  \"value\": \"330922\" }],\n\n\n[{\n  \"label\": \"椒江区\",\n  \"value\": \"331002\" },\n\n{\n  \"label\": \"黄岩区\",\n  \"value\": \"331003\" },\n\n{\n  \"label\": \"路桥区\",\n  \"value\": \"331004\" },\n\n{\n  \"label\": \"三门县\",\n  \"value\": \"331022\" },\n\n{\n  \"label\": \"天台县\",\n  \"value\": \"331023\" },\n\n{\n  \"label\": \"仙居县\",\n  \"value\": \"331024\" },\n\n{\n  \"label\": \"温岭市\",\n  \"value\": \"331081\" },\n\n{\n  \"label\": \"临海市\",\n  \"value\": \"331082\" },\n\n{\n  \"label\": \"玉环市\",\n  \"value\": \"331083\" }],\n\n\n[{\n  \"label\": \"莲都区\",\n  \"value\": \"331102\" },\n\n{\n  \"label\": \"青田县\",\n  \"value\": \"331121\" },\n\n{\n  \"label\": \"缙云县\",\n  \"value\": \"331122\" },\n\n{\n  \"label\": \"遂昌县\",\n  \"value\": \"331123\" },\n\n{\n  \"label\": \"松阳县\",\n  \"value\": \"331124\" },\n\n{\n  \"label\": \"云和县\",\n  \"value\": \"331125\" },\n\n{\n  \"label\": \"庆元县\",\n  \"value\": \"331126\" },\n\n{\n  \"label\": \"景宁畲族自治县\",\n  \"value\": \"331127\" },\n\n{\n  \"label\": \"龙泉市\",\n  \"value\": \"331181\" }]],\n\n\n\n[\n[{\n  \"label\": \"瑶海区\",\n  \"value\": \"340102\" },\n\n{\n  \"label\": \"庐阳区\",\n  \"value\": \"340103\" },\n\n{\n  \"label\": \"蜀山区\",\n  \"value\": \"340104\" },\n\n{\n  \"label\": \"包河区\",\n  \"value\": \"340111\" },\n\n{\n  \"label\": \"长丰县\",\n  \"value\": \"340121\" },\n\n{\n  \"label\": \"肥东县\",\n  \"value\": \"340122\" },\n\n{\n  \"label\": \"肥西县\",\n  \"value\": \"340123\" },\n\n{\n  \"label\": \"庐江县\",\n  \"value\": \"340124\" },\n\n{\n  \"label\": \"合肥高新技术产业开发区\",\n  \"value\": \"340171\" },\n\n{\n  \"label\": \"合肥经济技术开发区\",\n  \"value\": \"340172\" },\n\n{\n  \"label\": \"合肥新站高新技术产业开发区\",\n  \"value\": \"340173\" },\n\n{\n  \"label\": \"巢湖市\",\n  \"value\": \"340181\" }],\n\n\n[{\n  \"label\": \"镜湖区\",\n  \"value\": \"340202\" },\n\n{\n  \"label\": \"弋江区\",\n  \"value\": \"340203\" },\n\n{\n  \"label\": \"鸠江区\",\n  \"value\": \"340207\" },\n\n{\n  \"label\": \"三山区\",\n  \"value\": \"340208\" },\n\n{\n  \"label\": \"芜湖县\",\n  \"value\": \"340221\" },\n\n{\n  \"label\": \"繁昌县\",\n  \"value\": \"340222\" },\n\n{\n  \"label\": \"南陵县\",\n  \"value\": \"340223\" },\n\n{\n  \"label\": \"无为县\",\n  \"value\": \"340225\" },\n\n{\n  \"label\": \"芜湖经济技术开发区\",\n  \"value\": \"340271\" },\n\n{\n  \"label\": \"安徽芜湖长江大桥经济开发区\",\n  \"value\": \"340272\" }],\n\n\n[{\n  \"label\": \"龙子湖区\",\n  \"value\": \"340302\" },\n\n{\n  \"label\": \"蚌山区\",\n  \"value\": \"340303\" },\n\n{\n  \"label\": \"禹会区\",\n  \"value\": \"340304\" },\n\n{\n  \"label\": \"淮上区\",\n  \"value\": \"340311\" },\n\n{\n  \"label\": \"怀远县\",\n  \"value\": \"340321\" },\n\n{\n  \"label\": \"五河县\",\n  \"value\": \"340322\" },\n\n{\n  \"label\": \"固镇县\",\n  \"value\": \"340323\" },\n\n{\n  \"label\": \"蚌埠市高新技术开发区\",\n  \"value\": \"340371\" },\n\n{\n  \"label\": \"蚌埠市经济开发区\",\n  \"value\": \"340372\" }],\n\n\n[{\n  \"label\": \"大通区\",\n  \"value\": \"340402\" },\n\n{\n  \"label\": \"田家庵区\",\n  \"value\": \"340403\" },\n\n{\n  \"label\": \"谢家集区\",\n  \"value\": \"340404\" },\n\n{\n  \"label\": \"八公山区\",\n  \"value\": \"340405\" },\n\n{\n  \"label\": \"潘集区\",\n  \"value\": \"340406\" },\n\n{\n  \"label\": \"凤台县\",\n  \"value\": \"340421\" },\n\n{\n  \"label\": \"寿县\",\n  \"value\": \"340422\" }],\n\n\n[{\n  \"label\": \"花山区\",\n  \"value\": \"340503\" },\n\n{\n  \"label\": \"雨山区\",\n  \"value\": \"340504\" },\n\n{\n  \"label\": \"博望区\",\n  \"value\": \"340506\" },\n\n{\n  \"label\": \"当涂县\",\n  \"value\": \"340521\" },\n\n{\n  \"label\": \"含山县\",\n  \"value\": \"340522\" },\n\n{\n  \"label\": \"和县\",\n  \"value\": \"340523\" }],\n\n\n[{\n  \"label\": \"杜集区\",\n  \"value\": \"340602\" },\n\n{\n  \"label\": \"相山区\",\n  \"value\": \"340603\" },\n\n{\n  \"label\": \"烈山区\",\n  \"value\": \"340604\" },\n\n{\n  \"label\": \"濉溪县\",\n  \"value\": \"340621\" }],\n\n\n[{\n  \"label\": \"铜官区\",\n  \"value\": \"340705\" },\n\n{\n  \"label\": \"义安区\",\n  \"value\": \"340706\" },\n\n{\n  \"label\": \"郊区\",\n  \"value\": \"340711\" },\n\n{\n  \"label\": \"枞阳县\",\n  \"value\": \"340722\" }],\n\n\n[{\n  \"label\": \"迎江区\",\n  \"value\": \"340802\" },\n\n{\n  \"label\": \"大观区\",\n  \"value\": \"340803\" },\n\n{\n  \"label\": \"宜秀区\",\n  \"value\": \"340811\" },\n\n{\n  \"label\": \"怀宁县\",\n  \"value\": \"340822\" },\n\n{\n  \"label\": \"潜山县\",\n  \"value\": \"340824\" },\n\n{\n  \"label\": \"太湖县\",\n  \"value\": \"340825\" },\n\n{\n  \"label\": \"宿松县\",\n  \"value\": \"340826\" },\n\n{\n  \"label\": \"望江县\",\n  \"value\": \"340827\" },\n\n{\n  \"label\": \"岳西县\",\n  \"value\": \"340828\" },\n\n{\n  \"label\": \"安徽安庆经济开发区\",\n  \"value\": \"340871\" },\n\n{\n  \"label\": \"桐城市\",\n  \"value\": \"340881\" }],\n\n\n[{\n  \"label\": \"屯溪区\",\n  \"value\": \"341002\" },\n\n{\n  \"label\": \"黄山区\",\n  \"value\": \"341003\" },\n\n{\n  \"label\": \"徽州区\",\n  \"value\": \"341004\" },\n\n{\n  \"label\": \"歙县\",\n  \"value\": \"341021\" },\n\n{\n  \"label\": \"休宁县\",\n  \"value\": \"341022\" },\n\n{\n  \"label\": \"黟县\",\n  \"value\": \"341023\" },\n\n{\n  \"label\": \"祁门县\",\n  \"value\": \"341024\" }],\n\n\n[{\n  \"label\": \"琅琊区\",\n  \"value\": \"341102\" },\n\n{\n  \"label\": \"南谯区\",\n  \"value\": \"341103\" },\n\n{\n  \"label\": \"来安县\",\n  \"value\": \"341122\" },\n\n{\n  \"label\": \"全椒县\",\n  \"value\": \"341124\" },\n\n{\n  \"label\": \"定远县\",\n  \"value\": \"341125\" },\n\n{\n  \"label\": \"凤阳县\",\n  \"value\": \"341126\" },\n\n{\n  \"label\": \"苏滁现代产业园\",\n  \"value\": \"341171\" },\n\n{\n  \"label\": \"滁州经济技术开发区\",\n  \"value\": \"341172\" },\n\n{\n  \"label\": \"天长市\",\n  \"value\": \"341181\" },\n\n{\n  \"label\": \"明光市\",\n  \"value\": \"341182\" }],\n\n\n[{\n  \"label\": \"颍州区\",\n  \"value\": \"341202\" },\n\n{\n  \"label\": \"颍东区\",\n  \"value\": \"341203\" },\n\n{\n  \"label\": \"颍泉区\",\n  \"value\": \"341204\" },\n\n{\n  \"label\": \"临泉县\",\n  \"value\": \"341221\" },\n\n{\n  \"label\": \"太和县\",\n  \"value\": \"341222\" },\n\n{\n  \"label\": \"阜南县\",\n  \"value\": \"341225\" },\n\n{\n  \"label\": \"颍上县\",\n  \"value\": \"341226\" },\n\n{\n  \"label\": \"阜阳合肥现代产业园区\",\n  \"value\": \"341271\" },\n\n{\n  \"label\": \"阜阳经济技术开发区\",\n  \"value\": \"341272\" },\n\n{\n  \"label\": \"界首市\",\n  \"value\": \"341282\" }],\n\n\n[{\n  \"label\": \"埇桥区\",\n  \"value\": \"341302\" },\n\n{\n  \"label\": \"砀山县\",\n  \"value\": \"341321\" },\n\n{\n  \"label\": \"萧县\",\n  \"value\": \"341322\" },\n\n{\n  \"label\": \"灵璧县\",\n  \"value\": \"341323\" },\n\n{\n  \"label\": \"泗县\",\n  \"value\": \"341324\" },\n\n{\n  \"label\": \"宿州马鞍山现代产业园区\",\n  \"value\": \"341371\" },\n\n{\n  \"label\": \"宿州经济技术开发区\",\n  \"value\": \"341372\" }],\n\n\n[{\n  \"label\": \"金安区\",\n  \"value\": \"341502\" },\n\n{\n  \"label\": \"裕安区\",\n  \"value\": \"341503\" },\n\n{\n  \"label\": \"叶集区\",\n  \"value\": \"341504\" },\n\n{\n  \"label\": \"霍邱县\",\n  \"value\": \"341522\" },\n\n{\n  \"label\": \"舒城县\",\n  \"value\": \"341523\" },\n\n{\n  \"label\": \"金寨县\",\n  \"value\": \"341524\" },\n\n{\n  \"label\": \"霍山县\",\n  \"value\": \"341525\" }],\n\n\n[{\n  \"label\": \"谯城区\",\n  \"value\": \"341602\" },\n\n{\n  \"label\": \"涡阳县\",\n  \"value\": \"341621\" },\n\n{\n  \"label\": \"蒙城县\",\n  \"value\": \"341622\" },\n\n{\n  \"label\": \"利辛县\",\n  \"value\": \"341623\" }],\n\n\n[{\n  \"label\": \"贵池区\",\n  \"value\": \"341702\" },\n\n{\n  \"label\": \"东至县\",\n  \"value\": \"341721\" },\n\n{\n  \"label\": \"石台县\",\n  \"value\": \"341722\" },\n\n{\n  \"label\": \"青阳县\",\n  \"value\": \"341723\" }],\n\n\n[{\n  \"label\": \"宣州区\",\n  \"value\": \"341802\" },\n\n{\n  \"label\": \"郎溪县\",\n  \"value\": \"341821\" },\n\n{\n  \"label\": \"广德县\",\n  \"value\": \"341822\" },\n\n{\n  \"label\": \"泾县\",\n  \"value\": \"341823\" },\n\n{\n  \"label\": \"绩溪县\",\n  \"value\": \"341824\" },\n\n{\n  \"label\": \"旌德县\",\n  \"value\": \"341825\" },\n\n{\n  \"label\": \"宣城市经济开发区\",\n  \"value\": \"341871\" },\n\n{\n  \"label\": \"宁国市\",\n  \"value\": \"341881\" }]],\n\n\n\n[\n[{\n  \"label\": \"鼓楼区\",\n  \"value\": \"350102\" },\n\n{\n  \"label\": \"台江区\",\n  \"value\": \"350103\" },\n\n{\n  \"label\": \"仓山区\",\n  \"value\": \"350104\" },\n\n{\n  \"label\": \"马尾区\",\n  \"value\": \"350105\" },\n\n{\n  \"label\": \"晋安区\",\n  \"value\": \"350111\" },\n\n{\n  \"label\": \"闽侯县\",\n  \"value\": \"350121\" },\n\n{\n  \"label\": \"连江县\",\n  \"value\": \"350122\" },\n\n{\n  \"label\": \"罗源县\",\n  \"value\": \"350123\" },\n\n{\n  \"label\": \"闽清县\",\n  \"value\": \"350124\" },\n\n{\n  \"label\": \"永泰县\",\n  \"value\": \"350125\" },\n\n{\n  \"label\": \"平潭县\",\n  \"value\": \"350128\" },\n\n{\n  \"label\": \"福清市\",\n  \"value\": \"350181\" },\n\n{\n  \"label\": \"长乐市\",\n  \"value\": \"350182\" }],\n\n\n[{\n  \"label\": \"思明区\",\n  \"value\": \"350203\" },\n\n{\n  \"label\": \"海沧区\",\n  \"value\": \"350205\" },\n\n{\n  \"label\": \"湖里区\",\n  \"value\": \"350206\" },\n\n{\n  \"label\": \"集美区\",\n  \"value\": \"350211\" },\n\n{\n  \"label\": \"同安区\",\n  \"value\": \"350212\" },\n\n{\n  \"label\": \"翔安区\",\n  \"value\": \"350213\" }],\n\n\n[{\n  \"label\": \"城厢区\",\n  \"value\": \"350302\" },\n\n{\n  \"label\": \"涵江区\",\n  \"value\": \"350303\" },\n\n{\n  \"label\": \"荔城区\",\n  \"value\": \"350304\" },\n\n{\n  \"label\": \"秀屿区\",\n  \"value\": \"350305\" },\n\n{\n  \"label\": \"仙游县\",\n  \"value\": \"350322\" }],\n\n\n[{\n  \"label\": \"梅列区\",\n  \"value\": \"350402\" },\n\n{\n  \"label\": \"三元区\",\n  \"value\": \"350403\" },\n\n{\n  \"label\": \"明溪县\",\n  \"value\": \"350421\" },\n\n{\n  \"label\": \"清流县\",\n  \"value\": \"350423\" },\n\n{\n  \"label\": \"宁化县\",\n  \"value\": \"350424\" },\n\n{\n  \"label\": \"大田县\",\n  \"value\": \"350425\" },\n\n{\n  \"label\": \"尤溪县\",\n  \"value\": \"350426\" },\n\n{\n  \"label\": \"沙县\",\n  \"value\": \"350427\" },\n\n{\n  \"label\": \"将乐县\",\n  \"value\": \"350428\" },\n\n{\n  \"label\": \"泰宁县\",\n  \"value\": \"350429\" },\n\n{\n  \"label\": \"建宁县\",\n  \"value\": \"350430\" },\n\n{\n  \"label\": \"永安市\",\n  \"value\": \"350481\" }],\n\n\n[{\n  \"label\": \"鲤城区\",\n  \"value\": \"350502\" },\n\n{\n  \"label\": \"丰泽区\",\n  \"value\": \"350503\" },\n\n{\n  \"label\": \"洛江区\",\n  \"value\": \"350504\" },\n\n{\n  \"label\": \"泉港区\",\n  \"value\": \"350505\" },\n\n{\n  \"label\": \"惠安县\",\n  \"value\": \"350521\" },\n\n{\n  \"label\": \"安溪县\",\n  \"value\": \"350524\" },\n\n{\n  \"label\": \"永春县\",\n  \"value\": \"350525\" },\n\n{\n  \"label\": \"德化县\",\n  \"value\": \"350526\" },\n\n{\n  \"label\": \"金门县\",\n  \"value\": \"350527\" },\n\n{\n  \"label\": \"石狮市\",\n  \"value\": \"350581\" },\n\n{\n  \"label\": \"晋江市\",\n  \"value\": \"350582\" },\n\n{\n  \"label\": \"南安市\",\n  \"value\": \"350583\" }],\n\n\n[{\n  \"label\": \"芗城区\",\n  \"value\": \"350602\" },\n\n{\n  \"label\": \"龙文区\",\n  \"value\": \"350603\" },\n\n{\n  \"label\": \"云霄县\",\n  \"value\": \"350622\" },\n\n{\n  \"label\": \"漳浦县\",\n  \"value\": \"350623\" },\n\n{\n  \"label\": \"诏安县\",\n  \"value\": \"350624\" },\n\n{\n  \"label\": \"长泰县\",\n  \"value\": \"350625\" },\n\n{\n  \"label\": \"东山县\",\n  \"value\": \"350626\" },\n\n{\n  \"label\": \"南靖县\",\n  \"value\": \"350627\" },\n\n{\n  \"label\": \"平和县\",\n  \"value\": \"350628\" },\n\n{\n  \"label\": \"华安县\",\n  \"value\": \"350629\" },\n\n{\n  \"label\": \"龙海市\",\n  \"value\": \"350681\" }],\n\n\n[{\n  \"label\": \"延平区\",\n  \"value\": \"350702\" },\n\n{\n  \"label\": \"建阳区\",\n  \"value\": \"350703\" },\n\n{\n  \"label\": \"顺昌县\",\n  \"value\": \"350721\" },\n\n{\n  \"label\": \"浦城县\",\n  \"value\": \"350722\" },\n\n{\n  \"label\": \"光泽县\",\n  \"value\": \"350723\" },\n\n{\n  \"label\": \"松溪县\",\n  \"value\": \"350724\" },\n\n{\n  \"label\": \"政和县\",\n  \"value\": \"350725\" },\n\n{\n  \"label\": \"邵武市\",\n  \"value\": \"350781\" },\n\n{\n  \"label\": \"武夷山市\",\n  \"value\": \"350782\" },\n\n{\n  \"label\": \"建瓯市\",\n  \"value\": \"350783\" }],\n\n\n[{\n  \"label\": \"新罗区\",\n  \"value\": \"350802\" },\n\n{\n  \"label\": \"永定区\",\n  \"value\": \"350803\" },\n\n{\n  \"label\": \"长汀县\",\n  \"value\": \"350821\" },\n\n{\n  \"label\": \"上杭县\",\n  \"value\": \"350823\" },\n\n{\n  \"label\": \"武平县\",\n  \"value\": \"350824\" },\n\n{\n  \"label\": \"连城县\",\n  \"value\": \"350825\" },\n\n{\n  \"label\": \"漳平市\",\n  \"value\": \"350881\" }],\n\n\n[{\n  \"label\": \"蕉城区\",\n  \"value\": \"350902\" },\n\n{\n  \"label\": \"霞浦县\",\n  \"value\": \"350921\" },\n\n{\n  \"label\": \"古田县\",\n  \"value\": \"350922\" },\n\n{\n  \"label\": \"屏南县\",\n  \"value\": \"350923\" },\n\n{\n  \"label\": \"寿宁县\",\n  \"value\": \"350924\" },\n\n{\n  \"label\": \"周宁县\",\n  \"value\": \"350925\" },\n\n{\n  \"label\": \"柘荣县\",\n  \"value\": \"350926\" },\n\n{\n  \"label\": \"福安市\",\n  \"value\": \"350981\" },\n\n{\n  \"label\": \"福鼎市\",\n  \"value\": \"350982\" }]],\n\n\n\n[\n[{\n  \"label\": \"东湖区\",\n  \"value\": \"360102\" },\n\n{\n  \"label\": \"西湖区\",\n  \"value\": \"360103\" },\n\n{\n  \"label\": \"青云谱区\",\n  \"value\": \"360104\" },\n\n{\n  \"label\": \"湾里区\",\n  \"value\": \"360105\" },\n\n{\n  \"label\": \"青山湖区\",\n  \"value\": \"360111\" },\n\n{\n  \"label\": \"新建区\",\n  \"value\": \"360112\" },\n\n{\n  \"label\": \"南昌县\",\n  \"value\": \"360121\" },\n\n{\n  \"label\": \"安义县\",\n  \"value\": \"360123\" },\n\n{\n  \"label\": \"进贤县\",\n  \"value\": \"360124\" }],\n\n\n[{\n  \"label\": \"昌江区\",\n  \"value\": \"360202\" },\n\n{\n  \"label\": \"珠山区\",\n  \"value\": \"360203\" },\n\n{\n  \"label\": \"浮梁县\",\n  \"value\": \"360222\" },\n\n{\n  \"label\": \"乐平市\",\n  \"value\": \"360281\" }],\n\n\n[{\n  \"label\": \"安源区\",\n  \"value\": \"360302\" },\n\n{\n  \"label\": \"湘东区\",\n  \"value\": \"360313\" },\n\n{\n  \"label\": \"莲花县\",\n  \"value\": \"360321\" },\n\n{\n  \"label\": \"上栗县\",\n  \"value\": \"360322\" },\n\n{\n  \"label\": \"芦溪县\",\n  \"value\": \"360323\" }],\n\n\n[{\n  \"label\": \"濂溪区\",\n  \"value\": \"360402\" },\n\n{\n  \"label\": \"浔阳区\",\n  \"value\": \"360403\" },\n\n{\n  \"label\": \"柴桑区\",\n  \"value\": \"360404\" },\n\n{\n  \"label\": \"武宁县\",\n  \"value\": \"360423\" },\n\n{\n  \"label\": \"修水县\",\n  \"value\": \"360424\" },\n\n{\n  \"label\": \"永修县\",\n  \"value\": \"360425\" },\n\n{\n  \"label\": \"德安县\",\n  \"value\": \"360426\" },\n\n{\n  \"label\": \"都昌县\",\n  \"value\": \"360428\" },\n\n{\n  \"label\": \"湖口县\",\n  \"value\": \"360429\" },\n\n{\n  \"label\": \"彭泽县\",\n  \"value\": \"360430\" },\n\n{\n  \"label\": \"瑞昌市\",\n  \"value\": \"360481\" },\n\n{\n  \"label\": \"共青城市\",\n  \"value\": \"360482\" },\n\n{\n  \"label\": \"庐山市\",\n  \"value\": \"360483\" }],\n\n\n[{\n  \"label\": \"渝水区\",\n  \"value\": \"360502\" },\n\n{\n  \"label\": \"分宜县\",\n  \"value\": \"360521\" }],\n\n\n[{\n  \"label\": \"月湖区\",\n  \"value\": \"360602\" },\n\n{\n  \"label\": \"余江县\",\n  \"value\": \"360622\" },\n\n{\n  \"label\": \"贵溪市\",\n  \"value\": \"360681\" }],\n\n\n[{\n  \"label\": \"章贡区\",\n  \"value\": \"360702\" },\n\n{\n  \"label\": \"南康区\",\n  \"value\": \"360703\" },\n\n{\n  \"label\": \"赣县区\",\n  \"value\": \"360704\" },\n\n{\n  \"label\": \"信丰县\",\n  \"value\": \"360722\" },\n\n{\n  \"label\": \"大余县\",\n  \"value\": \"360723\" },\n\n{\n  \"label\": \"上犹县\",\n  \"value\": \"360724\" },\n\n{\n  \"label\": \"崇义县\",\n  \"value\": \"360725\" },\n\n{\n  \"label\": \"安远县\",\n  \"value\": \"360726\" },\n\n{\n  \"label\": \"龙南县\",\n  \"value\": \"360727\" },\n\n{\n  \"label\": \"定南县\",\n  \"value\": \"360728\" },\n\n{\n  \"label\": \"全南县\",\n  \"value\": \"360729\" },\n\n{\n  \"label\": \"宁都县\",\n  \"value\": \"360730\" },\n\n{\n  \"label\": \"于都县\",\n  \"value\": \"360731\" },\n\n{\n  \"label\": \"兴国县\",\n  \"value\": \"360732\" },\n\n{\n  \"label\": \"会昌县\",\n  \"value\": \"360733\" },\n\n{\n  \"label\": \"寻乌县\",\n  \"value\": \"360734\" },\n\n{\n  \"label\": \"石城县\",\n  \"value\": \"360735\" },\n\n{\n  \"label\": \"瑞金市\",\n  \"value\": \"360781\" }],\n\n\n[{\n  \"label\": \"吉州区\",\n  \"value\": \"360802\" },\n\n{\n  \"label\": \"青原区\",\n  \"value\": \"360803\" },\n\n{\n  \"label\": \"吉安县\",\n  \"value\": \"360821\" },\n\n{\n  \"label\": \"吉水县\",\n  \"value\": \"360822\" },\n\n{\n  \"label\": \"峡江县\",\n  \"value\": \"360823\" },\n\n{\n  \"label\": \"新干县\",\n  \"value\": \"360824\" },\n\n{\n  \"label\": \"永丰县\",\n  \"value\": \"360825\" },\n\n{\n  \"label\": \"泰和县\",\n  \"value\": \"360826\" },\n\n{\n  \"label\": \"遂川县\",\n  \"value\": \"360827\" },\n\n{\n  \"label\": \"万安县\",\n  \"value\": \"360828\" },\n\n{\n  \"label\": \"安福县\",\n  \"value\": \"360829\" },\n\n{\n  \"label\": \"永新县\",\n  \"value\": \"360830\" },\n\n{\n  \"label\": \"井冈山市\",\n  \"value\": \"360881\" }],\n\n\n[{\n  \"label\": \"袁州区\",\n  \"value\": \"360902\" },\n\n{\n  \"label\": \"奉新县\",\n  \"value\": \"360921\" },\n\n{\n  \"label\": \"万载县\",\n  \"value\": \"360922\" },\n\n{\n  \"label\": \"上高县\",\n  \"value\": \"360923\" },\n\n{\n  \"label\": \"宜丰县\",\n  \"value\": \"360924\" },\n\n{\n  \"label\": \"靖安县\",\n  \"value\": \"360925\" },\n\n{\n  \"label\": \"铜鼓县\",\n  \"value\": \"360926\" },\n\n{\n  \"label\": \"丰城市\",\n  \"value\": \"360981\" },\n\n{\n  \"label\": \"樟树市\",\n  \"value\": \"360982\" },\n\n{\n  \"label\": \"高安市\",\n  \"value\": \"360983\" }],\n\n\n[{\n  \"label\": \"临川区\",\n  \"value\": \"361002\" },\n\n{\n  \"label\": \"东乡区\",\n  \"value\": \"361003\" },\n\n{\n  \"label\": \"南城县\",\n  \"value\": \"361021\" },\n\n{\n  \"label\": \"黎川县\",\n  \"value\": \"361022\" },\n\n{\n  \"label\": \"南丰县\",\n  \"value\": \"361023\" },\n\n{\n  \"label\": \"崇仁县\",\n  \"value\": \"361024\" },\n\n{\n  \"label\": \"乐安县\",\n  \"value\": \"361025\" },\n\n{\n  \"label\": \"宜黄县\",\n  \"value\": \"361026\" },\n\n{\n  \"label\": \"金溪县\",\n  \"value\": \"361027\" },\n\n{\n  \"label\": \"资溪县\",\n  \"value\": \"361028\" },\n\n{\n  \"label\": \"广昌县\",\n  \"value\": \"361030\" }],\n\n\n[{\n  \"label\": \"信州区\",\n  \"value\": \"361102\" },\n\n{\n  \"label\": \"广丰区\",\n  \"value\": \"361103\" },\n\n{\n  \"label\": \"上饶县\",\n  \"value\": \"361121\" },\n\n{\n  \"label\": \"玉山县\",\n  \"value\": \"361123\" },\n\n{\n  \"label\": \"铅山县\",\n  \"value\": \"361124\" },\n\n{\n  \"label\": \"横峰县\",\n  \"value\": \"361125\" },\n\n{\n  \"label\": \"弋阳县\",\n  \"value\": \"361126\" },\n\n{\n  \"label\": \"余干县\",\n  \"value\": \"361127\" },\n\n{\n  \"label\": \"鄱阳县\",\n  \"value\": \"361128\" },\n\n{\n  \"label\": \"万年县\",\n  \"value\": \"361129\" },\n\n{\n  \"label\": \"婺源县\",\n  \"value\": \"361130\" },\n\n{\n  \"label\": \"德兴市\",\n  \"value\": \"361181\" }]],\n\n\n\n[\n[{\n  \"label\": \"历下区\",\n  \"value\": \"370102\" },\n\n{\n  \"label\": \"市中区\",\n  \"value\": \"370103\" },\n\n{\n  \"label\": \"槐荫区\",\n  \"value\": \"370104\" },\n\n{\n  \"label\": \"天桥区\",\n  \"value\": \"370105\" },\n\n{\n  \"label\": \"历城区\",\n  \"value\": \"370112\" },\n\n{\n  \"label\": \"长清区\",\n  \"value\": \"370113\" },\n\n{\n  \"label\": \"章丘区\",\n  \"value\": \"370114\" },\n\n{\n  \"label\": \"平阴县\",\n  \"value\": \"370124\" },\n\n{\n  \"label\": \"济阳县\",\n  \"value\": \"370125\" },\n\n{\n  \"label\": \"商河县\",\n  \"value\": \"370126\" },\n\n{\n  \"label\": \"济南高新技术产业开发区\",\n  \"value\": \"370171\" }],\n\n\n[{\n  \"label\": \"市南区\",\n  \"value\": \"370202\" },\n\n{\n  \"label\": \"市北区\",\n  \"value\": \"370203\" },\n\n{\n  \"label\": \"黄岛区\",\n  \"value\": \"370211\" },\n\n{\n  \"label\": \"崂山区\",\n  \"value\": \"370212\" },\n\n{\n  \"label\": \"李沧区\",\n  \"value\": \"370213\" },\n\n{\n  \"label\": \"城阳区\",\n  \"value\": \"370214\" },\n\n{\n  \"label\": \"即墨区\",\n  \"value\": \"370215\" },\n\n{\n  \"label\": \"青岛高新技术产业开发区\",\n  \"value\": \"370271\" },\n\n{\n  \"label\": \"胶州市\",\n  \"value\": \"370281\" },\n\n{\n  \"label\": \"平度市\",\n  \"value\": \"370283\" },\n\n{\n  \"label\": \"莱西市\",\n  \"value\": \"370285\" }],\n\n\n[{\n  \"label\": \"淄川区\",\n  \"value\": \"370302\" },\n\n{\n  \"label\": \"张店区\",\n  \"value\": \"370303\" },\n\n{\n  \"label\": \"博山区\",\n  \"value\": \"370304\" },\n\n{\n  \"label\": \"临淄区\",\n  \"value\": \"370305\" },\n\n{\n  \"label\": \"周村区\",\n  \"value\": \"370306\" },\n\n{\n  \"label\": \"桓台县\",\n  \"value\": \"370321\" },\n\n{\n  \"label\": \"高青县\",\n  \"value\": \"370322\" },\n\n{\n  \"label\": \"沂源县\",\n  \"value\": \"370323\" }],\n\n\n[{\n  \"label\": \"市中区\",\n  \"value\": \"370402\" },\n\n{\n  \"label\": \"薛城区\",\n  \"value\": \"370403\" },\n\n{\n  \"label\": \"峄城区\",\n  \"value\": \"370404\" },\n\n{\n  \"label\": \"台儿庄区\",\n  \"value\": \"370405\" },\n\n{\n  \"label\": \"山亭区\",\n  \"value\": \"370406\" },\n\n{\n  \"label\": \"滕州市\",\n  \"value\": \"370481\" }],\n\n\n[{\n  \"label\": \"东营区\",\n  \"value\": \"370502\" },\n\n{\n  \"label\": \"河口区\",\n  \"value\": \"370503\" },\n\n{\n  \"label\": \"垦利区\",\n  \"value\": \"370505\" },\n\n{\n  \"label\": \"利津县\",\n  \"value\": \"370522\" },\n\n{\n  \"label\": \"广饶县\",\n  \"value\": \"370523\" },\n\n{\n  \"label\": \"东营经济技术开发区\",\n  \"value\": \"370571\" },\n\n{\n  \"label\": \"东营港经济开发区\",\n  \"value\": \"370572\" }],\n\n\n[{\n  \"label\": \"芝罘区\",\n  \"value\": \"370602\" },\n\n{\n  \"label\": \"福山区\",\n  \"value\": \"370611\" },\n\n{\n  \"label\": \"牟平区\",\n  \"value\": \"370612\" },\n\n{\n  \"label\": \"莱山区\",\n  \"value\": \"370613\" },\n\n{\n  \"label\": \"长岛县\",\n  \"value\": \"370634\" },\n\n{\n  \"label\": \"烟台高新技术产业开发区\",\n  \"value\": \"370671\" },\n\n{\n  \"label\": \"烟台经济技术开发区\",\n  \"value\": \"370672\" },\n\n{\n  \"label\": \"龙口市\",\n  \"value\": \"370681\" },\n\n{\n  \"label\": \"莱阳市\",\n  \"value\": \"370682\" },\n\n{\n  \"label\": \"莱州市\",\n  \"value\": \"370683\" },\n\n{\n  \"label\": \"蓬莱市\",\n  \"value\": \"370684\" },\n\n{\n  \"label\": \"招远市\",\n  \"value\": \"370685\" },\n\n{\n  \"label\": \"栖霞市\",\n  \"value\": \"370686\" },\n\n{\n  \"label\": \"海阳市\",\n  \"value\": \"370687\" }],\n\n\n[{\n  \"label\": \"潍城区\",\n  \"value\": \"370702\" },\n\n{\n  \"label\": \"寒亭区\",\n  \"value\": \"370703\" },\n\n{\n  \"label\": \"坊子区\",\n  \"value\": \"370704\" },\n\n{\n  \"label\": \"奎文区\",\n  \"value\": \"370705\" },\n\n{\n  \"label\": \"临朐县\",\n  \"value\": \"370724\" },\n\n{\n  \"label\": \"昌乐县\",\n  \"value\": \"370725\" },\n\n{\n  \"label\": \"潍坊滨海经济技术开发区\",\n  \"value\": \"370772\" },\n\n{\n  \"label\": \"青州市\",\n  \"value\": \"370781\" },\n\n{\n  \"label\": \"诸城市\",\n  \"value\": \"370782\" },\n\n{\n  \"label\": \"寿光市\",\n  \"value\": \"370783\" },\n\n{\n  \"label\": \"安丘市\",\n  \"value\": \"370784\" },\n\n{\n  \"label\": \"高密市\",\n  \"value\": \"370785\" },\n\n{\n  \"label\": \"昌邑市\",\n  \"value\": \"370786\" }],\n\n\n[{\n  \"label\": \"任城区\",\n  \"value\": \"370811\" },\n\n{\n  \"label\": \"兖州区\",\n  \"value\": \"370812\" },\n\n{\n  \"label\": \"微山县\",\n  \"value\": \"370826\" },\n\n{\n  \"label\": \"鱼台县\",\n  \"value\": \"370827\" },\n\n{\n  \"label\": \"金乡县\",\n  \"value\": \"370828\" },\n\n{\n  \"label\": \"嘉祥县\",\n  \"value\": \"370829\" },\n\n{\n  \"label\": \"汶上县\",\n  \"value\": \"370830\" },\n\n{\n  \"label\": \"泗水县\",\n  \"value\": \"370831\" },\n\n{\n  \"label\": \"梁山县\",\n  \"value\": \"370832\" },\n\n{\n  \"label\": \"济宁高新技术产业开发区\",\n  \"value\": \"370871\" },\n\n{\n  \"label\": \"曲阜市\",\n  \"value\": \"370881\" },\n\n{\n  \"label\": \"邹城市\",\n  \"value\": \"370883\" }],\n\n\n[{\n  \"label\": \"泰山区\",\n  \"value\": \"370902\" },\n\n{\n  \"label\": \"岱岳区\",\n  \"value\": \"370911\" },\n\n{\n  \"label\": \"宁阳县\",\n  \"value\": \"370921\" },\n\n{\n  \"label\": \"东平县\",\n  \"value\": \"370923\" },\n\n{\n  \"label\": \"新泰市\",\n  \"value\": \"370982\" },\n\n{\n  \"label\": \"肥城市\",\n  \"value\": \"370983\" }],\n\n\n[{\n  \"label\": \"环翠区\",\n  \"value\": \"371002\" },\n\n{\n  \"label\": \"文登区\",\n  \"value\": \"371003\" },\n\n{\n  \"label\": \"威海火炬高技术产业开发区\",\n  \"value\": \"371071\" },\n\n{\n  \"label\": \"威海经济技术开发区\",\n  \"value\": \"371072\" },\n\n{\n  \"label\": \"威海临港经济技术开发区\",\n  \"value\": \"371073\" },\n\n{\n  \"label\": \"荣成市\",\n  \"value\": \"371082\" },\n\n{\n  \"label\": \"乳山市\",\n  \"value\": \"371083\" }],\n\n\n[{\n  \"label\": \"东港区\",\n  \"value\": \"371102\" },\n\n{\n  \"label\": \"岚山区\",\n  \"value\": \"371103\" },\n\n{\n  \"label\": \"五莲县\",\n  \"value\": \"371121\" },\n\n{\n  \"label\": \"莒县\",\n  \"value\": \"371122\" },\n\n{\n  \"label\": \"日照经济技术开发区\",\n  \"value\": \"371171\" },\n\n{\n  \"label\": \"日照国际海洋城\",\n  \"value\": \"371172\" }],\n\n\n[{\n  \"label\": \"莱城区\",\n  \"value\": \"371202\" },\n\n{\n  \"label\": \"钢城区\",\n  \"value\": \"371203\" }],\n\n\n[{\n  \"label\": \"兰山区\",\n  \"value\": \"371302\" },\n\n{\n  \"label\": \"罗庄区\",\n  \"value\": \"371311\" },\n\n{\n  \"label\": \"河东区\",\n  \"value\": \"371312\" },\n\n{\n  \"label\": \"沂南县\",\n  \"value\": \"371321\" },\n\n{\n  \"label\": \"郯城县\",\n  \"value\": \"371322\" },\n\n{\n  \"label\": \"沂水县\",\n  \"value\": \"371323\" },\n\n{\n  \"label\": \"兰陵县\",\n  \"value\": \"371324\" },\n\n{\n  \"label\": \"费县\",\n  \"value\": \"371325\" },\n\n{\n  \"label\": \"平邑县\",\n  \"value\": \"371326\" },\n\n{\n  \"label\": \"莒南县\",\n  \"value\": \"371327\" },\n\n{\n  \"label\": \"蒙阴县\",\n  \"value\": \"371328\" },\n\n{\n  \"label\": \"临沭县\",\n  \"value\": \"371329\" },\n\n{\n  \"label\": \"临沂高新技术产业开发区\",\n  \"value\": \"371371\" },\n\n{\n  \"label\": \"临沂经济技术开发区\",\n  \"value\": \"371372\" },\n\n{\n  \"label\": \"临沂临港经济开发区\",\n  \"value\": \"371373\" }],\n\n\n[{\n  \"label\": \"德城区\",\n  \"value\": \"371402\" },\n\n{\n  \"label\": \"陵城区\",\n  \"value\": \"371403\" },\n\n{\n  \"label\": \"宁津县\",\n  \"value\": \"371422\" },\n\n{\n  \"label\": \"庆云县\",\n  \"value\": \"371423\" },\n\n{\n  \"label\": \"临邑县\",\n  \"value\": \"371424\" },\n\n{\n  \"label\": \"齐河县\",\n  \"value\": \"371425\" },\n\n{\n  \"label\": \"平原县\",\n  \"value\": \"371426\" },\n\n{\n  \"label\": \"夏津县\",\n  \"value\": \"371427\" },\n\n{\n  \"label\": \"武城县\",\n  \"value\": \"371428\" },\n\n{\n  \"label\": \"德州经济技术开发区\",\n  \"value\": \"371471\" },\n\n{\n  \"label\": \"德州运河经济开发区\",\n  \"value\": \"371472\" },\n\n{\n  \"label\": \"乐陵市\",\n  \"value\": \"371481\" },\n\n{\n  \"label\": \"禹城市\",\n  \"value\": \"371482\" }],\n\n\n[{\n  \"label\": \"东昌府区\",\n  \"value\": \"371502\" },\n\n{\n  \"label\": \"阳谷县\",\n  \"value\": \"371521\" },\n\n{\n  \"label\": \"莘县\",\n  \"value\": \"371522\" },\n\n{\n  \"label\": \"茌平县\",\n  \"value\": \"371523\" },\n\n{\n  \"label\": \"东阿县\",\n  \"value\": \"371524\" },\n\n{\n  \"label\": \"冠县\",\n  \"value\": \"371525\" },\n\n{\n  \"label\": \"高唐县\",\n  \"value\": \"371526\" },\n\n{\n  \"label\": \"临清市\",\n  \"value\": \"371581\" }],\n\n\n[{\n  \"label\": \"滨城区\",\n  \"value\": \"371602\" },\n\n{\n  \"label\": \"沾化区\",\n  \"value\": \"371603\" },\n\n{\n  \"label\": \"惠民县\",\n  \"value\": \"371621\" },\n\n{\n  \"label\": \"阳信县\",\n  \"value\": \"371622\" },\n\n{\n  \"label\": \"无棣县\",\n  \"value\": \"371623\" },\n\n{\n  \"label\": \"博兴县\",\n  \"value\": \"371625\" },\n\n{\n  \"label\": \"邹平县\",\n  \"value\": \"371626\" }],\n\n\n[{\n  \"label\": \"牡丹区\",\n  \"value\": \"371702\" },\n\n{\n  \"label\": \"定陶区\",\n  \"value\": \"371703\" },\n\n{\n  \"label\": \"曹县\",\n  \"value\": \"371721\" },\n\n{\n  \"label\": \"单县\",\n  \"value\": \"371722\" },\n\n{\n  \"label\": \"成武县\",\n  \"value\": \"371723\" },\n\n{\n  \"label\": \"巨野县\",\n  \"value\": \"371724\" },\n\n{\n  \"label\": \"郓城县\",\n  \"value\": \"371725\" },\n\n{\n  \"label\": \"鄄城县\",\n  \"value\": \"371726\" },\n\n{\n  \"label\": \"东明县\",\n  \"value\": \"371728\" },\n\n{\n  \"label\": \"菏泽经济技术开发区\",\n  \"value\": \"371771\" },\n\n{\n  \"label\": \"菏泽高新技术开发区\",\n  \"value\": \"371772\" }]],\n\n\n\n[\n[{\n  \"label\": \"中原区\",\n  \"value\": \"410102\" },\n\n{\n  \"label\": \"二七区\",\n  \"value\": \"410103\" },\n\n{\n  \"label\": \"管城回族区\",\n  \"value\": \"410104\" },\n\n{\n  \"label\": \"金水区\",\n  \"value\": \"410105\" },\n\n{\n  \"label\": \"上街区\",\n  \"value\": \"410106\" },\n\n{\n  \"label\": \"惠济区\",\n  \"value\": \"410108\" },\n\n{\n  \"label\": \"中牟县\",\n  \"value\": \"410122\" },\n\n{\n  \"label\": \"郑州经济技术开发区\",\n  \"value\": \"410171\" },\n\n{\n  \"label\": \"郑州高新技术产业开发区\",\n  \"value\": \"410172\" },\n\n{\n  \"label\": \"郑州航空港经济综合实验区\",\n  \"value\": \"410173\" },\n\n{\n  \"label\": \"巩义市\",\n  \"value\": \"410181\" },\n\n{\n  \"label\": \"荥阳市\",\n  \"value\": \"410182\" },\n\n{\n  \"label\": \"新密市\",\n  \"value\": \"410183\" },\n\n{\n  \"label\": \"新郑市\",\n  \"value\": \"410184\" },\n\n{\n  \"label\": \"登封市\",\n  \"value\": \"410185\" }],\n\n\n[{\n  \"label\": \"龙亭区\",\n  \"value\": \"410202\" },\n\n{\n  \"label\": \"顺河回族区\",\n  \"value\": \"410203\" },\n\n{\n  \"label\": \"鼓楼区\",\n  \"value\": \"410204\" },\n\n{\n  \"label\": \"禹王台区\",\n  \"value\": \"410205\" },\n\n{\n  \"label\": \"祥符区\",\n  \"value\": \"410212\" },\n\n{\n  \"label\": \"杞县\",\n  \"value\": \"410221\" },\n\n{\n  \"label\": \"通许县\",\n  \"value\": \"410222\" },\n\n{\n  \"label\": \"尉氏县\",\n  \"value\": \"410223\" },\n\n{\n  \"label\": \"兰考县\",\n  \"value\": \"410225\" }],\n\n\n[{\n  \"label\": \"老城区\",\n  \"value\": \"410302\" },\n\n{\n  \"label\": \"西工区\",\n  \"value\": \"410303\" },\n\n{\n  \"label\": \"瀍河回族区\",\n  \"value\": \"410304\" },\n\n{\n  \"label\": \"涧西区\",\n  \"value\": \"410305\" },\n\n{\n  \"label\": \"吉利区\",\n  \"value\": \"410306\" },\n\n{\n  \"label\": \"洛龙区\",\n  \"value\": \"410311\" },\n\n{\n  \"label\": \"孟津县\",\n  \"value\": \"410322\" },\n\n{\n  \"label\": \"新安县\",\n  \"value\": \"410323\" },\n\n{\n  \"label\": \"栾川县\",\n  \"value\": \"410324\" },\n\n{\n  \"label\": \"嵩县\",\n  \"value\": \"410325\" },\n\n{\n  \"label\": \"汝阳县\",\n  \"value\": \"410326\" },\n\n{\n  \"label\": \"宜阳县\",\n  \"value\": \"410327\" },\n\n{\n  \"label\": \"洛宁县\",\n  \"value\": \"410328\" },\n\n{\n  \"label\": \"伊川县\",\n  \"value\": \"410329\" },\n\n{\n  \"label\": \"洛阳高新技术产业开发区\",\n  \"value\": \"410371\" },\n\n{\n  \"label\": \"偃师市\",\n  \"value\": \"410381\" }],\n\n\n[{\n  \"label\": \"新华区\",\n  \"value\": \"410402\" },\n\n{\n  \"label\": \"卫东区\",\n  \"value\": \"410403\" },\n\n{\n  \"label\": \"石龙区\",\n  \"value\": \"410404\" },\n\n{\n  \"label\": \"湛河区\",\n  \"value\": \"410411\" },\n\n{\n  \"label\": \"宝丰县\",\n  \"value\": \"410421\" },\n\n{\n  \"label\": \"叶县\",\n  \"value\": \"410422\" },\n\n{\n  \"label\": \"鲁山县\",\n  \"value\": \"410423\" },\n\n{\n  \"label\": \"郏县\",\n  \"value\": \"410425\" },\n\n{\n  \"label\": \"平顶山高新技术产业开发区\",\n  \"value\": \"410471\" },\n\n{\n  \"label\": \"平顶山市新城区\",\n  \"value\": \"410472\" },\n\n{\n  \"label\": \"舞钢市\",\n  \"value\": \"410481\" },\n\n{\n  \"label\": \"汝州市\",\n  \"value\": \"410482\" }],\n\n\n[{\n  \"label\": \"文峰区\",\n  \"value\": \"410502\" },\n\n{\n  \"label\": \"北关区\",\n  \"value\": \"410503\" },\n\n{\n  \"label\": \"殷都区\",\n  \"value\": \"410505\" },\n\n{\n  \"label\": \"龙安区\",\n  \"value\": \"410506\" },\n\n{\n  \"label\": \"安阳县\",\n  \"value\": \"410522\" },\n\n{\n  \"label\": \"汤阴县\",\n  \"value\": \"410523\" },\n\n{\n  \"label\": \"滑县\",\n  \"value\": \"410526\" },\n\n{\n  \"label\": \"内黄县\",\n  \"value\": \"410527\" },\n\n{\n  \"label\": \"安阳高新技术产业开发区\",\n  \"value\": \"410571\" },\n\n{\n  \"label\": \"林州市\",\n  \"value\": \"410581\" }],\n\n\n[{\n  \"label\": \"鹤山区\",\n  \"value\": \"410602\" },\n\n{\n  \"label\": \"山城区\",\n  \"value\": \"410603\" },\n\n{\n  \"label\": \"淇滨区\",\n  \"value\": \"410611\" },\n\n{\n  \"label\": \"浚县\",\n  \"value\": \"410621\" },\n\n{\n  \"label\": \"淇县\",\n  \"value\": \"410622\" },\n\n{\n  \"label\": \"鹤壁经济技术开发区\",\n  \"value\": \"410671\" }],\n\n\n[{\n  \"label\": \"红旗区\",\n  \"value\": \"410702\" },\n\n{\n  \"label\": \"卫滨区\",\n  \"value\": \"410703\" },\n\n{\n  \"label\": \"凤泉区\",\n  \"value\": \"410704\" },\n\n{\n  \"label\": \"牧野区\",\n  \"value\": \"410711\" },\n\n{\n  \"label\": \"新乡县\",\n  \"value\": \"410721\" },\n\n{\n  \"label\": \"获嘉县\",\n  \"value\": \"410724\" },\n\n{\n  \"label\": \"原阳县\",\n  \"value\": \"410725\" },\n\n{\n  \"label\": \"延津县\",\n  \"value\": \"410726\" },\n\n{\n  \"label\": \"封丘县\",\n  \"value\": \"410727\" },\n\n{\n  \"label\": \"长垣县\",\n  \"value\": \"410728\" },\n\n{\n  \"label\": \"新乡高新技术产业开发区\",\n  \"value\": \"410771\" },\n\n{\n  \"label\": \"新乡经济技术开发区\",\n  \"value\": \"410772\" },\n\n{\n  \"label\": \"新乡市平原城乡一体化示范区\",\n  \"value\": \"410773\" },\n\n{\n  \"label\": \"卫辉市\",\n  \"value\": \"410781\" },\n\n{\n  \"label\": \"辉县市\",\n  \"value\": \"410782\" }],\n\n\n[{\n  \"label\": \"解放区\",\n  \"value\": \"410802\" },\n\n{\n  \"label\": \"中站区\",\n  \"value\": \"410803\" },\n\n{\n  \"label\": \"马村区\",\n  \"value\": \"410804\" },\n\n{\n  \"label\": \"山阳区\",\n  \"value\": \"410811\" },\n\n{\n  \"label\": \"修武县\",\n  \"value\": \"410821\" },\n\n{\n  \"label\": \"博爱县\",\n  \"value\": \"410822\" },\n\n{\n  \"label\": \"武陟县\",\n  \"value\": \"410823\" },\n\n{\n  \"label\": \"温县\",\n  \"value\": \"410825\" },\n\n{\n  \"label\": \"焦作城乡一体化示范区\",\n  \"value\": \"410871\" },\n\n{\n  \"label\": \"沁阳市\",\n  \"value\": \"410882\" },\n\n{\n  \"label\": \"孟州市\",\n  \"value\": \"410883\" }],\n\n\n[{\n  \"label\": \"华龙区\",\n  \"value\": \"410902\" },\n\n{\n  \"label\": \"清丰县\",\n  \"value\": \"410922\" },\n\n{\n  \"label\": \"南乐县\",\n  \"value\": \"410923\" },\n\n{\n  \"label\": \"范县\",\n  \"value\": \"410926\" },\n\n{\n  \"label\": \"台前县\",\n  \"value\": \"410927\" },\n\n{\n  \"label\": \"濮阳县\",\n  \"value\": \"410928\" },\n\n{\n  \"label\": \"河南濮阳工业园区\",\n  \"value\": \"410971\" },\n\n{\n  \"label\": \"濮阳经济技术开发区\",\n  \"value\": \"410972\" }],\n\n\n[{\n  \"label\": \"魏都区\",\n  \"value\": \"411002\" },\n\n{\n  \"label\": \"建安区\",\n  \"value\": \"411003\" },\n\n{\n  \"label\": \"鄢陵县\",\n  \"value\": \"411024\" },\n\n{\n  \"label\": \"襄城县\",\n  \"value\": \"411025\" },\n\n{\n  \"label\": \"许昌经济技术开发区\",\n  \"value\": \"411071\" },\n\n{\n  \"label\": \"禹州市\",\n  \"value\": \"411081\" },\n\n{\n  \"label\": \"长葛市\",\n  \"value\": \"411082\" }],\n\n\n[{\n  \"label\": \"源汇区\",\n  \"value\": \"411102\" },\n\n{\n  \"label\": \"郾城区\",\n  \"value\": \"411103\" },\n\n{\n  \"label\": \"召陵区\",\n  \"value\": \"411104\" },\n\n{\n  \"label\": \"舞阳县\",\n  \"value\": \"411121\" },\n\n{\n  \"label\": \"临颍县\",\n  \"value\": \"411122\" },\n\n{\n  \"label\": \"漯河经济技术开发区\",\n  \"value\": \"411171\" }],\n\n\n[{\n  \"label\": \"湖滨区\",\n  \"value\": \"411202\" },\n\n{\n  \"label\": \"陕州区\",\n  \"value\": \"411203\" },\n\n{\n  \"label\": \"渑池县\",\n  \"value\": \"411221\" },\n\n{\n  \"label\": \"卢氏县\",\n  \"value\": \"411224\" },\n\n{\n  \"label\": \"河南三门峡经济开发区\",\n  \"value\": \"411271\" },\n\n{\n  \"label\": \"义马市\",\n  \"value\": \"411281\" },\n\n{\n  \"label\": \"灵宝市\",\n  \"value\": \"411282\" }],\n\n\n[{\n  \"label\": \"宛城区\",\n  \"value\": \"411302\" },\n\n{\n  \"label\": \"卧龙区\",\n  \"value\": \"411303\" },\n\n{\n  \"label\": \"南召县\",\n  \"value\": \"411321\" },\n\n{\n  \"label\": \"方城县\",\n  \"value\": \"411322\" },\n\n{\n  \"label\": \"西峡县\",\n  \"value\": \"411323\" },\n\n{\n  \"label\": \"镇平县\",\n  \"value\": \"411324\" },\n\n{\n  \"label\": \"内乡县\",\n  \"value\": \"411325\" },\n\n{\n  \"label\": \"淅川县\",\n  \"value\": \"411326\" },\n\n{\n  \"label\": \"社旗县\",\n  \"value\": \"411327\" },\n\n{\n  \"label\": \"唐河县\",\n  \"value\": \"411328\" },\n\n{\n  \"label\": \"新野县\",\n  \"value\": \"411329\" },\n\n{\n  \"label\": \"桐柏县\",\n  \"value\": \"411330\" },\n\n{\n  \"label\": \"南阳高新技术产业开发区\",\n  \"value\": \"411371\" },\n\n{\n  \"label\": \"南阳市城乡一体化示范区\",\n  \"value\": \"411372\" },\n\n{\n  \"label\": \"邓州市\",\n  \"value\": \"411381\" }],\n\n\n[{\n  \"label\": \"梁园区\",\n  \"value\": \"411402\" },\n\n{\n  \"label\": \"睢阳区\",\n  \"value\": \"411403\" },\n\n{\n  \"label\": \"民权县\",\n  \"value\": \"411421\" },\n\n{\n  \"label\": \"睢县\",\n  \"value\": \"411422\" },\n\n{\n  \"label\": \"宁陵县\",\n  \"value\": \"411423\" },\n\n{\n  \"label\": \"柘城县\",\n  \"value\": \"411424\" },\n\n{\n  \"label\": \"虞城县\",\n  \"value\": \"411425\" },\n\n{\n  \"label\": \"夏邑县\",\n  \"value\": \"411426\" },\n\n{\n  \"label\": \"豫东综合物流产业聚集区\",\n  \"value\": \"411471\" },\n\n{\n  \"label\": \"河南商丘经济开发区\",\n  \"value\": \"411472\" },\n\n{\n  \"label\": \"永城市\",\n  \"value\": \"411481\" }],\n\n\n[{\n  \"label\": \"浉河区\",\n  \"value\": \"411502\" },\n\n{\n  \"label\": \"平桥区\",\n  \"value\": \"411503\" },\n\n{\n  \"label\": \"罗山县\",\n  \"value\": \"411521\" },\n\n{\n  \"label\": \"光山县\",\n  \"value\": \"411522\" },\n\n{\n  \"label\": \"新县\",\n  \"value\": \"411523\" },\n\n{\n  \"label\": \"商城县\",\n  \"value\": \"411524\" },\n\n{\n  \"label\": \"固始县\",\n  \"value\": \"411525\" },\n\n{\n  \"label\": \"潢川县\",\n  \"value\": \"411526\" },\n\n{\n  \"label\": \"淮滨县\",\n  \"value\": \"411527\" },\n\n{\n  \"label\": \"息县\",\n  \"value\": \"411528\" },\n\n{\n  \"label\": \"信阳高新技术产业开发区\",\n  \"value\": \"411571\" }],\n\n\n[{\n  \"label\": \"川汇区\",\n  \"value\": \"411602\" },\n\n{\n  \"label\": \"扶沟县\",\n  \"value\": \"411621\" },\n\n{\n  \"label\": \"西华县\",\n  \"value\": \"411622\" },\n\n{\n  \"label\": \"商水县\",\n  \"value\": \"411623\" },\n\n{\n  \"label\": \"沈丘县\",\n  \"value\": \"411624\" },\n\n{\n  \"label\": \"郸城县\",\n  \"value\": \"411625\" },\n\n{\n  \"label\": \"淮阳县\",\n  \"value\": \"411626\" },\n\n{\n  \"label\": \"太康县\",\n  \"value\": \"411627\" },\n\n{\n  \"label\": \"鹿邑县\",\n  \"value\": \"411628\" },\n\n{\n  \"label\": \"河南周口经济开发区\",\n  \"value\": \"411671\" },\n\n{\n  \"label\": \"项城市\",\n  \"value\": \"411681\" }],\n\n\n[{\n  \"label\": \"驿城区\",\n  \"value\": \"411702\" },\n\n{\n  \"label\": \"西平县\",\n  \"value\": \"411721\" },\n\n{\n  \"label\": \"上蔡县\",\n  \"value\": \"411722\" },\n\n{\n  \"label\": \"平舆县\",\n  \"value\": \"411723\" },\n\n{\n  \"label\": \"正阳县\",\n  \"value\": \"411724\" },\n\n{\n  \"label\": \"确山县\",\n  \"value\": \"411725\" },\n\n{\n  \"label\": \"泌阳县\",\n  \"value\": \"411726\" },\n\n{\n  \"label\": \"汝南县\",\n  \"value\": \"411727\" },\n\n{\n  \"label\": \"遂平县\",\n  \"value\": \"411728\" },\n\n{\n  \"label\": \"新蔡县\",\n  \"value\": \"411729\" },\n\n{\n  \"label\": \"河南驻马店经济开发区\",\n  \"value\": \"411771\" }],\n\n\n[{\n  \"label\": \"济源市\",\n  \"value\": \"419001\" }]],\n\n\n[\n[{\n  \"label\": \"江岸区\",\n  \"value\": \"420102\" },\n\n{\n  \"label\": \"江汉区\",\n  \"value\": \"420103\" },\n\n{\n  \"label\": \"硚口区\",\n  \"value\": \"420104\" },\n\n{\n  \"label\": \"汉阳区\",\n  \"value\": \"420105\" },\n\n{\n  \"label\": \"武昌区\",\n  \"value\": \"420106\" },\n\n{\n  \"label\": \"青山区\",\n  \"value\": \"420107\" },\n\n{\n  \"label\": \"洪山区\",\n  \"value\": \"420111\" },\n\n{\n  \"label\": \"东西湖区\",\n  \"value\": \"420112\" },\n\n{\n  \"label\": \"汉南区\",\n  \"value\": \"420113\" },\n\n{\n  \"label\": \"蔡甸区\",\n  \"value\": \"420114\" },\n\n{\n  \"label\": \"江夏区\",\n  \"value\": \"420115\" },\n\n{\n  \"label\": \"黄陂区\",\n  \"value\": \"420116\" },\n\n{\n  \"label\": \"新洲区\",\n  \"value\": \"420117\" }],\n\n\n[{\n  \"label\": \"黄石港区\",\n  \"value\": \"420202\" },\n\n{\n  \"label\": \"西塞山区\",\n  \"value\": \"420203\" },\n\n{\n  \"label\": \"下陆区\",\n  \"value\": \"420204\" },\n\n{\n  \"label\": \"铁山区\",\n  \"value\": \"420205\" },\n\n{\n  \"label\": \"阳新县\",\n  \"value\": \"420222\" },\n\n{\n  \"label\": \"大冶市\",\n  \"value\": \"420281\" }],\n\n\n[{\n  \"label\": \"茅箭区\",\n  \"value\": \"420302\" },\n\n{\n  \"label\": \"张湾区\",\n  \"value\": \"420303\" },\n\n{\n  \"label\": \"郧阳区\",\n  \"value\": \"420304\" },\n\n{\n  \"label\": \"郧西县\",\n  \"value\": \"420322\" },\n\n{\n  \"label\": \"竹山县\",\n  \"value\": \"420323\" },\n\n{\n  \"label\": \"竹溪县\",\n  \"value\": \"420324\" },\n\n{\n  \"label\": \"房县\",\n  \"value\": \"420325\" },\n\n{\n  \"label\": \"丹江口市\",\n  \"value\": \"420381\" }],\n\n\n[{\n  \"label\": \"西陵区\",\n  \"value\": \"420502\" },\n\n{\n  \"label\": \"伍家岗区\",\n  \"value\": \"420503\" },\n\n{\n  \"label\": \"点军区\",\n  \"value\": \"420504\" },\n\n{\n  \"label\": \"猇亭区\",\n  \"value\": \"420505\" },\n\n{\n  \"label\": \"夷陵区\",\n  \"value\": \"420506\" },\n\n{\n  \"label\": \"远安县\",\n  \"value\": \"420525\" },\n\n{\n  \"label\": \"兴山县\",\n  \"value\": \"420526\" },\n\n{\n  \"label\": \"秭归县\",\n  \"value\": \"420527\" },\n\n{\n  \"label\": \"长阳土家族自治县\",\n  \"value\": \"420528\" },\n\n{\n  \"label\": \"五峰土家族自治县\",\n  \"value\": \"420529\" },\n\n{\n  \"label\": \"宜都市\",\n  \"value\": \"420581\" },\n\n{\n  \"label\": \"当阳市\",\n  \"value\": \"420582\" },\n\n{\n  \"label\": \"枝江市\",\n  \"value\": \"420583\" }],\n\n\n[{\n  \"label\": \"襄城区\",\n  \"value\": \"420602\" },\n\n{\n  \"label\": \"樊城区\",\n  \"value\": \"420606\" },\n\n{\n  \"label\": \"襄州区\",\n  \"value\": \"420607\" },\n\n{\n  \"label\": \"南漳县\",\n  \"value\": \"420624\" },\n\n{\n  \"label\": \"谷城县\",\n  \"value\": \"420625\" },\n\n{\n  \"label\": \"保康县\",\n  \"value\": \"420626\" },\n\n{\n  \"label\": \"老河口市\",\n  \"value\": \"420682\" },\n\n{\n  \"label\": \"枣阳市\",\n  \"value\": \"420683\" },\n\n{\n  \"label\": \"宜城市\",\n  \"value\": \"420684\" }],\n\n\n[{\n  \"label\": \"梁子湖区\",\n  \"value\": \"420702\" },\n\n{\n  \"label\": \"华容区\",\n  \"value\": \"420703\" },\n\n{\n  \"label\": \"鄂城区\",\n  \"value\": \"420704\" }],\n\n\n[{\n  \"label\": \"东宝区\",\n  \"value\": \"420802\" },\n\n{\n  \"label\": \"掇刀区\",\n  \"value\": \"420804\" },\n\n{\n  \"label\": \"京山县\",\n  \"value\": \"420821\" },\n\n{\n  \"label\": \"沙洋县\",\n  \"value\": \"420822\" },\n\n{\n  \"label\": \"钟祥市\",\n  \"value\": \"420881\" }],\n\n\n[{\n  \"label\": \"孝南区\",\n  \"value\": \"420902\" },\n\n{\n  \"label\": \"孝昌县\",\n  \"value\": \"420921\" },\n\n{\n  \"label\": \"大悟县\",\n  \"value\": \"420922\" },\n\n{\n  \"label\": \"云梦县\",\n  \"value\": \"420923\" },\n\n{\n  \"label\": \"应城市\",\n  \"value\": \"420981\" },\n\n{\n  \"label\": \"安陆市\",\n  \"value\": \"420982\" },\n\n{\n  \"label\": \"汉川市\",\n  \"value\": \"420984\" }],\n\n\n[{\n  \"label\": \"沙市区\",\n  \"value\": \"421002\" },\n\n{\n  \"label\": \"荆州区\",\n  \"value\": \"421003\" },\n\n{\n  \"label\": \"公安县\",\n  \"value\": \"421022\" },\n\n{\n  \"label\": \"监利县\",\n  \"value\": \"421023\" },\n\n{\n  \"label\": \"江陵县\",\n  \"value\": \"421024\" },\n\n{\n  \"label\": \"荆州经济技术开发区\",\n  \"value\": \"421071\" },\n\n{\n  \"label\": \"石首市\",\n  \"value\": \"421081\" },\n\n{\n  \"label\": \"洪湖市\",\n  \"value\": \"421083\" },\n\n{\n  \"label\": \"松滋市\",\n  \"value\": \"421087\" }],\n\n\n[{\n  \"label\": \"黄州区\",\n  \"value\": \"421102\" },\n\n{\n  \"label\": \"团风县\",\n  \"value\": \"421121\" },\n\n{\n  \"label\": \"红安县\",\n  \"value\": \"421122\" },\n\n{\n  \"label\": \"罗田县\",\n  \"value\": \"421123\" },\n\n{\n  \"label\": \"英山县\",\n  \"value\": \"421124\" },\n\n{\n  \"label\": \"浠水县\",\n  \"value\": \"421125\" },\n\n{\n  \"label\": \"蕲春县\",\n  \"value\": \"421126\" },\n\n{\n  \"label\": \"黄梅县\",\n  \"value\": \"421127\" },\n\n{\n  \"label\": \"龙感湖管理区\",\n  \"value\": \"421171\" },\n\n{\n  \"label\": \"麻城市\",\n  \"value\": \"421181\" },\n\n{\n  \"label\": \"武穴市\",\n  \"value\": \"421182\" }],\n\n\n[{\n  \"label\": \"咸安区\",\n  \"value\": \"421202\" },\n\n{\n  \"label\": \"嘉鱼县\",\n  \"value\": \"421221\" },\n\n{\n  \"label\": \"通城县\",\n  \"value\": \"421222\" },\n\n{\n  \"label\": \"崇阳县\",\n  \"value\": \"421223\" },\n\n{\n  \"label\": \"通山县\",\n  \"value\": \"421224\" },\n\n{\n  \"label\": \"赤壁市\",\n  \"value\": \"421281\" }],\n\n\n[{\n  \"label\": \"曾都区\",\n  \"value\": \"421303\" },\n\n{\n  \"label\": \"随县\",\n  \"value\": \"421321\" },\n\n{\n  \"label\": \"广水市\",\n  \"value\": \"421381\" }],\n\n\n[{\n  \"label\": \"恩施市\",\n  \"value\": \"422801\" },\n\n{\n  \"label\": \"利川市\",\n  \"value\": \"422802\" },\n\n{\n  \"label\": \"建始县\",\n  \"value\": \"422822\" },\n\n{\n  \"label\": \"巴东县\",\n  \"value\": \"422823\" },\n\n{\n  \"label\": \"宣恩县\",\n  \"value\": \"422825\" },\n\n{\n  \"label\": \"咸丰县\",\n  \"value\": \"422826\" },\n\n{\n  \"label\": \"来凤县\",\n  \"value\": \"422827\" },\n\n{\n  \"label\": \"鹤峰县\",\n  \"value\": \"422828\" }],\n\n\n[{\n  \"label\": \"仙桃市\",\n  \"value\": \"429004\" },\n\n{\n  \"label\": \"潜江市\",\n  \"value\": \"429005\" },\n\n{\n  \"label\": \"天门市\",\n  \"value\": \"429006\" },\n\n{\n  \"label\": \"神农架林区\",\n  \"value\": \"429021\" }]],\n\n\n\n[\n[{\n  \"label\": \"芙蓉区\",\n  \"value\": \"430102\" },\n\n{\n  \"label\": \"天心区\",\n  \"value\": \"430103\" },\n\n{\n  \"label\": \"岳麓区\",\n  \"value\": \"430104\" },\n\n{\n  \"label\": \"开福区\",\n  \"value\": \"430105\" },\n\n{\n  \"label\": \"雨花区\",\n  \"value\": \"430111\" },\n\n{\n  \"label\": \"望城区\",\n  \"value\": \"430112\" },\n\n{\n  \"label\": \"长沙县\",\n  \"value\": \"430121\" },\n\n{\n  \"label\": \"浏阳市\",\n  \"value\": \"430181\" },\n\n{\n  \"label\": \"宁乡市\",\n  \"value\": \"430182\" }],\n\n\n[{\n  \"label\": \"荷塘区\",\n  \"value\": \"430202\" },\n\n{\n  \"label\": \"芦淞区\",\n  \"value\": \"430203\" },\n\n{\n  \"label\": \"石峰区\",\n  \"value\": \"430204\" },\n\n{\n  \"label\": \"天元区\",\n  \"value\": \"430211\" },\n\n{\n  \"label\": \"株洲县\",\n  \"value\": \"430221\" },\n\n{\n  \"label\": \"攸县\",\n  \"value\": \"430223\" },\n\n{\n  \"label\": \"茶陵县\",\n  \"value\": \"430224\" },\n\n{\n  \"label\": \"炎陵县\",\n  \"value\": \"430225\" },\n\n{\n  \"label\": \"云龙示范区\",\n  \"value\": \"430271\" },\n\n{\n  \"label\": \"醴陵市\",\n  \"value\": \"430281\" }],\n\n\n[{\n  \"label\": \"雨湖区\",\n  \"value\": \"430302\" },\n\n{\n  \"label\": \"岳塘区\",\n  \"value\": \"430304\" },\n\n{\n  \"label\": \"湘潭县\",\n  \"value\": \"430321\" },\n\n{\n  \"label\": \"湖南湘潭高新技术产业园区\",\n  \"value\": \"430371\" },\n\n{\n  \"label\": \"湘潭昭山示范区\",\n  \"value\": \"430372\" },\n\n{\n  \"label\": \"湘潭九华示范区\",\n  \"value\": \"430373\" },\n\n{\n  \"label\": \"湘乡市\",\n  \"value\": \"430381\" },\n\n{\n  \"label\": \"韶山市\",\n  \"value\": \"430382\" }],\n\n\n[{\n  \"label\": \"珠晖区\",\n  \"value\": \"430405\" },\n\n{\n  \"label\": \"雁峰区\",\n  \"value\": \"430406\" },\n\n{\n  \"label\": \"石鼓区\",\n  \"value\": \"430407\" },\n\n{\n  \"label\": \"蒸湘区\",\n  \"value\": \"430408\" },\n\n{\n  \"label\": \"南岳区\",\n  \"value\": \"430412\" },\n\n{\n  \"label\": \"衡阳县\",\n  \"value\": \"430421\" },\n\n{\n  \"label\": \"衡南县\",\n  \"value\": \"430422\" },\n\n{\n  \"label\": \"衡山县\",\n  \"value\": \"430423\" },\n\n{\n  \"label\": \"衡东县\",\n  \"value\": \"430424\" },\n\n{\n  \"label\": \"祁东县\",\n  \"value\": \"430426\" },\n\n{\n  \"label\": \"衡阳综合保税区\",\n  \"value\": \"430471\" },\n\n{\n  \"label\": \"湖南衡阳高新技术产业园区\",\n  \"value\": \"430472\" },\n\n{\n  \"label\": \"湖南衡阳松木经济开发区\",\n  \"value\": \"430473\" },\n\n{\n  \"label\": \"耒阳市\",\n  \"value\": \"430481\" },\n\n{\n  \"label\": \"常宁市\",\n  \"value\": \"430482\" }],\n\n\n[{\n  \"label\": \"双清区\",\n  \"value\": \"430502\" },\n\n{\n  \"label\": \"大祥区\",\n  \"value\": \"430503\" },\n\n{\n  \"label\": \"北塔区\",\n  \"value\": \"430511\" },\n\n{\n  \"label\": \"邵东县\",\n  \"value\": \"430521\" },\n\n{\n  \"label\": \"新邵县\",\n  \"value\": \"430522\" },\n\n{\n  \"label\": \"邵阳县\",\n  \"value\": \"430523\" },\n\n{\n  \"label\": \"隆回县\",\n  \"value\": \"430524\" },\n\n{\n  \"label\": \"洞口县\",\n  \"value\": \"430525\" },\n\n{\n  \"label\": \"绥宁县\",\n  \"value\": \"430527\" },\n\n{\n  \"label\": \"新宁县\",\n  \"value\": \"430528\" },\n\n{\n  \"label\": \"城步苗族自治县\",\n  \"value\": \"430529\" },\n\n{\n  \"label\": \"武冈市\",\n  \"value\": \"430581\" }],\n\n\n[{\n  \"label\": \"岳阳楼区\",\n  \"value\": \"430602\" },\n\n{\n  \"label\": \"云溪区\",\n  \"value\": \"430603\" },\n\n{\n  \"label\": \"君山区\",\n  \"value\": \"430611\" },\n\n{\n  \"label\": \"岳阳县\",\n  \"value\": \"430621\" },\n\n{\n  \"label\": \"华容县\",\n  \"value\": \"430623\" },\n\n{\n  \"label\": \"湘阴县\",\n  \"value\": \"430624\" },\n\n{\n  \"label\": \"平江县\",\n  \"value\": \"430626\" },\n\n{\n  \"label\": \"岳阳市屈原管理区\",\n  \"value\": \"430671\" },\n\n{\n  \"label\": \"汨罗市\",\n  \"value\": \"430681\" },\n\n{\n  \"label\": \"临湘市\",\n  \"value\": \"430682\" }],\n\n\n[{\n  \"label\": \"武陵区\",\n  \"value\": \"430702\" },\n\n{\n  \"label\": \"鼎城区\",\n  \"value\": \"430703\" },\n\n{\n  \"label\": \"安乡县\",\n  \"value\": \"430721\" },\n\n{\n  \"label\": \"汉寿县\",\n  \"value\": \"430722\" },\n\n{\n  \"label\": \"澧县\",\n  \"value\": \"430723\" },\n\n{\n  \"label\": \"临澧县\",\n  \"value\": \"430724\" },\n\n{\n  \"label\": \"桃源县\",\n  \"value\": \"430725\" },\n\n{\n  \"label\": \"石门县\",\n  \"value\": \"430726\" },\n\n{\n  \"label\": \"常德市西洞庭管理区\",\n  \"value\": \"430771\" },\n\n{\n  \"label\": \"津市市\",\n  \"value\": \"430781\" }],\n\n\n[{\n  \"label\": \"永定区\",\n  \"value\": \"430802\" },\n\n{\n  \"label\": \"武陵源区\",\n  \"value\": \"430811\" },\n\n{\n  \"label\": \"慈利县\",\n  \"value\": \"430821\" },\n\n{\n  \"label\": \"桑植县\",\n  \"value\": \"430822\" }],\n\n\n[{\n  \"label\": \"资阳区\",\n  \"value\": \"430902\" },\n\n{\n  \"label\": \"赫山区\",\n  \"value\": \"430903\" },\n\n{\n  \"label\": \"南县\",\n  \"value\": \"430921\" },\n\n{\n  \"label\": \"桃江县\",\n  \"value\": \"430922\" },\n\n{\n  \"label\": \"安化县\",\n  \"value\": \"430923\" },\n\n{\n  \"label\": \"益阳市大通湖管理区\",\n  \"value\": \"430971\" },\n\n{\n  \"label\": \"湖南益阳高新技术产业园区\",\n  \"value\": \"430972\" },\n\n{\n  \"label\": \"沅江市\",\n  \"value\": \"430981\" }],\n\n\n[{\n  \"label\": \"北湖区\",\n  \"value\": \"431002\" },\n\n{\n  \"label\": \"苏仙区\",\n  \"value\": \"431003\" },\n\n{\n  \"label\": \"桂阳县\",\n  \"value\": \"431021\" },\n\n{\n  \"label\": \"宜章县\",\n  \"value\": \"431022\" },\n\n{\n  \"label\": \"永兴县\",\n  \"value\": \"431023\" },\n\n{\n  \"label\": \"嘉禾县\",\n  \"value\": \"431024\" },\n\n{\n  \"label\": \"临武县\",\n  \"value\": \"431025\" },\n\n{\n  \"label\": \"汝城县\",\n  \"value\": \"431026\" },\n\n{\n  \"label\": \"桂东县\",\n  \"value\": \"431027\" },\n\n{\n  \"label\": \"安仁县\",\n  \"value\": \"431028\" },\n\n{\n  \"label\": \"资兴市\",\n  \"value\": \"431081\" }],\n\n\n[{\n  \"label\": \"零陵区\",\n  \"value\": \"431102\" },\n\n{\n  \"label\": \"冷水滩区\",\n  \"value\": \"431103\" },\n\n{\n  \"label\": \"祁阳县\",\n  \"value\": \"431121\" },\n\n{\n  \"label\": \"东安县\",\n  \"value\": \"431122\" },\n\n{\n  \"label\": \"双牌县\",\n  \"value\": \"431123\" },\n\n{\n  \"label\": \"道县\",\n  \"value\": \"431124\" },\n\n{\n  \"label\": \"江永县\",\n  \"value\": \"431125\" },\n\n{\n  \"label\": \"宁远县\",\n  \"value\": \"431126\" },\n\n{\n  \"label\": \"蓝山县\",\n  \"value\": \"431127\" },\n\n{\n  \"label\": \"新田县\",\n  \"value\": \"431128\" },\n\n{\n  \"label\": \"江华瑶族自治县\",\n  \"value\": \"431129\" },\n\n{\n  \"label\": \"永州经济技术开发区\",\n  \"value\": \"431171\" },\n\n{\n  \"label\": \"永州市金洞管理区\",\n  \"value\": \"431172\" },\n\n{\n  \"label\": \"永州市回龙圩管理区\",\n  \"value\": \"431173\" }],\n\n\n[{\n  \"label\": \"鹤城区\",\n  \"value\": \"431202\" },\n\n{\n  \"label\": \"中方县\",\n  \"value\": \"431221\" },\n\n{\n  \"label\": \"沅陵县\",\n  \"value\": \"431222\" },\n\n{\n  \"label\": \"辰溪县\",\n  \"value\": \"431223\" },\n\n{\n  \"label\": \"溆浦县\",\n  \"value\": \"431224\" },\n\n{\n  \"label\": \"会同县\",\n  \"value\": \"431225\" },\n\n{\n  \"label\": \"麻阳苗族自治县\",\n  \"value\": \"431226\" },\n\n{\n  \"label\": \"新晃侗族自治县\",\n  \"value\": \"431227\" },\n\n{\n  \"label\": \"芷江侗族自治县\",\n  \"value\": \"431228\" },\n\n{\n  \"label\": \"靖州苗族侗族自治县\",\n  \"value\": \"431229\" },\n\n{\n  \"label\": \"通道侗族自治县\",\n  \"value\": \"431230\" },\n\n{\n  \"label\": \"怀化市洪江管理区\",\n  \"value\": \"431271\" },\n\n{\n  \"label\": \"洪江市\",\n  \"value\": \"431281\" }],\n\n\n[{\n  \"label\": \"娄星区\",\n  \"value\": \"431302\" },\n\n{\n  \"label\": \"双峰县\",\n  \"value\": \"431321\" },\n\n{\n  \"label\": \"新化县\",\n  \"value\": \"431322\" },\n\n{\n  \"label\": \"冷水江市\",\n  \"value\": \"431381\" },\n\n{\n  \"label\": \"涟源市\",\n  \"value\": \"431382\" }],\n\n\n[{\n  \"label\": \"吉首市\",\n  \"value\": \"433101\" },\n\n{\n  \"label\": \"泸溪县\",\n  \"value\": \"433122\" },\n\n{\n  \"label\": \"凤凰县\",\n  \"value\": \"433123\" },\n\n{\n  \"label\": \"花垣县\",\n  \"value\": \"433124\" },\n\n{\n  \"label\": \"保靖县\",\n  \"value\": \"433125\" },\n\n{\n  \"label\": \"古丈县\",\n  \"value\": \"433126\" },\n\n{\n  \"label\": \"永顺县\",\n  \"value\": \"433127\" },\n\n{\n  \"label\": \"龙山县\",\n  \"value\": \"433130\" },\n\n{\n  \"label\": \"湖南吉首经济开发区\",\n  \"value\": \"433172\" },\n\n{\n  \"label\": \"湖南永顺经济开发区\",\n  \"value\": \"433173\" }]],\n\n\n\n[\n[{\n  \"label\": \"荔湾区\",\n  \"value\": \"440103\" },\n\n{\n  \"label\": \"越秀区\",\n  \"value\": \"440104\" },\n\n{\n  \"label\": \"海珠区\",\n  \"value\": \"440105\" },\n\n{\n  \"label\": \"天河区\",\n  \"value\": \"440106\" },\n\n{\n  \"label\": \"白云区\",\n  \"value\": \"440111\" },\n\n{\n  \"label\": \"黄埔区\",\n  \"value\": \"440112\" },\n\n{\n  \"label\": \"番禺区\",\n  \"value\": \"440113\" },\n\n{\n  \"label\": \"花都区\",\n  \"value\": \"440114\" },\n\n{\n  \"label\": \"南沙区\",\n  \"value\": \"440115\" },\n\n{\n  \"label\": \"从化区\",\n  \"value\": \"440117\" },\n\n{\n  \"label\": \"增城区\",\n  \"value\": \"440118\" }],\n\n\n[{\n  \"label\": \"武江区\",\n  \"value\": \"440203\" },\n\n{\n  \"label\": \"浈江区\",\n  \"value\": \"440204\" },\n\n{\n  \"label\": \"曲江区\",\n  \"value\": \"440205\" },\n\n{\n  \"label\": \"始兴县\",\n  \"value\": \"440222\" },\n\n{\n  \"label\": \"仁化县\",\n  \"value\": \"440224\" },\n\n{\n  \"label\": \"翁源县\",\n  \"value\": \"440229\" },\n\n{\n  \"label\": \"乳源瑶族自治县\",\n  \"value\": \"440232\" },\n\n{\n  \"label\": \"新丰县\",\n  \"value\": \"440233\" },\n\n{\n  \"label\": \"乐昌市\",\n  \"value\": \"440281\" },\n\n{\n  \"label\": \"南雄市\",\n  \"value\": \"440282\" }],\n\n\n[{\n  \"label\": \"罗湖区\",\n  \"value\": \"440303\" },\n\n{\n  \"label\": \"福田区\",\n  \"value\": \"440304\" },\n\n{\n  \"label\": \"南山区\",\n  \"value\": \"440305\" },\n\n{\n  \"label\": \"宝安区\",\n  \"value\": \"440306\" },\n\n{\n  \"label\": \"龙岗区\",\n  \"value\": \"440307\" },\n\n{\n  \"label\": \"盐田区\",\n  \"value\": \"440308\" },\n\n{\n  \"label\": \"龙华区\",\n  \"value\": \"440309\" },\n\n{\n  \"label\": \"坪山区\",\n  \"value\": \"440310\" }],\n\n\n[{\n  \"label\": \"香洲区\",\n  \"value\": \"440402\" },\n\n{\n  \"label\": \"斗门区\",\n  \"value\": \"440403\" },\n\n{\n  \"label\": \"金湾区\",\n  \"value\": \"440404\" }],\n\n\n[{\n  \"label\": \"龙湖区\",\n  \"value\": \"440507\" },\n\n{\n  \"label\": \"金平区\",\n  \"value\": \"440511\" },\n\n{\n  \"label\": \"濠江区\",\n  \"value\": \"440512\" },\n\n{\n  \"label\": \"潮阳区\",\n  \"value\": \"440513\" },\n\n{\n  \"label\": \"潮南区\",\n  \"value\": \"440514\" },\n\n{\n  \"label\": \"澄海区\",\n  \"value\": \"440515\" },\n\n{\n  \"label\": \"南澳县\",\n  \"value\": \"440523\" }],\n\n\n[{\n  \"label\": \"禅城区\",\n  \"value\": \"440604\" },\n\n{\n  \"label\": \"南海区\",\n  \"value\": \"440605\" },\n\n{\n  \"label\": \"顺德区\",\n  \"value\": \"440606\" },\n\n{\n  \"label\": \"三水区\",\n  \"value\": \"440607\" },\n\n{\n  \"label\": \"高明区\",\n  \"value\": \"440608\" }],\n\n\n[{\n  \"label\": \"蓬江区\",\n  \"value\": \"440703\" },\n\n{\n  \"label\": \"江海区\",\n  \"value\": \"440704\" },\n\n{\n  \"label\": \"新会区\",\n  \"value\": \"440705\" },\n\n{\n  \"label\": \"台山市\",\n  \"value\": \"440781\" },\n\n{\n  \"label\": \"开平市\",\n  \"value\": \"440783\" },\n\n{\n  \"label\": \"鹤山市\",\n  \"value\": \"440784\" },\n\n{\n  \"label\": \"恩平市\",\n  \"value\": \"440785\" }],\n\n\n[{\n  \"label\": \"赤坎区\",\n  \"value\": \"440802\" },\n\n{\n  \"label\": \"霞山区\",\n  \"value\": \"440803\" },\n\n{\n  \"label\": \"坡头区\",\n  \"value\": \"440804\" },\n\n{\n  \"label\": \"麻章区\",\n  \"value\": \"440811\" },\n\n{\n  \"label\": \"遂溪县\",\n  \"value\": \"440823\" },\n\n{\n  \"label\": \"徐闻县\",\n  \"value\": \"440825\" },\n\n{\n  \"label\": \"廉江市\",\n  \"value\": \"440881\" },\n\n{\n  \"label\": \"雷州市\",\n  \"value\": \"440882\" },\n\n{\n  \"label\": \"吴川市\",\n  \"value\": \"440883\" }],\n\n\n[{\n  \"label\": \"茂南区\",\n  \"value\": \"440902\" },\n\n{\n  \"label\": \"电白区\",\n  \"value\": \"440904\" },\n\n{\n  \"label\": \"高州市\",\n  \"value\": \"440981\" },\n\n{\n  \"label\": \"化州市\",\n  \"value\": \"440982\" },\n\n{\n  \"label\": \"信宜市\",\n  \"value\": \"440983\" }],\n\n\n[{\n  \"label\": \"端州区\",\n  \"value\": \"441202\" },\n\n{\n  \"label\": \"鼎湖区\",\n  \"value\": \"441203\" },\n\n{\n  \"label\": \"高要区\",\n  \"value\": \"441204\" },\n\n{\n  \"label\": \"广宁县\",\n  \"value\": \"441223\" },\n\n{\n  \"label\": \"怀集县\",\n  \"value\": \"441224\" },\n\n{\n  \"label\": \"封开县\",\n  \"value\": \"441225\" },\n\n{\n  \"label\": \"德庆县\",\n  \"value\": \"441226\" },\n\n{\n  \"label\": \"四会市\",\n  \"value\": \"441284\" }],\n\n\n[{\n  \"label\": \"惠城区\",\n  \"value\": \"441302\" },\n\n{\n  \"label\": \"惠阳区\",\n  \"value\": \"441303\" },\n\n{\n  \"label\": \"博罗县\",\n  \"value\": \"441322\" },\n\n{\n  \"label\": \"惠东县\",\n  \"value\": \"441323\" },\n\n{\n  \"label\": \"龙门县\",\n  \"value\": \"441324\" }],\n\n\n[{\n  \"label\": \"梅江区\",\n  \"value\": \"441402\" },\n\n{\n  \"label\": \"梅县区\",\n  \"value\": \"441403\" },\n\n{\n  \"label\": \"大埔县\",\n  \"value\": \"441422\" },\n\n{\n  \"label\": \"丰顺县\",\n  \"value\": \"441423\" },\n\n{\n  \"label\": \"五华县\",\n  \"value\": \"441424\" },\n\n{\n  \"label\": \"平远县\",\n  \"value\": \"441426\" },\n\n{\n  \"label\": \"蕉岭县\",\n  \"value\": \"441427\" },\n\n{\n  \"label\": \"兴宁市\",\n  \"value\": \"441481\" }],\n\n\n[{\n  \"label\": \"城区\",\n  \"value\": \"441502\" },\n\n{\n  \"label\": \"海丰县\",\n  \"value\": \"441521\" },\n\n{\n  \"label\": \"陆河县\",\n  \"value\": \"441523\" },\n\n{\n  \"label\": \"陆丰市\",\n  \"value\": \"441581\" }],\n\n\n[{\n  \"label\": \"源城区\",\n  \"value\": \"441602\" },\n\n{\n  \"label\": \"紫金县\",\n  \"value\": \"441621\" },\n\n{\n  \"label\": \"龙川县\",\n  \"value\": \"441622\" },\n\n{\n  \"label\": \"连平县\",\n  \"value\": \"441623\" },\n\n{\n  \"label\": \"和平县\",\n  \"value\": \"441624\" },\n\n{\n  \"label\": \"东源县\",\n  \"value\": \"441625\" }],\n\n\n[{\n  \"label\": \"江城区\",\n  \"value\": \"441702\" },\n\n{\n  \"label\": \"阳东区\",\n  \"value\": \"441704\" },\n\n{\n  \"label\": \"阳西县\",\n  \"value\": \"441721\" },\n\n{\n  \"label\": \"阳春市\",\n  \"value\": \"441781\" }],\n\n\n[{\n  \"label\": \"清城区\",\n  \"value\": \"441802\" },\n\n{\n  \"label\": \"清新区\",\n  \"value\": \"441803\" },\n\n{\n  \"label\": \"佛冈县\",\n  \"value\": \"441821\" },\n\n{\n  \"label\": \"阳山县\",\n  \"value\": \"441823\" },\n\n{\n  \"label\": \"连山壮族瑶族自治县\",\n  \"value\": \"441825\" },\n\n{\n  \"label\": \"连南瑶族自治县\",\n  \"value\": \"441826\" },\n\n{\n  \"label\": \"英德市\",\n  \"value\": \"441881\" },\n\n{\n  \"label\": \"连州市\",\n  \"value\": \"441882\" }],\n\n\n[{\n  \"label\": \"东莞市\",\n  \"value\": \"441900\" }],\n\n[{\n  \"label\": \"中山市\",\n  \"value\": \"442000\" }],\n\n[{\n  \"label\": \"湘桥区\",\n  \"value\": \"445102\" },\n\n{\n  \"label\": \"潮安区\",\n  \"value\": \"445103\" },\n\n{\n  \"label\": \"饶平县\",\n  \"value\": \"445122\" }],\n\n\n[{\n  \"label\": \"榕城区\",\n  \"value\": \"445202\" },\n\n{\n  \"label\": \"揭东区\",\n  \"value\": \"445203\" },\n\n{\n  \"label\": \"揭西县\",\n  \"value\": \"445222\" },\n\n{\n  \"label\": \"惠来县\",\n  \"value\": \"445224\" },\n\n{\n  \"label\": \"普宁市\",\n  \"value\": \"445281\" }],\n\n\n[{\n  \"label\": \"云城区\",\n  \"value\": \"445302\" },\n\n{\n  \"label\": \"云安区\",\n  \"value\": \"445303\" },\n\n{\n  \"label\": \"新兴县\",\n  \"value\": \"445321\" },\n\n{\n  \"label\": \"郁南县\",\n  \"value\": \"445322\" },\n\n{\n  \"label\": \"罗定市\",\n  \"value\": \"445381\" }]],\n\n\n\n[\n[{\n  \"label\": \"兴宁区\",\n  \"value\": \"450102\" },\n\n{\n  \"label\": \"青秀区\",\n  \"value\": \"450103\" },\n\n{\n  \"label\": \"江南区\",\n  \"value\": \"450105\" },\n\n{\n  \"label\": \"西乡塘区\",\n  \"value\": \"450107\" },\n\n{\n  \"label\": \"良庆区\",\n  \"value\": \"450108\" },\n\n{\n  \"label\": \"邕宁区\",\n  \"value\": \"450109\" },\n\n{\n  \"label\": \"武鸣区\",\n  \"value\": \"450110\" },\n\n{\n  \"label\": \"隆安县\",\n  \"value\": \"450123\" },\n\n{\n  \"label\": \"马山县\",\n  \"value\": \"450124\" },\n\n{\n  \"label\": \"上林县\",\n  \"value\": \"450125\" },\n\n{\n  \"label\": \"宾阳县\",\n  \"value\": \"450126\" },\n\n{\n  \"label\": \"横县\",\n  \"value\": \"450127\" }],\n\n\n[{\n  \"label\": \"城中区\",\n  \"value\": \"450202\" },\n\n{\n  \"label\": \"鱼峰区\",\n  \"value\": \"450203\" },\n\n{\n  \"label\": \"柳南区\",\n  \"value\": \"450204\" },\n\n{\n  \"label\": \"柳北区\",\n  \"value\": \"450205\" },\n\n{\n  \"label\": \"柳江区\",\n  \"value\": \"450206\" },\n\n{\n  \"label\": \"柳城县\",\n  \"value\": \"450222\" },\n\n{\n  \"label\": \"鹿寨县\",\n  \"value\": \"450223\" },\n\n{\n  \"label\": \"融安县\",\n  \"value\": \"450224\" },\n\n{\n  \"label\": \"融水苗族自治县\",\n  \"value\": \"450225\" },\n\n{\n  \"label\": \"三江侗族自治县\",\n  \"value\": \"450226\" }],\n\n\n[{\n  \"label\": \"秀峰区\",\n  \"value\": \"450302\" },\n\n{\n  \"label\": \"叠彩区\",\n  \"value\": \"450303\" },\n\n{\n  \"label\": \"象山区\",\n  \"value\": \"450304\" },\n\n{\n  \"label\": \"七星区\",\n  \"value\": \"450305\" },\n\n{\n  \"label\": \"雁山区\",\n  \"value\": \"450311\" },\n\n{\n  \"label\": \"临桂区\",\n  \"value\": \"450312\" },\n\n{\n  \"label\": \"阳朔县\",\n  \"value\": \"450321\" },\n\n{\n  \"label\": \"灵川县\",\n  \"value\": \"450323\" },\n\n{\n  \"label\": \"全州县\",\n  \"value\": \"450324\" },\n\n{\n  \"label\": \"兴安县\",\n  \"value\": \"450325\" },\n\n{\n  \"label\": \"永福县\",\n  \"value\": \"450326\" },\n\n{\n  \"label\": \"灌阳县\",\n  \"value\": \"450327\" },\n\n{\n  \"label\": \"龙胜各族自治县\",\n  \"value\": \"450328\" },\n\n{\n  \"label\": \"资源县\",\n  \"value\": \"450329\" },\n\n{\n  \"label\": \"平乐县\",\n  \"value\": \"450330\" },\n\n{\n  \"label\": \"荔浦县\",\n  \"value\": \"450331\" },\n\n{\n  \"label\": \"恭城瑶族自治县\",\n  \"value\": \"450332\" }],\n\n\n[{\n  \"label\": \"万秀区\",\n  \"value\": \"450403\" },\n\n{\n  \"label\": \"长洲区\",\n  \"value\": \"450405\" },\n\n{\n  \"label\": \"龙圩区\",\n  \"value\": \"450406\" },\n\n{\n  \"label\": \"苍梧县\",\n  \"value\": \"450421\" },\n\n{\n  \"label\": \"藤县\",\n  \"value\": \"450422\" },\n\n{\n  \"label\": \"蒙山县\",\n  \"value\": \"450423\" },\n\n{\n  \"label\": \"岑溪市\",\n  \"value\": \"450481\" }],\n\n\n[{\n  \"label\": \"海城区\",\n  \"value\": \"450502\" },\n\n{\n  \"label\": \"银海区\",\n  \"value\": \"450503\" },\n\n{\n  \"label\": \"铁山港区\",\n  \"value\": \"450512\" },\n\n{\n  \"label\": \"合浦县\",\n  \"value\": \"450521\" }],\n\n\n[{\n  \"label\": \"港口区\",\n  \"value\": \"450602\" },\n\n{\n  \"label\": \"防城区\",\n  \"value\": \"450603\" },\n\n{\n  \"label\": \"上思县\",\n  \"value\": \"450621\" },\n\n{\n  \"label\": \"东兴市\",\n  \"value\": \"450681\" }],\n\n\n[{\n  \"label\": \"钦南区\",\n  \"value\": \"450702\" },\n\n{\n  \"label\": \"钦北区\",\n  \"value\": \"450703\" },\n\n{\n  \"label\": \"灵山县\",\n  \"value\": \"450721\" },\n\n{\n  \"label\": \"浦北县\",\n  \"value\": \"450722\" }],\n\n\n[{\n  \"label\": \"港北区\",\n  \"value\": \"450802\" },\n\n{\n  \"label\": \"港南区\",\n  \"value\": \"450803\" },\n\n{\n  \"label\": \"覃塘区\",\n  \"value\": \"450804\" },\n\n{\n  \"label\": \"平南县\",\n  \"value\": \"450821\" },\n\n{\n  \"label\": \"桂平市\",\n  \"value\": \"450881\" }],\n\n\n[{\n  \"label\": \"玉州区\",\n  \"value\": \"450902\" },\n\n{\n  \"label\": \"福绵区\",\n  \"value\": \"450903\" },\n\n{\n  \"label\": \"容县\",\n  \"value\": \"450921\" },\n\n{\n  \"label\": \"陆川县\",\n  \"value\": \"450922\" },\n\n{\n  \"label\": \"博白县\",\n  \"value\": \"450923\" },\n\n{\n  \"label\": \"兴业县\",\n  \"value\": \"450924\" },\n\n{\n  \"label\": \"北流市\",\n  \"value\": \"450981\" }],\n\n\n[{\n  \"label\": \"右江区\",\n  \"value\": \"451002\" },\n\n{\n  \"label\": \"田阳县\",\n  \"value\": \"451021\" },\n\n{\n  \"label\": \"田东县\",\n  \"value\": \"451022\" },\n\n{\n  \"label\": \"平果县\",\n  \"value\": \"451023\" },\n\n{\n  \"label\": \"德保县\",\n  \"value\": \"451024\" },\n\n{\n  \"label\": \"那坡县\",\n  \"value\": \"451026\" },\n\n{\n  \"label\": \"凌云县\",\n  \"value\": \"451027\" },\n\n{\n  \"label\": \"乐业县\",\n  \"value\": \"451028\" },\n\n{\n  \"label\": \"田林县\",\n  \"value\": \"451029\" },\n\n{\n  \"label\": \"西林县\",\n  \"value\": \"451030\" },\n\n{\n  \"label\": \"隆林各族自治县\",\n  \"value\": \"451031\" },\n\n{\n  \"label\": \"靖西市\",\n  \"value\": \"451081\" }],\n\n\n[{\n  \"label\": \"八步区\",\n  \"value\": \"451102\" },\n\n{\n  \"label\": \"平桂区\",\n  \"value\": \"451103\" },\n\n{\n  \"label\": \"昭平县\",\n  \"value\": \"451121\" },\n\n{\n  \"label\": \"钟山县\",\n  \"value\": \"451122\" },\n\n{\n  \"label\": \"富川瑶族自治县\",\n  \"value\": \"451123\" }],\n\n\n[{\n  \"label\": \"金城江区\",\n  \"value\": \"451202\" },\n\n{\n  \"label\": \"宜州区\",\n  \"value\": \"451203\" },\n\n{\n  \"label\": \"南丹县\",\n  \"value\": \"451221\" },\n\n{\n  \"label\": \"天峨县\",\n  \"value\": \"451222\" },\n\n{\n  \"label\": \"凤山县\",\n  \"value\": \"451223\" },\n\n{\n  \"label\": \"东兰县\",\n  \"value\": \"451224\" },\n\n{\n  \"label\": \"罗城仫佬族自治县\",\n  \"value\": \"451225\" },\n\n{\n  \"label\": \"环江毛南族自治县\",\n  \"value\": \"451226\" },\n\n{\n  \"label\": \"巴马瑶族自治县\",\n  \"value\": \"451227\" },\n\n{\n  \"label\": \"都安瑶族自治县\",\n  \"value\": \"451228\" },\n\n{\n  \"label\": \"大化瑶族自治县\",\n  \"value\": \"451229\" }],\n\n\n[{\n  \"label\": \"兴宾区\",\n  \"value\": \"451302\" },\n\n{\n  \"label\": \"忻城县\",\n  \"value\": \"451321\" },\n\n{\n  \"label\": \"象州县\",\n  \"value\": \"451322\" },\n\n{\n  \"label\": \"武宣县\",\n  \"value\": \"451323\" },\n\n{\n  \"label\": \"金秀瑶族自治县\",\n  \"value\": \"451324\" },\n\n{\n  \"label\": \"合山市\",\n  \"value\": \"451381\" }],\n\n\n[{\n  \"label\": \"江州区\",\n  \"value\": \"451402\" },\n\n{\n  \"label\": \"扶绥县\",\n  \"value\": \"451421\" },\n\n{\n  \"label\": \"宁明县\",\n  \"value\": \"451422\" },\n\n{\n  \"label\": \"龙州县\",\n  \"value\": \"451423\" },\n\n{\n  \"label\": \"大新县\",\n  \"value\": \"451424\" },\n\n{\n  \"label\": \"天等县\",\n  \"value\": \"451425\" },\n\n{\n  \"label\": \"凭祥市\",\n  \"value\": \"451481\" }]],\n\n\n\n[\n[{\n  \"label\": \"秀英区\",\n  \"value\": \"460105\" },\n\n{\n  \"label\": \"龙华区\",\n  \"value\": \"460106\" },\n\n{\n  \"label\": \"琼山区\",\n  \"value\": \"460107\" },\n\n{\n  \"label\": \"美兰区\",\n  \"value\": \"460108\" }],\n\n\n[{\n  \"label\": \"海棠区\",\n  \"value\": \"460202\" },\n\n{\n  \"label\": \"吉阳区\",\n  \"value\": \"460203\" },\n\n{\n  \"label\": \"天涯区\",\n  \"value\": \"460204\" },\n\n{\n  \"label\": \"崖州区\",\n  \"value\": \"460205\" }],\n\n\n[{\n  \"label\": \"西沙群岛\",\n  \"value\": \"460321\" },\n\n{\n  \"label\": \"南沙群岛\",\n  \"value\": \"460322\" },\n\n{\n  \"label\": \"中沙群岛的岛礁及其海域\",\n  \"value\": \"460323\" }],\n\n\n[{\n  \"label\": \"儋州市\",\n  \"value\": \"460400\" }],\n\n[{\n  \"label\": \"五指山市\",\n  \"value\": \"469001\" },\n\n{\n  \"label\": \"琼海市\",\n  \"value\": \"469002\" },\n\n{\n  \"label\": \"文昌市\",\n  \"value\": \"469005\" },\n\n{\n  \"label\": \"万宁市\",\n  \"value\": \"469006\" },\n\n{\n  \"label\": \"东方市\",\n  \"value\": \"469007\" },\n\n{\n  \"label\": \"定安县\",\n  \"value\": \"469021\" },\n\n{\n  \"label\": \"屯昌县\",\n  \"value\": \"469022\" },\n\n{\n  \"label\": \"澄迈县\",\n  \"value\": \"469023\" },\n\n{\n  \"label\": \"临高县\",\n  \"value\": \"469024\" },\n\n{\n  \"label\": \"白沙黎族自治县\",\n  \"value\": \"469025\" },\n\n{\n  \"label\": \"昌江黎族自治县\",\n  \"value\": \"469026\" },\n\n{\n  \"label\": \"乐东黎族自治县\",\n  \"value\": \"469027\" },\n\n{\n  \"label\": \"陵水黎族自治县\",\n  \"value\": \"469028\" },\n\n{\n  \"label\": \"保亭黎族苗族自治县\",\n  \"value\": \"469029\" },\n\n{\n  \"label\": \"琼中黎族苗族自治县\",\n  \"value\": \"469030\" }]],\n\n\n\n[\n[{\n  \"label\": \"万州区\",\n  \"value\": \"500101\" },\n\n{\n  \"label\": \"涪陵区\",\n  \"value\": \"500102\" },\n\n{\n  \"label\": \"渝中区\",\n  \"value\": \"500103\" },\n\n{\n  \"label\": \"大渡口区\",\n  \"value\": \"500104\" },\n\n{\n  \"label\": \"江北区\",\n  \"value\": \"500105\" },\n\n{\n  \"label\": \"沙坪坝区\",\n  \"value\": \"500106\" },\n\n{\n  \"label\": \"九龙坡区\",\n  \"value\": \"500107\" },\n\n{\n  \"label\": \"南岸区\",\n  \"value\": \"500108\" },\n\n{\n  \"label\": \"北碚区\",\n  \"value\": \"500109\" },\n\n{\n  \"label\": \"綦江区\",\n  \"value\": \"500110\" },\n\n{\n  \"label\": \"大足区\",\n  \"value\": \"500111\" },\n\n{\n  \"label\": \"渝北区\",\n  \"value\": \"500112\" },\n\n{\n  \"label\": \"巴南区\",\n  \"value\": \"500113\" },\n\n{\n  \"label\": \"黔江区\",\n  \"value\": \"500114\" },\n\n{\n  \"label\": \"长寿区\",\n  \"value\": \"500115\" },\n\n{\n  \"label\": \"江津区\",\n  \"value\": \"500116\" },\n\n{\n  \"label\": \"合川区\",\n  \"value\": \"500117\" },\n\n{\n  \"label\": \"永川区\",\n  \"value\": \"500118\" },\n\n{\n  \"label\": \"南川区\",\n  \"value\": \"500119\" },\n\n{\n  \"label\": \"璧山区\",\n  \"value\": \"500120\" },\n\n{\n  \"label\": \"铜梁区\",\n  \"value\": \"500151\" },\n\n{\n  \"label\": \"潼南区\",\n  \"value\": \"500152\" },\n\n{\n  \"label\": \"荣昌区\",\n  \"value\": \"500153\" },\n\n{\n  \"label\": \"开州区\",\n  \"value\": \"500154\" },\n\n{\n  \"label\": \"梁平区\",\n  \"value\": \"500155\" },\n\n{\n  \"label\": \"武隆区\",\n  \"value\": \"500156\" }],\n\n\n[{\n  \"label\": \"城口县\",\n  \"value\": \"500229\" },\n\n{\n  \"label\": \"丰都县\",\n  \"value\": \"500230\" },\n\n{\n  \"label\": \"垫江县\",\n  \"value\": \"500231\" },\n\n{\n  \"label\": \"忠县\",\n  \"value\": \"500233\" },\n\n{\n  \"label\": \"云阳县\",\n  \"value\": \"500235\" },\n\n{\n  \"label\": \"奉节县\",\n  \"value\": \"500236\" },\n\n{\n  \"label\": \"巫山县\",\n  \"value\": \"500237\" },\n\n{\n  \"label\": \"巫溪县\",\n  \"value\": \"500238\" },\n\n{\n  \"label\": \"石柱土家族自治县\",\n  \"value\": \"500240\" },\n\n{\n  \"label\": \"秀山土家族苗族自治县\",\n  \"value\": \"500241\" },\n\n{\n  \"label\": \"酉阳土家族苗族自治县\",\n  \"value\": \"500242\" },\n\n{\n  \"label\": \"彭水苗族土家族自治县\",\n  \"value\": \"500243\" }]],\n\n\n\n[\n[{\n  \"label\": \"锦江区\",\n  \"value\": \"510104\" },\n\n{\n  \"label\": \"青羊区\",\n  \"value\": \"510105\" },\n\n{\n  \"label\": \"金牛区\",\n  \"value\": \"510106\" },\n\n{\n  \"label\": \"武侯区\",\n  \"value\": \"510107\" },\n\n{\n  \"label\": \"成华区\",\n  \"value\": \"510108\" },\n\n{\n  \"label\": \"龙泉驿区\",\n  \"value\": \"510112\" },\n\n{\n  \"label\": \"青白江区\",\n  \"value\": \"510113\" },\n\n{\n  \"label\": \"新都区\",\n  \"value\": \"510114\" },\n\n{\n  \"label\": \"温江区\",\n  \"value\": \"510115\" },\n\n{\n  \"label\": \"双流区\",\n  \"value\": \"510116\" },\n\n{\n  \"label\": \"郫都区\",\n  \"value\": \"510117\" },\n\n{\n  \"label\": \"金堂县\",\n  \"value\": \"510121\" },\n\n{\n  \"label\": \"大邑县\",\n  \"value\": \"510129\" },\n\n{\n  \"label\": \"蒲江县\",\n  \"value\": \"510131\" },\n\n{\n  \"label\": \"新津县\",\n  \"value\": \"510132\" },\n\n{\n  \"label\": \"都江堰市\",\n  \"value\": \"510181\" },\n\n{\n  \"label\": \"彭州市\",\n  \"value\": \"510182\" },\n\n{\n  \"label\": \"邛崃市\",\n  \"value\": \"510183\" },\n\n{\n  \"label\": \"崇州市\",\n  \"value\": \"510184\" },\n\n{\n  \"label\": \"简阳市\",\n  \"value\": \"510185\" }],\n\n\n[{\n  \"label\": \"自流井区\",\n  \"value\": \"510302\" },\n\n{\n  \"label\": \"贡井区\",\n  \"value\": \"510303\" },\n\n{\n  \"label\": \"大安区\",\n  \"value\": \"510304\" },\n\n{\n  \"label\": \"沿滩区\",\n  \"value\": \"510311\" },\n\n{\n  \"label\": \"荣县\",\n  \"value\": \"510321\" },\n\n{\n  \"label\": \"富顺县\",\n  \"value\": \"510322\" }],\n\n\n[{\n  \"label\": \"东区\",\n  \"value\": \"510402\" },\n\n{\n  \"label\": \"西区\",\n  \"value\": \"510403\" },\n\n{\n  \"label\": \"仁和区\",\n  \"value\": \"510411\" },\n\n{\n  \"label\": \"米易县\",\n  \"value\": \"510421\" },\n\n{\n  \"label\": \"盐边县\",\n  \"value\": \"510422\" }],\n\n\n[{\n  \"label\": \"江阳区\",\n  \"value\": \"510502\" },\n\n{\n  \"label\": \"纳溪区\",\n  \"value\": \"510503\" },\n\n{\n  \"label\": \"龙马潭区\",\n  \"value\": \"510504\" },\n\n{\n  \"label\": \"泸县\",\n  \"value\": \"510521\" },\n\n{\n  \"label\": \"合江县\",\n  \"value\": \"510522\" },\n\n{\n  \"label\": \"叙永县\",\n  \"value\": \"510524\" },\n\n{\n  \"label\": \"古蔺县\",\n  \"value\": \"510525\" }],\n\n\n[{\n  \"label\": \"旌阳区\",\n  \"value\": \"510603\" },\n\n{\n  \"label\": \"罗江区\",\n  \"value\": \"510604\" },\n\n{\n  \"label\": \"中江县\",\n  \"value\": \"510623\" },\n\n{\n  \"label\": \"广汉市\",\n  \"value\": \"510681\" },\n\n{\n  \"label\": \"什邡市\",\n  \"value\": \"510682\" },\n\n{\n  \"label\": \"绵竹市\",\n  \"value\": \"510683\" }],\n\n\n[{\n  \"label\": \"涪城区\",\n  \"value\": \"510703\" },\n\n{\n  \"label\": \"游仙区\",\n  \"value\": \"510704\" },\n\n{\n  \"label\": \"安州区\",\n  \"value\": \"510705\" },\n\n{\n  \"label\": \"三台县\",\n  \"value\": \"510722\" },\n\n{\n  \"label\": \"盐亭县\",\n  \"value\": \"510723\" },\n\n{\n  \"label\": \"梓潼县\",\n  \"value\": \"510725\" },\n\n{\n  \"label\": \"北川羌族自治县\",\n  \"value\": \"510726\" },\n\n{\n  \"label\": \"平武县\",\n  \"value\": \"510727\" },\n\n{\n  \"label\": \"江油市\",\n  \"value\": \"510781\" }],\n\n\n[{\n  \"label\": \"利州区\",\n  \"value\": \"510802\" },\n\n{\n  \"label\": \"昭化区\",\n  \"value\": \"510811\" },\n\n{\n  \"label\": \"朝天区\",\n  \"value\": \"510812\" },\n\n{\n  \"label\": \"旺苍县\",\n  \"value\": \"510821\" },\n\n{\n  \"label\": \"青川县\",\n  \"value\": \"510822\" },\n\n{\n  \"label\": \"剑阁县\",\n  \"value\": \"510823\" },\n\n{\n  \"label\": \"苍溪县\",\n  \"value\": \"510824\" }],\n\n\n[{\n  \"label\": \"船山区\",\n  \"value\": \"510903\" },\n\n{\n  \"label\": \"安居区\",\n  \"value\": \"510904\" },\n\n{\n  \"label\": \"蓬溪县\",\n  \"value\": \"510921\" },\n\n{\n  \"label\": \"射洪县\",\n  \"value\": \"510922\" },\n\n{\n  \"label\": \"大英县\",\n  \"value\": \"510923\" }],\n\n\n[{\n  \"label\": \"市中区\",\n  \"value\": \"511002\" },\n\n{\n  \"label\": \"东兴区\",\n  \"value\": \"511011\" },\n\n{\n  \"label\": \"威远县\",\n  \"value\": \"511024\" },\n\n{\n  \"label\": \"资中县\",\n  \"value\": \"511025\" },\n\n{\n  \"label\": \"内江经济开发区\",\n  \"value\": \"511071\" },\n\n{\n  \"label\": \"隆昌市\",\n  \"value\": \"511083\" }],\n\n\n[{\n  \"label\": \"市中区\",\n  \"value\": \"511102\" },\n\n{\n  \"label\": \"沙湾区\",\n  \"value\": \"511111\" },\n\n{\n  \"label\": \"五通桥区\",\n  \"value\": \"511112\" },\n\n{\n  \"label\": \"金口河区\",\n  \"value\": \"511113\" },\n\n{\n  \"label\": \"犍为县\",\n  \"value\": \"511123\" },\n\n{\n  \"label\": \"井研县\",\n  \"value\": \"511124\" },\n\n{\n  \"label\": \"夹江县\",\n  \"value\": \"511126\" },\n\n{\n  \"label\": \"沐川县\",\n  \"value\": \"511129\" },\n\n{\n  \"label\": \"峨边彝族自治县\",\n  \"value\": \"511132\" },\n\n{\n  \"label\": \"马边彝族自治县\",\n  \"value\": \"511133\" },\n\n{\n  \"label\": \"峨眉山市\",\n  \"value\": \"511181\" }],\n\n\n[{\n  \"label\": \"顺庆区\",\n  \"value\": \"511302\" },\n\n{\n  \"label\": \"高坪区\",\n  \"value\": \"511303\" },\n\n{\n  \"label\": \"嘉陵区\",\n  \"value\": \"511304\" },\n\n{\n  \"label\": \"南部县\",\n  \"value\": \"511321\" },\n\n{\n  \"label\": \"营山县\",\n  \"value\": \"511322\" },\n\n{\n  \"label\": \"蓬安县\",\n  \"value\": \"511323\" },\n\n{\n  \"label\": \"仪陇县\",\n  \"value\": \"511324\" },\n\n{\n  \"label\": \"西充县\",\n  \"value\": \"511325\" },\n\n{\n  \"label\": \"阆中市\",\n  \"value\": \"511381\" }],\n\n\n[{\n  \"label\": \"东坡区\",\n  \"value\": \"511402\" },\n\n{\n  \"label\": \"彭山区\",\n  \"value\": \"511403\" },\n\n{\n  \"label\": \"仁寿县\",\n  \"value\": \"511421\" },\n\n{\n  \"label\": \"洪雅县\",\n  \"value\": \"511423\" },\n\n{\n  \"label\": \"丹棱县\",\n  \"value\": \"511424\" },\n\n{\n  \"label\": \"青神县\",\n  \"value\": \"511425\" }],\n\n\n[{\n  \"label\": \"翠屏区\",\n  \"value\": \"511502\" },\n\n{\n  \"label\": \"南溪区\",\n  \"value\": \"511503\" },\n\n{\n  \"label\": \"宜宾县\",\n  \"value\": \"511521\" },\n\n{\n  \"label\": \"江安县\",\n  \"value\": \"511523\" },\n\n{\n  \"label\": \"长宁县\",\n  \"value\": \"511524\" },\n\n{\n  \"label\": \"高县\",\n  \"value\": \"511525\" },\n\n{\n  \"label\": \"珙县\",\n  \"value\": \"511526\" },\n\n{\n  \"label\": \"筠连县\",\n  \"value\": \"511527\" },\n\n{\n  \"label\": \"兴文县\",\n  \"value\": \"511528\" },\n\n{\n  \"label\": \"屏山县\",\n  \"value\": \"511529\" }],\n\n\n[{\n  \"label\": \"广安区\",\n  \"value\": \"511602\" },\n\n{\n  \"label\": \"前锋区\",\n  \"value\": \"511603\" },\n\n{\n  \"label\": \"岳池县\",\n  \"value\": \"511621\" },\n\n{\n  \"label\": \"武胜县\",\n  \"value\": \"511622\" },\n\n{\n  \"label\": \"邻水县\",\n  \"value\": \"511623\" },\n\n{\n  \"label\": \"华蓥市\",\n  \"value\": \"511681\" }],\n\n\n[{\n  \"label\": \"通川区\",\n  \"value\": \"511702\" },\n\n{\n  \"label\": \"达川区\",\n  \"value\": \"511703\" },\n\n{\n  \"label\": \"宣汉县\",\n  \"value\": \"511722\" },\n\n{\n  \"label\": \"开江县\",\n  \"value\": \"511723\" },\n\n{\n  \"label\": \"大竹县\",\n  \"value\": \"511724\" },\n\n{\n  \"label\": \"渠县\",\n  \"value\": \"511725\" },\n\n{\n  \"label\": \"达州经济开发区\",\n  \"value\": \"511771\" },\n\n{\n  \"label\": \"万源市\",\n  \"value\": \"511781\" }],\n\n\n[{\n  \"label\": \"雨城区\",\n  \"value\": \"511802\" },\n\n{\n  \"label\": \"名山区\",\n  \"value\": \"511803\" },\n\n{\n  \"label\": \"荥经县\",\n  \"value\": \"511822\" },\n\n{\n  \"label\": \"汉源县\",\n  \"value\": \"511823\" },\n\n{\n  \"label\": \"石棉县\",\n  \"value\": \"511824\" },\n\n{\n  \"label\": \"天全县\",\n  \"value\": \"511825\" },\n\n{\n  \"label\": \"芦山县\",\n  \"value\": \"511826\" },\n\n{\n  \"label\": \"宝兴县\",\n  \"value\": \"511827\" }],\n\n\n[{\n  \"label\": \"巴州区\",\n  \"value\": \"511902\" },\n\n{\n  \"label\": \"恩阳区\",\n  \"value\": \"511903\" },\n\n{\n  \"label\": \"通江县\",\n  \"value\": \"511921\" },\n\n{\n  \"label\": \"南江县\",\n  \"value\": \"511922\" },\n\n{\n  \"label\": \"平昌县\",\n  \"value\": \"511923\" },\n\n{\n  \"label\": \"巴中经济开发区\",\n  \"value\": \"511971\" }],\n\n\n[{\n  \"label\": \"雁江区\",\n  \"value\": \"512002\" },\n\n{\n  \"label\": \"安岳县\",\n  \"value\": \"512021\" },\n\n{\n  \"label\": \"乐至县\",\n  \"value\": \"512022\" }],\n\n\n[{\n  \"label\": \"马尔康市\",\n  \"value\": \"513201\" },\n\n{\n  \"label\": \"汶川县\",\n  \"value\": \"513221\" },\n\n{\n  \"label\": \"理县\",\n  \"value\": \"513222\" },\n\n{\n  \"label\": \"茂县\",\n  \"value\": \"513223\" },\n\n{\n  \"label\": \"松潘县\",\n  \"value\": \"513224\" },\n\n{\n  \"label\": \"九寨沟县\",\n  \"value\": \"513225\" },\n\n{\n  \"label\": \"金川县\",\n  \"value\": \"513226\" },\n\n{\n  \"label\": \"小金县\",\n  \"value\": \"513227\" },\n\n{\n  \"label\": \"黑水县\",\n  \"value\": \"513228\" },\n\n{\n  \"label\": \"壤塘县\",\n  \"value\": \"513230\" },\n\n{\n  \"label\": \"阿坝县\",\n  \"value\": \"513231\" },\n\n{\n  \"label\": \"若尔盖县\",\n  \"value\": \"513232\" },\n\n{\n  \"label\": \"红原县\",\n  \"value\": \"513233\" }],\n\n\n[{\n  \"label\": \"康定市\",\n  \"value\": \"513301\" },\n\n{\n  \"label\": \"泸定县\",\n  \"value\": \"513322\" },\n\n{\n  \"label\": \"丹巴县\",\n  \"value\": \"513323\" },\n\n{\n  \"label\": \"九龙县\",\n  \"value\": \"513324\" },\n\n{\n  \"label\": \"雅江县\",\n  \"value\": \"513325\" },\n\n{\n  \"label\": \"道孚县\",\n  \"value\": \"513326\" },\n\n{\n  \"label\": \"炉霍县\",\n  \"value\": \"513327\" },\n\n{\n  \"label\": \"甘孜县\",\n  \"value\": \"513328\" },\n\n{\n  \"label\": \"新龙县\",\n  \"value\": \"513329\" },\n\n{\n  \"label\": \"德格县\",\n  \"value\": \"513330\" },\n\n{\n  \"label\": \"白玉县\",\n  \"value\": \"513331\" },\n\n{\n  \"label\": \"石渠县\",\n  \"value\": \"513332\" },\n\n{\n  \"label\": \"色达县\",\n  \"value\": \"513333\" },\n\n{\n  \"label\": \"理塘县\",\n  \"value\": \"513334\" },\n\n{\n  \"label\": \"巴塘县\",\n  \"value\": \"513335\" },\n\n{\n  \"label\": \"乡城县\",\n  \"value\": \"513336\" },\n\n{\n  \"label\": \"稻城县\",\n  \"value\": \"513337\" },\n\n{\n  \"label\": \"得荣县\",\n  \"value\": \"513338\" }],\n\n\n[{\n  \"label\": \"西昌市\",\n  \"value\": \"513401\" },\n\n{\n  \"label\": \"木里藏族自治县\",\n  \"value\": \"513422\" },\n\n{\n  \"label\": \"盐源县\",\n  \"value\": \"513423\" },\n\n{\n  \"label\": \"德昌县\",\n  \"value\": \"513424\" },\n\n{\n  \"label\": \"会理县\",\n  \"value\": \"513425\" },\n\n{\n  \"label\": \"会东县\",\n  \"value\": \"513426\" },\n\n{\n  \"label\": \"宁南县\",\n  \"value\": \"513427\" },\n\n{\n  \"label\": \"普格县\",\n  \"value\": \"513428\" },\n\n{\n  \"label\": \"布拖县\",\n  \"value\": \"513429\" },\n\n{\n  \"label\": \"金阳县\",\n  \"value\": \"513430\" },\n\n{\n  \"label\": \"昭觉县\",\n  \"value\": \"513431\" },\n\n{\n  \"label\": \"喜德县\",\n  \"value\": \"513432\" },\n\n{\n  \"label\": \"冕宁县\",\n  \"value\": \"513433\" },\n\n{\n  \"label\": \"越西县\",\n  \"value\": \"513434\" },\n\n{\n  \"label\": \"甘洛县\",\n  \"value\": \"513435\" },\n\n{\n  \"label\": \"美姑县\",\n  \"value\": \"513436\" },\n\n{\n  \"label\": \"雷波县\",\n  \"value\": \"513437\" }]],\n\n\n\n[\n[{\n  \"label\": \"南明区\",\n  \"value\": \"520102\" },\n\n{\n  \"label\": \"云岩区\",\n  \"value\": \"520103\" },\n\n{\n  \"label\": \"花溪区\",\n  \"value\": \"520111\" },\n\n{\n  \"label\": \"乌当区\",\n  \"value\": \"520112\" },\n\n{\n  \"label\": \"白云区\",\n  \"value\": \"520113\" },\n\n{\n  \"label\": \"观山湖区\",\n  \"value\": \"520115\" },\n\n{\n  \"label\": \"开阳县\",\n  \"value\": \"520121\" },\n\n{\n  \"label\": \"息烽县\",\n  \"value\": \"520122\" },\n\n{\n  \"label\": \"修文县\",\n  \"value\": \"520123\" },\n\n{\n  \"label\": \"清镇市\",\n  \"value\": \"520181\" }],\n\n\n[{\n  \"label\": \"钟山区\",\n  \"value\": \"520201\" },\n\n{\n  \"label\": \"六枝特区\",\n  \"value\": \"520203\" },\n\n{\n  \"label\": \"水城县\",\n  \"value\": \"520221\" },\n\n{\n  \"label\": \"盘州市\",\n  \"value\": \"520281\" }],\n\n\n[{\n  \"label\": \"红花岗区\",\n  \"value\": \"520302\" },\n\n{\n  \"label\": \"汇川区\",\n  \"value\": \"520303\" },\n\n{\n  \"label\": \"播州区\",\n  \"value\": \"520304\" },\n\n{\n  \"label\": \"桐梓县\",\n  \"value\": \"520322\" },\n\n{\n  \"label\": \"绥阳县\",\n  \"value\": \"520323\" },\n\n{\n  \"label\": \"正安县\",\n  \"value\": \"520324\" },\n\n{\n  \"label\": \"道真仡佬族苗族自治县\",\n  \"value\": \"520325\" },\n\n{\n  \"label\": \"务川仡佬族苗族自治县\",\n  \"value\": \"520326\" },\n\n{\n  \"label\": \"凤冈县\",\n  \"value\": \"520327\" },\n\n{\n  \"label\": \"湄潭县\",\n  \"value\": \"520328\" },\n\n{\n  \"label\": \"余庆县\",\n  \"value\": \"520329\" },\n\n{\n  \"label\": \"习水县\",\n  \"value\": \"520330\" },\n\n{\n  \"label\": \"赤水市\",\n  \"value\": \"520381\" },\n\n{\n  \"label\": \"仁怀市\",\n  \"value\": \"520382\" }],\n\n\n[{\n  \"label\": \"西秀区\",\n  \"value\": \"520402\" },\n\n{\n  \"label\": \"平坝区\",\n  \"value\": \"520403\" },\n\n{\n  \"label\": \"普定县\",\n  \"value\": \"520422\" },\n\n{\n  \"label\": \"镇宁布依族苗族自治县\",\n  \"value\": \"520423\" },\n\n{\n  \"label\": \"关岭布依族苗族自治县\",\n  \"value\": \"520424\" },\n\n{\n  \"label\": \"紫云苗族布依族自治县\",\n  \"value\": \"520425\" }],\n\n\n[{\n  \"label\": \"七星关区\",\n  \"value\": \"520502\" },\n\n{\n  \"label\": \"大方县\",\n  \"value\": \"520521\" },\n\n{\n  \"label\": \"黔西县\",\n  \"value\": \"520522\" },\n\n{\n  \"label\": \"金沙县\",\n  \"value\": \"520523\" },\n\n{\n  \"label\": \"织金县\",\n  \"value\": \"520524\" },\n\n{\n  \"label\": \"纳雍县\",\n  \"value\": \"520525\" },\n\n{\n  \"label\": \"威宁彝族回族苗族自治县\",\n  \"value\": \"520526\" },\n\n{\n  \"label\": \"赫章县\",\n  \"value\": \"520527\" }],\n\n\n[{\n  \"label\": \"碧江区\",\n  \"value\": \"520602\" },\n\n{\n  \"label\": \"万山区\",\n  \"value\": \"520603\" },\n\n{\n  \"label\": \"江口县\",\n  \"value\": \"520621\" },\n\n{\n  \"label\": \"玉屏侗族自治县\",\n  \"value\": \"520622\" },\n\n{\n  \"label\": \"石阡县\",\n  \"value\": \"520623\" },\n\n{\n  \"label\": \"思南县\",\n  \"value\": \"520624\" },\n\n{\n  \"label\": \"印江土家族苗族自治县\",\n  \"value\": \"520625\" },\n\n{\n  \"label\": \"德江县\",\n  \"value\": \"520626\" },\n\n{\n  \"label\": \"沿河土家族自治县\",\n  \"value\": \"520627\" },\n\n{\n  \"label\": \"松桃苗族自治县\",\n  \"value\": \"520628\" }],\n\n\n[{\n  \"label\": \"兴义市\",\n  \"value\": \"522301\" },\n\n{\n  \"label\": \"兴仁县\",\n  \"value\": \"522322\" },\n\n{\n  \"label\": \"普安县\",\n  \"value\": \"522323\" },\n\n{\n  \"label\": \"晴隆县\",\n  \"value\": \"522324\" },\n\n{\n  \"label\": \"贞丰县\",\n  \"value\": \"522325\" },\n\n{\n  \"label\": \"望谟县\",\n  \"value\": \"522326\" },\n\n{\n  \"label\": \"册亨县\",\n  \"value\": \"522327\" },\n\n{\n  \"label\": \"安龙县\",\n  \"value\": \"522328\" }],\n\n\n[{\n  \"label\": \"凯里市\",\n  \"value\": \"522601\" },\n\n{\n  \"label\": \"黄平县\",\n  \"value\": \"522622\" },\n\n{\n  \"label\": \"施秉县\",\n  \"value\": \"522623\" },\n\n{\n  \"label\": \"三穗县\",\n  \"value\": \"522624\" },\n\n{\n  \"label\": \"镇远县\",\n  \"value\": \"522625\" },\n\n{\n  \"label\": \"岑巩县\",\n  \"value\": \"522626\" },\n\n{\n  \"label\": \"天柱县\",\n  \"value\": \"522627\" },\n\n{\n  \"label\": \"锦屏县\",\n  \"value\": \"522628\" },\n\n{\n  \"label\": \"剑河县\",\n  \"value\": \"522629\" },\n\n{\n  \"label\": \"台江县\",\n  \"value\": \"522630\" },\n\n{\n  \"label\": \"黎平县\",\n  \"value\": \"522631\" },\n\n{\n  \"label\": \"榕江县\",\n  \"value\": \"522632\" },\n\n{\n  \"label\": \"从江县\",\n  \"value\": \"522633\" },\n\n{\n  \"label\": \"雷山县\",\n  \"value\": \"522634\" },\n\n{\n  \"label\": \"麻江县\",\n  \"value\": \"522635\" },\n\n{\n  \"label\": \"丹寨县\",\n  \"value\": \"522636\" }],\n\n\n[{\n  \"label\": \"都匀市\",\n  \"value\": \"522701\" },\n\n{\n  \"label\": \"福泉市\",\n  \"value\": \"522702\" },\n\n{\n  \"label\": \"荔波县\",\n  \"value\": \"522722\" },\n\n{\n  \"label\": \"贵定县\",\n  \"value\": \"522723\" },\n\n{\n  \"label\": \"瓮安县\",\n  \"value\": \"522725\" },\n\n{\n  \"label\": \"独山县\",\n  \"value\": \"522726\" },\n\n{\n  \"label\": \"平塘县\",\n  \"value\": \"522727\" },\n\n{\n  \"label\": \"罗甸县\",\n  \"value\": \"522728\" },\n\n{\n  \"label\": \"长顺县\",\n  \"value\": \"522729\" },\n\n{\n  \"label\": \"龙里县\",\n  \"value\": \"522730\" },\n\n{\n  \"label\": \"惠水县\",\n  \"value\": \"522731\" },\n\n{\n  \"label\": \"三都水族自治县\",\n  \"value\": \"522732\" }]],\n\n\n\n[\n[{\n  \"label\": \"五华区\",\n  \"value\": \"530102\" },\n\n{\n  \"label\": \"盘龙区\",\n  \"value\": \"530103\" },\n\n{\n  \"label\": \"官渡区\",\n  \"value\": \"530111\" },\n\n{\n  \"label\": \"西山区\",\n  \"value\": \"530112\" },\n\n{\n  \"label\": \"东川区\",\n  \"value\": \"530113\" },\n\n{\n  \"label\": \"呈贡区\",\n  \"value\": \"530114\" },\n\n{\n  \"label\": \"晋宁区\",\n  \"value\": \"530115\" },\n\n{\n  \"label\": \"富民县\",\n  \"value\": \"530124\" },\n\n{\n  \"label\": \"宜良县\",\n  \"value\": \"530125\" },\n\n{\n  \"label\": \"石林彝族自治县\",\n  \"value\": \"530126\" },\n\n{\n  \"label\": \"嵩明县\",\n  \"value\": \"530127\" },\n\n{\n  \"label\": \"禄劝彝族苗族自治县\",\n  \"value\": \"530128\" },\n\n{\n  \"label\": \"寻甸回族彝族自治县\",\n  \"value\": \"530129\" },\n\n{\n  \"label\": \"安宁市\",\n  \"value\": \"530181\" }],\n\n\n[{\n  \"label\": \"麒麟区\",\n  \"value\": \"530302\" },\n\n{\n  \"label\": \"沾益区\",\n  \"value\": \"530303\" },\n\n{\n  \"label\": \"马龙县\",\n  \"value\": \"530321\" },\n\n{\n  \"label\": \"陆良县\",\n  \"value\": \"530322\" },\n\n{\n  \"label\": \"师宗县\",\n  \"value\": \"530323\" },\n\n{\n  \"label\": \"罗平县\",\n  \"value\": \"530324\" },\n\n{\n  \"label\": \"富源县\",\n  \"value\": \"530325\" },\n\n{\n  \"label\": \"会泽县\",\n  \"value\": \"530326\" },\n\n{\n  \"label\": \"宣威市\",\n  \"value\": \"530381\" }],\n\n\n[{\n  \"label\": \"红塔区\",\n  \"value\": \"530402\" },\n\n{\n  \"label\": \"江川区\",\n  \"value\": \"530403\" },\n\n{\n  \"label\": \"澄江县\",\n  \"value\": \"530422\" },\n\n{\n  \"label\": \"通海县\",\n  \"value\": \"530423\" },\n\n{\n  \"label\": \"华宁县\",\n  \"value\": \"530424\" },\n\n{\n  \"label\": \"易门县\",\n  \"value\": \"530425\" },\n\n{\n  \"label\": \"峨山彝族自治县\",\n  \"value\": \"530426\" },\n\n{\n  \"label\": \"新平彝族傣族自治县\",\n  \"value\": \"530427\" },\n\n{\n  \"label\": \"元江哈尼族彝族傣族自治县\",\n  \"value\": \"530428\" }],\n\n\n[{\n  \"label\": \"隆阳区\",\n  \"value\": \"530502\" },\n\n{\n  \"label\": \"施甸县\",\n  \"value\": \"530521\" },\n\n{\n  \"label\": \"龙陵县\",\n  \"value\": \"530523\" },\n\n{\n  \"label\": \"昌宁县\",\n  \"value\": \"530524\" },\n\n{\n  \"label\": \"腾冲市\",\n  \"value\": \"530581\" }],\n\n\n[{\n  \"label\": \"昭阳区\",\n  \"value\": \"530602\" },\n\n{\n  \"label\": \"鲁甸县\",\n  \"value\": \"530621\" },\n\n{\n  \"label\": \"巧家县\",\n  \"value\": \"530622\" },\n\n{\n  \"label\": \"盐津县\",\n  \"value\": \"530623\" },\n\n{\n  \"label\": \"大关县\",\n  \"value\": \"530624\" },\n\n{\n  \"label\": \"永善县\",\n  \"value\": \"530625\" },\n\n{\n  \"label\": \"绥江县\",\n  \"value\": \"530626\" },\n\n{\n  \"label\": \"镇雄县\",\n  \"value\": \"530627\" },\n\n{\n  \"label\": \"彝良县\",\n  \"value\": \"530628\" },\n\n{\n  \"label\": \"威信县\",\n  \"value\": \"530629\" },\n\n{\n  \"label\": \"水富县\",\n  \"value\": \"530630\" }],\n\n\n[{\n  \"label\": \"古城区\",\n  \"value\": \"530702\" },\n\n{\n  \"label\": \"玉龙纳西族自治县\",\n  \"value\": \"530721\" },\n\n{\n  \"label\": \"永胜县\",\n  \"value\": \"530722\" },\n\n{\n  \"label\": \"华坪县\",\n  \"value\": \"530723\" },\n\n{\n  \"label\": \"宁蒗彝族自治县\",\n  \"value\": \"530724\" }],\n\n\n[{\n  \"label\": \"思茅区\",\n  \"value\": \"530802\" },\n\n{\n  \"label\": \"宁洱哈尼族彝族自治县\",\n  \"value\": \"530821\" },\n\n{\n  \"label\": \"墨江哈尼族自治县\",\n  \"value\": \"530822\" },\n\n{\n  \"label\": \"景东彝族自治县\",\n  \"value\": \"530823\" },\n\n{\n  \"label\": \"景谷傣族彝族自治县\",\n  \"value\": \"530824\" },\n\n{\n  \"label\": \"镇沅彝族哈尼族拉祜族自治县\",\n  \"value\": \"530825\" },\n\n{\n  \"label\": \"江城哈尼族彝族自治县\",\n  \"value\": \"530826\" },\n\n{\n  \"label\": \"孟连傣族拉祜族佤族自治县\",\n  \"value\": \"530827\" },\n\n{\n  \"label\": \"澜沧拉祜族自治县\",\n  \"value\": \"530828\" },\n\n{\n  \"label\": \"西盟佤族自治县\",\n  \"value\": \"530829\" }],\n\n\n[{\n  \"label\": \"临翔区\",\n  \"value\": \"530902\" },\n\n{\n  \"label\": \"凤庆县\",\n  \"value\": \"530921\" },\n\n{\n  \"label\": \"云县\",\n  \"value\": \"530922\" },\n\n{\n  \"label\": \"永德县\",\n  \"value\": \"530923\" },\n\n{\n  \"label\": \"镇康县\",\n  \"value\": \"530924\" },\n\n{\n  \"label\": \"双江拉祜族佤族布朗族傣族自治县\",\n  \"value\": \"530925\" },\n\n{\n  \"label\": \"耿马傣族佤族自治县\",\n  \"value\": \"530926\" },\n\n{\n  \"label\": \"沧源佤族自治县\",\n  \"value\": \"530927\" }],\n\n\n[{\n  \"label\": \"楚雄市\",\n  \"value\": \"532301\" },\n\n{\n  \"label\": \"双柏县\",\n  \"value\": \"532322\" },\n\n{\n  \"label\": \"牟定县\",\n  \"value\": \"532323\" },\n\n{\n  \"label\": \"南华县\",\n  \"value\": \"532324\" },\n\n{\n  \"label\": \"姚安县\",\n  \"value\": \"532325\" },\n\n{\n  \"label\": \"大姚县\",\n  \"value\": \"532326\" },\n\n{\n  \"label\": \"永仁县\",\n  \"value\": \"532327\" },\n\n{\n  \"label\": \"元谋县\",\n  \"value\": \"532328\" },\n\n{\n  \"label\": \"武定县\",\n  \"value\": \"532329\" },\n\n{\n  \"label\": \"禄丰县\",\n  \"value\": \"532331\" }],\n\n\n[{\n  \"label\": \"个旧市\",\n  \"value\": \"532501\" },\n\n{\n  \"label\": \"开远市\",\n  \"value\": \"532502\" },\n\n{\n  \"label\": \"蒙自市\",\n  \"value\": \"532503\" },\n\n{\n  \"label\": \"弥勒市\",\n  \"value\": \"532504\" },\n\n{\n  \"label\": \"屏边苗族自治县\",\n  \"value\": \"532523\" },\n\n{\n  \"label\": \"建水县\",\n  \"value\": \"532524\" },\n\n{\n  \"label\": \"石屏县\",\n  \"value\": \"532525\" },\n\n{\n  \"label\": \"泸西县\",\n  \"value\": \"532527\" },\n\n{\n  \"label\": \"元阳县\",\n  \"value\": \"532528\" },\n\n{\n  \"label\": \"红河县\",\n  \"value\": \"532529\" },\n\n{\n  \"label\": \"金平苗族瑶族傣族自治县\",\n  \"value\": \"532530\" },\n\n{\n  \"label\": \"绿春县\",\n  \"value\": \"532531\" },\n\n{\n  \"label\": \"河口瑶族自治县\",\n  \"value\": \"532532\" }],\n\n\n[{\n  \"label\": \"文山市\",\n  \"value\": \"532601\" },\n\n{\n  \"label\": \"砚山县\",\n  \"value\": \"532622\" },\n\n{\n  \"label\": \"西畴县\",\n  \"value\": \"532623\" },\n\n{\n  \"label\": \"麻栗坡县\",\n  \"value\": \"532624\" },\n\n{\n  \"label\": \"马关县\",\n  \"value\": \"532625\" },\n\n{\n  \"label\": \"丘北县\",\n  \"value\": \"532626\" },\n\n{\n  \"label\": \"广南县\",\n  \"value\": \"532627\" },\n\n{\n  \"label\": \"富宁县\",\n  \"value\": \"532628\" }],\n\n\n[{\n  \"label\": \"景洪市\",\n  \"value\": \"532801\" },\n\n{\n  \"label\": \"勐海县\",\n  \"value\": \"532822\" },\n\n{\n  \"label\": \"勐腊县\",\n  \"value\": \"532823\" }],\n\n\n[{\n  \"label\": \"大理市\",\n  \"value\": \"532901\" },\n\n{\n  \"label\": \"漾濞彝族自治县\",\n  \"value\": \"532922\" },\n\n{\n  \"label\": \"祥云县\",\n  \"value\": \"532923\" },\n\n{\n  \"label\": \"宾川县\",\n  \"value\": \"532924\" },\n\n{\n  \"label\": \"弥渡县\",\n  \"value\": \"532925\" },\n\n{\n  \"label\": \"南涧彝族自治县\",\n  \"value\": \"532926\" },\n\n{\n  \"label\": \"巍山彝族回族自治县\",\n  \"value\": \"532927\" },\n\n{\n  \"label\": \"永平县\",\n  \"value\": \"532928\" },\n\n{\n  \"label\": \"云龙县\",\n  \"value\": \"532929\" },\n\n{\n  \"label\": \"洱源县\",\n  \"value\": \"532930\" },\n\n{\n  \"label\": \"剑川县\",\n  \"value\": \"532931\" },\n\n{\n  \"label\": \"鹤庆县\",\n  \"value\": \"532932\" }],\n\n\n[{\n  \"label\": \"瑞丽市\",\n  \"value\": \"533102\" },\n\n{\n  \"label\": \"芒市\",\n  \"value\": \"533103\" },\n\n{\n  \"label\": \"梁河县\",\n  \"value\": \"533122\" },\n\n{\n  \"label\": \"盈江县\",\n  \"value\": \"533123\" },\n\n{\n  \"label\": \"陇川县\",\n  \"value\": \"533124\" }],\n\n\n[{\n  \"label\": \"泸水市\",\n  \"value\": \"533301\" },\n\n{\n  \"label\": \"福贡县\",\n  \"value\": \"533323\" },\n\n{\n  \"label\": \"贡山独龙族怒族自治县\",\n  \"value\": \"533324\" },\n\n{\n  \"label\": \"兰坪白族普米族自治县\",\n  \"value\": \"533325\" }],\n\n\n[{\n  \"label\": \"香格里拉市\",\n  \"value\": \"533401\" },\n\n{\n  \"label\": \"德钦县\",\n  \"value\": \"533422\" },\n\n{\n  \"label\": \"维西傈僳族自治县\",\n  \"value\": \"533423\" }]],\n\n\n\n[\n[{\n  \"label\": \"城关区\",\n  \"value\": \"540102\" },\n\n{\n  \"label\": \"堆龙德庆区\",\n  \"value\": \"540103\" },\n\n{\n  \"label\": \"林周县\",\n  \"value\": \"540121\" },\n\n{\n  \"label\": \"当雄县\",\n  \"value\": \"540122\" },\n\n{\n  \"label\": \"尼木县\",\n  \"value\": \"540123\" },\n\n{\n  \"label\": \"曲水县\",\n  \"value\": \"540124\" },\n\n{\n  \"label\": \"达孜县\",\n  \"value\": \"540126\" },\n\n{\n  \"label\": \"墨竹工卡县\",\n  \"value\": \"540127\" },\n\n{\n  \"label\": \"格尔木藏青工业园区\",\n  \"value\": \"540171\" },\n\n{\n  \"label\": \"拉萨经济技术开发区\",\n  \"value\": \"540172\" },\n\n{\n  \"label\": \"西藏文化旅游创意园区\",\n  \"value\": \"540173\" },\n\n{\n  \"label\": \"达孜工业园区\",\n  \"value\": \"540174\" }],\n\n\n[{\n  \"label\": \"桑珠孜区\",\n  \"value\": \"540202\" },\n\n{\n  \"label\": \"南木林县\",\n  \"value\": \"540221\" },\n\n{\n  \"label\": \"江孜县\",\n  \"value\": \"540222\" },\n\n{\n  \"label\": \"定日县\",\n  \"value\": \"540223\" },\n\n{\n  \"label\": \"萨迦县\",\n  \"value\": \"540224\" },\n\n{\n  \"label\": \"拉孜县\",\n  \"value\": \"540225\" },\n\n{\n  \"label\": \"昂仁县\",\n  \"value\": \"540226\" },\n\n{\n  \"label\": \"谢通门县\",\n  \"value\": \"540227\" },\n\n{\n  \"label\": \"白朗县\",\n  \"value\": \"540228\" },\n\n{\n  \"label\": \"仁布县\",\n  \"value\": \"540229\" },\n\n{\n  \"label\": \"康马县\",\n  \"value\": \"540230\" },\n\n{\n  \"label\": \"定结县\",\n  \"value\": \"540231\" },\n\n{\n  \"label\": \"仲巴县\",\n  \"value\": \"540232\" },\n\n{\n  \"label\": \"亚东县\",\n  \"value\": \"540233\" },\n\n{\n  \"label\": \"吉隆县\",\n  \"value\": \"540234\" },\n\n{\n  \"label\": \"聂拉木县\",\n  \"value\": \"540235\" },\n\n{\n  \"label\": \"萨嘎县\",\n  \"value\": \"540236\" },\n\n{\n  \"label\": \"岗巴县\",\n  \"value\": \"540237\" }],\n\n\n[{\n  \"label\": \"卡若区\",\n  \"value\": \"540302\" },\n\n{\n  \"label\": \"江达县\",\n  \"value\": \"540321\" },\n\n{\n  \"label\": \"贡觉县\",\n  \"value\": \"540322\" },\n\n{\n  \"label\": \"类乌齐县\",\n  \"value\": \"540323\" },\n\n{\n  \"label\": \"丁青县\",\n  \"value\": \"540324\" },\n\n{\n  \"label\": \"察雅县\",\n  \"value\": \"540325\" },\n\n{\n  \"label\": \"八宿县\",\n  \"value\": \"540326\" },\n\n{\n  \"label\": \"左贡县\",\n  \"value\": \"540327\" },\n\n{\n  \"label\": \"芒康县\",\n  \"value\": \"540328\" },\n\n{\n  \"label\": \"洛隆县\",\n  \"value\": \"540329\" },\n\n{\n  \"label\": \"边坝县\",\n  \"value\": \"540330\" }],\n\n\n[{\n  \"label\": \"巴宜区\",\n  \"value\": \"540402\" },\n\n{\n  \"label\": \"工布江达县\",\n  \"value\": \"540421\" },\n\n{\n  \"label\": \"米林县\",\n  \"value\": \"540422\" },\n\n{\n  \"label\": \"墨脱县\",\n  \"value\": \"540423\" },\n\n{\n  \"label\": \"波密县\",\n  \"value\": \"540424\" },\n\n{\n  \"label\": \"察隅县\",\n  \"value\": \"540425\" },\n\n{\n  \"label\": \"朗县\",\n  \"value\": \"540426\" }],\n\n\n[{\n  \"label\": \"乃东区\",\n  \"value\": \"540502\" },\n\n{\n  \"label\": \"扎囊县\",\n  \"value\": \"540521\" },\n\n{\n  \"label\": \"贡嘎县\",\n  \"value\": \"540522\" },\n\n{\n  \"label\": \"桑日县\",\n  \"value\": \"540523\" },\n\n{\n  \"label\": \"琼结县\",\n  \"value\": \"540524\" },\n\n{\n  \"label\": \"曲松县\",\n  \"value\": \"540525\" },\n\n{\n  \"label\": \"措美县\",\n  \"value\": \"540526\" },\n\n{\n  \"label\": \"洛扎县\",\n  \"value\": \"540527\" },\n\n{\n  \"label\": \"加查县\",\n  \"value\": \"540528\" },\n\n{\n  \"label\": \"隆子县\",\n  \"value\": \"540529\" },\n\n{\n  \"label\": \"错那县\",\n  \"value\": \"540530\" },\n\n{\n  \"label\": \"浪卡子县\",\n  \"value\": \"540531\" }],\n\n\n[{\n  \"label\": \"那曲县\",\n  \"value\": \"542421\" },\n\n{\n  \"label\": \"嘉黎县\",\n  \"value\": \"542422\" },\n\n{\n  \"label\": \"比如县\",\n  \"value\": \"542423\" },\n\n{\n  \"label\": \"聂荣县\",\n  \"value\": \"542424\" },\n\n{\n  \"label\": \"安多县\",\n  \"value\": \"542425\" },\n\n{\n  \"label\": \"申扎县\",\n  \"value\": \"542426\" },\n\n{\n  \"label\": \"索县\",\n  \"value\": \"542427\" },\n\n{\n  \"label\": \"班戈县\",\n  \"value\": \"542428\" },\n\n{\n  \"label\": \"巴青县\",\n  \"value\": \"542429\" },\n\n{\n  \"label\": \"尼玛县\",\n  \"value\": \"542430\" },\n\n{\n  \"label\": \"双湖县\",\n  \"value\": \"542431\" }],\n\n\n[{\n  \"label\": \"普兰县\",\n  \"value\": \"542521\" },\n\n{\n  \"label\": \"札达县\",\n  \"value\": \"542522\" },\n\n{\n  \"label\": \"噶尔县\",\n  \"value\": \"542523\" },\n\n{\n  \"label\": \"日土县\",\n  \"value\": \"542524\" },\n\n{\n  \"label\": \"革吉县\",\n  \"value\": \"542525\" },\n\n{\n  \"label\": \"改则县\",\n  \"value\": \"542526\" },\n\n{\n  \"label\": \"措勤县\",\n  \"value\": \"542527\" }]],\n\n\n\n[\n[{\n  \"label\": \"新城区\",\n  \"value\": \"610102\" },\n\n{\n  \"label\": \"碑林区\",\n  \"value\": \"610103\" },\n\n{\n  \"label\": \"莲湖区\",\n  \"value\": \"610104\" },\n\n{\n  \"label\": \"灞桥区\",\n  \"value\": \"610111\" },\n\n{\n  \"label\": \"未央区\",\n  \"value\": \"610112\" },\n\n{\n  \"label\": \"雁塔区\",\n  \"value\": \"610113\" },\n\n{\n  \"label\": \"阎良区\",\n  \"value\": \"610114\" },\n\n{\n  \"label\": \"临潼区\",\n  \"value\": \"610115\" },\n\n{\n  \"label\": \"长安区\",\n  \"value\": \"610116\" },\n\n{\n  \"label\": \"高陵区\",\n  \"value\": \"610117\" },\n\n{\n  \"label\": \"鄠邑区\",\n  \"value\": \"610118\" },\n\n{\n  \"label\": \"蓝田县\",\n  \"value\": \"610122\" },\n\n{\n  \"label\": \"周至县\",\n  \"value\": \"610124\" }],\n\n\n[{\n  \"label\": \"王益区\",\n  \"value\": \"610202\" },\n\n{\n  \"label\": \"印台区\",\n  \"value\": \"610203\" },\n\n{\n  \"label\": \"耀州区\",\n  \"value\": \"610204\" },\n\n{\n  \"label\": \"宜君县\",\n  \"value\": \"610222\" }],\n\n\n[{\n  \"label\": \"渭滨区\",\n  \"value\": \"610302\" },\n\n{\n  \"label\": \"金台区\",\n  \"value\": \"610303\" },\n\n{\n  \"label\": \"陈仓区\",\n  \"value\": \"610304\" },\n\n{\n  \"label\": \"凤翔县\",\n  \"value\": \"610322\" },\n\n{\n  \"label\": \"岐山县\",\n  \"value\": \"610323\" },\n\n{\n  \"label\": \"扶风县\",\n  \"value\": \"610324\" },\n\n{\n  \"label\": \"眉县\",\n  \"value\": \"610326\" },\n\n{\n  \"label\": \"陇县\",\n  \"value\": \"610327\" },\n\n{\n  \"label\": \"千阳县\",\n  \"value\": \"610328\" },\n\n{\n  \"label\": \"麟游县\",\n  \"value\": \"610329\" },\n\n{\n  \"label\": \"凤县\",\n  \"value\": \"610330\" },\n\n{\n  \"label\": \"太白县\",\n  \"value\": \"610331\" }],\n\n\n[{\n  \"label\": \"秦都区\",\n  \"value\": \"610402\" },\n\n{\n  \"label\": \"杨陵区\",\n  \"value\": \"610403\" },\n\n{\n  \"label\": \"渭城区\",\n  \"value\": \"610404\" },\n\n{\n  \"label\": \"三原县\",\n  \"value\": \"610422\" },\n\n{\n  \"label\": \"泾阳县\",\n  \"value\": \"610423\" },\n\n{\n  \"label\": \"乾县\",\n  \"value\": \"610424\" },\n\n{\n  \"label\": \"礼泉县\",\n  \"value\": \"610425\" },\n\n{\n  \"label\": \"永寿县\",\n  \"value\": \"610426\" },\n\n{\n  \"label\": \"彬县\",\n  \"value\": \"610427\" },\n\n{\n  \"label\": \"长武县\",\n  \"value\": \"610428\" },\n\n{\n  \"label\": \"旬邑县\",\n  \"value\": \"610429\" },\n\n{\n  \"label\": \"淳化县\",\n  \"value\": \"610430\" },\n\n{\n  \"label\": \"武功县\",\n  \"value\": \"610431\" },\n\n{\n  \"label\": \"兴平市\",\n  \"value\": \"610481\" }],\n\n\n[{\n  \"label\": \"临渭区\",\n  \"value\": \"610502\" },\n\n{\n  \"label\": \"华州区\",\n  \"value\": \"610503\" },\n\n{\n  \"label\": \"潼关县\",\n  \"value\": \"610522\" },\n\n{\n  \"label\": \"大荔县\",\n  \"value\": \"610523\" },\n\n{\n  \"label\": \"合阳县\",\n  \"value\": \"610524\" },\n\n{\n  \"label\": \"澄城县\",\n  \"value\": \"610525\" },\n\n{\n  \"label\": \"蒲城县\",\n  \"value\": \"610526\" },\n\n{\n  \"label\": \"白水县\",\n  \"value\": \"610527\" },\n\n{\n  \"label\": \"富平县\",\n  \"value\": \"610528\" },\n\n{\n  \"label\": \"韩城市\",\n  \"value\": \"610581\" },\n\n{\n  \"label\": \"华阴市\",\n  \"value\": \"610582\" }],\n\n\n[{\n  \"label\": \"宝塔区\",\n  \"value\": \"610602\" },\n\n{\n  \"label\": \"安塞区\",\n  \"value\": \"610603\" },\n\n{\n  \"label\": \"延长县\",\n  \"value\": \"610621\" },\n\n{\n  \"label\": \"延川县\",\n  \"value\": \"610622\" },\n\n{\n  \"label\": \"子长县\",\n  \"value\": \"610623\" },\n\n{\n  \"label\": \"志丹县\",\n  \"value\": \"610625\" },\n\n{\n  \"label\": \"吴起县\",\n  \"value\": \"610626\" },\n\n{\n  \"label\": \"甘泉县\",\n  \"value\": \"610627\" },\n\n{\n  \"label\": \"富县\",\n  \"value\": \"610628\" },\n\n{\n  \"label\": \"洛川县\",\n  \"value\": \"610629\" },\n\n{\n  \"label\": \"宜川县\",\n  \"value\": \"610630\" },\n\n{\n  \"label\": \"黄龙县\",\n  \"value\": \"610631\" },\n\n{\n  \"label\": \"黄陵县\",\n  \"value\": \"610632\" }],\n\n\n[{\n  \"label\": \"汉台区\",\n  \"value\": \"610702\" },\n\n{\n  \"label\": \"南郑区\",\n  \"value\": \"610703\" },\n\n{\n  \"label\": \"城固县\",\n  \"value\": \"610722\" },\n\n{\n  \"label\": \"洋县\",\n  \"value\": \"610723\" },\n\n{\n  \"label\": \"西乡县\",\n  \"value\": \"610724\" },\n\n{\n  \"label\": \"勉县\",\n  \"value\": \"610725\" },\n\n{\n  \"label\": \"宁强县\",\n  \"value\": \"610726\" },\n\n{\n  \"label\": \"略阳县\",\n  \"value\": \"610727\" },\n\n{\n  \"label\": \"镇巴县\",\n  \"value\": \"610728\" },\n\n{\n  \"label\": \"留坝县\",\n  \"value\": \"610729\" },\n\n{\n  \"label\": \"佛坪县\",\n  \"value\": \"610730\" }],\n\n\n[{\n  \"label\": \"榆阳区\",\n  \"value\": \"610802\" },\n\n{\n  \"label\": \"横山区\",\n  \"value\": \"610803\" },\n\n{\n  \"label\": \"府谷县\",\n  \"value\": \"610822\" },\n\n{\n  \"label\": \"靖边县\",\n  \"value\": \"610824\" },\n\n{\n  \"label\": \"定边县\",\n  \"value\": \"610825\" },\n\n{\n  \"label\": \"绥德县\",\n  \"value\": \"610826\" },\n\n{\n  \"label\": \"米脂县\",\n  \"value\": \"610827\" },\n\n{\n  \"label\": \"佳县\",\n  \"value\": \"610828\" },\n\n{\n  \"label\": \"吴堡县\",\n  \"value\": \"610829\" },\n\n{\n  \"label\": \"清涧县\",\n  \"value\": \"610830\" },\n\n{\n  \"label\": \"子洲县\",\n  \"value\": \"610831\" },\n\n{\n  \"label\": \"神木市\",\n  \"value\": \"610881\" }],\n\n\n[{\n  \"label\": \"汉滨区\",\n  \"value\": \"610902\" },\n\n{\n  \"label\": \"汉阴县\",\n  \"value\": \"610921\" },\n\n{\n  \"label\": \"石泉县\",\n  \"value\": \"610922\" },\n\n{\n  \"label\": \"宁陕县\",\n  \"value\": \"610923\" },\n\n{\n  \"label\": \"紫阳县\",\n  \"value\": \"610924\" },\n\n{\n  \"label\": \"岚皋县\",\n  \"value\": \"610925\" },\n\n{\n  \"label\": \"平利县\",\n  \"value\": \"610926\" },\n\n{\n  \"label\": \"镇坪县\",\n  \"value\": \"610927\" },\n\n{\n  \"label\": \"旬阳县\",\n  \"value\": \"610928\" },\n\n{\n  \"label\": \"白河县\",\n  \"value\": \"610929\" }],\n\n\n[{\n  \"label\": \"商州区\",\n  \"value\": \"611002\" },\n\n{\n  \"label\": \"洛南县\",\n  \"value\": \"611021\" },\n\n{\n  \"label\": \"丹凤县\",\n  \"value\": \"611022\" },\n\n{\n  \"label\": \"商南县\",\n  \"value\": \"611023\" },\n\n{\n  \"label\": \"山阳县\",\n  \"value\": \"611024\" },\n\n{\n  \"label\": \"镇安县\",\n  \"value\": \"611025\" },\n\n{\n  \"label\": \"柞水县\",\n  \"value\": \"611026\" }]],\n\n\n\n[\n[{\n  \"label\": \"城关区\",\n  \"value\": \"620102\" },\n\n{\n  \"label\": \"七里河区\",\n  \"value\": \"620103\" },\n\n{\n  \"label\": \"西固区\",\n  \"value\": \"620104\" },\n\n{\n  \"label\": \"安宁区\",\n  \"value\": \"620105\" },\n\n{\n  \"label\": \"红古区\",\n  \"value\": \"620111\" },\n\n{\n  \"label\": \"永登县\",\n  \"value\": \"620121\" },\n\n{\n  \"label\": \"皋兰县\",\n  \"value\": \"620122\" },\n\n{\n  \"label\": \"榆中县\",\n  \"value\": \"620123\" },\n\n{\n  \"label\": \"兰州新区\",\n  \"value\": \"620171\" }],\n\n\n[{\n  \"label\": \"嘉峪关市\",\n  \"value\": \"620201\" }],\n\n[{\n  \"label\": \"金川区\",\n  \"value\": \"620302\" },\n\n{\n  \"label\": \"永昌县\",\n  \"value\": \"620321\" }],\n\n\n[{\n  \"label\": \"白银区\",\n  \"value\": \"620402\" },\n\n{\n  \"label\": \"平川区\",\n  \"value\": \"620403\" },\n\n{\n  \"label\": \"靖远县\",\n  \"value\": \"620421\" },\n\n{\n  \"label\": \"会宁县\",\n  \"value\": \"620422\" },\n\n{\n  \"label\": \"景泰县\",\n  \"value\": \"620423\" }],\n\n\n[{\n  \"label\": \"秦州区\",\n  \"value\": \"620502\" },\n\n{\n  \"label\": \"麦积区\",\n  \"value\": \"620503\" },\n\n{\n  \"label\": \"清水县\",\n  \"value\": \"620521\" },\n\n{\n  \"label\": \"秦安县\",\n  \"value\": \"620522\" },\n\n{\n  \"label\": \"甘谷县\",\n  \"value\": \"620523\" },\n\n{\n  \"label\": \"武山县\",\n  \"value\": \"620524\" },\n\n{\n  \"label\": \"张家川回族自治县\",\n  \"value\": \"620525\" }],\n\n\n[{\n  \"label\": \"凉州区\",\n  \"value\": \"620602\" },\n\n{\n  \"label\": \"民勤县\",\n  \"value\": \"620621\" },\n\n{\n  \"label\": \"古浪县\",\n  \"value\": \"620622\" },\n\n{\n  \"label\": \"天祝藏族自治县\",\n  \"value\": \"620623\" }],\n\n\n[{\n  \"label\": \"甘州区\",\n  \"value\": \"620702\" },\n\n{\n  \"label\": \"肃南裕固族自治县\",\n  \"value\": \"620721\" },\n\n{\n  \"label\": \"民乐县\",\n  \"value\": \"620722\" },\n\n{\n  \"label\": \"临泽县\",\n  \"value\": \"620723\" },\n\n{\n  \"label\": \"高台县\",\n  \"value\": \"620724\" },\n\n{\n  \"label\": \"山丹县\",\n  \"value\": \"620725\" }],\n\n\n[{\n  \"label\": \"崆峒区\",\n  \"value\": \"620802\" },\n\n{\n  \"label\": \"泾川县\",\n  \"value\": \"620821\" },\n\n{\n  \"label\": \"灵台县\",\n  \"value\": \"620822\" },\n\n{\n  \"label\": \"崇信县\",\n  \"value\": \"620823\" },\n\n{\n  \"label\": \"华亭县\",\n  \"value\": \"620824\" },\n\n{\n  \"label\": \"庄浪县\",\n  \"value\": \"620825\" },\n\n{\n  \"label\": \"静宁县\",\n  \"value\": \"620826\" },\n\n{\n  \"label\": \"平凉工业园区\",\n  \"value\": \"620871\" }],\n\n\n[{\n  \"label\": \"肃州区\",\n  \"value\": \"620902\" },\n\n{\n  \"label\": \"金塔县\",\n  \"value\": \"620921\" },\n\n{\n  \"label\": \"瓜州县\",\n  \"value\": \"620922\" },\n\n{\n  \"label\": \"肃北蒙古族自治县\",\n  \"value\": \"620923\" },\n\n{\n  \"label\": \"阿克塞哈萨克族自治县\",\n  \"value\": \"620924\" },\n\n{\n  \"label\": \"玉门市\",\n  \"value\": \"620981\" },\n\n{\n  \"label\": \"敦煌市\",\n  \"value\": \"620982\" }],\n\n\n[{\n  \"label\": \"西峰区\",\n  \"value\": \"621002\" },\n\n{\n  \"label\": \"庆城县\",\n  \"value\": \"621021\" },\n\n{\n  \"label\": \"环县\",\n  \"value\": \"621022\" },\n\n{\n  \"label\": \"华池县\",\n  \"value\": \"621023\" },\n\n{\n  \"label\": \"合水县\",\n  \"value\": \"621024\" },\n\n{\n  \"label\": \"正宁县\",\n  \"value\": \"621025\" },\n\n{\n  \"label\": \"宁县\",\n  \"value\": \"621026\" },\n\n{\n  \"label\": \"镇原县\",\n  \"value\": \"621027\" }],\n\n\n[{\n  \"label\": \"安定区\",\n  \"value\": \"621102\" },\n\n{\n  \"label\": \"通渭县\",\n  \"value\": \"621121\" },\n\n{\n  \"label\": \"陇西县\",\n  \"value\": \"621122\" },\n\n{\n  \"label\": \"渭源县\",\n  \"value\": \"621123\" },\n\n{\n  \"label\": \"临洮县\",\n  \"value\": \"621124\" },\n\n{\n  \"label\": \"漳县\",\n  \"value\": \"621125\" },\n\n{\n  \"label\": \"岷县\",\n  \"value\": \"621126\" }],\n\n\n[{\n  \"label\": \"武都区\",\n  \"value\": \"621202\" },\n\n{\n  \"label\": \"成县\",\n  \"value\": \"621221\" },\n\n{\n  \"label\": \"文县\",\n  \"value\": \"621222\" },\n\n{\n  \"label\": \"宕昌县\",\n  \"value\": \"621223\" },\n\n{\n  \"label\": \"康县\",\n  \"value\": \"621224\" },\n\n{\n  \"label\": \"西和县\",\n  \"value\": \"621225\" },\n\n{\n  \"label\": \"礼县\",\n  \"value\": \"621226\" },\n\n{\n  \"label\": \"徽县\",\n  \"value\": \"621227\" },\n\n{\n  \"label\": \"两当县\",\n  \"value\": \"621228\" }],\n\n\n[{\n  \"label\": \"临夏市\",\n  \"value\": \"622901\" },\n\n{\n  \"label\": \"临夏县\",\n  \"value\": \"622921\" },\n\n{\n  \"label\": \"康乐县\",\n  \"value\": \"622922\" },\n\n{\n  \"label\": \"永靖县\",\n  \"value\": \"622923\" },\n\n{\n  \"label\": \"广河县\",\n  \"value\": \"622924\" },\n\n{\n  \"label\": \"和政县\",\n  \"value\": \"622925\" },\n\n{\n  \"label\": \"东乡族自治县\",\n  \"value\": \"622926\" },\n\n{\n  \"label\": \"积石山保安族东乡族撒拉族自治县\",\n  \"value\": \"622927\" }],\n\n\n[{\n  \"label\": \"合作市\",\n  \"value\": \"623001\" },\n\n{\n  \"label\": \"临潭县\",\n  \"value\": \"623021\" },\n\n{\n  \"label\": \"卓尼县\",\n  \"value\": \"623022\" },\n\n{\n  \"label\": \"舟曲县\",\n  \"value\": \"623023\" },\n\n{\n  \"label\": \"迭部县\",\n  \"value\": \"623024\" },\n\n{\n  \"label\": \"玛曲县\",\n  \"value\": \"623025\" },\n\n{\n  \"label\": \"碌曲县\",\n  \"value\": \"623026\" },\n\n{\n  \"label\": \"夏河县\",\n  \"value\": \"623027\" }]],\n\n\n\n[\n[{\n  \"label\": \"城东区\",\n  \"value\": \"630102\" },\n\n{\n  \"label\": \"城中区\",\n  \"value\": \"630103\" },\n\n{\n  \"label\": \"城西区\",\n  \"value\": \"630104\" },\n\n{\n  \"label\": \"城北区\",\n  \"value\": \"630105\" },\n\n{\n  \"label\": \"大通回族土族自治县\",\n  \"value\": \"630121\" },\n\n{\n  \"label\": \"湟中县\",\n  \"value\": \"630122\" },\n\n{\n  \"label\": \"湟源县\",\n  \"value\": \"630123\" }],\n\n\n[{\n  \"label\": \"乐都区\",\n  \"value\": \"630202\" },\n\n{\n  \"label\": \"平安区\",\n  \"value\": \"630203\" },\n\n{\n  \"label\": \"民和回族土族自治县\",\n  \"value\": \"630222\" },\n\n{\n  \"label\": \"互助土族自治县\",\n  \"value\": \"630223\" },\n\n{\n  \"label\": \"化隆回族自治县\",\n  \"value\": \"630224\" },\n\n{\n  \"label\": \"循化撒拉族自治县\",\n  \"value\": \"630225\" }],\n\n\n[{\n  \"label\": \"门源回族自治县\",\n  \"value\": \"632221\" },\n\n{\n  \"label\": \"祁连县\",\n  \"value\": \"632222\" },\n\n{\n  \"label\": \"海晏县\",\n  \"value\": \"632223\" },\n\n{\n  \"label\": \"刚察县\",\n  \"value\": \"632224\" }],\n\n\n[{\n  \"label\": \"同仁县\",\n  \"value\": \"632321\" },\n\n{\n  \"label\": \"尖扎县\",\n  \"value\": \"632322\" },\n\n{\n  \"label\": \"泽库县\",\n  \"value\": \"632323\" },\n\n{\n  \"label\": \"河南蒙古族自治县\",\n  \"value\": \"632324\" }],\n\n\n[{\n  \"label\": \"共和县\",\n  \"value\": \"632521\" },\n\n{\n  \"label\": \"同德县\",\n  \"value\": \"632522\" },\n\n{\n  \"label\": \"贵德县\",\n  \"value\": \"632523\" },\n\n{\n  \"label\": \"兴海县\",\n  \"value\": \"632524\" },\n\n{\n  \"label\": \"贵南县\",\n  \"value\": \"632525\" }],\n\n\n[{\n  \"label\": \"玛沁县\",\n  \"value\": \"632621\" },\n\n{\n  \"label\": \"班玛县\",\n  \"value\": \"632622\" },\n\n{\n  \"label\": \"甘德县\",\n  \"value\": \"632623\" },\n\n{\n  \"label\": \"达日县\",\n  \"value\": \"632624\" },\n\n{\n  \"label\": \"久治县\",\n  \"value\": \"632625\" },\n\n{\n  \"label\": \"玛多县\",\n  \"value\": \"632626\" }],\n\n\n[{\n  \"label\": \"玉树市\",\n  \"value\": \"632701\" },\n\n{\n  \"label\": \"杂多县\",\n  \"value\": \"632722\" },\n\n{\n  \"label\": \"称多县\",\n  \"value\": \"632723\" },\n\n{\n  \"label\": \"治多县\",\n  \"value\": \"632724\" },\n\n{\n  \"label\": \"囊谦县\",\n  \"value\": \"632725\" },\n\n{\n  \"label\": \"曲麻莱县\",\n  \"value\": \"632726\" }],\n\n\n[{\n  \"label\": \"格尔木市\",\n  \"value\": \"632801\" },\n\n{\n  \"label\": \"德令哈市\",\n  \"value\": \"632802\" },\n\n{\n  \"label\": \"乌兰县\",\n  \"value\": \"632821\" },\n\n{\n  \"label\": \"都兰县\",\n  \"value\": \"632822\" },\n\n{\n  \"label\": \"天峻县\",\n  \"value\": \"632823\" },\n\n{\n  \"label\": \"大柴旦行政委员会\",\n  \"value\": \"632857\" },\n\n{\n  \"label\": \"冷湖行政委员会\",\n  \"value\": \"632858\" },\n\n{\n  \"label\": \"茫崖行政委员会\",\n  \"value\": \"632859\" }]],\n\n\n\n[\n[{\n  \"label\": \"兴庆区\",\n  \"value\": \"640104\" },\n\n{\n  \"label\": \"西夏区\",\n  \"value\": \"640105\" },\n\n{\n  \"label\": \"金凤区\",\n  \"value\": \"640106\" },\n\n{\n  \"label\": \"永宁县\",\n  \"value\": \"640121\" },\n\n{\n  \"label\": \"贺兰县\",\n  \"value\": \"640122\" },\n\n{\n  \"label\": \"灵武市\",\n  \"value\": \"640181\" }],\n\n\n[{\n  \"label\": \"大武口区\",\n  \"value\": \"640202\" },\n\n{\n  \"label\": \"惠农区\",\n  \"value\": \"640205\" },\n\n{\n  \"label\": \"平罗县\",\n  \"value\": \"640221\" }],\n\n\n[{\n  \"label\": \"利通区\",\n  \"value\": \"640302\" },\n\n{\n  \"label\": \"红寺堡区\",\n  \"value\": \"640303\" },\n\n{\n  \"label\": \"盐池县\",\n  \"value\": \"640323\" },\n\n{\n  \"label\": \"同心县\",\n  \"value\": \"640324\" },\n\n{\n  \"label\": \"青铜峡市\",\n  \"value\": \"640381\" }],\n\n\n[{\n  \"label\": \"原州区\",\n  \"value\": \"640402\" },\n\n{\n  \"label\": \"西吉县\",\n  \"value\": \"640422\" },\n\n{\n  \"label\": \"隆德县\",\n  \"value\": \"640423\" },\n\n{\n  \"label\": \"泾源县\",\n  \"value\": \"640424\" },\n\n{\n  \"label\": \"彭阳县\",\n  \"value\": \"640425\" }],\n\n\n[{\n  \"label\": \"沙坡头区\",\n  \"value\": \"640502\" },\n\n{\n  \"label\": \"中宁县\",\n  \"value\": \"640521\" },\n\n{\n  \"label\": \"海原县\",\n  \"value\": \"640522\" }]],\n\n\n\n[\n[{\n  \"label\": \"天山区\",\n  \"value\": \"650102\" },\n\n{\n  \"label\": \"沙依巴克区\",\n  \"value\": \"650103\" },\n\n{\n  \"label\": \"新市区\",\n  \"value\": \"650104\" },\n\n{\n  \"label\": \"水磨沟区\",\n  \"value\": \"650105\" },\n\n{\n  \"label\": \"头屯河区\",\n  \"value\": \"650106\" },\n\n{\n  \"label\": \"达坂城区\",\n  \"value\": \"650107\" },\n\n{\n  \"label\": \"米东区\",\n  \"value\": \"650109\" },\n\n{\n  \"label\": \"乌鲁木齐县\",\n  \"value\": \"650121\" },\n\n{\n  \"label\": \"乌鲁木齐经济技术开发区\",\n  \"value\": \"650171\" },\n\n{\n  \"label\": \"乌鲁木齐高新技术产业开发区\",\n  \"value\": \"650172\" }],\n\n\n[{\n  \"label\": \"独山子区\",\n  \"value\": \"650202\" },\n\n{\n  \"label\": \"克拉玛依区\",\n  \"value\": \"650203\" },\n\n{\n  \"label\": \"白碱滩区\",\n  \"value\": \"650204\" },\n\n{\n  \"label\": \"乌尔禾区\",\n  \"value\": \"650205\" }],\n\n\n[{\n  \"label\": \"高昌区\",\n  \"value\": \"650402\" },\n\n{\n  \"label\": \"鄯善县\",\n  \"value\": \"650421\" },\n\n{\n  \"label\": \"托克逊县\",\n  \"value\": \"650422\" }],\n\n\n[{\n  \"label\": \"伊州区\",\n  \"value\": \"650502\" },\n\n{\n  \"label\": \"巴里坤哈萨克自治县\",\n  \"value\": \"650521\" },\n\n{\n  \"label\": \"伊吾县\",\n  \"value\": \"650522\" }],\n\n\n[{\n  \"label\": \"昌吉市\",\n  \"value\": \"652301\" },\n\n{\n  \"label\": \"阜康市\",\n  \"value\": \"652302\" },\n\n{\n  \"label\": \"呼图壁县\",\n  \"value\": \"652323\" },\n\n{\n  \"label\": \"玛纳斯县\",\n  \"value\": \"652324\" },\n\n{\n  \"label\": \"奇台县\",\n  \"value\": \"652325\" },\n\n{\n  \"label\": \"吉木萨尔县\",\n  \"value\": \"652327\" },\n\n{\n  \"label\": \"木垒哈萨克自治县\",\n  \"value\": \"652328\" }],\n\n\n[{\n  \"label\": \"博乐市\",\n  \"value\": \"652701\" },\n\n{\n  \"label\": \"阿拉山口市\",\n  \"value\": \"652702\" },\n\n{\n  \"label\": \"精河县\",\n  \"value\": \"652722\" },\n\n{\n  \"label\": \"温泉县\",\n  \"value\": \"652723\" }],\n\n\n[{\n  \"label\": \"库尔勒市\",\n  \"value\": \"652801\" },\n\n{\n  \"label\": \"轮台县\",\n  \"value\": \"652822\" },\n\n{\n  \"label\": \"尉犁县\",\n  \"value\": \"652823\" },\n\n{\n  \"label\": \"若羌县\",\n  \"value\": \"652824\" },\n\n{\n  \"label\": \"且末县\",\n  \"value\": \"652825\" },\n\n{\n  \"label\": \"焉耆回族自治县\",\n  \"value\": \"652826\" },\n\n{\n  \"label\": \"和静县\",\n  \"value\": \"652827\" },\n\n{\n  \"label\": \"和硕县\",\n  \"value\": \"652828\" },\n\n{\n  \"label\": \"博湖县\",\n  \"value\": \"652829\" },\n\n{\n  \"label\": \"库尔勒经济技术开发区\",\n  \"value\": \"652871\" }],\n\n\n[{\n  \"label\": \"阿克苏市\",\n  \"value\": \"652901\" },\n\n{\n  \"label\": \"温宿县\",\n  \"value\": \"652922\" },\n\n{\n  \"label\": \"库车县\",\n  \"value\": \"652923\" },\n\n{\n  \"label\": \"沙雅县\",\n  \"value\": \"652924\" },\n\n{\n  \"label\": \"新和县\",\n  \"value\": \"652925\" },\n\n{\n  \"label\": \"拜城县\",\n  \"value\": \"652926\" },\n\n{\n  \"label\": \"乌什县\",\n  \"value\": \"652927\" },\n\n{\n  \"label\": \"阿瓦提县\",\n  \"value\": \"652928\" },\n\n{\n  \"label\": \"柯坪县\",\n  \"value\": \"652929\" }],\n\n\n[{\n  \"label\": \"阿图什市\",\n  \"value\": \"653001\" },\n\n{\n  \"label\": \"阿克陶县\",\n  \"value\": \"653022\" },\n\n{\n  \"label\": \"阿合奇县\",\n  \"value\": \"653023\" },\n\n{\n  \"label\": \"乌恰县\",\n  \"value\": \"653024\" }],\n\n\n[{\n  \"label\": \"喀什市\",\n  \"value\": \"653101\" },\n\n{\n  \"label\": \"疏附县\",\n  \"value\": \"653121\" },\n\n{\n  \"label\": \"疏勒县\",\n  \"value\": \"653122\" },\n\n{\n  \"label\": \"英吉沙县\",\n  \"value\": \"653123\" },\n\n{\n  \"label\": \"泽普县\",\n  \"value\": \"653124\" },\n\n{\n  \"label\": \"莎车县\",\n  \"value\": \"653125\" },\n\n{\n  \"label\": \"叶城县\",\n  \"value\": \"653126\" },\n\n{\n  \"label\": \"麦盖提县\",\n  \"value\": \"653127\" },\n\n{\n  \"label\": \"岳普湖县\",\n  \"value\": \"653128\" },\n\n{\n  \"label\": \"伽师县\",\n  \"value\": \"653129\" },\n\n{\n  \"label\": \"巴楚县\",\n  \"value\": \"653130\" },\n\n{\n  \"label\": \"塔什库尔干塔吉克自治县\",\n  \"value\": \"653131\" }],\n\n\n[{\n  \"label\": \"和田市\",\n  \"value\": \"653201\" },\n\n{\n  \"label\": \"和田县\",\n  \"value\": \"653221\" },\n\n{\n  \"label\": \"墨玉县\",\n  \"value\": \"653222\" },\n\n{\n  \"label\": \"皮山县\",\n  \"value\": \"653223\" },\n\n{\n  \"label\": \"洛浦县\",\n  \"value\": \"653224\" },\n\n{\n  \"label\": \"策勒县\",\n  \"value\": \"653225\" },\n\n{\n  \"label\": \"于田县\",\n  \"value\": \"653226\" },\n\n{\n  \"label\": \"民丰县\",\n  \"value\": \"653227\" }],\n\n\n[{\n  \"label\": \"伊宁市\",\n  \"value\": \"654002\" },\n\n{\n  \"label\": \"奎屯市\",\n  \"value\": \"654003\" },\n\n{\n  \"label\": \"霍尔果斯市\",\n  \"value\": \"654004\" },\n\n{\n  \"label\": \"伊宁县\",\n  \"value\": \"654021\" },\n\n{\n  \"label\": \"察布查尔锡伯自治县\",\n  \"value\": \"654022\" },\n\n{\n  \"label\": \"霍城县\",\n  \"value\": \"654023\" },\n\n{\n  \"label\": \"巩留县\",\n  \"value\": \"654024\" },\n\n{\n  \"label\": \"新源县\",\n  \"value\": \"654025\" },\n\n{\n  \"label\": \"昭苏县\",\n  \"value\": \"654026\" },\n\n{\n  \"label\": \"特克斯县\",\n  \"value\": \"654027\" },\n\n{\n  \"label\": \"尼勒克县\",\n  \"value\": \"654028\" }],\n\n\n[{\n  \"label\": \"塔城市\",\n  \"value\": \"654201\" },\n\n{\n  \"label\": \"乌苏市\",\n  \"value\": \"654202\" },\n\n{\n  \"label\": \"额敏县\",\n  \"value\": \"654221\" },\n\n{\n  \"label\": \"沙湾县\",\n  \"value\": \"654223\" },\n\n{\n  \"label\": \"托里县\",\n  \"value\": \"654224\" },\n\n{\n  \"label\": \"裕民县\",\n  \"value\": \"654225\" },\n\n{\n  \"label\": \"和布克赛尔蒙古自治县\",\n  \"value\": \"654226\" }],\n\n\n[{\n  \"label\": \"阿勒泰市\",\n  \"value\": \"654301\" },\n\n{\n  \"label\": \"布尔津县\",\n  \"value\": \"654321\" },\n\n{\n  \"label\": \"富蕴县\",\n  \"value\": \"654322\" },\n\n{\n  \"label\": \"福海县\",\n  \"value\": \"654323\" },\n\n{\n  \"label\": \"哈巴河县\",\n  \"value\": \"654324\" },\n\n{\n  \"label\": \"青河县\",\n  \"value\": \"654325\" },\n\n{\n  \"label\": \"吉木乃县\",\n  \"value\": \"654326\" }],\n\n\n[{\n  \"label\": \"石河子市\",\n  \"value\": \"659001\" },\n\n{\n  \"label\": \"阿拉尔市\",\n  \"value\": \"659002\" },\n\n{\n  \"label\": \"图木舒克市\",\n  \"value\": \"659003\" },\n\n{\n  \"label\": \"五家渠市\",\n  \"value\": \"659004\" },\n\n{\n  \"label\": \"铁门关市\",\n  \"value\": \"659006\" }]],\n\n\n\n[\n[{\n  \"label\": \"台北\",\n  \"value\": \"660101\" }],\n\n[{\n  \"label\": \"高雄\",\n  \"value\": \"660201\" }],\n\n[{\n  \"label\": \"基隆\",\n  \"value\": \"660301\" }],\n\n[{\n  \"label\": \"台中\",\n  \"value\": \"660401\" }],\n\n[{\n  \"label\": \"台南\",\n  \"value\": \"660501\" }],\n\n[{\n  \"label\": \"新竹\",\n  \"value\": \"660601\" }],\n\n[{\n  \"label\": \"嘉义\",\n  \"value\": \"660701\" }],\n\n[{\n  \"label\": \"宜兰\",\n  \"value\": \"660801\" }],\n\n[{\n  \"label\": \"桃园\",\n  \"value\": \"660901\" }],\n\n[{\n  \"label\": \"苗栗\",\n  \"value\": \"661001\" }],\n\n[{\n  \"label\": \"彰化\",\n  \"value\": \"661101\" }],\n\n[{\n  \"label\": \"南投\",\n  \"value\": \"661201\" }],\n\n[{\n  \"label\": \"云林\",\n  \"value\": \"661301\" }],\n\n[{\n  \"label\": \"屏东\",\n  \"value\": \"661401\" }],\n\n[{\n  \"label\": \"台东\",\n  \"value\": \"661501\" }],\n\n[{\n  \"label\": \"花莲\",\n  \"value\": \"661601\" }],\n\n[{\n  \"label\": \"澎湖\",\n  \"value\": \"661701\" }]],\n\n\n[\n[{\n  \"label\": \"香港岛\",\n  \"value\": \"670101\" }],\n\n[{\n  \"label\": \"九龙\",\n  \"value\": \"670201\" }],\n\n[{\n  \"label\": \"新界\",\n  \"value\": \"670301\" }]],\n\n\n[\n[{\n  \"label\": \"澳门半岛\",\n  \"value\": \"680101\" }],\n\n[{\n  \"label\": \"氹仔岛\",\n  \"value\": \"680201\" }],\n\n[{\n  \"label\": \"路环岛\",\n  \"value\": \"680301\" }],\n\n[{\n  \"label\": \"路氹城\",\n  \"value\": \"680401\" }]]];var _default =\n\n\n\nareaData;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///182\n");

/***/ }),

/***/ 183:
/*!****************************************************************************!*\
  !*** D:/张总新版app/maiYa01/components/uniapp-components/w-picker/w-picker.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var forMatNum = function forMatNum(num) {\n  return num < 10 ? '0' + num : num + '';\n};\nvar initPicker = {\n  //日期\n  date: {\n    init: function init(start, end) {var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"date\";var step = arguments.length > 3 ? arguments[3] : undefined;var value = arguments.length > 4 ? arguments[4] : undefined;var flag = arguments.length > 5 ? arguments[5] : undefined;var disabled = arguments.length > 6 ? arguments[6] : undefined;\n      var aToday = new Date();\n      var tYear,tMonth,tDay,tHours,tMinutes,tSeconds,defaultVal = [];\n      var initstartDate = new Date(start.toString());\n      var endDate = new Date(end.toString());\n      if (start > end) {\n        initstartDate = new Date(end.toString());\n        endDate = new Date(start.toString());\n      };\n      var startYear = initstartDate.getFullYear();\n      var startMonth = initstartDate.getMonth() + 1;\n      var endYear = endDate.getFullYear();\n      var years = [],months = [],days = [],hours = [],minutes = [],seconds = [],areas = [],returnArr = [];\n      var curMonth = flag ? value[1] * 1 : value[1] + 1;\n      var dYear = aToday.getFullYear();\n      var dMonth = aToday.getMonth() + 1;\n      var dDate = aToday.getDate();\n      var totalDays = new Date(startYear, curMonth, 0).getDate();\n      for (var s = startYear; s <= endYear; s++) {\n        years.push(s + '');\n      };\n      var curYear = years[value[0]];\n      switch (mode) {\n        case \"half\":\n        case \"date\":\n        case \"yearMonth\":\n          if (disabled && curYear == dYear) {\n            for (var m = 1; m <= dMonth; m++) {\n              months.push(forMatNum(m));\n            };\n            for (var d = 1; d <= dDate; d++) {\n              days.push(forMatNum(d));\n            }\n          } else {\n            for (var _m = 1; _m <= 12; _m++) {\n              months.push(forMatNum(_m));\n            };\n            for (var _d = 1; _d <= totalDays; _d++) {\n              days.push(forMatNum(_d));\n            }\n          };\n          break;\n        default:\n          for (var _m2 = 1; _m2 <= 12; _m2++) {\n            months.push(forMatNum(_m2));\n          };\n          for (var _d2 = 1; _d2 <= totalDays; _d2++) {\n            days.push(forMatNum(_d2));\n          }\n          break;}\n\n      for (var h = 0; h < 24; h++) {\n        hours.push(forMatNum(h));\n      }\n      for (var _m3 = 0; _m3 < 60; _m3 += step * 1) {\n        minutes.push(forMatNum(_m3));\n      }\n      for (var _s = 0; _s < 60; _s++) {\n        seconds.push(forMatNum(_s));\n      }\n      if (flag) {\n        returnArr = [\n        years.indexOf(value[0]),\n        months.indexOf(value[1]),\n        days.indexOf(value[2]),\n        hours.indexOf(value[3]),\n        minutes.indexOf(value[4]) == -1 ? 0 : minutes.indexOf(value[4]),\n        seconds.indexOf(value[5])];\n\n      };\n      switch (mode) {\n        case \"range\":\n          if (flag) {\n            defaultVal = [returnArr[0], returnArr[1], returnArr[2], 0, returnArr[0], returnArr[1], returnArr[2]];\n            return { years: years, months: months, days: days, defaultVal: defaultVal };\n          } else {\n            return { years: years, months: months, days: days };\n          }\n          break;\n        case \"date\":\n          if (flag) {\n            defaultVal = [returnArr[0], returnArr[1], returnArr[2]];\n            return { years: years, months: months, days: days, defaultVal: defaultVal };\n          } else {\n            return { years: years, months: months, days: days };\n          }\n          break;\n        case \"half\":\n          areas = [{\n            label: \"上午\",\n            value: 0 },\n          {\n            label: \"下午\",\n            value: 1 }];\n\n          if (flag) {\n            defaultVal = [returnArr[0], returnArr[1], returnArr[2], returnArr[3]];\n            return { years: years, months: months, days: days, areas: areas, defaultVal: defaultVal };\n          } else {\n            return { years: years, months: months, days: days, areas: areas };\n          }\n          break;\n        case \"yearMonth\":\n          if (flag) {\n            defaultVal = [returnArr[0], returnArr[1]];\n            return { years: years, months: months, defaultVal: defaultVal };\n          } else {\n            return { years: years, months: months };\n          }\n          break;\n        case \"dateTime\":\n          if (flag) {\n            defaultVal = returnArr;\n            return { years: years, months: months, days: days, hours: hours, minutes: minutes, seconds: seconds, defaultVal: defaultVal };\n          } else {\n            return { years: years, months: months, days: days, hours: hours, minutes: minutes, seconds: seconds };\n          }\n          break;\n        case \"time\":\n          if (flag) {\n            defaultVal = [returnArr[3], returnArr[4], returnArr[5]];\n            return { hours: hours, minutes: minutes, seconds: seconds, defaultVal: defaultVal };\n          } else {\n            return { hours: hours, minutes: minutes, seconds: seconds };\n          }\n          break;}\n\n    },\n    initMonths: function initMonths(year, disabled) {\n      var aDate = new Date();\n      var dYear = aDate.getFullYear();\n      var dMonth = aDate.getMonth() + 1;\n      var dDate = aDate.getDate();\n      var flag = dYear == year ? true : false;\n      var months = [];\n      if (flag && disabled) {\n        for (var m = 1; m <= dMonth; m++) {\n          months.push(forMatNum(m));\n        };\n      } else {\n        for (var _m4 = 1; _m4 <= 12; _m4++) {\n          months.push(forMatNum(_m4));\n        };\n      };\n      return months;\n    },\n    initDays: function initDays(year, month, disabled) {\n      var aDate = new Date();\n      var dYear = aDate.getFullYear();\n      var dMonth = aDate.getMonth() + 1;\n      var dDate = aDate.getDate();\n      var flag = dYear == year && dMonth == month ? true : false;\n      var totalDays = new Date(year, month, 0).getDate();\n      var dates = [];\n      if (flag && disabled) {\n        for (var d = 1; d <= dDate; d++) {\n          dates.push(forMatNum(d));\n        };\n      } else {\n        for (var _d3 = 1; _d3 <= totalDays; _d3++) {\n          dates.push(forMatNum(_d3));\n        };\n      };\n      return dates;\n    } },\n\n  //短期日期上下午\n  limitHour: {\n    init: function init() {var dayStep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 7;\n      var startDate = new Date();\n      var date = [],areas = [],hours = [];\n      var hour = new Date().getHours();\n      var weeks = [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"];\n      var arrs = [];\n      for (var i = 0; i < dayStep; i++) {\n        var year = void 0,month = void 0,day = void 0,weekday = void 0;\n        year = startDate.getFullYear();\n        month = forMatNum(startDate.getMonth() + 1);\n        day = forMatNum(startDate.getDate());\n        weekday = weeks[startDate.getDay()];\n        var label = \"\";\n        switch (i) {\n          case 0:\n            label = \"今天\";\n            break;\n          case 1:\n            label = \"明天\";\n            break;\n          case 2:\n            label = \"后天\";\n            break;\n          default:\n            label = month + \"月\" + day + \"日\" + \" \" + weekday;\n            break;}\n\n        date.push({\n          label: label,\n          value: year + \"-\" + month + \"-\" + day,\n          today: i == 0 ? true : false });\n\n        startDate.setDate(startDate.getDate() + 1);\n      }\n      if (hour > 12) {\n        areas = [{\n          label: \"下午\",\n          value: 1 }];\n\n      } else {\n        areas = [{\n          label: \"上午\",\n          value: 0 },\n        {\n          label: \"下午\",\n          value: 1 }];\n\n      };\n      for (var k = hour > 12 ? hour - 12 : hour; k <= 12; k++) {\n        hours.push({\n          label: forMatNum(k),\n          value: forMatNum(hour > 12 ? k + 12 : k) });\n\n      };\n      return { date: date, areas: areas, hours: hours };\n    },\n    initAreas: function initAreas(date) {\n      var areas = [];\n      var hour = new Date().getHours();\n      if (date.today) {\n        if (hour > 12) {\n          areas = [{\n            label: \"下午\",\n            value: 1 }];\n\n        } else {\n          areas = [{\n            label: \"上午\",\n            value: 0 },\n          {\n            label: \"下午\",\n            value: 1 }];\n\n        };\n      } else {\n        areas = [{\n          label: \"上午\",\n          value: 0 },\n        {\n          label: \"下午\",\n          value: 1 }];\n\n      }\n      return areas;areas = [{\n        label: \"上午\",\n        value: 0 },\n      {\n        label: \"下午\",\n        value: 1 }];\n\n    },\n    initHours: function initHours(dateCol, hourCol) {\n      var hours = [];\n      var hour = new Date().getHours();\n      if (dateCol.today) {\n        if (hourCol.value == 1 && hour <= 12) {\n          for (var k = 1; k <= 12; k++) {\n            hours.push({\n              label: forMatNum(k),\n              value: forMatNum(hourCol.value == 1 ? k + 12 : k) });\n\n          };\n        } else {\n          for (var _k = hour > 12 ? hour - 12 : hour; _k <= 12; _k++) {\n            hours.push({\n              label: forMatNum(_k),\n              value: forMatNum(hourCol.value == 1 ? _k + 12 : _k) });\n\n          };\n        }\n\n      } else {\n        for (var _k2 = 1; _k2 <= 12; _k2++) {\n          hours.push({\n            label: forMatNum(_k2),\n            value: forMatNum(hourCol.value == 1 ? _k2 + 12 : _k2) });\n\n        };\n      };\n      return hours;\n    } },\n\n  //短期日期时间初始化\n  limit: {\n    init: function init() {var dayStep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 7;var startHour = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 8;var endHour = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 20;var minuteStep = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;var afterStep = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 30;\n      var startDate = new Date();\n      var bsDate = new Date(new Date().getTime() + afterStep * 60 * 1000);\n      var date = [],hours = [],minutes = [];\n      var hour = bsDate.getHours();\n      var minute = Math.floor(bsDate.getMinutes() / minuteStep) * minuteStep;\n      var weeks = [\"周日\", \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\"];\n      for (var i = 0; i < dayStep; i++) {\n        var year = void 0,month = void 0,day = void 0,weekday = void 0;\n        year = startDate.getFullYear();\n        month = forMatNum(startDate.getMonth() + 1);\n        day = forMatNum(startDate.getDate());\n        weekday = weeks[startDate.getDay()];\n        var label = \"\";\n        switch (i) {\n          case 0:\n            label = \"今天\";\n            break;\n          case 1:\n            label = \"明天\";\n            break;\n          case 2:\n            label = \"后天\";\n            break;\n          default:\n            label = month + \"月\" + day + \"日\" + \" \" + weekday;\n            break;}\n\n        date.push({\n          label: label,\n          value: year + \"-\" + month + \"-\" + day,\n          flag: i == 0 ? true : false });\n\n        startDate.setDate(startDate.getDate() + 1);\n      }\n      if (hour < startHour) {\n        hour = startHour;\n      };\n      if (hour > endHour) {\n        hour = endHour;\n      };\n      for (var k = hour * 1; k <= endHour * 1; k++) {\n        hours.push({\n          label: forMatNum(k),\n          value: forMatNum(k),\n          flag: k == hour ? true : false });\n\n      };\n      for (var j = minute; j < 60; j += minuteStep * 1) {\n        minutes.push({\n          label: forMatNum(j),\n          value: forMatNum(j) });\n\n      }\n      return { date: date, hours: hours, minutes: minutes };\n    },\n    initHours: function initHours() {var startHour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;var endHour = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;var minuteStep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;var afterStep = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;var date = arguments.length > 4 ? arguments[4] : undefined;\n      var hours = [];\n      var arr = date.split(\"-\");\n      var aDate = new Date();\n      var dYear = aDate.getFullYear();\n      var dMonth = aDate.getMonth() + 1;\n      var dDate = aDate.getDate();\n      var bsDate = new Date(new Date().getTime() + afterStep * 60 * 1000);\n      var hour = bsDate.getHours();\n      var flag = dYear == arr[0] && dMonth == arr[1] && dDate == arr[2] ? true : false;\n      if (hour > endHour) {\n        hour = endHour;\n      };\n      if (flag) {\n        for (var k = hour * 1; k <= endHour * 1; k++) {\n          hours.push({\n            label: forMatNum(k),\n            value: forMatNum(k),\n            flag: k == hour ? true : false });\n\n        };\n      } else {\n        for (var _k3 = startHour * 1; _k3 <= endHour * 1; _k3++) {\n          hours.push({\n            label: forMatNum(_k3),\n            value: forMatNum(_k3),\n            flag: false });\n\n        }\n      };\n      return hours;\n    },\n    initMinutes: function initMinutes() {var startHour = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;var endHour = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;var minuteStep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;var afterStep = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 30;var date = arguments.length > 4 ? arguments[4] : undefined;var hour = arguments.length > 5 ? arguments[5] : undefined;\n      var minutes = [];\n      var bsDate = new Date(new Date().getTime() + afterStep * 60 * 1000);\n      var arr = date.split(\"-\");\n      var aDate = new Date();\n      var dYear = aDate.getFullYear();\n      var dMonth = aDate.getMonth() + 1;\n      var dDate = aDate.getDate();\n      var dHour = bsDate.getHours();;\n      var minute = Math.floor(bsDate.getMinutes() / minuteStep) * minuteStep;\n      var flag = dYear == arr[0] && dMonth == arr[1] && dDate == arr[2] ? true : false;\n      if (flag) {\n        if (hour == dHour) {\n          for (var j = minute; j < 60; j += minuteStep * 1) {\n            minutes.push({\n              label: forMatNum(j),\n              value: forMatNum(j) });\n\n          }\n        } else {\n          for (var _j = 0; _j < 60; _j += minuteStep * 1) {\n            minutes.push({\n              label: forMatNum(_j),\n              value: forMatNum(_j) });\n\n          }\n        }\n\n      } else {\n        for (var _j2 = 0; _j2 < 60; _j2 += minuteStep * 1) {\n          minutes.push({\n            label: forMatNum(_j2),\n            value: forMatNum(_j2) });\n\n        }\n      }\n      return minutes;\n    } },\n\n  //选择区间初始化\n  range: {\n    init: function init(start, end, value, flag) {\n      var aToday = new Date();\n      var tYear,tMonth,tDay,tHours,tMinutes,tSeconds,defaultVal = [];\n      var initstartDate = new Date(start.toString());\n      var endDate = new Date(end.toString());\n      if (start > end) {\n        initstartDate = new Date(end.toString());\n        endDate = new Date(start.toString());\n      };\n      var startYear = initstartDate.getFullYear();\n      var startMonth = initstartDate.getMonth() + 1;\n      var endYear = endDate.getFullYear();\n      var fyears = [],fmonths = [],fdays = [],tyears = [],tmonths = [],tdays = [],returnArr = [];\n      var curMonth = flag ? value[1] * 1 : value[1] + 1;\n      var totalDays = new Date(startYear, curMonth, 0).getDate();\n      for (var s = startYear; s <= endYear; s++) {\n        fyears.push(s + '');\n      };\n      for (var m = 1; m <= 12; m++) {\n        fmonths.push(forMatNum(m));\n      };\n      for (var d = 1; d <= totalDays; d++) {\n        fdays.push(forMatNum(d));\n      };\n      for (var _s2 = startYear; _s2 <= endYear; _s2++) {\n        tyears.push(_s2 + '');\n      };\n      for (var _m5 = 1; _m5 <= 12; _m5++) {\n        tmonths.push(forMatNum(_m5));\n      };\n      for (var _d4 = 1; _d4 <= totalDays; _d4++) {\n        tdays.push(forMatNum(_d4));\n      };\n      if (flag) {\n        defaultVal = [\n        fyears.indexOf(value[0]),\n        fmonths.indexOf(value[1]),\n        fdays.indexOf(value[2]),\n        0,\n        tyears.indexOf(value[0]),\n        tmonths.indexOf(value[1]),\n        tdays.indexOf(value[2])];\n\n        return {\n          fyears: fyears,\n          fmonths: fmonths,\n          fdays: fdays,\n          tyears: tyears,\n          tmonths: tmonths,\n          tdays: tdays,\n          defaultVal: defaultVal };\n\n      } else {\n        return {\n          fyears: fyears,\n          fmonths: fmonths,\n          fdays: fdays,\n          tyears: tyears,\n          tmonths: tmonths,\n          tdays: tdays };\n\n      }\n    },\n    initDays: function initDays(year, month) {\n      var totalDays = new Date(year, month, 0).getDate();\n      var dates = [];\n      for (var d = 1; d <= totalDays; d++) {\n        dates.push(forMatNum(d));\n      };\n      return dates;\n    } } };var _default =\n\n\n\ninitPicker;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///183\n");

/***/ }),

/***/ 19:
/*!*****************************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/utils/msgpackager.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var WebIM = __webpack_require__(/*! ./WebIM */ 20)[\"default\"];\nvar msgType = __webpack_require__(/*! ./msgtype */ 27);\n\nmodule.exports = function (sendableMsg, type, myName) {\n  // console.log(\"配置消息数据格式化\",sendableMsg)\n  var time = WebIM.time();\n  var renderableMsg = {\n    chatType: sendableMsg.body.chatType,\n    info: {\n      from: sendableMsg.body.from,\n      to: sendableMsg.body.to },\n\n    username: sendableMsg.body.from == myName ? sendableMsg.body.to : sendableMsg.body.from,\n    toIf: sendableMsg.body.from == myName ? sendableMsg.body.to : sendableMsg.body.from,\n    yourname: sendableMsg.body.from,\n    fromId: sendableMsg.body.from,\n    fromAvatar: sendableMsg.body.ext.fromAvatar,\n    yonghuName: sendableMsg.body.ext.yonghuName,\n    fromName: sendableMsg.body.ext.fromName,\n    fromUserId: sendableMsg.body.ext.fromUserId,\n    hxMsgId: sendableMsg.body.ext.hxMsgId, // 当前消息本地生成的hx的id,下面的mid\n    ext: sendableMsg.body.ext,\n    id: '', // 后台生成的列表数据id\n    msgId: \"\", // 环信实时回调生成的id\n    msg: {\n      type: type,\n      url: sendableMsg.body.body.url,\n      list: getMsgData(sendableMsg, type) },\n\n    style: sendableMsg.body.from == myName ? \"self\" : \"\",\n    time: time,\n    createTime: time,\n    mid: sendableMsg.type + sendableMsg.id,\n    type: sendableMsg.type // 消息类型\n  };\n  if (type == msgType.IMAGE) {\n    renderableMsg.msg.size = {\n      width: sendableMsg.body.body.size.width,\n      height: sendableMsg.body.body.size.height };\n\n  } else if (type == msgType.AUDIO) {\n    renderableMsg.msg.length = sendableMsg.body.length;\n  } else if (type == msgType.FILE) {\n    renderableMsg.msg.data = [{ data: \"[当前不支持此格式消息展示]\", type: \"txt\" }];\n    renderableMsg.msg.type = 'txt';\n  }\n  return renderableMsg;\n\n  function getMsgData(sendableMsg, type) {\n    if (type == msgType.TEXT) {\n      return WebIM.parseEmoji(sendableMsg.value.replace(/\\n/mg, \"\"));\n    } else\n    if (type == msgType.EMOJI) {\n      return sendableMsg.value;\n    } else\n    if (type == msgType.IMAGE || type == msgType.VIDEO || type == msgType.AUDIO) {\n      return sendableMsg.body.body.url;\n    } else if (type == msgType.FILE) {\n      return sendableMsg.body.body.msg;\n    }\n    return \"\";\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vd2ViSU0vdXRpbHMvbXNncGFja2FnZXIuanMiXSwibmFtZXMiOlsiV2ViSU0iLCJyZXF1aXJlIiwibXNnVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZW5kYWJsZU1zZyIsInR5cGUiLCJteU5hbWUiLCJ0aW1lIiwicmVuZGVyYWJsZU1zZyIsImNoYXRUeXBlIiwiYm9keSIsImluZm8iLCJmcm9tIiwidG8iLCJ1c2VybmFtZSIsInRvSWYiLCJ5b3VybmFtZSIsImZyb21JZCIsImZyb21BdmF0YXIiLCJleHQiLCJ5b25naHVOYW1lIiwiZnJvbU5hbWUiLCJmcm9tVXNlcklkIiwiaHhNc2dJZCIsImlkIiwibXNnSWQiLCJtc2ciLCJ1cmwiLCJsaXN0IiwiZ2V0TXNnRGF0YSIsInN0eWxlIiwiY3JlYXRlVGltZSIsIm1pZCIsIklNQUdFIiwic2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiQVVESU8iLCJsZW5ndGgiLCJGSUxFIiwiZGF0YSIsIlRFWFQiLCJwYXJzZUVtb2ppIiwidmFsdWUiLCJyZXBsYWNlIiwiRU1PSkkiLCJWSURFTyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsS0FBSyxHQUFHQyxtQkFBTyxDQUFDLGlCQUFELENBQVAsQ0FBbUIsU0FBbkIsQ0FBWjtBQUNBLElBQUlDLE9BQU8sR0FBR0QsbUJBQU8sQ0FBQyxtQkFBRCxDQUFyQjs7QUFFQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVNDLFdBQVQsRUFBc0JDLElBQXRCLEVBQTRCQyxNQUE1QixFQUFtQztBQUNuRDtBQUNBLE1BQUlDLElBQUksR0FBR1IsS0FBSyxDQUFDUSxJQUFOLEVBQVg7QUFDQSxNQUFJQyxhQUFhLEdBQUc7QUFDbkJDLFlBQVEsRUFBRUwsV0FBVyxDQUFDTSxJQUFaLENBQWlCRCxRQURSO0FBRW5CRSxRQUFJLEVBQUU7QUFDTEMsVUFBSSxFQUFFUixXQUFXLENBQUNNLElBQVosQ0FBaUJFLElBRGxCO0FBRUxDLFFBQUUsRUFBRVQsV0FBVyxDQUFD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ekI7QUFDQTtBQUNELFNBQU9HLGFBQVA7O0FBRUEsV0FBU3FCLFVBQVQsQ0FBb0J6QixXQUFwQixFQUFpQ0MsSUFBakMsRUFBc0M7QUFDckMsUUFBR0EsSUFBSSxJQUFJSixPQUFPLENBQUN3QyxJQUFuQixFQUF3QjtBQUN2QixhQUFPMUMsS0FBSyxDQUFDMkMsVUFBTixDQUFpQnRDLFdBQVcsQ0FBQ3VDLEtBQVosQ0FBa0JDLE9BQWxCLENBQTBCLE1BQTFCLEVBQWtDLEVBQWxDLENBQWpCLENBQVA7QUFDQSxLQUZEO0FBR0ssUUFBR3ZDLElBQUksSUFBSUosT0FBTyxDQUFDNEMsS0FBbkIsRUFBeUI7QUFDN0IsYUFBT3pDLFdBQVcsQ0FBQ3VDLEtBQW5CO0FBQ0EsS0FGSTtBQUdBLFFBQUd0QyxJQUFJLElBQUlKLE9BQU8sQ0FBQ2dDLEtBQWhCLElBQXlCNUIsSUFBSSxJQUFJSixPQUFPLENBQUM2QyxLQUF6QyxJQUFrRHpDLElBQUksSUFBSUosT0FBTyxDQUFDb0MsS0FBckUsRUFBMkU7QUFDL0UsYUFBT2pDLFdBQVcsQ0FBQ00sSUFBWixDQUFpQkEsSUFBakIsQ0FBc0JpQixHQUE3QjtBQUNBLEtBRkksTUFFRSxJQUFJdEIsSUFBSSxJQUFJSixPQUFPLENBQUNzQyxJQUFwQixFQUEwQjtBQUNoQyxhQUFPbkMsV0FBVyxDQUFDTSxJQUFaLENBQWlCQSxJQUFqQixDQUFzQmdCLEdBQTdCO0FBQ0E7QUFDRCxXQUFPLEVBQVA7QUFDQTtBQUNELENBM0REIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IFdlYklNID0gcmVxdWlyZShcIi4vV2ViSU1cIilbXCJkZWZhdWx0XCJdO1xyXG5sZXQgbXNnVHlwZSA9IHJlcXVpcmUoXCIuL21zZ3R5cGVcIik7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHNlbmRhYmxlTXNnLCB0eXBlLCBteU5hbWUpe1xyXG5cdC8vIGNvbnNvbGUubG9nKFwi6YWN572u5raI5oGv5pWw5o2u5qC85byP5YyWXCIsc2VuZGFibGVNc2cpXHJcblx0dmFyIHRpbWUgPSBXZWJJTS50aW1lKCk7XHJcblx0dmFyIHJlbmRlcmFibGVNc2cgPSB7XHJcblx0XHRjaGF0VHlwZTogc2VuZGFibGVNc2cuYm9keS5jaGF0VHlwZSxcclxuXHRcdGluZm86IHtcclxuXHRcdFx0ZnJvbTogc2VuZGFibGVNc2cuYm9keS5mcm9tLFxyXG5cdFx0XHR0bzogc2VuZGFibGVNc2cuYm9keS50b1xyXG5cdFx0fSxcclxuXHRcdHVzZXJuYW1lOiBzZW5kYWJsZU1zZy5ib2R5LmZyb20gPT0gbXlOYW1lID8gc2VuZGFibGVNc2cuYm9keS50byA6IHNlbmRhYmxlTXNnLmJvZHkuZnJvbSxcclxuXHRcdHRvSWY6IHNlbmRhYmxlTXNnLmJvZHkuZnJvbSA9PSBteU5hbWUgPyBzZW5kYWJsZU1zZy5ib2R5LnRvIDogc2VuZGFibGVNc2cuYm9keS5mcm9tLFxyXG5cdFx0eW91cm5hbWU6IHNlbmRhYmxlTXNnLmJvZHkuZnJvbSxcclxuXHRcdGZyb21JZDogc2VuZGFibGVNc2cuYm9keS5mcm9tLFxyXG5cdFx0ZnJvbUF2YXRhcjogc2VuZGFibGVNc2cuYm9keS5leHQuZnJvbUF2YXRhcixcclxuXHRcdHlvbmdodU5hbWU6IHNlbmRhYmxlTXNnLmJvZHkuZXh0LnlvbmdodU5hbWUsXHJcblx0XHRmcm9tTmFtZTogc2VuZGFibGVNc2cuYm9keS5leHQuZnJvbU5hbWUsXHJcblx0XHRmcm9tVXNlcklkOiBzZW5kYWJsZU1zZy5ib2R5LmV4dC5mcm9tVXNlcklkLFxyXG5cdFx0aHhNc2dJZDogc2VuZGFibGVNc2cuYm9keS5leHQuaHhNc2dJZCwgLy8g5b2T5YmN5raI5oGv5pys5Zyw55Sf5oiQ55qEaHjnmoRpZCzkuIvpnaLnmoRtaWRcclxuXHRcdGV4dDpzZW5kYWJsZU1zZy5ib2R5LmV4dCxcclxuXHRcdGlkOicnLCAvLyDlkI7lj7DnlJ/miJDnmoTliJfooajmlbDmja5pZFxyXG5cdFx0bXNnSWQ6IFwiXCIsIC8vIOeOr+S/oeWunuaXtuWbnuiwg+eUn+aIkOeahGlkXHJcblx0XHRtc2c6IHtcclxuXHRcdFx0dHlwZTogdHlwZSxcclxuXHRcdFx0dXJsOiBzZW5kYWJsZU1zZy5ib2R5LmJvZHkudXJsLFxyXG5cdFx0XHRsaXN0OiBnZXRNc2dEYXRhKHNlbmRhYmxlTXNnLCB0eXBlKSxcclxuXHRcdH0sXHJcblx0XHRzdHlsZTogc2VuZGFibGVNc2cuYm9keS5mcm9tID09IG15TmFtZSA/IFwic2VsZlwiIDogXCJcIixcclxuXHRcdHRpbWU6IHRpbWUsXHJcblx0XHRjcmVhdGVUaW1lOiB0aW1lLFxyXG5cdFx0bWlkOiBzZW5kYWJsZU1zZy50eXBlICsgc2VuZGFibGVNc2cuaWQsXHJcblx0XHR0eXBlOiBzZW5kYWJsZU1zZy50eXBlICAvLyDmtojmga/nsbvlnotcclxuXHR9O1xyXG5cdGlmKHR5cGUgPT0gbXNnVHlwZS5JTUFHRSl7XHJcblx0XHRyZW5kZXJhYmxlTXNnLm1zZy5zaXplID0ge1xyXG5cdFx0XHR3aWR0aDogc2VuZGFibGVNc2cuYm9keS5ib2R5LnNpemUud2lkdGgsXHJcblx0XHRcdGhlaWdodDogc2VuZGFibGVNc2cuYm9keS5ib2R5LnNpemUuaGVpZ2h0LFxyXG5cdFx0fTtcclxuXHR9ZWxzZSBpZiAodHlwZSA9PSBtc2dUeXBlLkFVRElPKSB7XHJcblx0XHRyZW5kZXJhYmxlTXNnLm1zZy5sZW5ndGggPSBzZW5kYWJsZU1zZy5ib2R5Lmxlbmd0aDtcclxuXHR9ZWxzZSBpZiAodHlwZSA9PSBtc2dUeXBlLkZJTEUpe1xyXG5cdFx0cmVuZGVyYWJsZU1zZy5tc2cuZGF0YSA9IFt7ZGF0YTogXCJb5b2T5YmN5LiN5pSv5oyB5q2k5qC85byP5raI5oGv5bGV56S6XVwiLCB0eXBlOiBcInR4dFwifV07XHJcblx0XHRyZW5kZXJhYmxlTXNnLm1zZy50eXBlID0gJ3R4dCc7XHJcblx0fVxyXG5cdHJldHVybiByZW5kZXJhYmxlTXNnO1xyXG5cclxuXHRmdW5jdGlvbiBnZXRNc2dEYXRhKHNlbmRhYmxlTXNnLCB0eXBlKXtcclxuXHRcdGlmKHR5cGUgPT0gbXNnVHlwZS5URVhUKXtcclxuXHRcdFx0cmV0dXJuIFdlYklNLnBhcnNlRW1vamkoc2VuZGFibGVNc2cudmFsdWUucmVwbGFjZSgvXFxuL21nLCBcIlwiKSk7XHJcblx0XHR9XHJcblx0XHRlbHNlIGlmKHR5cGUgPT0gbXNnVHlwZS5FTU9KSSl7XHJcblx0XHRcdHJldHVybiBzZW5kYWJsZU1zZy52YWx1ZTtcclxuXHRcdH1cclxuXHRcdGVsc2UgaWYodHlwZSA9PSBtc2dUeXBlLklNQUdFIHx8IHR5cGUgPT0gbXNnVHlwZS5WSURFTyB8fCB0eXBlID09IG1zZ1R5cGUuQVVESU8pe1xyXG5cdFx0XHRyZXR1cm4gc2VuZGFibGVNc2cuYm9keS5ib2R5LnVybDtcclxuXHRcdH0gZWxzZSBpZiAodHlwZSA9PSBtc2dUeXBlLkZJTEUpIHtcclxuXHRcdFx0cmV0dXJuIHNlbmRhYmxlTXNnLmJvZHkuYm9keS5tc2dcclxuXHRcdH1cclxuXHRcdHJldHVybiBcIlwiO1xyXG5cdH1cclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n");

/***/ }),

/***/ 2:
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDOztBQUU1QyIsImZpbGUiOiIyLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2\n");

/***/ }),

/***/ 20:
/*!***********************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/utils/WebIM.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var _strophe = _interopRequireDefault(__webpack_require__(/*! ../sdk/libs/strophe */ 13));\n\nvar _connection = _interopRequireDefault(__webpack_require__(/*! ../sdk/connection */ 21));\nvar _WebIMConfig = _interopRequireDefault(__webpack_require__(/*! ./WebIMConfig */ 26));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} //import xmldom from \"../sdk/libs/xmldom/dom-parser\";\n\nconsole.group = console.group || {};\nconsole.groupEnd = console.groupEnd || {};\n\nvar window = {};\nvar WebIM = window.WebIM = _connection.default;\nwindow.WebIM.config = _WebIMConfig.default;\n//var DOMParser = window.DOMParser = xmldom.DOMParser;\n//let document = window.document = new DOMParser().parseFromString(\"<?xml version='1.0'?>\\n\", \"text/xml\");\n\nWebIM.isDebug = function (option) {\n  if (option) {\n    WebIM.config.isDebug = option.isDebug;\n    openDebug(WebIM.config.isDebug);\n  }\n\n  function openDebug(value) {\n    function ts() {\n      var d = new Date();\n      var Hours = d.getHours(); // 获取当前小时数(0-23)\n      var Minutes = d.getMinutes(); // 获取当前分钟数(0-59)\n      var Seconds = d.getSeconds(); // 获取当前秒数(0-59)\n      return (Hours < 10 ? \"0\" + Hours : Hours) + \":\" + (Minutes < 10 ? \"0\" + Minutes : Minutes) + \":\" + (Seconds < 10 ? \"0\" + Seconds : Seconds) + \" \";\n    }\n\n    _strophe.default.Strophe.log = function (level, msg) {\n      // console.log(ts(), level, msg);\n    };\n\n    if (value) {\n      _strophe.default.Strophe.Connection.prototype.rawOutput = function (data) {\n        try {\n          console.group(\"%csend # \" + ts(), \"color: blue; font-size: large\");\n          __f__(\"log\", \"%c\" + data, \"color: blue\", \" at webIM\\\\utils\\\\WebIM.js:38\");\n          console.groupEnd();\n        }\n        catch (e) {\n          __f__(\"log\", e, \" at webIM\\\\utils\\\\WebIM.js:42\");\n        }\n      };\n    } else {\n      _strophe.default.Strophe.Connection.prototype.rawOutput = function () {};\n    }\n\n  }\n};\n\n/**\r\n    * Set autoSignIn as true (autoSignInName and autoSignInPwd are configured below),\r\n    * You can auto signed in each time when you refresh the page in dev model.\r\n    */\nWebIM.config.autoSignIn = false;\nif (WebIM.config.autoSignIn) {\n  WebIM.config.autoSignInName = \"lwz2\";\n  WebIM.config.autoSignInPwd = \"1\";\n}\n\n\n// var stropheConn = new window.Strophe.Connection(\"ws://im-api.easemob.com/ws/\", {\n//                 inactivity: 30,\n//                 maxRetries: 5,\n//                 pollingTime: 4500\n//             });\n//\n// stropheConn.connect(\n//   '$t$' + 'YWMtmbQEBKKIEeaGmMtXyg5n1wAAAVlkQvGO2WOJGlMCEJKM4VV9GCMnb_XLCXU',\n//   function() {\n//     console.log(arguments, 'ggogogo');\n//   }, stropheConn.wait, stropheConn.hold);\nWebIM.parseEmoji = function (msg) {\n  if (typeof WebIM.Emoji === \"undefined\" || typeof WebIM.Emoji.map === \"undefined\") {\n    return msg;\n  }\n  var emoji = WebIM.Emoji,\n  reg = null;\n  var msgList = [];\n  var objList = [];\n  for (var face in emoji.map) {\n    if (emoji.map.hasOwnProperty(face)) {\n      while (msg.indexOf(face) > -1) {\n        msg = msg.replace(face, \"^\" + emoji.map[face] + \"^\");\n      }\n    }\n  }\n  var ary = msg.split(\"^\");\n  var reg = /^e.*g$/;\n  for (var i = 0; i < ary.length; i++) {\n    if (ary[i] != \"\") {\n      msgList.push(ary[i]);\n    }\n  }\n  for (var i = 0; i < msgList.length; i++) {\n    if (reg.test(msgList[i])) {\n      var obj = {};\n      obj.msg = msgList[i];\n      obj.type = \"emoji\";\n      objList.push(obj);\n    } else\n    {\n      var obj = {};\n      obj.msg = msgList[i];\n      obj.type = \"txt\";\n      objList.push(obj);\n    }\n  }\n  return objList;\n};\n\nWebIM.time = function () {\n  var date = new Date();\n  var Hours = date.getHours();\n  var Minutes = date.getMinutes();\n  var Seconds = date.getSeconds();\n  var time = date.getFullYear() + \"-\" + (date.getMonth() + 1) + \"-\" + date.getDate() + \" \" + (\n  Hours < 10 ? \"0\" + Hours : Hours) + \":\" + (Minutes < 10 ? \"0\" + Minutes : Minutes) + \":\" + (Seconds < 10 ? \"0\" + Seconds : Seconds);\n  return time;\n};\n\nWebIM.Emoji = {\n  path: \"../../../../../images/faces/\",\n  map: {\n    \"[):]\": \"ee_1.png\",\n    \"[:D]\": \"ee_2.png\",\n    \"[;)]\": \"ee_3.png\",\n    \"[:-o]\": \"ee_4.png\",\n    \"[:p]\": \"ee_5.png\",\n    \"[(H)]\": \"ee_6.png\",\n    \"[:@]\": \"ee_7.png\",\n    \"[:s]\": \"ee_8.png\",\n    \"[:$]\": \"ee_9.png\",\n    \"[:(]\": \"ee_10.png\",\n    \"[:'(]\": \"ee_11.png\",\n    \"[<o)]\": \"ee_12.png\",\n    \"[(a)]\": \"ee_13.png\",\n    \"[8o|]\": \"ee_14.png\",\n    \"[8-|]\": \"ee_15.png\",\n    \"[+o(]\": \"ee_16.png\",\n    \"[|-)]\": \"ee_17.png\",\n    \"[:|]\": \"ee_18.png\",\n    \"[*-)]\": \"ee_19.png\",\n    \"[:-#]\": \"ee_20.png\",\n    \"[^o)]\": \"ee_21.png\",\n    \"[:-*]\": \"ee_22.png\",\n    \"[8-)]\": \"ee_23.png\",\n    \"[del]\": \"btn_del.png\",\n    \"[(|)]\": \"ee_24.png\",\n    \"[(u)]\": \"ee_25.png\",\n    \"[(S)]\": \"ee_26.png\",\n    \"[(*)]\": \"ee_27.png\",\n    \"[(#)]\": \"ee_28.png\",\n    \"[(R)]\": \"ee_29.png\",\n    \"[({)]\": \"ee_30.png\",\n    \"[(})]\": \"ee_31.png\",\n    \"[(k)]\": \"ee_32.png\",\n    \"[(F)]\": \"ee_33.png\",\n    \"[(W)]\": \"ee_34.png\",\n    \"[(D)]\": \"ee_35.png\" } };\n\n\n\nWebIM.EmojiObj = {\n  // 相对 emoji.js 路径\n  path: \"../../../../../images/faces/\",\n  map1: {\n    \"[):]\": \"ee_1.png\",\n    \"[:D]\": \"ee_2.png\",\n    \"[;)]\": \"ee_3.png\",\n    \"[:-o]\": \"ee_4.png\",\n    \"[:p]\": \"ee_5.png\",\n    \"[(H)]\": \"ee_6.png\",\n    \"[:@]\": \"ee_7.png\" },\n\n  map2: {\n    \"[:s]\": \"ee_8.png\",\n    \"[:$]\": \"ee_9.png\",\n    \"[:(]\": \"ee_10.png\",\n    \"[:'(]\": \"ee_11.png\",\n    \"[<o)]\": \"ee_12.png\",\n    \"[(a)]\": \"ee_13.png\",\n    \"[8o|]\": \"ee_14.png\" },\n\n  map3: {\n    \"[8-|]\": \"ee_15.png\",\n    \"[+o(]\": \"ee_16.png\",\n    \"[|-)]\": \"ee_17.png\",\n    \"[:|]\": \"ee_18.png\",\n    \"[*-)]\": \"ee_19.png\",\n    \"[:-#]\": \"ee_20.png\",\n    \"[del]\": \"del.png\" },\n\n  map4: {\n    \"[^o)]\": \"ee_21.png\",\n    \"[:-*]\": \"ee_22.png\",\n    \"[8-)]\": \"ee_23.png\",\n    \"[(|)]\": \"ee_24.png\",\n    \"[(u)]\": \"ee_25.png\",\n    \"[(S)]\": \"ee_26.png\",\n    \"[(*)]\": \"ee_27.png\" },\n\n  map5: {\n    \"[(#)]\": \"ee_28.png\",\n    \"[(R)]\": \"ee_29.png\",\n    \"[({)]\": \"ee_30.png\",\n    \"[(})]\": \"ee_31.png\",\n    \"[(k)]\": \"ee_32.png\",\n    \"[(F)]\": \"ee_33.png\",\n    \"[(W)]\": \"ee_34.png\",\n    \"[(D)]\": \"ee_35.png\" },\n\n  map6: {\n    \"[del]\": \"del.png\" } };\n\n\n\n// wx.connectSocket({url: WebIM.config.xmppURL, method: \"GET\"})\n\nWebIM.conn = new WebIM.connection({\n  isMultiLoginSessions: WebIM.config.isMultiLoginSessions,\n  https: typeof WebIM.config.https === \"boolean\" ? WebIM.config.https : location.protocol === \"https:\",\n  url: WebIM.config.xmppURL,\n  apiUrl: WebIM.config.apiURL,\n  isAutoLogin: false,\n  heartBeatWait: WebIM.config.heartBeatWait,\n  autoReconnectNumMax: WebIM.config.autoReconnectNumMax,\n  autoReconnectInterval: WebIM.config.autoReconnectInterval });\n\n\n// async response\n// WebIM.conn.listen({\n//   onOpened: () => dispatch({type: Types.ON_OPEND})\n// })\n\n// export default WebIM;\nmodule.exports = {\n  \"default\": WebIM };\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n");

/***/ }),

/***/ 21:
/*!**************************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/sdk/connection.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {var _strophe = _interopRequireDefault(__webpack_require__(/*! ./libs/strophe */ 13));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\nvar WebIM = {};\nvar Strophe = _strophe.default.Strophe;\n\nStrophe.log = function (level, msg) {\n  // console.log(ts(), level, msg);\n};\nvar xmldom = __webpack_require__(/*! ./libs/xmldom/dom-parser */ 14);\n// //console.log('xml',xmldom, typeof xmldom.DOMParser);\nvar DOMParser = xmldom.DOMParser;\nvar window = {};\nvar _version = \"1.1.3\";\nvar _code = __webpack_require__(/*! ./status */ 22).code;\nvar _utils = __webpack_require__(/*! ./utils */ 23).utils;\nvar _msg = __webpack_require__(/*! ./message */ 24);\nvar _message = _msg._msg;\nvar _msgHash = {};\nvar Queue = __webpack_require__(/*! ./queue */ 25).Queue;\nvar location = window.location || {\n  protocol: \"https:\" };\n\nwindow.URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n\nif (window.XDomainRequest) {\n  XDomainRequest.prototype.oldsend = XDomainRequest.prototype.send;\n  XDomainRequest.prototype.send = function () {\n    XDomainRequest.prototype.oldsend.apply(this, arguments);\n    this.readyState = 2;\n  };\n}\n\nStrophe.Request.prototype._newXHR = function () {\n  var xhr = _utils.xmlrequest(true);\n  if (xhr.overrideMimeType) {\n    xhr.overrideMimeType(\"text/xml\");\n  }\n  // use Function.bind() to prepend ourselves as an argument\n  xhr.onreadystatechange = this.func.bind(null, this);\n  return xhr;\n};\n\nStrophe.Websocket.prototype._onSocketClose = function (e) {\n  // if(e.code && e.code == 1000){\n  //\n  // }\n  // else{\n  // \treOpenEntry();\n  // }\n};\n\n/**\r\n    *\r\n    * Strophe.Websocket has a bug while logout:\r\n    * 1.send: <presence xmlns='jabber:client' type='unavailable'/> is ok;\r\n    * 2.send: <close xmlns='urn:ietf:params:xml:ns:xmpp-framing'/> will cause a problem,log as follows:\r\n    * WebSocket connection to 'ws://im-api.easemob.com/ws/' failed: Data frame received after close_connect @ strophe.js:5292connect @ strophe.js:2491_login @ websdk-1.1.2.js:278suc @ websdk-1.1.2.js:636xhr.onreadystatechange @ websdk-1.1.2.js:2582\r\n    * 3 \"Websocket error [object Event]\"\r\n    * _changeConnectStatus\r\n    * onError Object {type: 7, msg: \"The WebSocket connection could not be established or was disconnected.\", reconnect: true}\r\n    *\r\n    * this will trigger socket.onError, therefore _doDisconnect again.\r\n    * Fix it by overide  _onMessage\r\n    */\nStrophe.Websocket.prototype._onMessage = function (message) {\n  var elem, data;\n  // WebIM && WebIM.config.isDebug && //console.log(WebIM.utils.ts() + 'recv:', message.data);\n  try {\n    if (WebIM && WebIM.config.isDebug) {\n      console.group(\"%crecv # \", \"color: green; font-size: large\");\n      __f__(\"log\", \"%c\" + message.data, \"color: green\", \" at webIM\\\\sdk\\\\connection.js:70\");\n      console.groupEnd();\n    }\n  } catch (e) {\n\n  } // console.log('%crecv' + message.data, 'color: green');\n  // check for closing stream\n  // var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n  // if (message.data === close) {\n  //     this._conn.rawInput(close);\n  //     this._conn.xmlInput(message);\n  //     if (!this._conn.disconnecting) {\n  //         this._conn._doDisconnect();\n  //     }\n  //     return;\n  //\n  // send and receive close xml: <close xmlns='urn:ietf:params:xml:ns:xmpp-framing'/>\n  // so we can't judge whether message.data equals close by === simply.\n  // console.log('DOMParser connection')\n  if (message.data.indexOf(\"<close \") === 0) {\n    elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n    var see_uri = elem.getAttribute(\"see-other-uri\");\n    if (see_uri) {\n      this._conn._changeConnectStatus(Strophe.Status.REDIRECT, \"Received see-other-uri, resetting connection\");\n      this._conn.reset();\n      this._conn.service = see_uri;\n      this._connect();\n    } else {\n      // if (!this._conn.disconnecting) {\n      this._conn._doDisconnect(\"receive <close> from server\");\n      // }\n    }\n    return;\n  } else if (message.data.search(\"<open \") === 0) {\n    // This handles stream restarts\n    elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n    if (!this._handleStreamStart(elem)) {\n      return;\n    }\n  } else {\n    data = this._streamWrap(message.data);\n    elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n  }\n\n  // console.log('DOMParser connection ed')\n  if (this._check_streamerror(elem, Strophe.Status.ERROR)) {\n    return;\n  }\n\n  // handle unavailable presence stanza before disconnecting\n  if (this._conn.disconnecting &&\n  elem.firstChild.nodeName === \"presence\" &&\n  elem.firstChild.getAttribute(\"type\") === \"unavailable\")\n  {\n    this._conn.xmlInput(elem);\n    this._conn.rawInput(Strophe.serialize(elem));\n    // if we are already disconnecting we will ignore the unavailable stanza and\n    // wait for the </stream:stream> tag before we close the connection\n    return;\n  }\n  this._conn._dataRecv(elem, message.data);\n};\n\n\nfunction _listenNetwork(onlineCallback, offlineCallback) {\n  if (window.addEventListener) {\n    window.addEventListener(\"online\", onlineCallback);\n    window.addEventListener(\"offline\", offlineCallback);\n\n  } else if (window.attachEvent) {\n    if (document.body) {\n      document.body.attachEvent(\"ononline\", onlineCallback);\n      document.body.attachEvent(\"onoffline\", offlineCallback);\n    } else {\n      window.attachEvent(\"load\", function () {\n        document.body.attachEvent(\"ononline\", onlineCallback);\n        document.body.attachEvent(\"onoffline\", offlineCallback);\n      });\n    }\n  } else {\n    /* var onlineTmp = window.ononline;\r\n           var offlineTmp = window.onoffline;\r\n           window.attachEvent('ononline', function () {\r\n           try {\r\n           typeof onlineTmp === 'function' && onlineTmp();\r\n           } catch ( e ) {}\r\n           onlineCallback();\r\n           });\r\n           window.attachEvent('onoffline', function () {\r\n           try {\r\n           typeof offlineTmp === 'function' && offlineTmp();\r\n           } catch ( e ) {}\r\n           offlineCallback();\r\n           });*/\n  }\n}\n\nfunction _parseRoom(result) {\n  var rooms = [];\n  var items = result.getElementsByTagName(\"item\");\n  if (items) {\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var roomJid = item.getAttribute(\"jid\");\n      var tmp = roomJid.split(\"@\")[0];\n      var room = {\n        jid: roomJid,\n        name: item.getAttribute(\"name\"),\n        roomId: tmp.split(\"_\")[1] };\n\n      rooms.push(room);\n    }\n  }\n  return rooms;\n}\n\nfunction _parseRoomOccupants(result) {\n  var occupants = [];\n  var items = result.getElementsByTagName(\"item\");\n  if (items) {\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var room = {\n        jid: item.getAttribute(\"jid\"),\n        name: item.getAttribute(\"name\") };\n\n      occupants.push(room);\n    }\n  }\n  return occupants;\n}\n\nfunction _parseResponseMessage(msginfo) {\n  var parseMsgData = {\n    errorMsg: true,\n    data: [] };\n\n  // //console.log('msginfo', msginfo)\n  var msgBodies = msginfo.getElementsByTagName(\"body\");\n  // //console.log('msginfo', msgBodies)\n  if (msgBodies) {\n    for (var i = 0; i < msgBodies.length; i++) {\n      var msgBody = msgBodies[i];\n      var childNodes = msgBody.childNodes;\n      if (childNodes && childNodes.length > 0) {\n        var childNode = msgBody.childNodes[0];\n        if (childNode.nodeType == Strophe.ElementType.TEXT) {\n          var jsondata = childNode.wholeText || childNode.nodeValue;\n          jsondata = jsondata.replace(\"\\n\", \"<br>\");\n          try {\n            var data = JSON.parse(jsondata);\n            parseMsgData.errorMsg = false;\n            parseMsgData.data = [data];\n          } catch (e) {}\n        }\n      }\n    }\n    var delayTags = msginfo.getElementsByTagName(\"delay\");\n    if (delayTags && delayTags.length > 0) {\n      var delayTag = delayTags[0];\n      var delayMsgTime = delayTag.getAttribute(\"stamp\");\n      if (delayMsgTime) {\n        parseMsgData.delayTimeStamp = delayMsgTime;\n      }\n    }\n  } else {\n    var childrens = msginfo.childNodes;\n    if (childrens && childrens.length > 0) {\n      var child = msginfo.childNodes[0];\n      if (child.nodeType == Strophe.ElementType.TEXT) {\n        try {\n          var _data = eval(\"(\" + child.nodeValue + \")\");\n          parseMsgData.errorMsg = false;\n          parseMsgData.data = [_data];\n        } catch (e) {}\n      }\n    }\n  }\n  return parseMsgData;\n}\n\nfunction _parseNameFromJidFn(jid, domain) {\n  var tempstr = jid;\n  var findex = tempstr.indexOf(\"_\");\n  domain = domain || \"\";\n  if (findex !== -1) {\n    tempstr = tempstr.substring(findex + 1);\n  }\n  var atindex = tempstr.indexOf(\"@\" + domain);\n  if (atindex !== -1) {\n    tempstr = tempstr.substring(0, atindex);\n  }\n  return tempstr;\n}\n\nfunction _parseFriend(queryTag, conn, from) {\n  var rouster = [];\n  var items = queryTag.getElementsByTagName(\"item\");\n  if (items) {var _loop = function _loop(\n    i) {\n      var groups = [];\n      var item = items[i];\n      var jid = item.getAttribute(\"jid\");\n      if (!jid) {\n        return \"continue\";\n      }\n      var subscription = item.getAttribute(\"subscription\");\n      var friend = {\n        subscription: subscription,\n        jid: jid };\n\n      var ask = item.getAttribute(\"ask\");\n      if (ask) {\n        friend.ask = ask;\n      }\n      var name = item.getAttribute(\"name\");\n      if (name) {\n        friend.name = name;\n      } else {\n        friend.name = _parseNameFromJidFn(jid);\n      }\n      Strophe.forEachChild(item, \"group\", function (group) {\n        groups.push(Strophe.getText(group));\n      });\n      friend.groups = groups;\n      rouster.push(friend);\n      // B 同意之后 -> B 订阅 A\n      if (conn && subscription == \"from\") {\n        conn.subscribe({\n          toJid: jid });\n\n      }\n      if (conn && subscription == \"to\") {\n        conn.subscribed({\n          toJid: jid });\n\n      }};for (var i = 0; i < items.length; i++) {var _ret = _loop(i);if (_ret === \"continue\") continue;\n    }\n  }\n  return rouster;\n}\n\nfunction _parseMessageType(msginfo) {\n  var msgtype = \"normal\";\n  var receiveinfo = msginfo.getElementsByTagName(\"received\");\n  if (receiveinfo && receiveinfo.length > 0 && receiveinfo[0].namespaceURI === \"urn:xmpp:receipts\") {\n    msgtype = \"received\";\n  } else {\n    var inviteinfo = msginfo.getElementsByTagName(\"invite\");\n    if (inviteinfo && inviteinfo.length > 0) {\n      msgtype = \"invite\";\n    }\n  }\n  return msgtype;\n}\n\nfunction _handleMessageQueue(conn) {\n  for (var i in _msgHash) {\n    if (Object.hasOwnProperty.call(_msgHash, i)) {\n      _msgHash[i].send(conn);\n    }\n  }\n}\n\nfunction _loginCallback(status, msg, conn) {\n  var error;\n  var conflict = msg === \"conflict\";\n  if (status == Strophe.Status.CONNFAIL) {\n    // client offline, ping/pong timeout, server quit, server offline\n    error = {\n      type: _code.WEBIM_CONNCTION_SERVER_CLOSE_ERROR, // 客户端网络离线\n      msg: msg };\n\n    conflict && (error.conflict = true);\n    conn.onError(error);\n  } else if (status == Strophe.Status.ATTACHED || status == Strophe.Status.CONNECTED) {\n    conn.autoReconnectNumTotal = 0;\n    // client should limit the speed of sending ack messages  up to 5/s\n    conn.intervalId = setInterval(function () {\n      conn.handelSendQueue();\n    }, 200);\n    var handleMessage = function handleMessage(msginfo) {\n      var type = _parseMessageType(msginfo);\n      if (type === \"received\") {\n        conn.handleReceivedMessage(msginfo);\n        return true;\n      } else if (type === \"invite\") {\n        conn.handleInviteMessage(msginfo);\n        return true;\n      }\n      conn.handleMessage(msginfo);\n      return true;\n    };\n    var handlePresence = function handlePresence(msginfo) {\n      conn.handlePresence(msginfo);\n      return true;\n    };\n    // let handlePing = function(msginfo){\n    // \tconn.handlePing(msginfo);\n    // \treturn true;\n    // };\n    var handleIqRoster = function handleIqRoster(msginfo) {\n      conn.handleIqRoster(msginfo);\n      return true;\n    };\n    var handleIqPrivacy = function handleIqPrivacy(msginfo) {\n      conn.handleIqPrivacy(msginfo);\n      return true;\n    };\n    var handleIq = function handleIq(msginfo) {\n      conn.handleIq(msginfo);\n      return true;\n    };\n    conn.addHandler(handleMessage, null, \"message\", null, null, null);\n    conn.addHandler(handlePresence, null, \"presence\", null, null, null);\n    // conn.addHandler(handlePing, \"urn:xmpp:ping\", \"iq\", \"get\", null, null);\n    conn.addHandler(handleIqRoster, \"jabber:iq:roster\", \"iq\", \"set\", null, null);\n    conn.addHandler(handleIqPrivacy, \"jabber:iq:privacy\", \"iq\", \"set\", null, null);\n    conn.addHandler(handleIq, null, \"iq\", null, null, null);\n\n    conn.context.status = _code.STATUS_OPENED;\n\n    var supportRecMessage = [\n    _code.WEBIM_MESSAGE_REC_TEXT,\n    _code.WEBIM_MESSAGE_REC_EMOJI];\n\n    var supportSedMessage = [\n    _code.WEBIM_MESSAGE_SED_TEXT];\n\n    if (_utils.isCanDownLoadFile) {\n      supportRecMessage.push(_code.WEBIM_MESSAGE_REC_PHOTO);\n      supportRecMessage.push(_code.WEBIM_MESSAGE_REC_AUDIO_FILE);\n    }\n    if (_utils.isCanUploadFile) {\n      supportSedMessage.push(_code.WEBIM_MESSAGE_REC_PHOTO);\n      supportSedMessage.push(_code.WEBIM_MESSAGE_REC_AUDIO_FILE);\n    }\n    conn.notifyVersion();\n    conn.retry && _handleMessageQueue(conn);\n    conn.heartBeat();\n    conn.isAutoLogin && conn.setPresence();\n    conn.onOpened({\n      canReceive: supportRecMessage,\n      canSend: supportSedMessage,\n      accessToken: conn.context.accessToken });\n\n    conn.onSocketConnected();\n  } else if (status == Strophe.Status.DISCONNECTING) {\n    if (conn.isOpened()) {\n      if (conn.autoReconnectNumTotal < conn.autoReconnectNumMax) {\n        if (conn.autoReconnectNumTotal == 0) {conn.onReconnect();}\n        conn.reconnect();\n        return;\n      } else if (conn.autoReconnectNumTotal == conn.autoReconnectNumMax) {\n        __f__(\"log\", \"Err 3\", \" at webIM\\\\sdk\\\\connection.js:424\");\n        error = {\n          type: _code.WEBIM_CONNCTION_DISCONNECTED };\n\n        conn.onError(error);\n        conn.context.status = _code.STATUS_CLOSED;\n        conn.clear();\n        conn.onClosed();\n      }\n      conn.stopHeartBeat();\n      // error = {\n      // \ttype: _code.WEBIM_CONNCTION_SERVER_CLOSE_ERROR,\n      // \tmsg: msg\n      // };\n      // conflict && (error.conflict = true);\n      // conn.onError(error);\n    }\n    conn.context.status = _code.STATUS_CLOSING;\n  } else if (status == Strophe.Status.DISCONNECTED) {\n    if (conn.isOpened()) {\n      if (conn.autoReconnectNumTotal < conn.autoReconnectNumMax) {\n        if (conn.autoReconnectNumTotal == 0) {conn.onReconnect();}\n        conn.reconnect();\n        return;\n      } else if (conn.autoReconnectNumTotal == conn.autoReconnectNumMax) {\n        conn.context.status = _code.STATUS_CLOSED;\n        conn.clear();\n        conn.onClosed();\n        conn.stopHeartBeat();\n      }\n      __f__(\"log\", \"Err 4\", \" at webIM\\\\sdk\\\\connection.js:454\");\n      error = {\n        type: _code.WEBIM_CONNCTION_DISCONNECTED };\n\n      conn.onError(error);\n    }\n    conn.context.status = _code.STATUS_CLOSED;\n  } else if (status == Strophe.Status.AUTHFAIL) {\n    error = {\n      type: _code.WEBIM_CONNCTION_AUTH_ERROR };\n\n    conflict && (error.conflict = true);\n    conn.onError(error);\n    conn.clear();\n    conn.stopHeartBeat();\n    wx.closeSocket();\n  } else if (status == Strophe.Status.ERROR) {\n    conn.context.status = _code.STATUS_ERROR;\n    error = {\n      type: _code.WEBIM_CONNCTION_SERVER_ERROR };\n\n    conflict && (error.conflict = true);\n    conn.onError(error);\n    conn.stopHeartBeat();\n  }\n}\n\nfunction _login(options, conn) {\n  var stropheConn = null;\n  var accessToken = options.access_token || \"\";\n  if (accessToken == \"\") {\n    conn.onError({\n      type: _code.WEBIM_CONNCTION_OPEN_USERGRID_ERROR,\n      data: options });\n\n    return;\n  }\n  conn.context.accessToken = options.access_token;\n  conn.context.accessTokenExpires = options.expires_in;\n  stropheConn = new Strophe.Connection(conn.url, {\n    inactivity: conn.inactivity,\n    maxRetries: conn.maxRetries,\n    pollingTime: conn.pollingTime });\n\n  conn.context.stropheConn = stropheConn;\n  if (conn.route) {\n    stropheConn.connect(conn.context.jid, \"$t$\" + accessToken, callback, conn.wait, conn.hold, conn.route);\n  } else {\n    stropheConn.connect(conn.context.jid, \"$t$\" + accessToken, callback, conn.wait, conn.hold);\n  }\n\n  function callback(status, msg) {\n    __f__(\"log\", \"connection stat change\", status, msg, \" at webIM\\\\sdk\\\\connection.js:506\");\n    _loginCallback(status, msg, conn);\n  }\n}\n\nfunction _getJid(options, conn) {\n  var jid = options.toJid || \"\";\n  if (jid === \"\") {\n    var appKey = conn.context.appKey || \"\";\n    var toJid = appKey + \"_\" + options.to + \"@\" + conn.domain;\n    if (options.resource) {\n      toJid = toJid + \"/\" + options.resource;\n    }\n    jid = toJid;\n  }\n  return jid;\n}\n\nfunction _getJidByName(name, conn) {\n  return _getJid({\n    to: name },\n  conn);\n}\n\nfunction _validCheck(options, conn) {\n  options = options || {};\n  if (options.user == \"\") {\n    conn.onError({\n      type: _code.WEBIM_CONNCTION_USER_NOT_ASSIGN_ERROR });\n\n    return false;\n  }\n  var user = options.user + \"\" || \"\";\n  var appKey = options.appKey || \"\";\n  var devInfos = appKey.split(\"#\");\n\n  if (devInfos.length !== 2) {\n    conn.onError({\n      type: _code.WEBIM_CONNCTION_APPKEY_NOT_ASSIGN_ERROR });\n\n    return false;\n  }\n  var orgName = devInfos[0];\n  var appName = devInfos[1];\n\n  if (!orgName) {\n    conn.onError({\n      type: _code.WEBIM_CONNCTION_APPKEY_NOT_ASSIGN_ERROR });\n\n    return false;\n  }\n  if (!appName) {\n    conn.onError({\n      type: _code.WEBIM_CONNCTION_APPKEY_NOT_ASSIGN_ERROR });\n\n    return false;\n  }\n\n  var jid = appKey + \"_\" + user.toLowerCase() + \"@\" + conn.domain;\n  var resource = options.resource || \"webim\";\n  if (conn.isMultiLoginSessions) {\n    resource += user + new Date().getTime() + Math.floor(Math.random().toFixed(6) * 1000000);\n  }\n  conn.context.jid = jid + \"/\" + resource;\n  /* jid: {appkey}_{username}@domain/resource*/\n  conn.context.userId = user;\n  conn.context.appKey = appKey;\n  conn.context.appName = appName;\n  conn.context.orgName = orgName;\n\n  return true;\n}\n\nfunction _getXmppUrl(baseUrl, https) {\n  if (/^(ws|http)s?:\\/\\/?/.test(baseUrl)) {\n    return baseUrl;\n  }\n  var url = {\n    prefix: \"http\",\n    base: \"://\" + baseUrl,\n    suffix: \"/http-bind/\" };\n\n  if (https && _utils.isSupportWss) {\n    url.prefix = \"wss\";\n    url.suffix = \"/ws/\";\n  } else if (https) {\n    url.prefix = \"https\";\n  } else if (window.WebSocket) {\n    url.prefix = \"ws\";\n    url.suffix = \"/ws/\";\n  }\n  return url.prefix + url.base + url.suffix;\n}\n\n\n\n\n\n// CLASS\nfunction connection(options) {\n  if (!(this instanceof connection)) {\n    return new connection(options);\n  }\n  options = options || {};\n  this.isMultiLoginSessions = options.isMultiLoginSessions || false;\n  this.wait = options.wait || 30;\n  this.retry = options.retry || false;\n  this.https = options.https || location.protocol === \"https:\";\n  this.url = _getXmppUrl(options.url, this.https);\n  this.hold = options.hold || 1;\n  this.route = options.route || null;\n  this.domain = options.domain || \"easemob.com\";\n  this.inactivity = options.inactivity || 30;\n  this.heartBeatWait = options.heartBeatWait || 4500;\n  this.maxRetries = options.maxRetries || 5;\n  this.isAutoLogin = options.isAutoLogin !== false;\n  this.pollingTime = options.pollingTime || 800;\n  this.stropheConn = false;\n  this.autoReconnectNumMax = options.autoReconnectNumMax || 0;\n  this.autoReconnectNumTotal = 0;\n  this.autoReconnectInterval = options.autoReconnectInterval || 0;\n  this.context = {\n    status: _code.STATUS_INIT };\n\n  this.apiUrl = options.apiUrl || \"\";\n  // todo 接收的事件，放到数组里的时候，加上g.isInBackground字段。每帧执行一个事件的时候，如果g.isInBackground=true,就pass\n  this.sendQueue = new Queue(); // 接收到的事件队列\n  this.intervalId = null;\n  this.orgName = \"\";\n  this.appName = \"\";\n  this.token = \"\";\n}\n\nconnection.prototype.handelSendQueue = function () {\n  var options = this.sendQueue.pop();\n  if (options !== null) {\n    this.sendReceiptsMessage(options);\n  }\n};\nconnection.prototype.listen = function (options) {\n  options.url && (this.url = _getXmppUrl(options.url, this.https));\n  this.onOpened = options.onOpened || _utils.emptyfn;\n  this.onClosed = options.onClosed || _utils.emptyfn;\n  this.onReconnect = options.onReconnect || _utils.emptyfn;\n  this.onSocketConnected = options.onSocketConnected || _utils.emptyfn;\n  this.onTextMessage = options.onTextMessage || _utils.emptyfn;\n  this.onEmojiMessage = options.onEmojiMessage || _utils.emptyfn;\n  this.onPictureMessage = options.onPictureMessage || _utils.emptyfn;\n  this.onAudioMessage = options.onAudioMessage || _utils.emptyfn;\n  this.onVideoMessage = options.onVideoMessage || _utils.emptyfn;\n  this.onFileMessage = options.onFileMessage || _utils.emptyfn;\n  this.onLocationMessage = options.onLocationMessage || _utils.emptyfn;\n  this.onCmdMessage = options.onCmdMessage || _utils.emptyfn;\n  this.onPresence = options.onPresence || _utils.emptyfn;\n  this.onRoster = options.onRoster || _utils.emptyfn;\n  this.onError = options.onError || _utils.emptyfn;\n  this.onReceivedMessage = options.onReceivedMessage || _utils.emptyfn;\n  this.onInviteMessage = options.onInviteMessage || _utils.emptyfn;\n  this.onOffline = options.onOffline || _utils.emptyfn;\n  this.onOnline = options.onOnline || _utils.emptyfn;\n  this.onConfirmPop = options.onConfirmPop || _utils.emptyfn;\n  this.onCreateGroup = options.onCreateGroup || _utils.emptyfn;\n  // for WindowSDK\n  this.onUpdateMyGroupList = options.onUpdateMyGroupList || _utils.emptyfn;\n  this.onUpdateMyRoster = options.onUpdateMyRoster || _utils.emptyfn;\n  //\n  this.onBlacklistUpdate = options.onBlacklistUpdate || _utils.emptyfn;\n\n  _listenNetwork(this.onOnline, this.onOffline);\n};\nconnection.prototype.heartBeatID = 0;\nconnection.prototype.heartBeat = function () {\n  var me = this;\n  // // IE8: strophe auto switch from ws to BOSH, need heartbeat\n  // var isNeed = !/^ws|wss/.test(me.url);\n  // // || /mobile/.test(navigator.userAgent)\n  // if(this.heartBeatID || !isNeed){\n  // \treturn;\n  // }\n  this.stopHeartBeat();\n  this.heartBeatID = setInterval(function () {\n    me.ping({\n      toJid: me.domain,\n      type: \"normal\" });\n\n  }, this.heartBeatWait);\n};\nconnection.prototype.stopHeartBeat = function () {\n  clearInterval(this.heartBeatID);\n};\nconnection.prototype.sendReceiptsMessage = function (options) {\n  var dom = _strophe.default.$msg({\n    from: this.context.jid || \"\",\n    to: this.domain,\n    id: options.id || \"\" }).\n  c(\"received\", {\n    xmlns: \"urn:xmpp:receipts\",\n    id: options.id || \"\" });\n\n  this.sendCommand(dom.tree());\n};\nconnection.prototype.cacheReceiptsMessage = function (options) {\n  this.sendQueue.push(options);\n};\nconnection.prototype.open = function (options) {\n  var me = this;\n  __f__(\"log\", \"open\", this.isOpening(), \" at webIM\\\\sdk\\\\connection.js:712\");\n  // 防止重复初始化\n  if (this.isOpening() || this.isOpened()) {\n    __f__(\"log\", \"can't open [1]\", \" at webIM\\\\sdk\\\\connection.js:715\");\n    return;\n  }\n  if (!_validCheck(options, this)) {\n    __f__(\"log\", \"can't open [2]\", \" at webIM\\\\sdk\\\\connection.js:719\");\n    return;\n  }\n  if (options.accessToken) {\n    options.access_token = options.accessToken;\n    this.token = options.access_token;\n    _login(options, me);\n  } else {\n\n    var apiUrl = options.apiUrl;\n    var userId = options.user;\n    var pwd = options.pwd || \"\";\n    var appkey = options.appKey;\n    var str = appkey.split(\"#\");\n    var orgName = str[0];\n    var appName = str[1];\n    this.orgName = orgName;\n    this.appName = appName;\n    this.context.status = _code.STATUS_DOLOGIN_USERGRID;\n    var loginJson = {\n      grant_type: \"password\",\n      username: userId,\n      password: pwd,\n      timestamp: +new Date() };\n\n    var loginfo = _utils.stringify(loginJson);\n    _utils.ajax({\n      url: apiUrl + \"/\" + orgName + \"/\" + appName + \"/token\",\n      data: loginfo,\n      success: suc || _utils.emptyfn,\n      error: error || _utils.emptyfn });\n\n  }\n\n  function suc(data, xhr, myName) {\n    me.context.status = _code.STATUS_DOLOGIN_IM;\n    me.context.restTokenData = data;\n    if (data.statusCode != \"404\" && data.statusCode != \"400\") {\n      // data:\n      // \taccess_token,\n      // \texpires_in,\n      // \tuser:\n      // \t\tactivated,\n      // \t\tcreated,\n      // \t\tmodified,\n      // \t\tnickname,\n      // \t\ttype,\n      // \t\tusername,\n      // \t\tuuid,\n      _login(data.data, me);\n    } else {\n      error({});\n    }\n  }\n\n  function error(res, xhr, msg) {\n    me.clear();\n    if (res.error && res.error_description) {\n      me.onError({\n        type: _code.WEBIM_CONNCTION_OPEN_USERGRID_ERROR,\n        data: res,\n        xhr: xhr });\n\n    } else {\n      me.onError({\n        type: _code.WEBIM_CONNCTION_OPEN_ERROR,\n        data: res,\n        xhr: xhr });\n\n    }\n  }\n  // reOpenEntry = function(){\n  // \tme.open(options);\n  // };\n};\n// attach to xmpp server for BOSH\nconnection.prototype.attach = function (options) {\n  var me = this;\n  var pass = _validCheck(options, this);\n  if (!pass) {\n    return;\n  }\n  options = options || {};\n  var accessToken = options.accessToken || \"\";\n  if (accessToken == \"\") {\n    this.onError({\n      type: _code.WEBIM_CONNCTION_TOKEN_NOT_ASSIGN_ERROR });\n\n    return;\n  }\n  var sid = options.sid || \"\";\n  if (sid === \"\") {\n    this.onError({\n      type: _code.WEBIM_CONNCTION_SESSIONID_NOT_ASSIGN_ERROR });\n\n    return;\n  }\n  var rid = options.rid || \"\";\n  if (rid === \"\") {\n    this.onError({\n      type: _code.WEBIM_CONNCTION_RID_NOT_ASSIGN_ERROR });\n\n    return;\n  }\n  var stropheConn = new Strophe.Connection(this.url, {\n    inactivity: this.inactivity,\n    maxRetries: this.maxRetries,\n    pollingTime: this.pollingTime,\n    heartBeatWait: this.heartBeatWait });\n\n  this.context.accessToken = accessToken;\n  this.context.stropheConn = stropheConn;\n  this.context.status = _code.STATUS_DOLOGIN_IM;\n  var callback = function callback(status, msg) {\n    _loginCallback(status, msg, me);\n  };\n  var jid = this.context.jid;\n  var wait = this.wait;\n  var hold = this.hold;\n  var wind = this.wind || 5;\n  stropheConn.attach(jid, sid, rid, callback, wait, hold, wind);\n};\nconnection.prototype.close = function (reason) {\n  this.stopHeartBeat();\n  var status = this.context.status;\n  if (status == _code.STATUS_INIT) {\n    return;\n  }\n  if (this.isClosed() || this.isClosing()) {\n    return;\n  }\n  this.context.status = _code.STATUS_CLOSING;\n  this.context.stropheConn.disconnect(reason);\n};\nconnection.prototype.addHandler = function (handler, ns, name, type, id, from, options) {\n  this.context.stropheConn.addHandler(handler, ns, name, type, id, from, options);\n};\nconnection.prototype.notifyVersion = function (suc, fail) {\n  var dom = _strophe.default.$iq({\n    from: this.context.jid || \"\",\n    to: this.domain,\n    type: \"result\" }).\n\n  c(\"query\", {\n    xmlns: \"jabber:iq:version\" }).\n\n  c(\"name\").\n  t(\"easemob\").\n  up().\n  c(\"version\").\n  t(_version).\n  up().\n  c(\"os\").\n  t(\"webim\");\n\n  suc = suc || _utils.emptyfn;\n  var error = fail || this.onError;\n  var failFn = function failFn(ele) {\n    error({\n      type: _code.WEBIM_CONNCTION_NOTIFYVERSION_ERROR,\n      data: ele });\n\n  };\n  this.context.stropheConn.sendIQ(dom.tree(), suc, failFn);\n};\n// handle all types of presence message\nconnection.prototype.handlePresence = function (msginfo) {\n  if (this.isClosed()) {\n    return;\n  }\n  var from = msginfo.getAttribute(\"from\") || \"\";\n  var to = msginfo.getAttribute(\"to\") || \"\";\n  var type = msginfo.getAttribute(\"type\") || \"\";\n  var presence_type = msginfo.getAttribute(\"presence_type\") || \"\";\n  var fromUser = _parseNameFromJidFn(from);\n  var toUser = _parseNameFromJidFn(to);\n  var isCreate = false;\n  var isMemberJoin = false;\n  var isDecline = false;\n  var isApply = false;\n  var info = {\n    from: fromUser,\n    to: toUser,\n    fromJid: from,\n    toJid: to,\n    type: type,\n    chatroom: !!msginfo.getElementsByTagName(\"roomtype\").length };\n\n\n  var showTags = msginfo.getElementsByTagName(\"show\");\n  if (showTags && showTags.length > 0) {\n    var showTag = showTags[0];\n    info.show = Strophe.getText(showTag);\n  }\n  var statusTags = msginfo.getElementsByTagName(\"status\");\n  if (statusTags && statusTags.length > 0) {\n    var statusTag = statusTags[0];\n    info.status = Strophe.getText(statusTag);\n    info.code = statusTag.getAttribute(\"code\");\n  }\n  var priorityTags = msginfo.getElementsByTagName(\"priority\");\n  if (priorityTags && priorityTags.length > 0) {\n    var priorityTag = priorityTags[0];\n    info.priority = Strophe.getText(priorityTag);\n  }\n  var error = msginfo.getElementsByTagName(\"error\");\n  if (error && error.length > 0) {\n    error = error[0];\n    info.error = {\n      code: error.getAttribute(\"code\") };\n\n  }\n  var destroy = msginfo.getElementsByTagName(\"destroy\");\n  if (destroy && destroy.length > 0) {\n    destroy = destroy[0];\n    info.destroy = true;\n    var reason = destroy.getElementsByTagName(\"reason\");\n    if (reason && reason.length > 0) {\n      info.reason = Strophe.getText(reason[0]);\n    }\n  }\n  var members = msginfo.getElementsByTagName(\"item\");\n  if (members && members.length > 0) {\n    var member = members[0];\n    var role = member.getAttribute(\"role\");\n    var jid = member.getAttribute(\"jid\");\n    var affiliation = member.getAttribute(\"affiliation\");\n    // dismissed by group\n    if (role == \"none\" && jid) {\n      var kickedMember = _parseNameFromJidFn(jid);\n      var actor = member.getElementsByTagName(\"actor\")[0];\n      var actorNick = actor.getAttribute(\"nick\");\n      info.actor = actorNick;\n      info.kicked = kickedMember;\n    }\n    // Service Acknowledges Room Creation `createGroupACK`\n    if (role == \"moderator\" && info.code == \"201\") {\n      if (affiliation === \"owner\") {\n        info.type = \"createGroupACK\";\n        isCreate = true;\n      }\n      // else\n      //     info.type = 'joinPublicGroupSuccess';\n    }\n  }\n  var x = msginfo.getElementsByTagName(\"x\");\n  if (x && x.length > 0) {\n    // 加群申请\n    var apply = x[0].getElementsByTagName(\"apply\");\n    // 加群成功\n    var accept = x[0].getElementsByTagName(\"accept\");\n    // 同意加群后用户进群通知\n    var item = x[0].getElementsByTagName(\"item\");\n    // 加群被拒绝\n    var decline = x[0].getElementsByTagName(\"decline\");\n    // 被设为管理员\n    var addAdmin = x[0].getElementsByTagName(\"add_admin\");\n    // 被取消管理员\n    var removeAdmin = x[0].getElementsByTagName(\"remove_admin\");\n    // 被禁言\n    var addMute = x[0].getElementsByTagName(\"add_mute\");\n    // 取消禁言\n    var removeMute = x[0].getElementsByTagName(\"remove_mute\");\n    if (apply && apply.length > 0) {\n      isApply = true;\n      info.toNick = apply[0].getAttribute(\"toNick\");\n      info.type = \"joinGroupNotifications\";\n      var groupJid = apply[0].getAttribute(\"to\");\n      var gid = groupJid.split(\"@\")[0].split(\"_\");\n      gid = gid[gid.length - 1];\n      info.gid = gid;\n    } else if (accept && accept.length > 0) {\n      info.type = \"joinPublicGroupSuccess\";\n    } else if (item && item.length > 0) {\n      var _affiliation = item[0].getAttribute(\"affiliation\");\n      var _role = item[0].getAttribute(\"role\");\n      if (_affiliation == \"member\" || _role == \"participant\") {\n        isMemberJoin = true;\n        info.mid = info.fromJid.split(\"/\");\n        info.mid = info.mid[info.mid.length - 1];\n        info.type = \"memberJoinPublicGroupSuccess\";\n        var roomtype = msginfo.getElementsByTagName(\"roomtype\");\n        if (roomtype && roomtype.length > 0) {\n          var _type = roomtype[0].getAttribute(\"type\");\n          if (_type == \"chatroom\") {\n            info.type = \"memberJoinChatRoomSuccess\";\n          }\n        }\n      } else if (_affiliation == \"none\" || _role == \"none\") {\n        var _roomtype = msginfo.getElementsByTagName(\"roomtype\");\n        if (_roomtype && _roomtype.length > 0) {\n          var _type2 = _roomtype[0].getAttribute(\"type\");\n          if (_type2 == \"chatroom\") {\n            info.type = \"memberLeaveChatRoomSuccess\";\n          }\n        }\n      }\n    } else if (decline && decline.length) {\n      isDecline = true;\n      var _gid = decline[0].getAttribute(\"fromNick\");\n      var owner = _parseNameFromJidFn(decline[0].getAttribute(\"from\"));\n      info.type = \"joinPublicGroupDeclined\";\n      info.owner = owner;\n      info.gid = _gid;\n    } else if (addAdmin && addAdmin.length > 0) {\n      var _gid2 = _parseNameFromJidFn(addAdmin[0].getAttribute(\"mucjid\"));\n      var _owner = _parseNameFromJidFn(addAdmin[0].getAttribute(\"from\"));\n      info.owner = _owner;\n      info.gid = _gid2;\n      info.type = \"addAdmin\";\n    } else if (removeAdmin && removeAdmin.length > 0) {\n      var _gid3 = _parseNameFromJidFn(removeAdmin[0].getAttribute(\"mucjid\"));\n      var _owner2 = _parseNameFromJidFn(removeAdmin[0].getAttribute(\"from\"));\n      info.owner = _owner2;\n      info.gid = _gid3;\n      info.type = \"removeAdmin\";\n    } else if (addMute && addMute.length > 0) {\n      var _gid4 = _parseNameFromJidFn(addMute[0].getAttribute(\"mucjid\"));\n      var _owner3 = _parseNameFromJidFn(addMute[0].getAttribute(\"from\"));\n      info.owner = _owner3;\n      info.gid = _gid4;\n      info.type = \"addMute\";\n    } else if (removeMute && removeMute.length > 0) {\n      var _gid5 = _parseNameFromJidFn(removeMute[0].getAttribute(\"mucjid\"));\n      var _owner4 = _parseNameFromJidFn(removeMute[0].getAttribute(\"from\"));\n      info.owner = _owner4;\n      info.gid = _gid5;\n      info.type = \"removeMute\";\n    }\n  }\n  if (info.chatroom) {\n    info.presence_type = presence_type;\n    info.original_type = info.type;\n    var reflectUser = from.slice(from.lastIndexOf(\"/\") + 1);\n    if (reflectUser === this.context.userId) {\n      if (info.type === \"\" && !info.code) {\n        info.type = \"joinChatRoomSuccess\";\n      } else if (presence_type === \"unavailable\" || info.type === \"unavailable\") {\n        // logout successfully.\n        if (!info.status) {\n          info.type = \"leaveChatRoom\";\n        }\n        // logout or dismissied by admin\n        else if (info.code == 110) {\n            info.type = \"leaveChatRoom\";\n          }\n          // The chat room is full\n          else if (info.error && info.error.code == 406) {\n              info.type = \"reachChatRoomCapacity\";\n            }\n      }\n    }\n  } else {\n    info.presence_type = presence_type;\n    info.original_type = type;\n    if (/subscribe/.test(info.type)) {\n      // subscribe | subscribed | unsubscribe | unsubscribed\n    } else if (type == \"\" &&\n    !info.status &&\n    !info.error &&\n    !isCreate &&\n    !isApply &&\n    !isMemberJoin &&\n    !isDecline)\n    {\n\n    } // info.type = 'joinPublicGroupSuccess';\n    // There is no roomtype when a chat room is deleted.\n    else if (presence_type === \"unavailable\" || type === \"unavailable\") {\n        // Group or Chat room Deleted.\n        if (info.destroy) {\n          info.type = \"deleteGroupChat\";\n        }\n        // Dismissed by group.\n        else if (info.code == 307 || info.code == 321) {\n            var nick = msginfo.getAttribute(\"nick\");\n            if (!nick) {\n              info.type = \"leaveGroup\";\n            } else {\n              info.type = \"removedFromGroup\";\n            }\n          }\n      }\n  }\n  //自己加自己\n  if (info.type == 'subscribe' && info.from == info.to) {\n    return;\n  }\n  this.onPresence(info, msginfo);\n};\n\n// connection.prototype.handlePing = function(e){\n// \tif(this.isClosed()){\n// \t\treturn;\n// \t}\n// \tlet id = e.getAttribute(\"id\");\n// \tlet from = e.getAttribute(\"from\");\n// \tlet to = e.getAttribute(\"to\");\n// \tlet dom = $iq({\n// \t\tfrom: to, to: from, id: id, type: \"result\"\n// \t});\n// \tthis.sendCommand(dom.tree());\n// };\n\nconnection.prototype.handleIq = function (iq) {\n  return true;\n};\nconnection.prototype.handleIqPrivacy = function (msginfo) {\n  var list = msginfo.getElementsByTagName(\"list\");\n  if (list.length == 0) {\n    return;\n  }\n  this.getBlacklist();\n};\nconnection.prototype.handleIqRoster = function (e) {\n  var id = e.getAttribute(\"id\");\n  var from = e.getAttribute(\"from\") || \"\";\n  // var name = _parseNameFromJidFn(from);\n  var curJid = this.context.jid;\n  // var curUser = this.context.userId;\n  var iqresult = _strophe.default.$iq({\n    type: \"result\",\n    id: id,\n    from: curJid });\n\n  this.sendCommand(iqresult.tree());\n  var msgBodies = e.getElementsByTagName(\"query\");\n  if (msgBodies && msgBodies.length > 0) {\n    var queryTag = msgBodies[0];\n    var rouster = _parseFriend(queryTag, this, from);\n    this.onRoster(rouster);\n  }\n  return true;\n};\nconnection.prototype.handleMessage = function (msginfo) {\n  if (this.isClosed()) {\n    return;\n  }\n  var id = msginfo.getAttribute(\"id\") || \"\";\n  // cache ack into sendQueue first, handelSendQueue will do the send thing with the speed of 5/s\n  this.cacheReceiptsMessage({\n    id: id });\n\n  // console.log('handlePresence', msginfo)\n  var parseMsgData = _parseResponseMessage(msginfo);\n  // console.log('parseMsgData', parseMsgData)\n  if (parseMsgData.errorMsg) {\n    this.handlePresence(msginfo);\n    return;\n  }\n  // send error\n  var error = msginfo.getElementsByTagName(\"error\");\n  var errorCode = \"\";\n  var errorText = \"\";\n  var errorBool = false;\n  if (error.length > 0) {\n    errorBool = true;\n    errorCode = error[0].getAttribute(\"code\");\n    var textDOM = error[0].getElementsByTagName(\"text\");\n    errorText = textDOM[0].textContent || textDOM[0].text;\n    // log(\"handle error\", errorCode, errorText);\n  }\n  var msgDatas = parseMsgData.data;\n  for (var i in msgDatas) {\n    if (!Object.hasOwnProperty.call(msgDatas, i)) {\n      continue;\n    }\n    var msg = msgDatas[i];\n    if (!msg.from || !msg.to) {\n      continue;\n    }\n    var from = (msg.from + \"\").toLowerCase();\n    var too = (msg.to + \"\").toLowerCase();\n    var extmsg = msg.ext || {};\n    // console.log(extmsg)\n    var chattype = \"\";\n    var typeEl = msginfo.getElementsByTagName(\"roomtype\");\n    if (typeEl.length) {\n      chattype = typeEl[0].getAttribute(\"type\") || \"chat\";\n    } else {\n      chattype = msginfo.getAttribute(\"type\") || \"chat\";\n    }\n    var msgBodies = msg.bodies;\n    if (!msgBodies || msgBodies.length == 0) {\n      continue;\n    }\n    var msgBody = msg.bodies[0];\n    var type = msgBody.type;\n    try {\n      switch (type) {\n        case \"txt\":\n          // console.log(extmsg)\n          var receiveMsg = msgBody.msg;\n          var emojibody = _utils.parseTextMessage(receiveMsg, WebIM.Emoji);\n          if (emojibody.isemoji) {\n            var _msg3 = {\n              id: id,\n              type: chattype,\n              from: from,\n              to: too,\n              delay: parseMsgData.delayTimeStamp,\n              data: emojibody.body,\n              ext: extmsg };\n\n            !_msg3.delay && delete _msg3.delay;\n            _msg3.error = errorBool;\n            _msg3.errorText = errorText;\n            _msg3.errorCode = errorCode;\n            this.onEmojiMessage(_msg3);\n          } else {\n            var _msg4 = {\n              id: id,\n              type: chattype,\n              from: from,\n              to: too,\n              delay: parseMsgData.delayTimeStamp,\n              data: receiveMsg,\n              ext: extmsg };\n\n            !_msg4.delay && delete _msg4.delay;\n            _msg4.error = errorBool;\n            _msg4.errorText = errorText;\n            _msg4.errorCode = errorCode;\n            this.onTextMessage(_msg4);\n          }\n          break;\n        case \"img\":\n          var rwidth = 0;\n          var rheight = 0;\n          if (msgBody.size) {\n            rwidth = msgBody.size.width;\n            rheight = msgBody.size.height;\n          }\n          var _msg2 = {\n            id: id,\n            type: chattype,\n            from: from,\n            to: too,\n            url: msgBody.url,\n            secret: msgBody.secret,\n            filename: msgBody.filename,\n            thumb: msgBody.thumb,\n            thumb_secret: msgBody.thumb_secret,\n            file_length: msgBody.file_length || \"\",\n            width: rwidth,\n            height: rheight,\n            filetype: msgBody.filetype || \"\",\n            accessToken: this.context.accessToken || \"\",\n            ext: extmsg,\n            delay: parseMsgData.delayTimeStamp };\n\n          !_msg2.delay && delete _msg2.delay;\n          _msg2.error = errorBool;\n          _msg2.errorText = errorText;\n          _msg2.errorCode = errorCode;\n          this.onPictureMessage(_msg2);\n          break;\n        case \"audio\":\n          _msg2 = {\n            id: id,\n            type: chattype,\n            from: from,\n            to: too,\n            url: msgBody.url,\n            secret: msgBody.secret,\n            filename: msgBody.filename,\n            length: msgBody.length || \"\",\n            file_length: msgBody.file_length || \"\",\n            filetype: msgBody.filetype || \"\",\n            accessToken: this.context.accessToken || \"\",\n            ext: extmsg,\n            delay: parseMsgData.delayTimeStamp };\n\n          !_msg2.delay && delete _msg2.delay;\n          _msg2.error = errorBool;\n          _msg2.errorText = errorText;\n          _msg2.errorCode = errorCode;\n          this.onAudioMessage(_msg2);\n          break;\n        case \"file\":\n          _msg2 = {\n            id: id,\n            type: chattype,\n            from: from,\n            to: too,\n            url: msgBody.url,\n            secret: msgBody.secret,\n            filename: msgBody.filename,\n            file_length: msgBody.file_length,\n            accessToken: this.context.accessToken || \"\",\n            ext: extmsg,\n            delay: parseMsgData.delayTimeStamp };\n\n          !_msg2.delay && delete _msg2.delay;\n          _msg2.error = errorBool;\n          _msg2.errorText = errorText;\n          _msg2.errorCode = errorCode;\n          this.onFileMessage(_msg2);\n          break;\n        case \"loc\":\n          _msg2 = {\n            id: id,\n            type: chattype,\n            from: from,\n            to: too,\n            addr: msgBody.addr,\n            lat: msgBody.lat,\n            lng: msgBody.lng,\n            ext: extmsg,\n            delay: parseMsgData.delayTimeStamp };\n\n          !_msg2.delay && delete _msg2.delay;\n          _msg2.error = errorBool;\n          _msg2.errorText = errorText;\n          _msg2.errorCode = errorCode;\n          this.onLocationMessage(_msg2);\n          break;\n        case \"video\":\n          _msg2 = {\n            id: id,\n            type: chattype,\n            from: from,\n            to: too,\n            url: msgBody.url,\n            secret: msgBody.secret,\n            filename: msgBody.filename,\n            file_length: msgBody.file_length,\n            accessToken: this.context.accessToken || \"\",\n            ext: extmsg,\n            delay: parseMsgData.delayTimeStamp };\n\n          !_msg2.delay && delete _msg2.delay;\n          _msg2.error = errorBool;\n          _msg2.errorText = errorText;\n          _msg2.errorCode = errorCode;\n          this.onVideoMessage(_msg2);\n          break;\n        case \"cmd\":\n          _msg2 = {\n            id: id,\n            from: from,\n            to: too,\n            action: msgBody.action,\n            ext: extmsg,\n            delay: parseMsgData.delayTimeStamp };\n\n          !_msg2.delay && delete _msg2.delay;\n          _msg2.error = errorBool;\n          _msg2.errorText = errorText;\n          _msg2.errorCode = errorCode;\n          this.onCmdMessage(_msg2);\n          break;\n        default:\n          break;}\n\n    } catch (e) {\n      this.onError({\n        type: _code.WEBIM_CONNCTION_CALLBACK_INNER_ERROR,\n        data: e });\n\n    }\n  }\n};\nconnection.prototype.handleReceivedMessage = function (message) {\n  try {\n    this.onReceivedMessage(message);\n  } catch (e) {\n    this.onError({\n      type: _code.WEBIM_CONNCTION_CALLBACK_INNER_ERROR,\n      data: e });\n\n  }\n  var rcv = message.getElementsByTagName(\"received\");\n  var id;\n  var mid;\n  if (rcv.length > 0) {\n    if (rcv[0].childNodes && rcv[0].childNodes.length > 0) {\n      id = rcv[0].childNodes[0].nodeValue;\n    } else {\n      id = rcv[0].innerHTML || rcv[0].innerText;\n    }\n    mid = rcv[0].getAttribute(\"mid\");\n  }\n  if (_msgHash[id]) {\n    try {\n      _msgHash[id].msg.success instanceof Function && _msgHash[id].msg.success(id, mid);\n    } catch (e) {\n      this.onError({\n        type: _code.WEBIM_CONNCTION_CALLBACK_INNER_ERROR,\n        data: e });\n\n    }\n    delete _msgHash[id];\n  }\n};\nconnection.prototype.handleInviteMessage = function (message) {\n  var form = null;\n  var invitemsg = message.getElementsByTagName(\"invite\");\n  var reasonDom = message.getElementsByTagName(\"reason\")[0];\n  var reasonMsg = reasonDom.textContent;\n  var id = message.getAttribute(\"id\") || \"\";\n  this.sendReceiptsMessage({\n    id: id });\n\n  if (invitemsg && invitemsg.length > 0) {\n    var fromJid = invitemsg[0].getAttribute(\"from\");\n    form = _parseNameFromJidFn(fromJid);\n  }\n  var xmsg = message.getElementsByTagName(\"x\");\n  var roomid = null;\n  if (xmsg && xmsg.length > 0) {\n    for (var i = 0; i < xmsg.length; i++) {\n      if (xmsg[i].namespaceURI === \"jabber:x:conference\") {\n        var roomjid = xmsg[i].getAttribute(\"jid\");\n        roomid = _parseNameFromJidFn(roomjid);\n      }\n    }\n  }\n  this.onInviteMessage({\n    type: \"invite\",\n    from: form,\n    roomid: roomid,\n    reason: reasonMsg });\n\n};\nconnection.prototype.sendCommand = function (dom, id) {\n  var me = this;\n  if (this.isOpened()) {\n    var fail = function fail(reason) {\n      var data = {};\n      data.mid = id;\n      data.reason = reason;\n      me.onError({\n        type: 'socket_error',\n        data: data });\n\n    };\n    this.context.stropheConn.send(dom, fail);\n  } else {\n    __f__(\"log\", \"Err 5\", \" at webIM\\\\sdk\\\\connection.js:1458\");\n    this.onError({\n      type: _code.WEBIM_CONNCTION_DISCONNECTED });\n\n  }\n};\nconnection.prototype.getUniqueId = function (prefix) {\n  var cdate = new Date();\n  var offdate = new Date(2010, 1, 1);\n  var offset = cdate.getTime() - offdate.getTime();\n  var hexd = parseInt(offset).toString(16);\n  if (typeof prefix === \"string\" || typeof prefix === \"number\") {\n    return prefix + \"_\" + hexd;\n  }\n  return \"WEBIM_\" + hexd;\n};\nconnection.prototype.send = function (message) {\n  if (WebIM.config.isWindowSDK) {\n    WebIM.doQuery(\n    JSON.stringify({\n      type: \"sendMessage\",\n      to: message.to,\n      message_type: message.type,\n      msg: encodeURI(message.msg),\n      chatType: message.chatType }),\n\n    function (response) {\n\n    },\n    function (code, msg) {\n\n    });\n\n  } else if (Object.prototype.toString.call(message) === \"[object Object]\") {\n    var appKey = this.context.appKey || \"\";\n    var toJid = appKey + \"_\" + message.to + \"@\" + this.domain;\n    if (message.group) {\n      toJid = appKey + \"_\" + message.to + \"@conference.\" + this.domain;\n    }\n    if (message.resource) {\n      toJid = toJid + \"/\" + message.resource;\n    }\n    message.toJid = toJid;\n    message.id = message.id || this.getUniqueId();\n    _msgHash[message.id] = new _message(message);\n    try {\n      _msgHash[message.id].send(this);\n    } catch (e) {\n      __f__(\"log\", '发送失败', \" at webIM\\\\sdk\\\\connection.js:1506\");\n    }\n\n  } else if (typeof message === \"string\") {\n    _msgHash[message] && _msgHash[message].send(this);\n  }\n};\nconnection.prototype.addRoster = function (options) {\n  var jid = _getJid(options, this);\n  var name = options.name || \"\";\n  var groups = options.groups || \"\";\n\n  var iq = _strophe.default.$iq({\n    type: \"set\" });\n\n  iq.c(\"query\", {\n    xmlns: \"jabber:iq:roster\" });\n\n  iq.c(\"item\", {\n    jid: jid,\n    name: name });\n\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      iq.c(\"group\").t(groups[i]).up();\n    }\n  }\n  var suc = options.success || _utils.emptyfn;\n  var error = options.error || _utils.emptyfn;\n  this.context.stropheConn.sendIQ(iq.tree(), suc, error);\n};\nconnection.prototype.removeRoster = function (options) {\n  var jid = _getJid(options, this);\n  var iq = _strophe.default.\n  $iq({\n    type: \"set\" }).\n\n  c(\"query\", {\n    xmlns: \"jabber:iq:roster\" }).\n\n  c(\"item\", {\n    jid: jid,\n    subscription: \"remove\" });\n\n  var suc = options.success || _utils.emptyfn;\n  var error = options.error || _utils.emptyfn;\n  this.context.stropheConn.sendIQ(iq, suc, error);\n};\nconnection.prototype.getRoster = function (options) {\n  var dom = _strophe.default.$iq({\n    type: \"get\" }).\n\n  c(\"query\", {\n    xmlns: \"jabber:iq:roster\" });\n\n  options = options || {};\n  var suc = options.success || this.onRoster;\n  var error = options.error || this.onError;\n  if (this.isOpened()) {\n    this.context.stropheConn.sendIQ(dom.tree(), function (ele) {\n      var rouster = [];\n      var msgBodies = ele.getElementsByTagName(\"query\");\n      if (msgBodies && msgBodies.length > 0) {\n        var queryTag = msgBodies[0];\n        rouster = _parseFriend(queryTag);\n      }\n      suc(rouster, ele);\n    }, function (ele) {\n      error({\n        type: _code.WEBIM_CONNCTION_GETROSTER_ERROR,\n        data: ele });\n\n    });\n  } else {\n    error({\n      type: _code.WEBIM_CONNCTION_DISCONNECTED });\n\n  }\n};\nconnection.prototype.subscribe = function (options) {\n  var jid = _getJid(options, this);\n  var pres = _strophe.default.$pres({\n    to: jid,\n    type: \"subscribe\" });\n\n  if (options.message) {\n    pres.c(\"status\").t(options.message).up();\n  }\n  if (options.nick) {\n    pres.\n    c(\"nick\", {\n      xmlns: \"http://jabber.org/protocol/nick\" }).\n\n    t(options.nick);\n  }\n  this.sendCommand(pres.tree());\n};\nconnection.prototype.subscribed = function (options) {\n  var jid = _getJid(options, this);\n  var pres = _strophe.default.$pres({\n    to: jid,\n    type: \"subscribed\" });\n\n  if (options.message) {\n    pres.c(\"status\").t(options.message).up();\n  }\n  this.sendCommand(pres.tree());\n};\nconnection.prototype.unsubscribe = function (options) {\n  var jid = _getJid(options, this);\n  var pres = _strophe.default.$pres({\n    to: jid,\n    type: \"unsubscribe\" });\n\n  if (options.message) {\n    pres.c(\"status\").t(options.message);\n  }\n  this.sendCommand(pres.tree());\n};\nconnection.prototype.unsubscribed = function (options) {\n  var jid = _getJid(options, this);\n  var pres = _strophe.default.$pres({\n    to: jid,\n    type: \"unsubscribed\" });\n\n  if (options.message) {\n    pres.c(\"status\").t(options.message).up();\n  }\n  this.sendCommand(pres.tree());\n};\nconnection.prototype.createRoom = function (options) {\n  var suc = options.success || _utils.emptyfn;\n  var err = options.error || _utils.emptyfn;\n  var roomiq;\n  roomiq = _strophe.default.$iq({\n    to: options.roomName,\n    type: \"set\" }).\n\n  c(\"query\", {\n    xmlns: Strophe.NS.MUC_OWNER }).\n\n  c(\"x\", {\n    xmlns: \"jabber:x:data\",\n    type: \"submit\" });\n\n  return this.context.stropheConn.sendIQ(roomiq.tree(), suc, err);\n};\n\n// connection.prototype.joinPublicGroup = function(options){\n// \tvar roomJid = this.context.appKey + \"_\" + options.roomId + \"@conference.\" + this.domain;\n// \tvar room_nick = roomJid + \"/\" + this.context.userId;\n// \tvar suc = options.success || _utils.emptyfn;\n// \tvar err = options.error || _utils.emptyfn;\n// \tvar errorFn = function(ele){\n// \t\terr({\n// \t\t\ttype: _code.WEBIM_CONNCTION_JOINROOM_ERROR,\n// \t\t\tdata: ele\n// \t\t});\n// \t};\n// \tvar iq = $pres({\n// \t\tfrom: this.context.jid,\n// \t\tto: room_nick\n// \t})\n// \t.c(\"x\", { xmlns: Strophe.NS.MUC });\n// \tthis.context.stropheConn.sendIQ(iq.tree(), suc, errorFn);\n// };\n\nconnection.prototype.listRooms = function (options) {\n  var iq = _strophe.default.$iq({\n    to: options.server || \"conference.\" + this.domain,\n    from: this.context.jid,\n    type: \"get\" }).\n\n  c(\"query\", {\n    xmlns: Strophe.NS.DISCO_ITEMS });\n\n  var suc = options.success || _utils.emptyfn;\n  var error = options.error || this.onError;\n  var completeFn = function completeFn(result) {\n    var rooms = [];\n    rooms = _parseRoom(result);\n    try {\n      suc(rooms);\n    } catch (e) {\n      error({\n        type: _code.WEBIM_CONNCTION_GETROOM_ERROR,\n        data: e });\n\n    }\n  };\n  var err = options.error || _utils.emptyfn;\n  var errorFn = function errorFn(ele) {\n    err({\n      type: _code.WEBIM_CONNCTION_GETROOM_ERROR,\n      data: ele });\n\n  };\n  this.context.stropheConn.sendIQ(iq.tree(), completeFn, errorFn);\n};\nconnection.prototype.queryRoomMember = function (options) {\n  var members = [];\n  var iq = _strophe.default.$iq({\n    to: this.context.appKey + \"_\" + options.roomId + \"@conference.\" + this.domain,\n    type: \"get\" }).\n\n  c(\"query\", {\n    xmlns: Strophe.NS.MUC + \"#admin\" }).\n\n  c(\"item\", {\n    affiliation: \"member\" });\n\n  var suc = options.success || _utils.emptyfn;\n  var completeFn = function completeFn(result) {\n    var items = result.getElementsByTagName(\"item\");\n    if (items) {\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var mem = {\n          jid: item.getAttribute(\"jid\"),\n          affiliation: \"member\" };\n\n        members.push(mem);\n      }\n    }\n    suc(members);\n  };\n  var err = options.error || _utils.emptyfn;\n  var errorFn = function errorFn(ele) {\n    err({\n      type: _code.WEBIM_CONNCTION_GETROOMMEMBER_ERROR,\n      data: ele });\n\n  };\n  this.context.stropheConn.sendIQ(iq.tree(), completeFn, errorFn);\n};\nconnection.prototype.queryRoomInfo = function (options) {\n  var domain = this.domain;\n  var iq = _strophe.default.$iq({\n    to: this.context.appKey + \"_\" + options.roomId + \"@conference.\" + domain,\n    type: \"get\" }).\n\n  c(\"query\", {\n    xmlns: Strophe.NS.DISCO_INFO });\n\n  var suc = options.success || _utils.emptyfn;\n  var members = [];\n  var completeFn = function completeFn(result) {\n    var settings = \"\";\n    var features = result.getElementsByTagName(\"feature\");\n    if (features) {\n      settings = features[1].getAttribute(\"var\") + \"|\" + features[3].getAttribute(\"var\") + \"|\" + features[4].getAttribute(\"var\");\n    }\n    switch (settings) {\n      case \"muc_public|muc_membersonly|muc_notallowinvites\":\n        settings = \"PUBLIC_JOIN_APPROVAL\";\n        break;\n      case \"muc_public|muc_open|muc_notallowinvites\":\n        settings = \"PUBLIC_JOIN_OPEN\";\n        break;\n      case \"muc_hidden|muc_membersonly|muc_allowinvites\":\n        settings = \"PRIVATE_MEMBER_INVITE\";\n        break;\n      case \"muc_hidden|muc_membersonly|muc_notallowinvites\":\n        settings = \"PRIVATE_OWNER_INVITE\";\n        break;\n      default:\n        break;}\n\n    var fields = result.getElementsByTagName(\"field\");\n    var fieldValues = {};\n    if (fields) {\n      for (var i = 0; i < fields.length; i++) {\n        var field = fields[i];\n        var fieldVar = field.getAttribute(\"var\");\n        var fieldSimplify = fieldVar.split(\"_\")[1];\n        switch (fieldVar) {\n          case \"muc#roominfo_occupants\":\n          case \"muc#roominfo_maxusers\":\n          case \"muc#roominfo_affiliations\":\n          case \"muc#roominfo_description\":\n            fieldValues[fieldSimplify] = field.textContent || field.text || \"\";\n            break;\n          case \"muc#roominfo_owner\":\n            var mem = {\n              jid: (field.textContent || field.text) + \"@\" + domain,\n              affiliation: \"owner\" };\n\n            members.push(mem);\n            fieldValues[fieldSimplify] = field.textContent || field.text;\n            break;\n          default:\n            break;}\n\n        // if (field.getAttribute('label') === 'owner') {\n        //     var mem = {\n        //         jid: (field.textContent || field.text) + '@' + domain\n        //         , affiliation: 'owner'\n        //     };\n        //     members.push(mem);\n        //     break;\n        // }\n      }\n      fieldValues.name = result.getElementsByTagName(\"identity\")[0].getAttribute(\"name\");\n    }\n    // log(settings, members, fieldValues);\n    suc(settings, members, fieldValues);\n  };\n  var err = options.error || _utils.emptyfn;\n  var errorFn = function errorFn(ele) {\n    err({\n      type: _code.WEBIM_CONNCTION_GETROOMINFO_ERROR,\n      data: ele });\n\n  };\n  this.context.stropheConn.sendIQ(iq.tree(), completeFn, errorFn);\n};\nconnection.prototype.queryRoomOccupants = function (options) {\n  var suc = options.success || _utils.emptyfn;\n  var completeFn = function completeFn(result) {\n    var occupants = [];\n    occupants = _parseRoomOccupants(result);\n    suc(occupants);\n  };\n  var err = options.error || _utils.emptyfn;\n  var errorFn = function errorFn(ele) {\n    err({\n      type: _code.WEBIM_CONNCTION_GETROOMOCCUPANTS_ERROR,\n      data: ele });\n\n  };\n  var attrs = {\n    xmlns: Strophe.NS.DISCO_ITEMS };\n\n  var info = _strophe.default.$iq({\n    from: this.context.jid,\n    to: this.context.appKey + \"_\" + options.roomId + \"@conference.\" + this.domain,\n    type: \"get\" }).\n  c(\"query\", attrs);\n  this.context.stropheConn.sendIQ(info.tree(), completeFn, errorFn);\n};\nconnection.prototype.setUserSig = function (desc) {\n  var dom = _strophe.default.$pres({\n    xmlns: \"jabber:client\" });\n\n  desc = desc || \"\";\n  dom.c(\"status\").t(desc);\n  this.sendCommand(dom.tree());\n};\nconnection.prototype.setPresence = function (type, status) {\n  var dom = _strophe.default.$pres({\n    xmlns: \"jabber:client\" });\n\n  if (type) {\n    if (status) {\n      dom.c(\"show\").t(type);\n      dom.up().c(\"status\").t(status);\n    } else {\n      dom.c(\"show\").t(type);\n    }\n  }\n  this.sendCommand(dom.tree());\n};\nconnection.prototype.getPresence = function () {\n  var dom = _strophe.default.$pres({\n    xmlns: \"jabber:client\" });\n\n  this.sendCommand(dom.tree());\n};\nconnection.prototype.ping = function (options) {\n  options = options || {};\n  var jid = _getJid(options, this);\n  var dom = _strophe.default.$iq({\n    from: this.context.jid || \"\",\n    to: jid,\n    type: \"get\" }).\n\n  c(\"ping\", {\n    xmlns: \"urn:xmpp:ping\" });\n\n  var suc = options.success || _utils.emptyfn;\n  var error = options.error || this.onError;\n  var failFn = function failFn(ele) {\n    error({\n      type: _code.WEBIM_CONNCTION_PING_ERROR,\n      data: ele });\n\n  };\n  if (this.isOpened()) {\n    this.context.stropheConn.sendIQ(dom.tree(), suc, failFn);\n  } else {\n    error({\n      type: _code.WEBIM_CONNCTION_DISCONNECTED });\n\n  }\n};\nconnection.prototype.isOpened = function () {\n  return this.context.status == _code.STATUS_OPENED;\n};\nconnection.prototype.isOpening = function () {\n  var ctxstatus = this.context.status;\n  return ctxstatus == _code.STATUS_DOLOGIN_USERGRID || ctxstatus == _code.STATUS_DOLOGIN_IM;\n};\nconnection.prototype.isClosing = function () {\n  return this.context.status == _code.STATUS_CLOSING;\n};\nconnection.prototype.isClosed = function () {\n  return this.context.status == _code.STATUS_CLOSED;\n};\nconnection.prototype.clear = function () {\n  var key = this.context.appKey;\n  if (this.errorType != WebIM.statusCode.WEBIM_CONNCTION_DISCONNECTED) {\n    this.context = {\n      status: _code.STATUS_INIT,\n      appKey: key };\n\n  }\n  if (this.intervalId) {\n    clearInterval(this.intervalId);\n  }\n  if (this.errorType == WebIM.statusCode.WEBIM_CONNCTION_CLIENT_LOGOUT || this.errorType == -1) {\n\n  }\n};\nconnection.prototype.getChatRooms = function (options) {\n  var me = this;\n  var token = options.accessToken || this.context.accessToken;\n  if (token) {\n    var apiUrl = this.apiUrl;\n    var appName = this.context.appName;\n    var orgName = this.context.orgName;\n    if (!appName || !orgName) {\n      me.onError({\n        type: _code.WEBIM_CONNCTION_AUTH_ERROR });\n\n      return;\n    }\n    var suc = function suc(data, xhr) {\n      typeof options.success === \"function\" && options.success(data);\n    };\n    var error = function error(res, xhr, msg) {\n      if (res.error && res.error_description) {\n        me.onError({\n          type: _code.WEBIM_CONNCTION_LOAD_CHATROOM_ERROR,\n          msg: res.error_description,\n          data: res,\n          xhr: xhr });\n\n      }\n    };\n    var pageInfo = {\n      pagenum: parseInt(options.pagenum) || 1,\n      pagesize: parseInt(options.pagesize) || 20 };\n\n    var opts = {\n      url: apiUrl + \"/\" + orgName + \"/\" + appName + \"/chatrooms\",\n      dataType: \"json\",\n      type: \"GET\",\n      header: {\n        Authorization: \"Bearer \" + token },\n\n      data: pageInfo,\n      success: suc || _utils.emptyfn,\n      fail: error || _utils.emptyfn };\n\n    wx.request(opts);\n  } else {\n    me.onError({\n      type: _code.WEBIM_CONNCTION_TOKEN_NOT_ASSIGN_ERROR });\n\n  }\n};\nconnection.prototype.joinChatRoom = function (options) {\n  var roomJid = this.context.appKey + \"_\" + options.roomId + \"@conference.\" + this.domain;\n  var room_nick = roomJid + \"/\" + this.context.userId;\n  var suc = options.success || _utils.emptyfn;\n  var err = options.error || _utils.emptyfn;\n  var errorFn = function errorFn(ele) {\n    err({\n      type: _code.WEBIM_CONNCTION_JOINCHATROOM_ERROR,\n      data: ele });\n\n  };\n  var pres = _strophe.default.$pres({\n    from: this.context.jid,\n    to: room_nick });\n\n  pres.c(\"x\", {\n    xmlns: Strophe.NS.MUC + \"#user\" }).\n\n  c(\"item\", {\n    affiliation: \"member\",\n    role: \"participant\" }).\n\n  up().\n  up().\n  c(\"roomtype\", {\n    xmlns: \"easemob:x:roomtype\",\n    type: \"chatroom\" });\n\n  this.context.stropheConn.sendIQ(pres.tree(), suc, errorFn);\n};\nconnection.prototype.quitChatRoom = function (options) {\n  var roomJid = this.context.appKey + \"_\" + options.roomId + \"@conference.\" + this.domain;\n  var room_nick = roomJid + \"/\" + this.context.userId;\n  var suc = options.success || _utils.emptyfn;\n  var err = options.error || _utils.emptyfn;\n  var errorFn = function errorFn(ele) {\n    err({\n      type: _code.WEBIM_CONNCTION_QUITCHATROOM_ERROR,\n      data: ele });\n\n  };\n  var pres = _strophe.default.$pres({\n    from: this.context.jid,\n    to: room_nick,\n    type: \"unavailable\" });\n\n  pres.\n  c(\"x\", {\n    xmlns: Strophe.NS.MUC + \"#user\" }).\n\n  c(\"item\", {\n    affiliation: \"none\",\n    role: \"none\" }).\n\n  up().\n  up().\n  c(\"roomtype\", {\n    xmlns: \"easemob:x:roomtype\",\n    type: \"chatroom\" });\n\n  this.context.stropheConn.sendIQ(pres.tree(), suc, errorFn);\n};\n// connection.prototype._onReceiveInviteFromGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group invitation\",\n// \t\tmsg: info.user + \" invites you to join into group:\" + info.group_id,\n// \t\tagree: function agree(){\n// \t\t\tWebIM.doQuery(\n// \t\t\t\t\"{\\\"type\\\":\\\"acceptInvitationFromGroup\\\",\\\"id\\\":\\\"\" + info.group_id + \"\\\",\\\"user\\\":\\\"\" + info.user + \"\\\"}\",\n// \t\t\t\tfunction(response){\n// \t\t\t\t},\n// \t\t\t\tfunction(code, msg){\n// \t\t\t\t\tIM.api.NotifyError(\"acceptInvitationFromGroup error:\" + msg);\n// \t\t\t\t}\n// \t\t\t);\n// \t\t},\n// \t\treject: function reject(){\n// \t\t\tWebIM.doQuery(\n// \t\t\t\t\"{\\\"type\\\":\\\"declineInvitationFromGroup\\\",\\\"id\\\":\\\"\" + info.group_id + \"\\\",\\\"user\\\":\\\"\" + info.user + \"\\\"}\",\n// \t\t\t\tfunction(response){\n// \t\t\t\t},\n// \t\t\t\tfunction(code, msg){\n// \t\t\t\t\tIM.api.NotifyError(\"declineInvitationFromGroup error:\" + msg);\n// \t\t\t\t}\n// \t\t\t);\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n\n\n// connection.prototype._onReceiveInviteAcceptionFromGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group invitation response\",\n// \t\tmsg: info.user + \" agreed to join into group:\" + info.group_id,\n// \t\tagree: function agree(){\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n// connection.prototype._onReceiveInviteDeclineFromGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group invitation response\",\n// \t\tmsg: info.user + \" rejected to join into group:\" + info.group_id,\n// \t\tagree: function agree(){\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n// connection.prototype._onAutoAcceptInvitationFromGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group invitation\",\n// \t\tmsg: \"You had joined into the group:\" + info.group_name + \" automatically.Inviter:\" + info.user,\n// \t\tagree: function agree(){\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n// connection.prototype._onLeaveGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group notification\",\n// \t\tmsg: \"You have been out of the group:\" + info.group_id + \".Reason:\" + info.msg,\n// \t\tagree: function agree(){\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n\n\n// connection.prototype._onReceiveJoinGroupApplication = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group join application\",\n// \t\tmsg: info.user + \" applys to join into group:\" + info.group_id,\n// \t\tagree: function agree(){\n// \t\t\tWebIM.doQuery(\"{\\\"type\\\":\\\"acceptJoinGroupApplication\\\",\\\"id\\\":\\\"\" + info.group_id + \"\\\",\\\"user\\\":\\\"\" + info.user + \"\\\"}\", function(response){\n// \t\t\t}, function(code, msg){\n// \t\t\t\tIM.api.NotifyError(\"acceptJoinGroupApplication error:\" + msg);\n// \t\t\t});\n// \t\t},\n// \t\treject: function reject(){\n// \t\t\tWebIM.doQuery(\"{\\\"type\\\":\\\"declineJoinGroupApplication\\\",\\\"id\\\":\\\"\" + info.group_id + \"\\\",\\\"user\\\":\\\"\" + info.user + \"\\\"}\", function(response){\n// \t\t\t}, function(code, msg){\n// \t\t\t\tIM.api.NotifyError(\"declineJoinGroupApplication error:\" + msg);\n// \t\t\t});\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n\n\n// connection.prototype._onReceiveAcceptionFromGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group notification\",\n// \t\tmsg: \"You had joined into the group:\" + info.group_name + \".\",\n// \t\tagree: function agree(){\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n// connection.prototype._onReceiveRejectionFromGroup = function(info){\n// \tinfo = eval(\"(\" + info + \")\");\n// \tlet options = {\n// \t\ttitle: \"Group notification\",\n// \t\tmsg: \"You have been rejected to join into the group:\" + info.group_name + \".\",\n// \t\tagree: function agree(){\n// \t\t}\n// \t};\n// \tthis.onConfirmPop(options);\n// };\n\n\nconnection.prototype._onUpdateMyGroupList = function (options) {\n  this.onUpdateMyGroupList(options);\n};\nconnection.prototype._onUpdateMyRoster = function (options) {\n  this.onUpdateMyRoster(options);\n};\n\nconnection.prototype.reconnect = function () {\n  var me = this;\n  setTimeout(\n  function () {\n    _login(me.context.restTokenData && me.context.restTokenData.data, me);\n  }, (\n  this.autoReconnectNumTotal == 0 ?\n  0 :\n  this.autoReconnectInterval) *\n  1000);\n\n  this.autoReconnectNumTotal++;\n};\nconnection.prototype.closed = function () {\n  IM.api.init();\n};\n\n// 通过Rest列出群组的所有成员\nconnection.prototype.listGroupMember = function (opt) {\n  if (isNaN(opt.pageNum) || opt.pageNum <= 0) {\n    throw new Error(\"The parameter \\\"pageNum\\\" should be a positive number\");\n  } else if (isNaN(opt.pageSize) || opt.pageSize <= 0) {\n    throw new Error(\"The parameter \\\"pageSize\\\" should be a positive number\");\n  } else if (opt.groupId === null && typeof opt.groupId === \"undefined\") {\n    throw new Error(\"The parameter \\\"groupId\\\" should be added\");\n  }\n  var requestData = [];\n  var groupId = opt.groupId;\n  requestData.pagenum = opt.pageNum;\n  requestData.pagesize = opt.pageSize;\n  var options = {\n    url: this.apiUrl + \"/\" + this.orgName + \"/\" + this.appName + \"/chatgroups/\" + groupId + \"/users\",\n    dataType: \"json\",\n    type: \"GET\",\n    data: requestData,\n    headers: {\n      Authorization: \"Bearer \" + this.context.accessToken,\n      \"Content-Type\": \"application/json\" } };\n\n\n  options.success = opt.success || _utils.emptyfn;\n  options.error = opt.error || _utils.emptyfn;\n  WebIM.utils.ajax(options);\n};\n\n// 通过 Rest 接口创建群组\nconnection.prototype.createGroupNew = function (opt) {\n  // opt.data.owner = this.user;\n  opt.data.invite_need_confirm = false;\n  var options = {\n    url: this.apiUrl + \"/\" + this.orgName + \"/\" + this.appName + \"/chatgroups\",\n    dataType: \"json\",\n    type: \"POST\",\n    data: JSON.stringify(opt.data),\n    headers: {\n      Authorization: \"Bearer \" + this.context.accessToken,\n      \"Content-Type\": \"application/json\" } };\n\n\n  options.success = function (respData) {\n    opt.success(respData);\n    this.onCreateGroup(respData);\n  }.bind(this);\n  options.error = opt.error || _utils.emptyfn;\n  WebIM.utils.ajax(options);\n};\n\n// 通过Rest根据groupid获取群组详情\nconnection.prototype.getGroupInfo = function (opt) {\n  var options = {\n    url: this.apiUrl + \"/\" + this.orgName + \"/\" + this.appName + \"/chatgroups/\" + opt.groupId,\n    type: \"GET\",\n    dataType: \"json\",\n    headers: {\n      Authorization: \"Bearer \" + this.context.accessToken,\n      \"Content-Type\": \"application/json\" } };\n\n\n  options.success = opt.success || _utils.emptyfn;\n  options.error = opt.error || _utils.emptyfn;\n  WebIM.utils.ajax(options);\n};\n\n// 通过Rest解散群组\nconnection.prototype.dissolveGroup = function (opt) {\n  var groupId = opt.groupId;\n  var options = {\n    url: this.apiUrl + \"/\" + this.orgName + \"/\" + this.appName + \"/chatgroups/\" + groupId + \"?version=v3\",\n    type: \"DELETE\",\n    dataType: \"json\",\n    headers: {\n      Authorization: \"Bearer \" + this.context.accessToken,\n      \"Content-Type\": \"application/json\" } };\n\n\n  options.success = opt.success || _utils.emptyfn;\n  options.error = opt.error || _utils.emptyfn;\n  WebIM.utils.ajax(options);\n};\n\n// used for blacklist\nfunction _parsePrivacy(iq) {\n  var list = [];\n  var items = iq.getElementsByTagName(\"item\");\n\n  if (items) {\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var jid = item.getAttribute(\"value\");\n      var order = item.getAttribute(\"order\");\n      var type = item.getAttribute(\"type\");\n      if (!jid) {\n        continue;\n      }\n      var n = _parseNameFromJidFn(jid);\n      list[n] = {\n        type: type,\n        order: order,\n        jid: jid,\n        name: n };\n\n    }\n  }\n  return list;\n}\n\n// used for blacklist\nconnection.prototype.getBlacklist = function (options) {\n  options = options || {};\n  var iq = _strophe.default.$iq({\n    type: \"get\" });\n\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n  var me = this;\n\n  iq.\n  c(\"query\", {\n    xmlns: \"jabber:iq:privacy\" }).\n\n  c(\"list\", {\n    name: \"special\" });\n\n\n  this.context.stropheConn.sendIQ(iq.tree(), function (iq) {\n    me.onBlacklistUpdate(_parsePrivacy(iq));\n    sucFn();\n  }, function () {\n    me.onBlacklistUpdate([]);\n    errFn();\n  });\n};\n\n// used for blacklist\nconnection.prototype.addToBlackList = function (options) {\n  var iq = _strophe.default.$iq({\n    type: \"set\" });\n\n  var blacklist = options.list || {};\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n  var piece = iq.\n  c(\"query\", {\n    xmlns: \"jabber:iq:privacy\" }).\n\n  c(\"list\", {\n    name: \"special\" });\n\n\n  var keys = Object.keys(blacklist);\n  var len = keys.length;\n  var order = 2;\n\n  for (var i = 0; i < len; i++) {\n    var item = blacklist[keys[i]];\n    var type = item.type || \"jid\";\n    var jid = item.jid;\n    piece = piece.\n    c(\"item\", {\n      action: \"deny\",\n      order: order++,\n      type: type,\n      value: jid }).\n\n    c(\"message\");\n    if (i !== len - 1) {\n      piece = piece.up().up();\n    }\n  }\n  this.context.stropheConn.sendIQ(piece.tree(), sucFn, errFn);\n};\n\n// used for blacklist\nconnection.prototype.removeFromBlackList = function (options) {\n  var iq = _strophe.default.$iq({\n    type: \"set\" });\n\n  var blacklist = options.list || {};\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n  var piece = iq.\n  c(\"query\", {\n    xmlns: \"jabber:iq:privacy\" }).\n\n  c(\"list\", {\n    name: \"special\" });\n\n\n  var keys = Object.keys(blacklist);\n  var len = keys.length;\n\n  for (var i = 0; i < len; i++) {\n    var item = blacklist[keys[i]];\n    var type = item.type || \"jid\";\n    var jid = item.jid;\n    var order = item.order;\n\n    piece = piece.\n    c(\"item\", {\n      action: \"deny\",\n      order: order,\n      type: type,\n      value: jid }).\n\n    c(\"message\");\n    if (i !== len - 1) {\n      piece = piece.up().up();\n    }\n  }\n  this.context.stropheConn.sendIQ(piece.tree(), sucFn, errFn);\n};\nconnection.prototype._getGroupJid = function (to) {\n  var appKey = this.context.appKey || \"\";\n  return appKey + \"_\" + to + \"@conference.\" + this.domain;\n};\n\n// used for blacklist\nconnection.prototype.addToGroupBlackList = function (options) {\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n  var jid = _getJid(options, this);\n  var affiliation = \"admin\"; // options.affiliation || 'admin';\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"set\",\n    to: to });\n\n\n  iq.\n  c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation }).\n\n  c(\"item\", {\n    affiliation: \"outcast\",\n    jid: jid });\n\n\n  this.context.stropheConn.sendIQ(iq.tree(), sucFn, errFn);\n};\n\n// used for blacklist\nconnection.prototype.getGroupBlacklist = function (options) {\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n\n  // var jid = _getJid(options, this);\n  var affiliation = \"admin\"; // options.affiliation || 'admin';\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"get\",\n    to: to });\n\n\n  iq.\n  c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation }).\n\n  c(\"item\", {\n    affiliation: \"outcast\" });\n\n\n  function _parseGroupBlacklist(iq) {\n    var list = {};\n    var items = iq.getElementsByTagName(\"item\");\n\n    if (items) {\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var jid = item.getAttribute(\"jid\");\n        var _affiliation2 = item.getAttribute(\"affiliation\");\n        var nick = item.getAttribute(\"nick\");\n        if (!jid) {\n          continue;\n        }\n        var n = _parseNameFromJidFn(jid);\n        list[n] = {\n          jid: jid,\n          affiliation: _affiliation2,\n          nick: nick,\n          name: n };\n\n      }\n    }\n    return list;\n  }\n\n  this.context.stropheConn.sendIQ(iq.tree(), function (msginfo) {\n    sucFn(_parseGroupBlacklist(msginfo));\n  }, function () {\n    errFn();\n  });\n};\n\n// used for blacklist\nconnection.prototype.removeGroupMemberFromBlacklist = function (options) {\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n\n  var jid = _getJid(options, this);\n  var affiliation = \"admin\"; // options.affiliation || 'admin';\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"set\",\n    to: to });\n\n\n  iq.\n  c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation }).\n\n  c(\"item\", {\n    affiliation: \"member\",\n    jid: jid });\n\n\n  this.context.stropheConn.sendIQ(iq.tree(), function (msginfo) {\n    sucFn();\n  }, function () {\n    errFn();\n  });\n};\n\n/**\r\n    * changeGroupSubject 修改群名称\r\n    *\r\n    * @param options\r\n    */\n\nconnection.prototype.changeGroupSubject = function (options) {\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n\n  // must be `owner`\n  var affiliation = \"owner\";\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"set\",\n    to: to });\n\n\n  iq.\n  c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation }).\n\n  c(\"x\", {\n    type: \"submit\",\n    xmlns: \"jabber:x:data\" }).\n\n  c(\"field\", {\n    \"var\": \"FORM_TYPE\" }).\n\n  c(\"value\").\n  t(\"http://jabber.org/protocol/muc#roomconfig\").\n  up().\n  up().\n  c(\"field\", {\n    \"var\": \"muc#roomconfig_roomname\" }).\n\n  c(\"value\").\n  t(options.subject).\n  up().\n  up().\n  c(\"field\", {\n    \"var\": \"muc#roomconfig_roomdesc\" }).\n\n  c(\"value\").\n  t(options.description);\n  this.context.stropheConn.sendIQ(iq.tree(), function (msginfo) {\n    sucFn();\n  }, function () {\n    errFn();\n  });\n};\n\n/**\r\n    * destroyGroup 删除群组\r\n    *\r\n    * @param options\r\n    */\nconnection.prototype.destroyGroup = function (options) {\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n\n  // must be `owner`\n  var affiliation = \"owner\";\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"set\",\n    to: to });\n\n\n  iq.\n  c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation }).\n\n  c(\"destroy\");\n\n  this.context.stropheConn.sendIQ(iq.tree(), function (msginfo) {\n    sucFn();\n  }, function () {\n    errFn();\n  });\n};\n\n/**\r\n    * leaveGroupBySelf 主动离开群组\r\n    *\r\n    * @param options\r\n    */\n\nconnection.prototype.leaveGroupBySelf = function (options) {\n  var me = this;\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n\n  // must be `owner`\n  var jid = _getJid(options, this);\n  var affiliation = \"admin\";\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"set\",\n    to: to });\n\n\n  iq.\n  c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation }).\n\n  c(\"item\", {\n    affiliation: \"none\",\n    jid: jid });\n\n\n  this.context.stropheConn.sendIQ(iq.tree(), function (msgInfo) {\n    sucFn(msgInfo);\n    var pres = _strophe.default.$pres({\n      type: \"unavailable\",\n      to: to + \"/\" + me.context.userId });\n\n    me.sendCommand(pres.tree());\n  }, function (errInfo) {\n    errFn(errInfo);\n  });\n};\n\n/**\r\n    * leaveGroup 被踢出群组\r\n    *\r\n    * @param options\r\n    */\n// connection.prototype.leaveGroup = function(options){\n// \tvar sucFn = options.success || _utils.emptyfn;\n// \tvar errFn = options.error || _utils.emptyfn;\n// \tvar list = options.list || [];\n// \tvar affiliation = \"admin\";\n// \tvar to = this._getGroupJid(options.roomId);\n// \tvar iq = $iq({ type: \"set\", to: to });\n// \tvar piece = iq.c(\"query\", { xmlns: \"http://jabber.org/protocol/muc#\" + affiliation });\n// \tvar keys = Object.keys(list);\n// \tvar len = keys.length;\n//\n// \tfor(let i = 0; i < len; i++){\n// \t\tlet name = list[keys[i]];\n// \t\tlet jid = _getJidByName(name, this);\n//\n// \t\tpiece = piece.c(\"item\", {\n// \t\t\taffiliation: \"none\",\n// \t\t\tjid: jid\n// \t\t})\n// \t\t.up()\n// \t\t.c(\"item\", {\n// \t\t\trole: \"none\",\n// \t\t\tjid: jid,\n// \t\t})\n// \t\t.up();\n// \t}\n//\n// \tthis.context.stropheConn.sendIQ(iq.tree(), function(msgInfo){\n// \t\tsucFn(msgInfo);\n// \t}, function(errInfo){\n// \t\terrFn(errInfo);\n// \t});\n// };\n\n/**\r\n * addGroupMembers 添加群组成员\r\n *\r\n * @param options\r\n */\n\nconnection.prototype.addGroupMembers = function (options) {\n  var sucFn = options.success || _utils.emptyfn;\n  var errFn = options.error || _utils.emptyfn;\n  var list = options.list || [];\n  var affiliation = \"admin\";\n  var to = this._getGroupJid(options.roomId);\n  var iq = _strophe.default.$iq({\n    type: \"set\",\n    to: to });\n\n  var piece = iq.c(\"query\", {\n    xmlns: \"http://jabber.org/protocol/muc#\" + affiliation });\n\n  var len = list.length;\n\n  for (var i = 0; i < len; i++) {\n    var name = list[i];\n    var jid = _getJidByName(name, this);\n\n    piece = piece.c(\"item\", {\n      affiliation: \"member\",\n      jid: jid }).\n    up();\n\n    var dom = _strophe.default.$msg({\n      to: to }).\n\n    c(\"x\", {\n      xmlns: \"http://jabber.org/protocol/muc#user\" }).\n\n    c(\"invite\", {\n      to: jid }).\n\n    c(\"reason\").\n    t(options.reason || \"\");\n\n    this.sendCommand(dom.tree());\n  }\n  this.context.stropheConn.sendIQ(iq.tree(), function (msgInfo) {\n    sucFn(msgInfo);\n  }, function (errInfo) {\n    errFn(errInfo);\n  });\n};\n\n\n/**\r\n    * acceptInviteFromGroup 接受加入申请\r\n    *\r\n    * @param options\r\n    */\nconnection.prototype.acceptInviteFromGroup = function (options) {\n  options.success = function () {\n    // then send sendAcceptInviteMessage\n    // connection.prototype.sendAcceptInviteMessage(optoins);\n  };\n  this.addGroupMembers(options);\n};\n\n/**\r\n    * rejectInviteFromGroup 拒绝加入申请\r\n    *\r\n    * throw request for now 暂时不处理，直接丢弃\r\n    *\r\n    * @param options\r\n    */\nconnection.prototype.rejectInviteFromGroup = function (options) {\n\n};\n//\n// /**\n//  * createGroup 创建群组\n//  *\n//  * 1. 创建申请 -> 得到房主身份\n//  * 2. 获取房主信息 -> 得到房间form\n//  * 3. 完善房间form -> 创建成功\n//  * 4. 添加房间成员\n//  * 5. 消息通知成员\n//  * @param options\n//  */\n// connection.prototype.createGroup = function(options){\n// \tvar roomId = +new Date();\n// \tvar toRoom = this._getGroupJid(roomId);\n// \tvar to = toRoom + \"/\" + this.context.userId;\n//\n// \tvar pres = StropheAll.$pres({ to: to })\n// \t.c(\"x\", { xmlns: \"http://jabber.org/protocol/muc\" }).up()\n// \t.c(\"create\", { xmlns: \"http://jabber.org/protocol/muc\" }).up();\n// \t// .c('c', {\n// \t//     hash: 'sha-1',\n// \t//     node: 'https://github.com/robbiehanson/XMPPFramework',\n// \t//     ver: 'k6gP4Ua5m4uu9YorAG0LRXM+kZY=',\n// \t//     xmlns: 'http://jabber.org/protocol/caps'\n// \t// }).up();\n//\n// \t// createGroupACK\n// \tthis.sendCommand(pres.tree());\n//\n// \tlet me = this;\n// \t// timeout hack for create group async\n// \tsetTimeout(function(){\n// \t\tvar x;\n// \t\t// Creating a Reserved Room\n// \t\tvar iq = $iq({ type: \"get\", to: toRoom })\n// \t\t.c(\"query\", { xmlns: \"http://jabber.org/protocol/muc#owner\" });\n// \t\t// Strophe.info('step 1 ----------');\n// \t\t// Strophe.info(options);\n// \t\tme.context.stropheConn.sendIQ(iq.tree(), function(msgInfo){\n// \t\t\t// for ie hack\n// \t\t\tif(\"setAttribute\" in msgInfo){\n// \t\t\t\t// Strophe.info('step 3 ----------');\n// \t\t\t\tx = msgInfo.getElementsByTagName(\"x\")[0];\n// \t\t\t\tx.setAttribute(\"type\", \"submit\");\n// \t\t\t}\n// \t\t\telse{\n// \t\t\t\t// Strophe.info('step 4 ----------');\n// \t\t\t\tStrophe.forEachChild(msgInfo, \"x\", function(field){\n// \t\t\t\t\tfield.setAttribute(\"type\", \"submit\");\n// \t\t\t\t});\n// \t\t\t}\n// \t\t\t// var rcv = msgInfo.getElementsByTagName('x');\n// \t\t\t// var v;\n// \t\t\t// if (rcv.length > 0) {\n// \t\t\t//     if (rcv[0].childNodes && rcv[0].childNodes.length > 0) {\n// \t\t\t//         v = rcv[0].childNodes[0].nodeValue;\n// \t\t\t//     } else {\n// \t\t\t//         v = rcv[0].innerHTML || rcv[0].innerText\n// \t\t\t//     }\n// \t\t\t//     mid = rcv[0].getAttribute('mid');\n// \t\t\t// }\n// \t\t\tStrophe.info(\"step 5 ----------\");\n// \t\t\tStrophe.forEachChild(x, \"field\", function(field){\n// \t\t\t\tvar fieldVar = field.getAttribute(\"var\");\n// \t\t\t\tvar valueDom = field.getElementsByTagName(\"value\")[0];\n// \t\t\t\tStrophe.info(fieldVar);\n// \t\t\t\tswitch(fieldVar){\n// \t\t\t\tcase \"muc#roomconfig_roomname\":\n// \t\t\t\t\t_setText(valueDom, options.subject || \"\");\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_roomdesc\":\n// \t\t\t\t\t_setText(valueDom, options.description || \"\");\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_publicroom\": // public 1\n// \t\t\t\t\t_setText(valueDom, +options.optionsPublic);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_membersonly\":\n// \t\t\t\t\t_setText(valueDom, +options.optionsMembersOnly);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_moderatedroom\":\n// \t\t\t\t\t_setText(valueDom, +options.optionsModerate);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_persistentroom\":\n// \t\t\t\t\t_setText(valueDom, 1);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_allowinvites\":\n// \t\t\t\t\t_setText(valueDom, +options.optionsAllowInvites);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_allowvisitornickchange\":\n// \t\t\t\t\t_setText(valueDom, 0);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"muc#roomconfig_allowvisitorstatus\":\n// \t\t\t\t\t_setText(valueDom, 0);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"allow_private_messages\":\n// \t\t\t\t\t_setText(valueDom, 0);\n// \t\t\t\t\tbreak;\n// \t\t\t\tcase \"allow_private_messages_from_visitors\":\n// \t\t\t\t\t_setText(valueDom, \"nobody\");\n// \t\t\t\t\tbreak;\n// \t\t\t\tdefault:\n// \t\t\t\t\tbreak;\n// \t\t\t\t}\n// \t\t\t});\n//\n// \t\t\tlet iq = $iq({ to: toRoom, type: \"set\" })\n// \t\t\t.c(\"query\", { xmlns: \"http://jabber.org/protocol/muc#owner\" })\n// \t\t\t.cnode(x);\n// \t\t\tme.context.stropheConn.sendIQ(iq.tree(), function(msgInfo){\n// \t\t\t\t// sucFn(msgInfo);\n// \t\t\t\tme.addGroupMembers({\n// \t\t\t\t\tlist: options.members,\n// \t\t\t\t\troomId: roomId\n// \t\t\t\t});\n// \t\t\t}, function(errInfo){\n// \t\t\t\t// errFn(errInfo);\n// \t\t\t});\n// \t\t\t// sucFn(msgInfo);\n// \t\t}, function(errInfo){\n// \t\t\t// errFn(errInfo);\n// \t\t});\n// \t}, 1000);\n// };\n\n// function _setText(valueDom, v){\n// \tif(\"textContent\" in valueDom){\n// \t\tvalueDom.textContent = v;\n// \t}\n// \telse if(\"text\" in valueDom){\n// \t\tvalueDom.text = v;\n// \t}\n// \telse{\n// \t\t// Strophe.info('_setText 4 ----------');\n// \t\t// valueDom.innerHTML = v;\n// \t}\n// }\n// connection.prototype.onError = function () {\n//     return false;\n// };\n// window.WebIM = typeof WebIM !== 'undefined' ? WebIM : {};\nWebIM.connection = connection;\nWebIM.utils = _utils;\nWebIM.statusCode = _code;\nWebIM.message = _msg.message;\nWebIM.doQuery = function (str, suc, fail) {\n  if (typeof window.cefQuery === \"undefined\") {\n    return;\n  }\n  window.cefQuery({\n    request: str,\n    persistent: false,\n    onSuccess: suc,\n    onFailure: fail });\n\n};\n\nmodule.exports = WebIM;\n\nif (false) {}\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21\n");

/***/ }),

/***/ 22:
/*!**********************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/sdk/status.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n(function () {\n  var connIndex = 0;\n\n  exports.code = {\n    WEBIM_CONNCTION_USER_NOT_ASSIGN_ERROR: connIndex++,\n    WEBIM_CONNCTION_OPEN_ERROR: connIndex++,\n    WEBIM_CONNCTION_AUTH_ERROR: connIndex++,\n    WEBIM_CONNCTION_OPEN_USERGRID_ERROR: connIndex++,\n    WEBIM_CONNCTION_ATTACH_ERROR: connIndex++,\n    WEBIM_CONNCTION_ATTACH_USERGRID_ERROR: connIndex++,\n    WEBIM_CONNCTION_REOPEN_ERROR: connIndex++,\n    WEBIM_CONNCTION_SERVER_CLOSE_ERROR: connIndex++, // 7: client-side network offline (net::ERR_INTERNET_DISCONNECTED)\n    WEBIM_CONNCTION_SERVER_ERROR: connIndex++, // 8: offline by multi login\n    WEBIM_CONNCTION_IQ_ERROR: connIndex++,\n    WEBIM_CONNCTION_PING_ERROR: connIndex++,\n    WEBIM_CONNCTION_NOTIFYVERSION_ERROR: connIndex++,\n    WEBIM_CONNCTION_GETROSTER_ERROR: connIndex++,\n    WEBIM_CONNCTION_CROSSDOMAIN_ERROR: connIndex++,\n    WEBIM_CONNCTION_LISTENING_OUTOF_MAXRETRIES: connIndex++,\n    WEBIM_CONNCTION_RECEIVEMSG_CONTENTERROR: connIndex++,\n    WEBIM_CONNCTION_DISCONNECTED: connIndex++, // 16: server-side close the websocket connection\n    WEBIM_CONNCTION_AJAX_ERROR: connIndex++,\n    WEBIM_CONNCTION_JOINROOM_ERROR: connIndex++,\n    WEBIM_CONNCTION_GETROOM_ERROR: connIndex++,\n    WEBIM_CONNCTION_GETROOMINFO_ERROR: connIndex++,\n    WEBIM_CONNCTION_GETROOMMEMBER_ERROR: connIndex++,\n    WEBIM_CONNCTION_GETROOMOCCUPANTS_ERROR: connIndex++,\n    WEBIM_CONNCTION_LOAD_CHATROOM_ERROR: connIndex++,\n    WEBIM_CONNCTION_NOT_SUPPORT_CHATROOM_ERROR: connIndex++,\n    WEBIM_CONNCTION_JOINCHATROOM_ERROR: connIndex++,\n    WEBIM_CONNCTION_QUITCHATROOM_ERROR: connIndex++,\n    WEBIM_CONNCTION_APPKEY_NOT_ASSIGN_ERROR: connIndex++,\n    WEBIM_CONNCTION_TOKEN_NOT_ASSIGN_ERROR: connIndex++,\n    WEBIM_CONNCTION_SESSIONID_NOT_ASSIGN_ERROR: connIndex++,\n    WEBIM_CONNCTION_RID_NOT_ASSIGN_ERROR: connIndex++,\n    WEBIM_CONNCTION_CALLBACK_INNER_ERROR: connIndex++,\n    WEBIM_CONNCTION_CLIENT_OFFLINE: connIndex++, // 32: client offline\n    WEBIM_CONNCTION_CLIENT_LOGOUT: connIndex++, // 33: client logout\n\n\n    WEBIM_UPLOADFILE_BROWSER_ERROR: 100,\n    WEBIM_UPLOADFILE_ERROR: 101,\n    WEBIM_UPLOADFILE_NO_LOGIN: 102,\n    WEBIM_UPLOADFILE_NO_FILE: 103,\n\n\n    WEBIM_DOWNLOADFILE_ERROR: 200,\n    WEBIM_DOWNLOADFILE_NO_LOGIN: 201,\n    WEBIM_DOWNLOADFILE_BROWSER_ERROR: 202,\n\n\n    WEBIM_MESSAGE_REC_TEXT: 300,\n    WEBIM_MESSAGE_REC_TEXT_ERROR: 301,\n    WEBIM_MESSAGE_REC_EMOTION: 302,\n    WEBIM_MESSAGE_REC_PHOTO: 303,\n    WEBIM_MESSAGE_REC_AUDIO: 304,\n    WEBIM_MESSAGE_REC_AUDIO_FILE: 305,\n    WEBIM_MESSAGE_REC_VEDIO: 306,\n    WEBIM_MESSAGE_REC_VEDIO_FILE: 307,\n    WEBIM_MESSAGE_REC_FILE: 308,\n    WEBIM_MESSAGE_SED_TEXT: 309,\n    WEBIM_MESSAGE_SED_EMOTION: 310,\n    WEBIM_MESSAGE_SED_PHOTO: 311,\n    WEBIM_MESSAGE_SED_AUDIO: 312,\n    WEBIM_MESSAGE_SED_AUDIO_FILE: 313,\n    WEBIM_MESSAGE_SED_VEDIO: 314,\n    WEBIM_MESSAGE_SED_VEDIO_FILE: 315,\n    WEBIM_MESSAGE_SED_FILE: 316,\n\n    STATUS_INIT: 400,\n    STATUS_DOLOGIN_USERGRID: 401,\n    STATUS_DOLOGIN_IM: 402,\n    STATUS_OPENED: 403,\n    STATUS_CLOSING: 404,\n    STATUS_CLOSED: 405,\n    STATUS_ERROR: 406 };\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),

/***/ 23:
/*!*********************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/sdk/utils.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {(function () {\n\n  var EMPTYFN = function EMPTYFN() {};\n  var _code = __webpack_require__(/*! ./status */ 22).code;\n  var WEBIM_FILESIZE_LIMIT = 10485760;\n  var _tmpUtilXHR = false;\n  var _hasFormData = typeof FormData !== \"undefined\";\n  var _hasBlob = typeof Blob !== \"undefined\";\n  var _isCanSetRequestHeader = _tmpUtilXHR.setRequestHeader || false;\n  var _hasOverrideMimeType = _tmpUtilXHR.overrideMimeType || false;\n  var _isCanUploadFileAsync = _isCanSetRequestHeader && _hasFormData;\n  var _isCanUploadFile = _isCanUploadFileAsync || false;\n  var _isCanDownLoadFile = _isCanSetRequestHeader && (_hasBlob || _hasOverrideMimeType);\n\n  if (!Object.keys) {\n    Object.keys = function () {\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n      var hasDontEnumBug = !{ toString: null }.propertyIsEnumerable(\"toString\");\n      var dontEnums = [\n      \"toString\",\n      \"toLocaleString\",\n      \"valueOf\",\n      \"hasOwnProperty\",\n      \"isPrototypeOf\",\n      \"propertyIsEnumerable\",\n      \"constructor\"];\n\n      var dontEnumsLength = dontEnums.length;\n\n      return function (obj) {\n        if (typeof obj !== \"object\" && (typeof obj !== \"function\" || obj === null)) {\n          throw new TypeError(\"Object.keys called on non-object\");\n        }\n        var result = [];\n        var prop;\n        var i;\n        for (prop in obj) {\n          if (hasOwnProperty.call(obj, prop)) {\n            result.push(prop);\n          }\n        }\n        if (hasDontEnumBug) {\n          for (i = 0; i < dontEnumsLength; i++) {\n            if (hasOwnProperty.call(obj, dontEnums[i])) {\n              result.push(dontEnums[i]);\n            }\n          }\n        }\n        return result;\n      };\n    }();\n  }\n\n  var utils = {\n    hasFormData: _hasFormData,\n    hasBlob: _hasBlob,\n    emptyfn: EMPTYFN,\n    isCanSetRequestHeader: _isCanSetRequestHeader,\n    hasOverrideMimeType: _hasOverrideMimeType,\n    isCanUploadFileAsync: _isCanUploadFileAsync,\n    isCanUploadFile: _isCanUploadFile,\n    isCanDownLoadFile: _isCanDownLoadFile,\n    isSupportWss: true,\n    hasFlash: false,\n    xmlrequest: false,\n\n    stringify: function stringify(json) {\n      if (typeof JSON !== \"undefined\" && JSON.stringify) {\n        return JSON.stringify(json);\n      }\n      var s = \"\";\n      var arr = [];\n      return iterate(json);\n\n      function iterate(json) {\n        var isArr = false;\n        if (Object.prototype.toString.call(json) === \"[object Array]\") {\n          arr.push(\"]\", \"[\");\n          isArr = true;\n        } else\n        if (Object.prototype.toString.call(json) === \"[object Object]\") {\n          arr.push(\"}\", \"{\");\n        }\n        for (var o in json) {\n          if (Object.prototype.toString.call(json[o]) === \"[object Null]\") {\n            json[o] = \"null\";\n          } else\n          if (Object.prototype.toString.call(json[o]) === \"[object Undefined]\") {\n            json[o] = \"undefined\";\n          }\n          if (json[o] && typeof json[o] === \"object\") {\n            s += \",\" + (isArr ? \"\" : \"\\\"\" + o + \"\\\":\" + (isArr ? \"\\\"\" : \"\")) + iterate(json[o]) + \"\";\n          } else\n          {\n            s += \",\\\"\" + (isArr ? \"\" : o + \"\\\":\\\"\") + json[o] + \"\\\"\";\n          }\n        }\n        if (s != \"\") {\n          s = s.slice(1);\n        }\n        return arr.pop() + s + arr.pop();\n      }\n    },\n\n    registerUser: function registerUser(options) {\n      var orgName = options.orgName || \"\";\n      var appName = options.appName || \"\";\n      var appKey = options.appKey || \"\";\n      var suc = options.success || EMPTYFN;\n      var err = options.error || EMPTYFN;\n\n      if (!orgName && !appName && appKey) {\n        var devInfos = appKey.split(\"#\");\n        if (devInfos.length === 2) {\n          orgName = devInfos[0];\n          appName = devInfos[1];\n        }\n      }\n      if (!orgName && !appName) {\n        err({\n          type: _code.WEBIM_CONNCTION_APPKEY_NOT_ASSIGN_ERROR });\n\n        return false;\n      }\n      var apiUrl = options.apiUrl;\n      var restUrl = apiUrl + \"/\" + orgName + \"/\" + appName + \"/users\";\n      var userjson = {\n        username: options.username,\n        password: options.password,\n        nickname: options.nickname || \"\" };\n\n      var userinfo = utils.stringify(userjson);\n      options = {\n        url: restUrl,\n        data: userinfo,\n        success: suc,\n        error: err };\n\n      return utils.ajax(options);\n    },\n\n    login: function login(options) {\n      options = options || {};\n      var suc = options.success || EMPTYFN;\n      var err = options.error || EMPTYFN;\n      var appKey = options.appKey || \"\";\n      var devInfos = appKey.split(\"#\");\n      if (devInfos.length !== 2) {\n        err({\n          type: _code.WEBIM_CONNCTION_APPKEY_NOT_ASSIGN_ERROR });\n\n        return false;\n      }\n      var orgName = devInfos[0];\n      var appName = devInfos[1];\n      var user = options.user || \"\";\n      var pwd = options.pwd || \"\";\n      var apiUrl = options.apiUrl;\n      var loginJson = {\n        grant_type: \"password\",\n        username: user,\n        password: pwd,\n        timestamp: +new Date() };\n\n      var loginfo = utils.stringify(loginJson);\n      options = {\n        url: apiUrl + \"/\" + orgName + \"/\" + appName + \"/token\",\n        data: loginfo,\n        success: suc,\n        error: err };\n\n      return utils.ajax(options);\n    },\n\n    getFileUrl: function getFileUrl(fileInputId) {\n      var uri = {\n        url: \"\",\n        filename: \"\",\n        filetype: \"\",\n        data: \"\" };\n\n      var fileObj = typeof fileInputId === \"string\" ?\n      document.getElementById(fileInputId) :\n      fileInputId;\n      if (!utils.isCanUploadFileAsync || !fileObj) {\n        return uri;\n      }\n      try {\n        if (window.URL.createObjectURL) {\n          var fileItems = fileObj.files; // 一个对象,文件列表\n          if (fileItems.length > 0) {\n            var u = fileItems.item(0); // 有关选取文件的信息\n            uri.data = u;\n            uri.url = window.URL.createObjectURL(u); // 指向该文件的URL\n            uri.filename = u.name || \"\";\n          }\n        }\n        var index = uri.filename.lastIndexOf(\".\");\n        if (index != -1) {\n          uri.filetype = uri.filename.substring(index + 1).toLowerCase();\n        }\n        return uri;\n      }\n      catch (e) {\n        throw e;\n      }\n    },\n\n    getFileSize: function getFileSize(fileInputId) {\n      var file = document.getElementById(fileInputId);\n      var fileSize = 0;\n      if (file) {\n        if (file.files) {\n          if (file.files.length > 0) {\n            fileSize = file.files[0].size;\n          }\n        }\n      }\n      return fileSize;\n    },\n\n    trim: function trim(str) {\n      str = typeof str === \"string\" ? str : \"\";\n      return str.trim ?\n      str.trim() :\n      str.replace(/^\\s|\\s$/g, \"\");\n    },\n\n    parseEmoji: function parseEmoji(msg) {\n      if (typeof WebIM.Emoji === \"undefined\" || typeof WebIM.Emoji.map === \"undefined\") {\n        return msg;\n      }\n      var emoji = WebIM.Emoji;\n      for (var face in emoji.map) {\n        if (emoji.map.hasOwnProperty(face)) {\n          while (msg.indexOf(face) > -1) {\n            msg = msg.replace(face, \"<image class=\\\"emoji\\\" src=\\\"\" + emoji.path + emoji.map[face] + \"\\\" /></image>\");\n          }\n        }\n      }\n      return msg;\n    },\n\n    parseLink: function parseLink(msg) {\n      var reg = /(https?:\\/\\/|www\\.)([a-zA-Z0-9-]+(\\.[a-zA-Z0-9]+)+)(:[0-9]{2,4})?\\/?((\\.[:_0-9a-zA-Z-]+)|[:_0-9a-zA-Z-]*\\/?)*\\??[:_#@*&%0-9a-zA-Z-/=]*/gm;\n      msg = msg.replace(reg, function (v) {\n        var prefix = /^https?/gm.test(v);\n        return \"<a href='\" + (prefix ? v : \"//\" + v) + \"' target='_blank'>\" + v + \"</a>\";\n      });\n      return msg;\n    },\n\n    parseJSON: function parseJSON(data) {\n      if (window.JSON && window.JSON.parse) {\n        return window.JSON.parse(data + \"\");\n      }\n      var requireNonComma;\n      var depth = null;\n      var str = utils.trim(data + \"\");\n      return str && !utils.trim(\n      str.replace(\n      /(,)|(\\[|{)|(}|])|\"(?:[^\"\\\\\\r\\n]|\\\\[\"\\\\\\/bfnrt]|\\\\u[\\da-fA-F]{4})*\"\\s*:?|true|false|null|-?(?!0\\d)\\d+(?:\\.\\d+|)(?:[eE][+-]?\\d+|)/g,\n      function (token, comma, open, close) {\n        if (requireNonComma && comma) {\n          depth = 0;\n        }\n        if (depth === 0) {\n          return token;\n        }\n        requireNonComma = open || comma;\n        depth += !close - !open;\n        return \"\";\n      })) ?\n\n      Function(\"return \" + str)() :\n      Function(\"Invalid JSON: \" + data)();\n    },\n\n    parseUploadResponse: function parseUploadResponse(response) {\n      return response.indexOf(\"callback\") > -1\n      // lte ie9\n      ? response.slice(9, -1) :\n      response;\n    },\n\n    parseDownloadResponse: function parseDownloadResponse(response) {\n      return (\n        response && response.type && response.type === \"application/json\" ||\n        Object.prototype.toString.call(response).indexOf(\"Blob\") < 0 ?\n\n        this.url + \"?token=\" :\n        window.URL.createObjectURL(response));\n    },\n\n    uploadFile: function uploadFile(options) {\n      options = options || {};\n      options.onFileUploadProgress = options.onFileUploadProgress || EMPTYFN;\n      options.onFileUploadComplete = options.onFileUploadComplete || EMPTYFN;\n      options.onFileUploadError = options.onFileUploadError || EMPTYFN;\n      options.onFileUploadCanceled = options.onFileUploadCanceled || EMPTYFN;\n      var acc = options.accessToken || this.context.accessToken;\n      if (!acc) {\n        options.onFileUploadError({\n          type: _code.WEBIM_UPLOADFILE_NO_LOGIN,\n          id: options.id });\n\n        return;\n      }\n      var orgName, appName, devInfos;\n      var appKey = options.appKey || this.context.appKey || \"\";\n      if (appKey) {\n        devInfos = appKey.split(\"#\");\n        orgName = devInfos[0];\n        appName = devInfos[1];\n      }\n      if (!orgName && !appName) {\n        options.onFileUploadError({\n          type: _code.WEBIM_UPLOADFILE_ERROR,\n          id: options.id });\n\n        return;\n      }\n      var apiUrl = options.apiUrl;\n      var uploadUrl = apiUrl + \"/\" + orgName + \"/\" + appName + \"/chatfiles\";\n      if (!utils.isCanUploadFileAsync) {\n        if (utils.hasFlash && typeof options.flashUpload === \"function\") {\n          options.flashUpload && options.flashUpload(uploadUrl, options);\n        } else\n        {\n          options.onFileUploadError({\n            type: _code.WEBIM_UPLOADFILE_BROWSER_ERROR,\n            id: options.id });\n\n        }\n        return;\n      }\n      var fileSize = options.file.data ? options.file.data.size : undefined;\n      if (fileSize > WEBIM_FILESIZE_LIMIT) {\n        options.onFileUploadError({\n          type: _code.WEBIM_UPLOADFILE_ERROR,\n          id: options.id });\n\n        return;\n      } else\n      if (fileSize <= 0) {\n        options.onFileUploadError({\n          type: _code.WEBIM_UPLOADFILE_ERROR,\n          id: options.id });\n\n        return;\n      }\n      var xhr = utils.xmlrequest();\n      var onError = function onError(e) {\n        options.onFileUploadError({\n          type: _code.WEBIM_UPLOADFILE_ERROR,\n          id: options.id,\n          xhr: xhr });\n\n      };\n      if (xhr.upload) {\n        xhr.upload.addEventListener(\"progress\", options.onFileUploadProgress, false);\n      }\n      if (xhr.addEventListener) {\n        xhr.addEventListener(\"abort\", options.onFileUploadCanceled, false);\n        xhr.addEventListener(\"load\", function (e) {\n          try {\n            var json = utils.parseJSON(xhr.responseText);\n            try {\n              options.onFileUploadComplete(json);\n            }\n            catch (e) {\n              options.onFileUploadError({\n                type: _code.WEBIM_CONNCTION_CALLBACK_INNER_ERROR,\n                data: e });\n\n            }\n          }\n          catch (e) {\n            options.onFileUploadError({\n              type: _code.WEBIM_UPLOADFILE_ERROR,\n              data: xhr.responseText,\n              id: options.id,\n              xhr: xhr });\n\n          }\n        }, false);\n        xhr.addEventListener(\"error\", onError, false);\n      } else\n      if (xhr.onreadystatechange) {\n        xhr.onreadystatechange = function () {\n          if (xhr.readyState === 4) {\n            if (ajax.status === 200) {\n              try {\n                var json = utils.parseJSON(xhr.responseText);\n                options.onFileUploadComplete(json);\n              }\n              catch (e) {\n                options.onFileUploadError({\n                  type: _code.WEBIM_UPLOADFILE_ERROR,\n                  data: xhr.responseText,\n                  id: options.id,\n                  xhr: xhr });\n\n              }\n            } else\n            {\n              options.onFileUploadError({\n                type: _code.WEBIM_UPLOADFILE_ERROR,\n                data: xhr.responseText,\n                id: options.id,\n                xhr: xhr });\n\n            }\n          } else\n          {\n            xhr.abort();\n            options.onFileUploadCanceled();\n          }\n        };\n      }\n      xhr.open(\"POST\", uploadUrl);\n      xhr.setRequestHeader(\"restrict-access\", \"true\");\n      xhr.setRequestHeader(\"Accept\", \"*/*\"); // Android QQ browser has some problem with this attribute.\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + acc);\n      var formData = new FormData();\n      formData.append(\"file\", options.file.data);\n      xhr.send(formData);\n    },\n\n    download: function download(options) {\n      options.onFileDownloadComplete = options.onFileDownloadComplete || EMPTYFN;\n      options.onFileDownloadError = options.onFileDownloadError || EMPTYFN;\n      var accessToken = options.accessToken || this.context.accessToken;\n      var xhr = utils.xmlrequest();\n      if (!accessToken) {\n        options.onFileDownloadError({\n          type: _code.WEBIM_DOWNLOADFILE_NO_LOGIN,\n          id: options.id });\n\n        return;\n      }\n      var onError = function onError(e) {\n        options.onFileDownloadError({\n          type: _code.WEBIM_DOWNLOADFILE_ERROR,\n          id: options.id,\n          xhr: xhr });\n\n      };\n      if (!utils.isCanDownLoadFile) {\n        options.onFileDownloadComplete();\n        return;\n      }\n      if (\"addEventListener\" in xhr) {\n        xhr.addEventListener(\"load\", function (e) {\n          options.onFileDownloadComplete(xhr.response, xhr);\n        }, false);\n        xhr.addEventListener(\"error\", onError, false);\n      } else\n      if (\"onreadystatechange\" in xhr) {\n        xhr.onreadystatechange = function () {\n          if (xhr.readyState === 4) {\n            if (ajax.status === 200) {\n              options.onFileDownloadComplete(xhr.response, xhr);\n            } else\n            {\n              options.onFileDownloadError({\n                type: _code.WEBIM_DOWNLOADFILE_ERROR,\n                id: options.id,\n                xhr: xhr });\n\n            }\n          } else\n          {\n            xhr.abort();\n            options.onFileDownloadError({\n              type: _code.WEBIM_DOWNLOADFILE_ERROR,\n              id: options.id,\n              xhr: xhr });\n\n          }\n        };\n      }\n      var method = options.method || \"GET\";\n      var resType = options.responseType || \"blob\";\n      var mimeType = options.mimeType || \"text/plain; charset=x-user-defined\";\n      xhr.open(method, options.url);\n      if (typeof Blob !== \"undefined\") {\n        xhr.responseType = resType;\n      } else\n      {\n        xhr.overrideMimeType(mimeType);\n      }\n      var innerHeaer = {\n        \"X-Requested-With\": \"XMLHttpRequest\",\n        Accept: \"application/octet-stream\",\n        \"share-secret\": options.secret,\n        Authorization: \"Bearer \" + accessToken };\n\n      var headers = options.headers || {};\n      for (var key in headers) {\n        innerHeaer[key] = headers[key];\n      }\n      for (var _key in innerHeaer) {\n        if (innerHeaer[_key]) {\n          xhr.setRequestHeader(_key, innerHeaer[_key]);\n        }\n      }\n      xhr.send(null);\n    },\n\n    parseTextMessage: function parseTextMessage(message, faces) {\n      if (typeof message !== \"string\") {\n        return false;\n      }\n      if (Object.prototype.toString.call(faces) !== \"[object Object]\") {\n        return {\n          isemoji: false,\n          body: [\n          {\n            type: \"txt\",\n            data: message }] };\n\n\n\n      }\n      var receiveMsg = message;\n      var emessage = [];\n      var expr = /\\[[^[\\]]{2,3}\\]/mg;\n      var emoji = receiveMsg.match(expr);\n      if (!emoji || emoji.length < 1) {\n        return {\n          isemoji: false,\n          body: [\n          {\n            type: \"txt\",\n            data: message }] };\n\n\n\n      }\n\n      var isemoji = false;\n      for (var i = 0; i < emoji.length; i++) {\n        var tmsg = receiveMsg.substring(0, receiveMsg.indexOf(emoji[i]));\n        var existEmoji = faces.map[emoji[i]];\n        if (tmsg) {\n          emessage.push({\n            type: \"txt\",\n            data: tmsg });\n\n        }\n        if (!existEmoji) {\n          emessage.push({\n            type: \"txt\",\n            data: emoji[i] });\n\n          continue;\n        }\n        var emojiStr = faces.map ? existEmoji : null;\n        if (emojiStr) {\n          isemoji = true;\n          emessage.push({\n            type: \"emoji\",\n            data: emojiStr });\n\n        } else\n        {\n          emessage.push({\n            type: \"txt\",\n            data: emoji[i] });\n\n        }\n        var restMsgIndex = receiveMsg.indexOf(emoji[i]) + emoji[i].length;\n        receiveMsg = receiveMsg.substring(restMsgIndex);\n      }\n      if (receiveMsg) {\n        emessage.push({\n          type: \"txt\",\n          data: receiveMsg });\n\n      }\n      if (isemoji) {\n        return {\n          isemoji: isemoji,\n          body: emessage };\n\n      }\n      return {\n        isemoji: false,\n        body: [\n        {\n          type: \"txt\",\n          data: message }] };\n\n\n\n    },\n\n    ajax: function ajax(options) {\n      var suc = options.success || EMPTYFN;\n      var error = options.error || EMPTYFN;\n      var type = options.type || \"POST\",\n      data = options.data || null,\n      tempData = \"\";\n\n      if (type.toLowerCase() === \"get\" && data) {\n        for (var o in data) {\n          if (data.hasOwnProperty(o)) {\n            tempData += o + \"=\" + data[o] + \"&\";\n          }\n        }\n        tempData = tempData ? tempData.slice(0, -1) : tempData;\n        options.url += (options.url.indexOf(\"?\") > 0 ? \"&\" : \"?\") + (tempData ? tempData + \"&\" : tempData) + \"_v=\" + new Date().getTime();\n        data = null;\n        tempData = null;\n      }\n      __f__(\"log\", \"wx.request\", options.url, \" at webIM\\\\sdk\\\\utils.js:617\");\n      wx.request({\n        url: options.url,\n        data: options.data,\n        header: options.headers,\n        method: type,\n        success: function success(res) {\n          if (arguments[0].data.error_description && arguments[0].data.error_description == \"invalid password\") {\n            __f__(\"log\", \"无效的环信登录密码\", arguments, \" at webIM\\\\sdk\\\\utils.js:625\");\n          } else {\n            __f__(\"log\", \"wx.request.success\", arguments, \" at webIM\\\\sdk\\\\utils.js:627\");\n          }\n          if (res.statusCode == \"200\") {\n            suc(res);\n          } else {\n            error(res);\n          }\n        },\n        complete: function complete() {\n          // console.log(\"wx.request.complete\", arguments);\n        },\n        fail: function fail() {\n          // console.log(\"wx.request.fail\", arguments);\n        } });\n\n    },\n\n    ts: function ts() {\n      var d = new Date();\n      var Hours = d.getHours(); // 获取当前小时数(0-23)\n      var Minutes = d.getMinutes(); // 获取当前分钟数(0-59)\n      var Seconds = d.getSeconds(); // 获取当前秒数(0-59)\n      var Milliseconds = d.getMilliseconds(); // 获取当前毫秒\n      return (Hours < 10 ? \"0\" + Hours : Hours) + \":\" + (\n      Minutes < 10 ? \"0\" + Minutes : Minutes) + \":\" + (\n      Seconds < 10 ? \"0\" + Seconds : Seconds) + \":\" +\n      Milliseconds + \" \";\n    },\n\n    getObjectKey: function getObjectKey(obj, val) {\n      for (var key in obj) {\n        if (obj[key] == val) {\n          return key;\n        }\n      }\n      return \"\";\n    } };\n\n\n\n  exports.utils = utils;\n\n})();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vd2ViSU0vc2RrL3V0aWxzLmpzIl0sIm5hbWVzIjpbIkVNUFRZRk4iLCJfY29kZSIsInJlcXVpcmUiLCJjb2RlIiwiV0VCSU1fRklMRVNJWkVfTElNSVQiLCJfdG1wVXRpbFhIUiIsIl9oYXNGb3JtRGF0YSIsIkZvcm1EYXRhIiwiX2hhc0Jsb2IiLCJCbG9iIiwiX2lzQ2FuU2V0UmVxdWVzdEhlYWRlciIsInNldFJlcXVlc3RIZWFkZXIiLCJfaGFzT3ZlcnJpZGVNaW1lVHlwZSIsIm92ZXJyaWRlTWltZVR5cGUiLCJfaXNDYW5VcGxvYWRGaWxlQXN5bmMiLCJfaXNDYW5VcGxvYWRGaWxlIiwiX2lzQ2FuRG93bkxvYWRGaWxlIiwiT2JqZWN0Iiwia2V5cyIsImhhc093blByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzRG9udEVudW1CdWciLCJ0b1N0cmluZyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiZG9udEVudW1zIiwiZG9udEVudW1zTGVuZ3RoIiwibGVuZ3RoIiwib2JqIiwiVHlwZUVycm9yIiwicmVzdWx0IiwicHJvcCIsImkiLCJjYWxsIiwicHVzaCIsInV0aWxzIiwiaGFzRm9ybURhdGEiLCJoYXNCbG9iIiwiZW1wdHlmbiIsImlzQ2FuU2V0UmVxdWVzdEhlYWRlciIsImhhc092ZXJyaWRlTWltZVR5cGUiLCJpc0NhblVwbG9hZEZpbGVBc3luYyIsImlzQ2FuVXBsb2FkRmlsZSIsImlzQ2FuRG93bkxvYWRGaWxlIiwiaXNTdXBwb3J0V3NzIiwiaGFzRmxhc2giLCJ4bWxyZXF1ZXN0Iiwic3RyaW5naWZ5IiwianNvbiIsIkpTT04iLCJzIiwiYXJyIiwiaXRlcmF0ZSIsImlzQXJyIiwibyIsInNsaWNlIiwicG9wIiwicmVnaXN0ZXJVc2VyIiwib3B0aW9ucyIsIm9yZ05hbWUiLCJhcHBOYW1lIiwiYXBwS2V5Iiwic3VjIiwic3VjY2VzcyIsImVyciIsImVycm9yIiwiZGV2SW5mb3MiLCJzcGxpdCIsInR5cGUiLCJXRUJJTV9DT05OQ1RJT05fQVBQS0VZX05PVF9BU1NJR05fRVJST1IiLCJhcGlVcmwiLCJyZXN0VXJsIiwidXNlcmpzb24iLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwibmlja25hbWUiLCJ1c2VyaW5mbyIsInVybCIsImRhdGEiLCJhamF4IiwibG9naW4iLCJ1c2VyIiwicHdkIiwibG9naW5Kc29uIiwiZ3JhbnRfdHlwZSIsInRpbWVzdGFtcCIsIkRhdGUiLCJsb2dpbmZvIiwiZ2V0RmlsZVVybCIsImZpbGVJbnB1dElkIiwidXJpIiwiZmlsZW5hbWUiLCJmaWxldHlwZSIsImZpbGVPYmoiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwid2luZG93IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZmlsZUl0ZW1zIiwiZmlsZXMiLCJ1IiwiaXRlbSIsIm5hbWUiLCJpbmRleCIsImxhc3RJbmRleE9mIiwic3Vic3RyaW5nIiwidG9Mb3dlckNhc2UiLCJlIiwiZ2V0RmlsZVNpemUiLCJmaWxlIiwiZmlsZVNpemUiLCJzaXplIiwidHJpbSIsInN0ciIsInJlcGxhY2UiLCJwYXJzZUVtb2ppIiwibXNnIiwiV2ViSU0iLCJFbW9qaSIsIm1hcCIsImVtb2ppIiwiZmFjZSIsImluZGV4T2YiLCJwYXRoIiwicGFyc2VMaW5rIiwicmVnIiwidiIsInByZWZpeCIsInRlc3QiLCJwYXJzZUpTT04iLCJwYXJzZSIsInJlcXVpcmVOb25Db21tYSIsImRlcHRoIiwidG9rZW4iLCJjb21tYSIsIm9wZW4iLCJjbG9zZSIsIkZ1bmN0aW9uIiwicGFyc2VVcGxvYWRSZXNwb25zZSIsInJlc3BvbnNlIiwicGFyc2VEb3dubG9hZFJlc3BvbnNlIiwidXBsb2FkRmlsZSIsIm9uRmlsZVVwbG9hZFByb2dyZXNzIiwib25GaWxlVXBsb2FkQ29tcGxldGUiLCJvbkZpbGVVcGxvYWRFcnJvciIsIm9uRmlsZVVwbG9hZENhbmNlbGVkIiwiYWNjIiwiYWNjZXNzVG9rZW4iLCJjb250ZXh0IiwiV0VCSU1fVVBMT0FERklMRV9OT19MT0dJTiIsImlkIiwiV0VCSU1fVVBMT0FERklMRV9FUlJPUiIsInVwbG9hZFVybCIsImZsYXNoVXBsb2FkIiwiV0VCSU1fVVBMT0FERklMRV9CUk9XU0VSX0VSUk9SIiwidW5kZWZpbmVkIiwieGhyIiwib25FcnJvciIsInVwbG9hZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZXNwb25zZVRleHQiLCJXRUJJTV9DT05OQ1RJT05fQ0FMTEJBQ0tfSU5ORVJfRVJST1IiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiYWJvcnQiLCJmb3JtRGF0YSIsImFwcGVuZCIsInNlbmQiLCJkb3dubG9hZCIsIm9uRmlsZURvd25sb2FkQ29tcGxldGUiLCJvbkZpbGVEb3dubG9hZEVycm9yIiwiV0VCSU1fRE9XTkxPQURGSUxFX05PX0xPR0lOIiwiV0VCSU1fRE9XTkxPQURGSUxFX0VSUk9SIiwibWV0aG9kIiwicmVzVHlwZSIsInJlc3BvbnNlVHlwZSIsIm1pbWVUeXBlIiwiaW5uZXJIZWFlciIsIkFjY2VwdCIsInNlY3JldCIsIkF1dGhvcml6YXRpb24iLCJoZWFkZXJzIiwia2V5IiwicGFyc2VUZXh0TWVzc2FnZSIsIm1lc3NhZ2UiLCJmYWNlcyIsImlzZW1vamkiLCJib2R5IiwicmVjZWl2ZU1zZyIsImVtZXNzYWdlIiwiZXhwciIsIm1hdGNoIiwidG1zZyIsImV4aXN0RW1vamkiLCJlbW9qaVN0ciIsInJlc3RNc2dJbmRleCIsInRlbXBEYXRhIiwiZ2V0VGltZSIsInd4IiwicmVxdWVzdCIsImhlYWRlciIsInJlcyIsImFyZ3VtZW50cyIsImVycm9yX2Rlc2NyaXB0aW9uIiwic3RhdHVzQ29kZSIsImNvbXBsZXRlIiwiZmFpbCIsInRzIiwiZCIsIkhvdXJzIiwiZ2V0SG91cnMiLCJNaW51dGVzIiwiZ2V0TWludXRlcyIsIlNlY29uZHMiLCJnZXRTZWNvbmRzIiwiTWlsbGlzZWNvbmRzIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0T2JqZWN0S2V5IiwidmFsIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjZD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Z00sR0FBZCxFQUFrQjtBQUMvQixXQUFJLElBQUlwQyxHQUFSLElBQWU1SixHQUFmLEVBQW1CO0FBQ2xCLFlBQUdBLEdBQUcsQ0FBQzRKLEdBQUQsQ0FBSCxJQUFZb0MsR0FBZixFQUFtQjtBQUNsQixpQkFBT3BDLEdBQVA7QUFDQTtBQUNEO0FBQ0QsYUFBTyxFQUFQO0FBQ0EsS0FqbUJVLEVBQVo7Ozs7QUFxbUJBcUMsU0FBTyxDQUFDMUwsS0FBUixHQUFnQkEsS0FBaEI7O0FBRUEsQ0E1cEJBLEdBQUQsQyIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe1xyXG5cclxuXHR2YXIgRU1QVFlGTiA9IGZ1bmN0aW9uKCl7fTtcclxuXHR2YXIgX2NvZGUgPSByZXF1aXJlKFwiLi9zdGF0dXNcIikuY29kZTtcclxuXHR2YXIgV0VCSU1fRklMRVNJWkVfTElNSVQgPSAxMDQ4NTc2MDtcclxuXHR2YXIgX3RtcFV0aWxYSFIgPSBmYWxzZTtcclxuXHR2YXIgX2hhc0Zvcm1EYXRhID0gdHlwZW9mIEZvcm1EYXRhICE9PSBcInVuZGVmaW5lZFwiO1xyXG5cdHZhciBfaGFzQmxvYiA9IHR5cGVvZiBCbG9iICE9PSBcInVuZGVmaW5lZFwiO1xyXG5cdHZhciBfaXNDYW5TZXRSZXF1ZXN0SGVhZGVyID0gX3RtcFV0aWxYSFIuc2V0UmVxdWVzdEhlYWRlciB8fCBmYWxzZTtcclxuXHR2YXIgX2hhc092ZXJyaWRlTWltZVR5cGUgPSBfdG1wVXRpbFhIUi5vdmVycmlkZU1pbWVUeXBlIHx8IGZhbHNlO1xyXG5cdHZhciBfaXNDYW5VcGxvYWRGaWxlQXN5bmMgPSBfaXNDYW5TZXRSZXF1ZXN0SGVhZGVyICYmIF9oYXNGb3JtRGF0YTtcclxuXHR2YXIgX2lzQ2FuVXBsb2FkRmlsZSA9IF9pc0NhblVwbG9hZEZpbGVBc3luYyB8fCBmYWxzZTtcclxuXHR2YXIgX2lzQ2FuRG93bkxvYWRGaWxlID0gX2lzQ2FuU2V0UmVxdWVzdEhlYWRlciAmJiAoX2hhc0Jsb2IgfHwgX2hhc092ZXJyaWRlTWltZVR5cGUpO1xyXG5cclxuXHRpZighT2JqZWN0LmtleXMpe1xyXG5cdFx0T2JqZWN0LmtleXMgPSAoZnVuY3Rpb24oKXtcclxuXHRcdFx0dmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcclxuXHRcdFx0dmFyIGhhc0RvbnRFbnVtQnVnID0gISh7IHRvU3RyaW5nOiBudWxsIH0pLnByb3BlcnR5SXNFbnVtZXJhYmxlKFwidG9TdHJpbmdcIik7XHJcblx0XHRcdHZhciBkb250RW51bXMgPSBbXHJcblx0XHRcdFx0XCJ0b1N0cmluZ1wiLFxyXG5cdFx0XHRcdFwidG9Mb2NhbGVTdHJpbmdcIixcclxuXHRcdFx0XHRcInZhbHVlT2ZcIixcclxuXHRcdFx0XHRcImhhc093blByb3BlcnR5XCIsXHJcblx0XHRcdFx0XCJpc1Byb3RvdHlwZU9mXCIsXHJcblx0XHRcdFx0XCJwcm9wZXJ0eUlzRW51bWVyYWJsZVwiLFxyXG5cdFx0XHRcdFwiY29uc3RydWN0b3JcIlxyXG5cdFx0XHRdO1xyXG5cdFx0XHR2YXIgZG9udEVudW1zTGVuZ3RoID0gZG9udEVudW1zLmxlbmd0aDtcclxuXHJcblx0XHRcdHJldHVybiBmdW5jdGlvbihvYmope1xyXG5cdFx0XHRcdGlmKHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgKHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIiB8fCBvYmogPT09IG51bGwpKXtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qua2V5cyBjYWxsZWQgb24gbm9uLW9iamVjdFwiKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bGV0IHJlc3VsdCA9IFtdO1xyXG5cdFx0XHRcdGxldCBwcm9wO1xyXG5cdFx0XHRcdGxldCBpO1xyXG5cdFx0XHRcdGZvcihwcm9wIGluIG9iail7XHJcblx0XHRcdFx0XHRpZihoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpe1xyXG5cdFx0XHRcdFx0XHRyZXN1bHQucHVzaChwcm9wKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYoaGFzRG9udEVudW1CdWcpe1xyXG5cdFx0XHRcdFx0Zm9yKGkgPSAwOyBpIDwgZG9udEVudW1zTGVuZ3RoOyBpKyspe1xyXG5cdFx0XHRcdFx0XHRpZihoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgZG9udEVudW1zW2ldKSl7XHJcblx0XHRcdFx0XHRcdFx0cmVzdWx0LnB1c2goZG9udEVudW1zW2ldKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdFx0XHR9O1xyXG5cdFx0fSgpKTtcclxuXHR9XHJcblxyXG5cdGxldCB1dGlscyA9IHtcclxuXHRcdGhhc0Zvcm1EYXRhOiBfaGFzRm9ybURhdGEsXHJcblx0XHRoYXNCbG9iOiBfaGFzQmxvYixcclxuXHRcdGVtcHR5Zm46IEVNUFRZRk4sXHJcblx0XHRpc0NhblNldFJlcXVlc3RIZWFkZXI6IF9pc0NhblNldFJlcXVlc3RIZWFkZXIsXHJcblx0XHRoYXNPdmVycmlkZU1pbWVUeXBlOiBfaGFzT3ZlcnJpZGVNaW1lVHlwZSxcclxuXHRcdGlzQ2FuVXBsb2FkRmlsZUFzeW5jOiBfaXNDYW5VcGxvYWRGaWxlQXN5bmMsXHJcblx0XHRpc0NhblVwbG9hZEZpbGU6IF9pc0NhblVwbG9hZEZpbGUsXHJcblx0XHRpc0NhbkRvd25Mb2FkRmlsZTogX2lzQ2FuRG93bkxvYWRGaWxlLFxyXG5cdFx0aXNTdXBwb3J0V3NzOiB0cnVlLFxyXG5cdFx0aGFzRmxhc2g6IGZhbHNlLFxyXG5cdFx0eG1scmVxdWVzdDogZmFsc2UsXHJcblxyXG5cdFx0c3RyaW5naWZ5OiBmdW5jdGlvbihqc29uKXtcclxuXHRcdFx0aWYodHlwZW9mIEpTT04gIT09IFwidW5kZWZpbmVkXCIgJiYgSlNPTi5zdHJpbmdpZnkpe1xyXG5cdFx0XHRcdHJldHVybiBKU09OLnN0cmluZ2lmeShqc29uKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRsZXQgcyA9IFwiXCI7XHJcblx0XHRcdGxldCBhcnIgPSBbXTtcclxuXHRcdFx0cmV0dXJuIGl0ZXJhdGUoanNvbik7XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBpdGVyYXRlKGpzb24pe1xyXG5cdFx0XHRcdHZhciBpc0FyciA9IGZhbHNlO1xyXG5cdFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChqc29uKSA9PT0gXCJbb2JqZWN0IEFycmF5XVwiKXtcclxuXHRcdFx0XHRcdGFyci5wdXNoKFwiXVwiLCBcIltcIik7XHJcblx0XHRcdFx0XHRpc0FyciA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2UgaWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGpzb24pID09PSBcIltvYmplY3QgT2JqZWN0XVwiKXtcclxuXHRcdFx0XHRcdGFyci5wdXNoKFwifVwiLCBcIntcIik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGZvcihsZXQgbyBpbiBqc29uKXtcclxuXHRcdFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChqc29uW29dKSA9PT0gXCJbb2JqZWN0IE51bGxdXCIpe1xyXG5cdFx0XHRcdFx0XHRqc29uW29dID0gXCJudWxsXCI7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRlbHNlIGlmKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChqc29uW29dKSA9PT0gXCJbb2JqZWN0IFVuZGVmaW5lZF1cIil7XHJcblx0XHRcdFx0XHRcdGpzb25bb10gPSBcInVuZGVmaW5lZFwiO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYoanNvbltvXSAmJiB0eXBlb2YganNvbltvXSA9PT0gXCJvYmplY3RcIil7XHJcblx0XHRcdFx0XHRcdHMgKz0gXCIsXCIgKyAoaXNBcnIgPyBcIlwiIDogXCJcXFwiXCIgKyBvICsgXCJcXFwiOlwiICsgKGlzQXJyID8gXCJcXFwiXCIgOiBcIlwiKSkgKyBpdGVyYXRlKGpzb25bb10pICsgXCJcIjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2V7XHJcblx0XHRcdFx0XHRcdHMgKz0gXCIsXFxcIlwiICsgKGlzQXJyID8gXCJcIiA6IG8gKyBcIlxcXCI6XFxcIlwiKSArIGpzb25bb10gKyBcIlxcXCJcIjtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYocyAhPSBcIlwiKXtcclxuXHRcdFx0XHRcdHMgPSBzLnNsaWNlKDEpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gYXJyLnBvcCgpICsgcyArIGFyci5wb3AoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHJcblx0XHRyZWdpc3RlclVzZXI6IGZ1bmN0aW9uKG9wdGlvbnMpe1xyXG5cdFx0XHR2YXIgb3JnTmFtZSA9IG9wdGlvbnMub3JnTmFtZSB8fCBcIlwiO1xyXG5cdFx0XHR2YXIgYXBwTmFtZSA9IG9wdGlvbnMuYXBwTmFtZSB8fCBcIlwiO1xyXG5cdFx0XHR2YXIgYXBwS2V5ID0gb3B0aW9ucy5hcHBLZXkgfHwgXCJcIjtcclxuXHRcdFx0dmFyIHN1YyA9IG9wdGlvbnMuc3VjY2VzcyB8fCBFTVBUWUZOO1xyXG5cdFx0XHR2YXIgZXJyID0gb3B0aW9ucy5lcnJvciB8fCBFTVBUWUZOO1xyXG5cclxuXHRcdFx0aWYoIW9yZ05hbWUgJiYgIWFwcE5hbWUgJiYgYXBwS2V5KXtcclxuXHRcdFx0XHRsZXQgZGV2SW5mb3MgPSBhcHBLZXkuc3BsaXQoXCIjXCIpO1xyXG5cdFx0XHRcdGlmKGRldkluZm9zLmxlbmd0aCA9PT0gMil7XHJcblx0XHRcdFx0XHRvcmdOYW1lID0gZGV2SW5mb3NbMF07XHJcblx0XHRcdFx0XHRhcHBOYW1lID0gZGV2SW5mb3NbMV07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmKCFvcmdOYW1lICYmICFhcHBOYW1lKXtcclxuXHRcdFx0XHRlcnIoe1xyXG5cdFx0XHRcdFx0dHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX0FQUEtFWV9OT1RfQVNTSUdOX0VSUk9SXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxldCBhcGlVcmwgPSBvcHRpb25zLmFwaVVybDtcclxuXHRcdFx0bGV0IHJlc3RVcmwgPSBhcGlVcmwgKyBcIi9cIiArIG9yZ05hbWUgKyBcIi9cIiArIGFwcE5hbWUgKyBcIi91c2Vyc1wiO1xyXG5cdFx0XHRsZXQgdXNlcmpzb24gPSB7XHJcblx0XHRcdFx0dXNlcm5hbWU6IG9wdGlvbnMudXNlcm5hbWUsXHJcblx0XHRcdFx0cGFzc3dvcmQ6IG9wdGlvbnMucGFzc3dvcmQsXHJcblx0XHRcdFx0bmlja25hbWU6IG9wdGlvbnMubmlja25hbWUgfHwgXCJcIlxyXG5cdFx0XHR9O1xyXG5cdFx0XHRsZXQgdXNlcmluZm8gPSB1dGlscy5zdHJpbmdpZnkodXNlcmpzb24pO1xyXG5cdFx0XHRvcHRpb25zID0ge1xyXG5cdFx0XHRcdHVybDogcmVzdFVybCxcclxuXHRcdFx0XHRkYXRhOiB1c2VyaW5mbyxcclxuXHRcdFx0XHRzdWNjZXNzOiBzdWMsXHJcblx0XHRcdFx0ZXJyb3I6IGVyclxyXG5cdFx0XHR9O1xyXG5cdFx0XHRyZXR1cm4gdXRpbHMuYWpheChvcHRpb25zKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0bG9naW46IGZ1bmN0aW9uKG9wdGlvbnMpe1xyXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHRcdFx0bGV0IHN1YyA9IG9wdGlvbnMuc3VjY2VzcyB8fCBFTVBUWUZOO1xyXG5cdFx0XHRsZXQgZXJyID0gb3B0aW9ucy5lcnJvciB8fCBFTVBUWUZOO1xyXG5cdFx0XHRsZXQgYXBwS2V5ID0gb3B0aW9ucy5hcHBLZXkgfHwgXCJcIjtcclxuXHRcdFx0bGV0IGRldkluZm9zID0gYXBwS2V5LnNwbGl0KFwiI1wiKTtcclxuXHRcdFx0aWYoZGV2SW5mb3MubGVuZ3RoICE9PSAyKXtcclxuXHRcdFx0XHRlcnIoe1xyXG5cdFx0XHRcdFx0dHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX0FQUEtFWV9OT1RfQVNTSUdOX0VSUk9SXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxldCBvcmdOYW1lID0gZGV2SW5mb3NbMF07XHJcblx0XHRcdGxldCBhcHBOYW1lID0gZGV2SW5mb3NbMV07XHJcblx0XHRcdGxldCB1c2VyID0gb3B0aW9ucy51c2VyIHx8IFwiXCI7XHJcblx0XHRcdGxldCBwd2QgPSBvcHRpb25zLnB3ZCB8fCBcIlwiO1xyXG5cdFx0XHRsZXQgYXBpVXJsID0gb3B0aW9ucy5hcGlVcmw7XHJcblx0XHRcdGxldCBsb2dpbkpzb24gPSB7XHJcblx0XHRcdFx0Z3JhbnRfdHlwZTogXCJwYXNzd29yZFwiLFxyXG5cdFx0XHRcdHVzZXJuYW1lOiB1c2VyLFxyXG5cdFx0XHRcdHBhc3N3b3JkOiBwd2QsXHJcblx0XHRcdFx0dGltZXN0YW1wOiArbmV3IERhdGUoKVxyXG5cdFx0XHR9O1xyXG5cdFx0XHRsZXQgbG9naW5mbyA9IHV0aWxzLnN0cmluZ2lmeShsb2dpbkpzb24pO1xyXG5cdFx0XHRvcHRpb25zID0ge1xyXG5cdFx0XHRcdHVybDogYXBpVXJsICsgXCIvXCIgKyBvcmdOYW1lICsgXCIvXCIgKyBhcHBOYW1lICsgXCIvdG9rZW5cIixcclxuXHRcdFx0XHRkYXRhOiBsb2dpbmZvLFxyXG5cdFx0XHRcdHN1Y2Nlc3M6IHN1YyxcclxuXHRcdFx0XHRlcnJvcjogZXJyXHJcblx0XHRcdH07XHJcblx0XHRcdHJldHVybiB1dGlscy5hamF4KG9wdGlvbnMpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRnZXRGaWxlVXJsOiBmdW5jdGlvbihmaWxlSW5wdXRJZCl7XHJcblx0XHRcdHZhciB1cmkgPSB7XHJcblx0XHRcdFx0dXJsOiBcIlwiLFxyXG5cdFx0XHRcdGZpbGVuYW1lOiBcIlwiLFxyXG5cdFx0XHRcdGZpbGV0eXBlOiBcIlwiLFxyXG5cdFx0XHRcdGRhdGE6IFwiXCJcclxuXHRcdFx0fTtcclxuXHRcdFx0dmFyIGZpbGVPYmogPSB0eXBlb2YgZmlsZUlucHV0SWQgPT09IFwic3RyaW5nXCJcclxuXHRcdFx0XHQ/IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGZpbGVJbnB1dElkKVxyXG5cdFx0XHRcdDogZmlsZUlucHV0SWQ7XHJcblx0XHRcdGlmKCF1dGlscy5pc0NhblVwbG9hZEZpbGVBc3luYyB8fCAhZmlsZU9iail7XHJcblx0XHRcdFx0cmV0dXJuIHVyaTtcclxuXHRcdFx0fVxyXG5cdFx0XHR0cnl7XHJcblx0XHRcdFx0aWYod2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwpe1xyXG5cdFx0XHRcdFx0bGV0IGZpbGVJdGVtcyA9IGZpbGVPYmouZmlsZXM7XHRcdC8vIOS4gOS4quWvueixoSzmlofku7bliJfooahcclxuXHRcdFx0XHRcdGlmKGZpbGVJdGVtcy5sZW5ndGggPiAwKXtcclxuXHRcdFx0XHRcdFx0bGV0IHUgPSBmaWxlSXRlbXMuaXRlbSgwKTtcdFx0Ly8g5pyJ5YWz6YCJ5Y+W5paH5Lu255qE5L+h5oGvXHJcblx0XHRcdFx0XHRcdHVyaS5kYXRhID0gdTtcclxuXHRcdFx0XHRcdFx0dXJpLnVybCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKHUpO1x0Ly8g5oyH5ZCR6K+l5paH5Lu255qEVVJMXHJcblx0XHRcdFx0XHRcdHVyaS5maWxlbmFtZSA9IHUubmFtZSB8fCBcIlwiO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsZXQgaW5kZXggPSB1cmkuZmlsZW5hbWUubGFzdEluZGV4T2YoXCIuXCIpO1xyXG5cdFx0XHRcdGlmKGluZGV4ICE9IC0xKXtcclxuXHRcdFx0XHRcdHVyaS5maWxldHlwZSA9IHVyaS5maWxlbmFtZS5zdWJzdHJpbmcoaW5kZXggKyAxKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdXJpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNhdGNoKGUpe1xyXG5cdFx0XHRcdHRocm93IGU7XHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0RmlsZVNpemU6IGZ1bmN0aW9uKGZpbGVJbnB1dElkKXtcclxuXHRcdFx0bGV0IGZpbGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChmaWxlSW5wdXRJZCk7XHJcblx0XHRcdGxldCBmaWxlU2l6ZSA9IDA7XHJcblx0XHRcdGlmKGZpbGUpe1xyXG5cdFx0XHRcdGlmKGZpbGUuZmlsZXMpe1xyXG5cdFx0XHRcdFx0aWYoZmlsZS5maWxlcy5sZW5ndGggPiAwKXtcclxuXHRcdFx0XHRcdFx0ZmlsZVNpemUgPSBmaWxlLmZpbGVzWzBdLnNpemU7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBmaWxlU2l6ZTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dHJpbTogZnVuY3Rpb24oc3RyKXtcclxuXHRcdFx0c3RyID0gdHlwZW9mIHN0ciA9PT0gXCJzdHJpbmdcIiA/IHN0ciA6IFwiXCI7XHJcblx0XHRcdHJldHVybiBzdHIudHJpbVxyXG5cdFx0XHRcdD8gc3RyLnRyaW0oKVxyXG5cdFx0XHRcdDogc3RyLnJlcGxhY2UoL15cXHN8XFxzJC9nLCBcIlwiKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0cGFyc2VFbW9qaTogZnVuY3Rpb24obXNnKXtcclxuXHRcdFx0aWYodHlwZW9mIFdlYklNLkVtb2ppID09PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiBXZWJJTS5FbW9qaS5tYXAgPT09IFwidW5kZWZpbmVkXCIpe1xyXG5cdFx0XHRcdHJldHVybiBtc2c7XHJcblx0XHRcdH1cclxuXHRcdFx0bGV0IGVtb2ppID0gV2ViSU0uRW1vamk7XHJcblx0XHRcdGZvcihsZXQgZmFjZSBpbiBlbW9qaS5tYXApe1xyXG5cdFx0XHRcdGlmKGVtb2ppLm1hcC5oYXNPd25Qcm9wZXJ0eShmYWNlKSl7XHJcblx0XHRcdFx0XHR3aGlsZShtc2cuaW5kZXhPZihmYWNlKSA+IC0xKXtcclxuXHRcdFx0XHRcdFx0bXNnID0gbXNnLnJlcGxhY2UoZmFjZSwgXCI8aW1hZ2UgY2xhc3M9XFxcImVtb2ppXFxcIiBzcmM9XFxcIlwiICsgZW1vamkucGF0aCArIGVtb2ppLm1hcFtmYWNlXSArIFwiXFxcIiAvPjwvaW1hZ2U+XCIpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbXNnO1xyXG5cdFx0fSxcclxuXHJcblx0XHRwYXJzZUxpbms6IGZ1bmN0aW9uKG1zZyl7XHJcblx0XHRcdHZhciByZWcgPSAvKGh0dHBzPzpcXC9cXC98d3d3XFwuKShbYS16QS1aMC05LV0rKFxcLlthLXpBLVowLTldKykrKSg6WzAtOV17Miw0fSk/XFwvPygoXFwuWzpfMC05YS16QS1aLV0rKXxbOl8wLTlhLXpBLVotXSpcXC8/KSpcXD8/WzpfI0AqJiUwLTlhLXpBLVotLz1dKi9nbTtcclxuXHRcdFx0bXNnID0gbXNnLnJlcGxhY2UocmVnLCBmdW5jdGlvbih2KXtcclxuXHRcdFx0XHR2YXIgcHJlZml4ID0gL15odHRwcz8vZ20udGVzdCh2KTtcclxuXHRcdFx0XHRyZXR1cm4gXCI8YSBocmVmPSdcIiArIChwcmVmaXggPyB2IDogXCIvL1wiICsgdikgKyBcIicgdGFyZ2V0PSdfYmxhbmsnPlwiICsgdiArIFwiPC9hPlwiO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0cmV0dXJuIG1zZztcclxuXHRcdH0sXHJcblxyXG5cdFx0cGFyc2VKU09OOiBmdW5jdGlvbihkYXRhKXtcclxuXHRcdFx0aWYod2luZG93LkpTT04gJiYgd2luZG93LkpTT04ucGFyc2Upe1xyXG5cdFx0XHRcdHJldHVybiB3aW5kb3cuSlNPTi5wYXJzZShkYXRhICsgXCJcIik7XHJcblx0XHRcdH1cclxuXHRcdFx0bGV0IHJlcXVpcmVOb25Db21tYTtcclxuXHRcdFx0bGV0IGRlcHRoID0gbnVsbDtcclxuXHRcdFx0bGV0IHN0ciA9IHV0aWxzLnRyaW0oZGF0YSArIFwiXCIpO1xyXG5cdFx0XHRyZXR1cm4gc3RyICYmICF1dGlscy50cmltKFxyXG5cdFx0XHRcdHN0ci5yZXBsYWNlKFxyXG5cdFx0XHRcdFx0LygsKXwoXFxbfHspfCh9fF0pfFwiKD86W15cIlxcXFxcXHJcXG5dfFxcXFxbXCJcXFxcXFwvYmZucnRdfFxcXFx1W1xcZGEtZkEtRl17NH0pKlwiXFxzKjo/fHRydWV8ZmFsc2V8bnVsbHwtPyg/ITBcXGQpXFxkKyg/OlxcLlxcZCt8KSg/OltlRV1bKy1dP1xcZCt8KS9nLFxyXG5cdFx0XHRcdFx0ZnVuY3Rpb24odG9rZW4sIGNvbW1hLCBvcGVuLCBjbG9zZSl7XHJcblx0XHRcdFx0XHRcdGlmKHJlcXVpcmVOb25Db21tYSAmJiBjb21tYSl7XHJcblx0XHRcdFx0XHRcdFx0ZGVwdGggPSAwO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlmKGRlcHRoID09PSAwKXtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdG9rZW47XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0cmVxdWlyZU5vbkNvbW1hID0gb3BlbiB8fCBjb21tYTtcclxuXHRcdFx0XHRcdFx0ZGVwdGggKz0gIWNsb3NlIC0gIW9wZW47XHJcblx0XHRcdFx0XHRcdHJldHVybiBcIlwiO1xyXG5cdFx0XHRcdFx0fSlcclxuXHRcdFx0KVxyXG5cdFx0XHRcdD8gKEZ1bmN0aW9uKFwicmV0dXJuIFwiICsgc3RyKSkoKVxyXG5cdFx0XHRcdDogKEZ1bmN0aW9uKFwiSW52YWxpZCBKU09OOiBcIiArIGRhdGEpKSgpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRwYXJzZVVwbG9hZFJlc3BvbnNlOiBmdW5jdGlvbihyZXNwb25zZSl7XHJcblx0XHRcdHJldHVybiByZXNwb25zZS5pbmRleE9mKFwiY2FsbGJhY2tcIikgPiAtMVxyXG5cdFx0XHRcdC8vIGx0ZSBpZTlcclxuXHRcdFx0XHQ/IHJlc3BvbnNlLnNsaWNlKDksIC0xKVxyXG5cdFx0XHRcdDogcmVzcG9uc2U7XHJcblx0XHR9LFxyXG5cclxuXHRcdHBhcnNlRG93bmxvYWRSZXNwb25zZTogZnVuY3Rpb24ocmVzcG9uc2Upe1xyXG5cdFx0XHRyZXR1cm4gKFxyXG5cdFx0XHRcdChyZXNwb25zZSAmJiByZXNwb25zZS50eXBlICYmIHJlc3BvbnNlLnR5cGUgPT09IFwiYXBwbGljYXRpb24vanNvblwiKSB8fFxyXG5cdFx0XHRcdE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChyZXNwb25zZSkuaW5kZXhPZihcIkJsb2JcIikgPCAwXHJcblx0XHRcdClcclxuXHRcdFx0XHQ/IHRoaXMudXJsICsgXCI/dG9rZW49XCJcclxuXHRcdFx0XHQ6IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKHJlc3BvbnNlKTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dXBsb2FkRmlsZTogZnVuY3Rpb24ob3B0aW9ucyl7XHJcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cdFx0XHRvcHRpb25zLm9uRmlsZVVwbG9hZFByb2dyZXNzID0gb3B0aW9ucy5vbkZpbGVVcGxvYWRQcm9ncmVzcyB8fCBFTVBUWUZOO1xyXG5cdFx0XHRvcHRpb25zLm9uRmlsZVVwbG9hZENvbXBsZXRlID0gb3B0aW9ucy5vbkZpbGVVcGxvYWRDb21wbGV0ZSB8fCBFTVBUWUZOO1xyXG5cdFx0XHRvcHRpb25zLm9uRmlsZVVwbG9hZEVycm9yID0gb3B0aW9ucy5vbkZpbGVVcGxvYWRFcnJvciB8fCBFTVBUWUZOO1xyXG5cdFx0XHRvcHRpb25zLm9uRmlsZVVwbG9hZENhbmNlbGVkID0gb3B0aW9ucy5vbkZpbGVVcGxvYWRDYW5jZWxlZCB8fCBFTVBUWUZOO1xyXG5cdFx0XHRsZXQgYWNjID0gb3B0aW9ucy5hY2Nlc3NUb2tlbiB8fCB0aGlzLmNvbnRleHQuYWNjZXNzVG9rZW47XHJcblx0XHRcdGlmKCFhY2Mpe1xyXG5cdFx0XHRcdG9wdGlvbnMub25GaWxlVXBsb2FkRXJyb3Ioe1xyXG5cdFx0XHRcdFx0dHlwZTogX2NvZGUuV0VCSU1fVVBMT0FERklMRV9OT19MT0dJTixcclxuXHRcdFx0XHRcdGlkOiBvcHRpb25zLmlkXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxldCBvcmdOYW1lLCBhcHBOYW1lLCBkZXZJbmZvcztcclxuXHRcdFx0bGV0IGFwcEtleSA9IG9wdGlvbnMuYXBwS2V5IHx8IHRoaXMuY29udGV4dC5hcHBLZXkgfHwgXCJcIjtcclxuXHRcdFx0aWYoYXBwS2V5KXtcclxuXHRcdFx0XHRkZXZJbmZvcyA9IGFwcEtleS5zcGxpdChcIiNcIik7XHJcblx0XHRcdFx0b3JnTmFtZSA9IGRldkluZm9zWzBdO1xyXG5cdFx0XHRcdGFwcE5hbWUgPSBkZXZJbmZvc1sxXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZighb3JnTmFtZSAmJiAhYXBwTmFtZSl7XHJcblx0XHRcdFx0b3B0aW9ucy5vbkZpbGVVcGxvYWRFcnJvcih7XHJcblx0XHRcdFx0XHR0eXBlOiBfY29kZS5XRUJJTV9VUExPQURGSUxFX0VSUk9SXHJcblx0XHRcdFx0XHQsIGlkOiBvcHRpb25zLmlkXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxldCBhcGlVcmwgPSBvcHRpb25zLmFwaVVybDtcclxuXHRcdFx0bGV0IHVwbG9hZFVybCA9IGFwaVVybCArIFwiL1wiICsgb3JnTmFtZSArIFwiL1wiICsgYXBwTmFtZSArIFwiL2NoYXRmaWxlc1wiO1xyXG5cdFx0XHRpZighdXRpbHMuaXNDYW5VcGxvYWRGaWxlQXN5bmMpe1xyXG5cdFx0XHRcdGlmKHV0aWxzLmhhc0ZsYXNoICYmIHR5cGVvZiBvcHRpb25zLmZsYXNoVXBsb2FkID09PSBcImZ1bmN0aW9uXCIpe1xyXG5cdFx0XHRcdFx0b3B0aW9ucy5mbGFzaFVwbG9hZCAmJiBvcHRpb25zLmZsYXNoVXBsb2FkKHVwbG9hZFVybCwgb3B0aW9ucyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsc2V7XHJcblx0XHRcdFx0XHRvcHRpb25zLm9uRmlsZVVwbG9hZEVycm9yKHtcclxuXHRcdFx0XHRcdFx0dHlwZTogX2NvZGUuV0VCSU1fVVBMT0FERklMRV9CUk9XU0VSX0VSUk9SXHJcblx0XHRcdFx0XHRcdCwgaWQ6IG9wdGlvbnMuaWRcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0bGV0IGZpbGVTaXplID0gb3B0aW9ucy5maWxlLmRhdGEgPyBvcHRpb25zLmZpbGUuZGF0YS5zaXplIDogdW5kZWZpbmVkO1xyXG5cdFx0XHRpZihmaWxlU2l6ZSA+IFdFQklNX0ZJTEVTSVpFX0xJTUlUKXtcclxuXHRcdFx0XHRvcHRpb25zLm9uRmlsZVVwbG9hZEVycm9yKHtcclxuXHRcdFx0XHRcdHR5cGU6IF9jb2RlLldFQklNX1VQTE9BREZJTEVfRVJST1IsXHJcblx0XHRcdFx0XHRpZDogb3B0aW9ucy5pZFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbHNlIGlmKGZpbGVTaXplIDw9IDApe1xyXG5cdFx0XHRcdG9wdGlvbnMub25GaWxlVXBsb2FkRXJyb3Ioe1xyXG5cdFx0XHRcdFx0dHlwZTogX2NvZGUuV0VCSU1fVVBMT0FERklMRV9FUlJPUixcclxuXHRcdFx0XHRcdGlkOiBvcHRpb25zLmlkXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxldCB4aHIgPSB1dGlscy54bWxyZXF1ZXN0KCk7XHJcblx0XHRcdGxldCBvbkVycm9yID0gZnVuY3Rpb24oZSl7XHJcblx0XHRcdFx0b3B0aW9ucy5vbkZpbGVVcGxvYWRFcnJvcih7XHJcblx0XHRcdFx0XHR0eXBlOiBfY29kZS5XRUJJTV9VUExPQURGSUxFX0VSUk9SLFxyXG5cdFx0XHRcdFx0aWQ6IG9wdGlvbnMuaWQsXHJcblx0XHRcdFx0XHR4aHI6IHhoclxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9O1xyXG5cdFx0XHRpZih4aHIudXBsb2FkKXtcclxuXHRcdFx0XHR4aHIudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoXCJwcm9ncmVzc1wiLCBvcHRpb25zLm9uRmlsZVVwbG9hZFByb2dyZXNzLCBmYWxzZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoeGhyLmFkZEV2ZW50TGlzdGVuZXIpe1xyXG5cdFx0XHRcdHhoci5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb3B0aW9ucy5vbkZpbGVVcGxvYWRDYW5jZWxlZCwgZmFsc2UpO1xyXG5cdFx0XHRcdHhoci5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbihlKXtcclxuXHRcdFx0XHRcdHRyeXtcclxuXHRcdFx0XHRcdFx0bGV0IGpzb24gPSB1dGlscy5wYXJzZUpTT04oeGhyLnJlc3BvbnNlVGV4dCk7XHJcblx0XHRcdFx0XHRcdHRyeXtcclxuXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRmlsZVVwbG9hZENvbXBsZXRlKGpzb24pO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGNhdGNoKGUpe1xyXG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMub25GaWxlVXBsb2FkRXJyb3Ioe1xyXG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogX2NvZGUuV0VCSU1fQ09OTkNUSU9OX0NBTExCQUNLX0lOTkVSX0VSUk9SXHJcblx0XHRcdFx0XHRcdFx0XHQsIGRhdGE6IGVcclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Y2F0Y2goZSl7XHJcblx0XHRcdFx0XHRcdG9wdGlvbnMub25GaWxlVXBsb2FkRXJyb3Ioe1xyXG5cdFx0XHRcdFx0XHRcdHR5cGU6IF9jb2RlLldFQklNX1VQTE9BREZJTEVfRVJST1IsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YTogeGhyLnJlc3BvbnNlVGV4dCxcclxuXHRcdFx0XHRcdFx0XHRpZDogb3B0aW9ucy5pZCxcclxuXHRcdFx0XHRcdFx0XHR4aHI6IHhoclxyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LCBmYWxzZSk7XHJcblx0XHRcdFx0eGhyLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBvbkVycm9yLCBmYWxzZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZSBpZih4aHIub25yZWFkeXN0YXRlY2hhbmdlKXtcclxuXHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKXtcclxuXHRcdFx0XHRcdGlmKHhoci5yZWFkeVN0YXRlID09PSA0KXtcclxuXHRcdFx0XHRcdFx0aWYoYWpheC5zdGF0dXMgPT09IDIwMCl7XHJcblx0XHRcdFx0XHRcdFx0dHJ5e1xyXG5cdFx0XHRcdFx0XHRcdFx0bGV0IGpzb24gPSB1dGlscy5wYXJzZUpTT04oeGhyLnJlc3BvbnNlVGV4dCk7XHJcblx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRmlsZVVwbG9hZENvbXBsZXRlKGpzb24pO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRjYXRjaChlKXtcclxuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25GaWxlVXBsb2FkRXJyb3Ioe1xyXG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBfY29kZS5XRUJJTV9VUExPQURGSUxFX0VSUk9SLFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhOiB4aHIucmVzcG9uc2VUZXh0LFxyXG5cdFx0XHRcdFx0XHRcdFx0XHRpZDogb3B0aW9ucy5pZCxcclxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyOiB4aHJcclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRlbHNle1xyXG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMub25GaWxlVXBsb2FkRXJyb3Ioe1xyXG5cdFx0XHRcdFx0XHRcdFx0dHlwZTogX2NvZGUuV0VCSU1fVVBMT0FERklMRV9FUlJPUixcclxuXHRcdFx0XHRcdFx0XHRcdGRhdGE6IHhoci5yZXNwb25zZVRleHQsXHJcblx0XHRcdFx0XHRcdFx0XHRpZDogb3B0aW9ucy5pZCxcclxuXHRcdFx0XHRcdFx0XHRcdHhocjogeGhyXHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGVsc2V7XHJcblx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xyXG5cdFx0XHRcdFx0XHRvcHRpb25zLm9uRmlsZVVwbG9hZENhbmNlbGVkKCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cdFx0XHR4aHIub3BlbihcIlBPU1RcIiwgdXBsb2FkVXJsKTtcclxuXHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoXCJyZXN0cmljdC1hY2Nlc3NcIiwgXCJ0cnVlXCIpO1xyXG5cdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBcIiovKlwiKTtcdFx0Ly8gQW5kcm9pZCBRUSBicm93c2VyIGhhcyBzb21lIHByb2JsZW0gd2l0aCB0aGlzIGF0dHJpYnV0ZS5cclxuXHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoXCJBdXRob3JpemF0aW9uXCIsIFwiQmVhcmVyIFwiICsgYWNjKTtcclxuXHRcdFx0bGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XHJcblx0XHRcdGZvcm1EYXRhLmFwcGVuZChcImZpbGVcIiwgb3B0aW9ucy5maWxlLmRhdGEpO1xyXG5cdFx0XHR4aHIuc2VuZChmb3JtRGF0YSk7XHJcblx0XHR9LFxyXG5cclxuXHRcdGRvd25sb2FkOiBmdW5jdGlvbihvcHRpb25zKXtcclxuXHRcdFx0b3B0aW9ucy5vbkZpbGVEb3dubG9hZENvbXBsZXRlID0gb3B0aW9ucy5vbkZpbGVEb3dubG9hZENvbXBsZXRlIHx8IEVNUFRZRk47XHJcblx0XHRcdG9wdGlvbnMub25GaWxlRG93bmxvYWRFcnJvciA9IG9wdGlvbnMub25GaWxlRG93bmxvYWRFcnJvciB8fCBFTVBUWUZOO1xyXG5cdFx0XHRsZXQgYWNjZXNzVG9rZW4gPSBvcHRpb25zLmFjY2Vzc1Rva2VuIHx8IHRoaXMuY29udGV4dC5hY2Nlc3NUb2tlbjtcclxuXHRcdFx0bGV0IHhociA9IHV0aWxzLnhtbHJlcXVlc3QoKTtcclxuXHRcdFx0aWYoIWFjY2Vzc1Rva2VuKXtcclxuXHRcdFx0XHRvcHRpb25zLm9uRmlsZURvd25sb2FkRXJyb3Ioe1xyXG5cdFx0XHRcdFx0dHlwZTogX2NvZGUuV0VCSU1fRE9XTkxPQURGSUxFX05PX0xPR0lOLFxyXG5cdFx0XHRcdFx0aWQ6IG9wdGlvbnMuaWRcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0bGV0IG9uRXJyb3IgPSBmdW5jdGlvbihlKXtcclxuXHRcdFx0XHRvcHRpb25zLm9uRmlsZURvd25sb2FkRXJyb3Ioe1xyXG5cdFx0XHRcdFx0dHlwZTogX2NvZGUuV0VCSU1fRE9XTkxPQURGSUxFX0VSUk9SLFxyXG5cdFx0XHRcdFx0aWQ6IG9wdGlvbnMuaWQsXHJcblx0XHRcdFx0XHR4aHI6IHhoclxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9O1xyXG5cdFx0XHRpZighdXRpbHMuaXNDYW5Eb3duTG9hZEZpbGUpe1xyXG5cdFx0XHRcdG9wdGlvbnMub25GaWxlRG93bmxvYWRDb21wbGV0ZSgpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZihcImFkZEV2ZW50TGlzdGVuZXJcIiBpbiB4aHIpe1xyXG5cdFx0XHRcdHhoci5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbihlKXtcclxuXHRcdFx0XHRcdG9wdGlvbnMub25GaWxlRG93bmxvYWRDb21wbGV0ZSh4aHIucmVzcG9uc2UsIHhocik7XHJcblx0XHRcdFx0fSwgZmFsc2UpO1xyXG5cdFx0XHRcdHhoci5hZGRFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgb25FcnJvciwgZmFsc2UpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGVsc2UgaWYoXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiB4aHIpe1xyXG5cdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpe1xyXG5cdFx0XHRcdFx0aWYoeGhyLnJlYWR5U3RhdGUgPT09IDQpe1xyXG5cdFx0XHRcdFx0XHRpZihhamF4LnN0YXR1cyA9PT0gMjAwKXtcclxuXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRmlsZURvd25sb2FkQ29tcGxldGUoeGhyLnJlc3BvbnNlLCB4aHIpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGVsc2V7XHJcblx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkZpbGVEb3dubG9hZEVycm9yKHtcclxuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IF9jb2RlLldFQklNX0RPV05MT0FERklMRV9FUlJPUixcclxuXHRcdFx0XHRcdFx0XHRcdGlkOiBvcHRpb25zLmlkLFxyXG5cdFx0XHRcdFx0XHRcdFx0eGhyOiB4aHJcclxuXHRcdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0ZWxzZXtcclxuXHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XHJcblx0XHRcdFx0XHRcdG9wdGlvbnMub25GaWxlRG93bmxvYWRFcnJvcih7XHJcblx0XHRcdFx0XHRcdFx0dHlwZTogX2NvZGUuV0VCSU1fRE9XTkxPQURGSUxFX0VSUk9SLFxyXG5cdFx0XHRcdFx0XHRcdGlkOiBvcHRpb25zLmlkLFxyXG5cdFx0XHRcdFx0XHRcdHhocjogeGhyXHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH1cclxuXHRcdFx0bGV0IG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IFwiR0VUXCI7XHJcblx0XHRcdGxldCByZXNUeXBlID0gb3B0aW9ucy5yZXNwb25zZVR5cGUgfHwgXCJibG9iXCI7XHJcblx0XHRcdGxldCBtaW1lVHlwZSA9IG9wdGlvbnMubWltZVR5cGUgfHwgXCJ0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkXCI7XHJcblx0XHRcdHhoci5vcGVuKG1ldGhvZCwgb3B0aW9ucy51cmwpO1xyXG5cdFx0XHRpZih0eXBlb2YgQmxvYiAhPT0gXCJ1bmRlZmluZWRcIil7XHJcblx0XHRcdFx0eGhyLnJlc3BvbnNlVHlwZSA9IHJlc1R5cGU7XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxzZXtcclxuXHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZShtaW1lVHlwZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0bGV0IGlubmVySGVhZXIgPSB7XHJcblx0XHRcdFx0XCJYLVJlcXVlc3RlZC1XaXRoXCI6IFwiWE1MSHR0cFJlcXVlc3RcIixcclxuXHRcdFx0XHRBY2NlcHQ6IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIsXHJcblx0XHRcdFx0XCJzaGFyZS1zZWNyZXRcIjogb3B0aW9ucy5zZWNyZXQsXHJcblx0XHRcdFx0QXV0aG9yaXphdGlvbjogXCJCZWFyZXIgXCIgKyBhY2Nlc3NUb2tlblxyXG5cdFx0XHR9O1xyXG5cdFx0XHRsZXQgaGVhZGVycyA9IG9wdGlvbnMuaGVhZGVycyB8fCB7fTtcclxuXHRcdFx0Zm9yKGxldCBrZXkgaW4gaGVhZGVycyl7XHJcblx0XHRcdFx0aW5uZXJIZWFlcltrZXldID0gaGVhZGVyc1trZXldO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZvcihsZXQga2V5IGluIGlubmVySGVhZXIpe1xyXG5cdFx0XHRcdGlmKGlubmVySGVhZXJba2V5XSl7XHJcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIGlubmVySGVhZXJba2V5XSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHhoci5zZW5kKG51bGwpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRwYXJzZVRleHRNZXNzYWdlOiBmdW5jdGlvbihtZXNzYWdlLCBmYWNlcyl7XHJcblx0XHRcdGlmKHR5cGVvZiBtZXNzYWdlICE9PSBcInN0cmluZ1wiKXtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGZhY2VzKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIil7XHJcblx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdGlzZW1vamk6IGZhbHNlLFxyXG5cdFx0XHRcdFx0Ym9keTogW1xyXG5cdFx0XHRcdFx0XHR7XHJcblx0XHRcdFx0XHRcdFx0dHlwZTogXCJ0eHRcIixcclxuXHRcdFx0XHRcdFx0XHRkYXRhOiBtZXNzYWdlXHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdF1cclxuXHRcdFx0XHR9O1xyXG5cdFx0XHR9XHJcblx0XHRcdGxldCByZWNlaXZlTXNnID0gbWVzc2FnZTtcclxuXHRcdFx0bGV0IGVtZXNzYWdlID0gW107XHJcblx0XHRcdGxldCBleHByID0gL1xcW1teW1xcXV17MiwzfVxcXS9tZztcclxuXHRcdFx0bGV0IGVtb2ppID0gcmVjZWl2ZU1zZy5tYXRjaChleHByKTtcclxuXHRcdFx0aWYoIWVtb2ppIHx8IGVtb2ppLmxlbmd0aCA8IDEpe1xyXG5cdFx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0XHRpc2Vtb2ppOiBmYWxzZSxcclxuXHRcdFx0XHRcdGJvZHk6IFtcclxuXHRcdFx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0XHRcdHR5cGU6IFwidHh0XCIsXHJcblx0XHRcdFx0XHRcdFx0ZGF0YTogbWVzc2FnZVxyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRdXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bGV0IGlzZW1vamkgPSBmYWxzZTtcclxuXHRcdFx0Zm9yKGxldCBpID0gMDsgaSA8IGVtb2ppLmxlbmd0aDsgaSsrKXtcclxuXHRcdFx0XHRsZXQgdG1zZyA9IHJlY2VpdmVNc2cuc3Vic3RyaW5nKDAsIHJlY2VpdmVNc2cuaW5kZXhPZihlbW9qaVtpXSkpO1xyXG5cdFx0XHRcdGxldCBleGlzdEVtb2ppID0gZmFjZXMubWFwW2Vtb2ppW2ldXTtcclxuXHRcdFx0XHRpZih0bXNnKXtcclxuXHRcdFx0XHRcdGVtZXNzYWdlLnB1c2goe1xyXG5cdFx0XHRcdFx0XHR0eXBlOiBcInR4dFwiLFxyXG5cdFx0XHRcdFx0XHRkYXRhOiB0bXNnXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYoIWV4aXN0RW1vamkpe1xyXG5cdFx0XHRcdFx0ZW1lc3NhZ2UucHVzaCh7XHJcblx0XHRcdFx0XHRcdHR5cGU6IFwidHh0XCIsXHJcblx0XHRcdFx0XHRcdGRhdGE6IGVtb2ppW2ldXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsZXQgZW1vamlTdHIgPSBmYWNlcy5tYXAgPyBleGlzdEVtb2ppIDogbnVsbDtcclxuXHRcdFx0XHRpZihlbW9qaVN0cil7XHJcblx0XHRcdFx0XHRpc2Vtb2ppID0gdHJ1ZTtcclxuXHRcdFx0XHRcdGVtZXNzYWdlLnB1c2goe1xyXG5cdFx0XHRcdFx0XHR0eXBlOiBcImVtb2ppXCIsXHJcblx0XHRcdFx0XHRcdGRhdGE6IGVtb2ppU3RyXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWxzZXtcclxuXHRcdFx0XHRcdGVtZXNzYWdlLnB1c2goe1xyXG5cdFx0XHRcdFx0XHR0eXBlOiBcInR4dFwiLFxyXG5cdFx0XHRcdFx0XHRkYXRhOiBlbW9qaVtpXVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxldCByZXN0TXNnSW5kZXggPSByZWNlaXZlTXNnLmluZGV4T2YoZW1vamlbaV0pICsgZW1vamlbaV0ubGVuZ3RoO1xyXG5cdFx0XHRcdHJlY2VpdmVNc2cgPSByZWNlaXZlTXNnLnN1YnN0cmluZyhyZXN0TXNnSW5kZXgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmKHJlY2VpdmVNc2cpe1xyXG5cdFx0XHRcdGVtZXNzYWdlLnB1c2goe1xyXG5cdFx0XHRcdFx0dHlwZTogXCJ0eHRcIixcclxuXHRcdFx0XHRcdGRhdGE6IHJlY2VpdmVNc2dcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZihpc2Vtb2ppKXtcclxuXHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0aXNlbW9qaTogaXNlbW9qaSxcclxuXHRcdFx0XHRcdGJvZHk6IGVtZXNzYWdlXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdGlzZW1vamk6IGZhbHNlLFxyXG5cdFx0XHRcdGJvZHk6IFtcclxuXHRcdFx0XHRcdHtcclxuXHRcdFx0XHRcdFx0dHlwZTogXCJ0eHRcIixcclxuXHRcdFx0XHRcdFx0ZGF0YTogbWVzc2FnZVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdF1cclxuXHRcdFx0fTtcclxuXHRcdH0sXHJcblxyXG5cdFx0YWpheDogZnVuY3Rpb24ob3B0aW9ucyl7XHJcblx0XHRcdHZhciBzdWMgPSBvcHRpb25zLnN1Y2Nlc3MgfHwgRU1QVFlGTjtcclxuXHRcdFx0dmFyIGVycm9yID0gb3B0aW9ucy5lcnJvciB8fCBFTVBUWUZOO1xyXG5cdFx0XHR2YXIgdHlwZSA9IG9wdGlvbnMudHlwZSB8fCBcIlBPU1RcIixcclxuXHRcdFx0XHRkYXRhID0gb3B0aW9ucy5kYXRhIHx8IG51bGwsXHJcblx0XHRcdFx0dGVtcERhdGEgPSBcIlwiO1xyXG5cclxuXHRcdFx0aWYodHlwZS50b0xvd2VyQ2FzZSgpID09PSBcImdldFwiICYmIGRhdGEpe1xyXG5cdFx0XHRcdGZvcihsZXQgbyBpbiBkYXRhKXtcclxuXHRcdFx0XHRcdGlmKGRhdGEuaGFzT3duUHJvcGVydHkobykpe1xyXG5cdFx0XHRcdFx0XHR0ZW1wRGF0YSArPSBvICsgXCI9XCIgKyBkYXRhW29dICsgXCImXCI7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRlbXBEYXRhID0gdGVtcERhdGEgPyB0ZW1wRGF0YS5zbGljZSgwLCAtMSkgOiB0ZW1wRGF0YTtcclxuXHRcdFx0XHRvcHRpb25zLnVybCArPSAob3B0aW9ucy51cmwuaW5kZXhPZihcIj9cIikgPiAwID8gXCImXCIgOiBcIj9cIikgKyAodGVtcERhdGEgPyB0ZW1wRGF0YSArIFwiJlwiIDogdGVtcERhdGEpICsgXCJfdj1cIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG5cdFx0XHRcdGRhdGEgPSBudWxsO1xyXG5cdFx0XHRcdHRlbXBEYXRhID0gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRjb25zb2xlLmxvZyhcInd4LnJlcXVlc3RcIiwgb3B0aW9ucy51cmwpO1xyXG5cdFx0XHR3eC5yZXF1ZXN0KHtcclxuXHRcdFx0XHR1cmw6IG9wdGlvbnMudXJsLFxyXG5cdFx0XHRcdGRhdGE6IG9wdGlvbnMuZGF0YSxcclxuXHRcdFx0XHRoZWFkZXI6IG9wdGlvbnMuaGVhZGVycyxcclxuXHRcdFx0XHRtZXRob2Q6IHR5cGUsXHJcblx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24ocmVzKXtcclxuXHRcdFx0XHRcdGlmKGFyZ3VtZW50c1swXS5kYXRhLmVycm9yX2Rlc2NyaXB0aW9uICYmIGFyZ3VtZW50c1swXS5kYXRhLmVycm9yX2Rlc2NyaXB0aW9uID09IFwiaW52YWxpZCBwYXNzd29yZFwiKXtcclxuXHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCLml6DmlYjnmoTnjq/kv6HnmbvlvZXlr4bnoIFcIixhcmd1bWVudHMpO1xyXG5cdFx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRcdGNvbnNvbGUubG9nKFwid3gucmVxdWVzdC5zdWNjZXNzXCIsYXJndW1lbnRzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmKHJlcy5zdGF0dXNDb2RlID09IFwiMjAwXCIpe1xyXG5cdFx0XHRcdFx0XHRzdWMocmVzKTtcclxuXHRcdFx0XHRcdH0gZWxzZXtcclxuXHRcdFx0XHRcdFx0ZXJyb3IocmVzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGNvbXBsZXRlKCl7XHJcblx0XHRcdFx0XHQvLyBjb25zb2xlLmxvZyhcInd4LnJlcXVlc3QuY29tcGxldGVcIiwgYXJndW1lbnRzKTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHRcdGZhaWwoKXtcclxuXHRcdFx0XHRcdC8vIGNvbnNvbGUubG9nKFwid3gucmVxdWVzdC5mYWlsXCIsIGFyZ3VtZW50cyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0sXHJcblxyXG5cdFx0dHM6IGZ1bmN0aW9uKCl7XHJcblx0XHRcdHZhciBkID0gbmV3IERhdGUoKTtcclxuXHRcdFx0dmFyIEhvdXJzID0gZC5nZXRIb3VycygpO1x0XHQvLyDojrflj5blvZPliY3lsI/ml7bmlbAoMC0yMylcclxuXHRcdFx0dmFyIE1pbnV0ZXMgPSBkLmdldE1pbnV0ZXMoKTtcdC8vIOiOt+WPluW9k+WJjeWIhumSn+aVsCgwLTU5KVxyXG5cdFx0XHR2YXIgU2Vjb25kcyA9IGQuZ2V0U2Vjb25kcygpO1x0Ly8g6I635Y+W5b2T5YmN56eS5pWwKDAtNTkpXHJcblx0XHRcdHZhciBNaWxsaXNlY29uZHMgPSBkLmdldE1pbGxpc2Vjb25kcygpO1x0Ly8g6I635Y+W5b2T5YmN5q+r56eSXHJcblx0XHRcdHJldHVybiAoSG91cnMgPCAxMCA/IFwiMFwiICsgSG91cnMgOiBIb3VycykgKyBcIjpcIiArXHJcblx0XHRcdFx0KE1pbnV0ZXMgPCAxMCA/IFwiMFwiICsgTWludXRlcyA6IE1pbnV0ZXMpICsgXCI6XCIgK1xyXG5cdFx0XHRcdChTZWNvbmRzIDwgMTAgPyBcIjBcIiArIFNlY29uZHMgOiBTZWNvbmRzKSArIFwiOlwiICtcclxuXHRcdFx0XHRNaWxsaXNlY29uZHMgKyBcIiBcIjtcclxuXHRcdH0sXHJcblxyXG5cdFx0Z2V0T2JqZWN0S2V5OiBmdW5jdGlvbihvYmosIHZhbCl7XHJcblx0XHRcdGZvcihsZXQga2V5IGluIG9iail7XHJcblx0XHRcdFx0aWYob2JqW2tleV0gPT0gdmFsKXtcclxuXHRcdFx0XHRcdHJldHVybiBrZXk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBcIlwiO1xyXG5cdFx0fVxyXG5cclxuXHR9O1xyXG5cclxuXHRleHBvcnRzLnV0aWxzID0gdXRpbHM7XHJcblxyXG59KCkpO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n");

/***/ }),

/***/ 24:
/*!***********************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/sdk/message.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var StropheAll = __webpack_require__(/*! ./libs/strophe */ 13);\n\n(function () {\n  var _utils = __webpack_require__(/*! ./utils */ 23).utils;\n  var Message = function Message(type, id) {\n    if (!(this instanceof Message)) {\n      return new Message(type);\n    }\n    this._msg = {};\n    if (typeof Message[type] === \"function\") {\n      Message[type].prototype.setGroup = this.setGroup;\n      this._msg = new Message[type](id);\n    }\n    return this._msg;\n  };\n  Message.prototype.setGroup = function (group) {\n    this.body.group = group;\n  };\n\n  /*\r\n      * Read Message\r\n      */\n  Message.read = function (id) {\n    this.id = id;\n    this.type = \"read\";\n  };\n\n  Message.read.prototype.set = function (opt) {\n    this.body = {\n      ackId: opt.id,\n      to: opt.to };\n\n  };\n\n  /*\r\n      * text message\r\n      */\n  Message.txt = function (id) {\n    this.id = id;\n    this.type = \"txt\";\n    this.body = {};\n  };\n  Message.txt.prototype.set = function (opt) {\n    this.value = opt.msg;\n    this.body = {\n      id: this.id,\n      from: opt.from,\n      to: opt.to,\n      msg: this.value,\n      type: this.type,\n      roomType: opt.roomType,\n      chatType: opt.chatType,\n      ext: opt.ext || {},\n      success: opt.success,\n      fail: opt.fail };\n\n    !opt.roomType && delete this.body.roomType;\n  };\n\n  /*\r\n      * cmd message\r\n      */\n  Message.cmd = function (id) {\n    this.id = id;\n    this.type = \"cmd\";\n    this.body = {};\n  };\n  Message.cmd.prototype.set = function (opt) {\n    this.value = \"\";\n\n    this.body = {\n      to: opt.to,\n      from: opt.from,\n      action: opt.action,\n      msg: this.value,\n      type: this.type,\n      roomType: opt.roomType,\n      ext: opt.ext || {} };\n\n    !opt.roomType && delete this.body.roomType;\n  };\n\n  /*\r\n      * loc message\r\n      */\n  Message.location = function (id) {\n    this.id = id;\n    this.type = \"loc\";\n    this.body = {};\n  };\n  Message.location.prototype.set = function (opt) {\n    this.body = {\n      to: opt.to,\n      from: opt.from,\n      type: this.type,\n      roomType: opt.roomType,\n      addr: opt.addr,\n      lat: opt.lat,\n      lng: opt.lng,\n      chatType: opt.chatType,\n      ext: opt.ext || {} };\n\n  };\n\n  /*\r\n      * img message\r\n      */\n  Message.img = function (id) {\n    this.id = id;\n    this.type = \"img\";\n    this.body = {};\n  };\n  Message.img.prototype.set = function (opt) {\n    // opt.file = opt.file || _utils.getFileUrl(opt.fileInputId);\n    // //console.log(opt)\n    this.value = opt.file;\n    this.body = {\n      id: this.id,\n      file: this.value,\n      apiUrl: opt.apiUrl,\n      to: opt.to,\n      from: opt.from,\n      type: this.type,\n      ext: opt.ext || {},\n      roomType: opt.roomType,\n      onFileUploadError: opt.onFileUploadError,\n      onFileUploadComplete: opt.onFileUploadComplete,\n      success: opt.success,\n      fail: opt.fail,\n      flashUpload: opt.flashUpload,\n      width: opt.width,\n      height: opt.height,\n      body: opt.body };\n\n    !opt.roomType && delete this.body.roomType;\n  };\n\n  /*\r\n      * audio message\r\n      */\n  Message.audio = function (id) {\n    this.id = id;\n    this.type = \"audio\";\n    this.body = {};\n  };\n  Message.audio.prototype.set = function (opt) {\n    opt.file = opt.file || _utils.getFileUrl(opt.fileInputId);\n\n    this.value = opt.file;\n    this.filename = opt.filename || this.value.filename;\n\n    this.body = {\n      id: this.id,\n      file: this.value,\n      filename: this.filename,\n      apiUrl: opt.apiUrl,\n      accessToken: opt.accessToken,\n      to: opt.to,\n      from: opt.from,\n      type: this.type,\n      ext: opt.ext || {},\n      length: opt.length || 0,\n      roomType: opt.roomType,\n      file_length: opt.file_length,\n      onFileUploadError: opt.onFileUploadError,\n      onFileUploadComplete: opt.onFileUploadComplete,\n      success: opt.success,\n      fail: opt.fail,\n      flashUpload: opt.flashUpload,\n      body: opt.body };\n\n    !opt.roomType && delete this.body.roomType;\n  };\n\n  /*\r\n      * file message\r\n      */\n  Message.file = function (id) {\n    this.id = id;\n    this.type = \"file\";\n    this.body = {};\n  };\n  Message.file.prototype.set = function (opt) {\n    opt.file = opt.file || _utils.getFileUrl(opt.fileInputId);\n\n    this.value = opt.file;\n    this.filename = opt.filename || this.value.filename;\n\n    this.body = {\n      id: this.id,\n      file: this.value,\n      filename: this.filename,\n      apiUrl: opt.apiUrl,\n      to: opt.to,\n      from: opt.from,\n      type: this.type,\n      ext: opt.ext || {},\n      roomType: opt.roomType,\n      onFileUploadError: opt.onFileUploadError,\n      onFileUploadComplete: opt.onFileUploadComplete,\n      success: opt.success,\n      fail: opt.fail,\n      flashUpload: opt.flashUpload,\n      body: opt.body };\n\n    !opt.roomType && delete this.body.roomType;\n  };\n\n  /*\r\n      * video message\r\n      */\n  Message.video = function (id) {\n    this.id = id;\n    this.type = \"file\";\n    this.body = {};\n  };\n  Message.video.prototype.set = function (opt) {\n    opt.file = opt.file || _utils.getFileUrl(opt.fileInputId);\n\n    this.value = opt.file;\n    this.filename = opt.filename || this.value.filename;\n\n    this.body = {\n      id: this.id,\n      file: this.value,\n      filename: this.filename,\n      apiUrl: opt.apiUrl,\n      to: opt.to,\n      from: opt.from,\n      type: this.type,\n      ext: opt.ext || {},\n      roomType: opt.roomType,\n      onFileUploadError: opt.onFileUploadError,\n      onFileUploadComplete: opt.onFileUploadComplete,\n      success: opt.success,\n      fail: opt.fail,\n      flashUpload: opt.flashUpload,\n      body: opt.body };\n\n    !opt.roomType && delete this.body.roomType;\n  };\n\n\n\n\n  function _Message(message) {\n    if (!(this instanceof _Message)) {\n      return new _Message(message);\n    }\n    this.msg = message;\n  }\n  _Message.prototype.send = function (conn) {\n    var me = this;\n    var _send = function _send(message) {\n      message.ext = message.ext || {};\n      message.ext.weichat = message.ext.weichat || {};\n      message.ext.weichat.originType = message.ext.weichat.originType || \"webim\";\n      var json = {\n        from: conn.context.userId || \"\",\n        to: message.to,\n        bodies: [message.body],\n        ext: message.ext || {} };\n\n      var jsonstr = _utils.stringify(json);\n      var dom = StropheAll.\n      $msg({\n        type: message.group || \"chat\",\n        to: message.toJid,\n        id: message.id,\n        xmlns: \"jabber:client\" }).\n\n      c(\"body\").\n      t(jsonstr);\n\n      if (message.roomType) {\n        dom.\n        up().\n        c(\"roomtype\", {\n          xmlns: \"easemob:x:roomtype\",\n          type: \"chatroom\" });\n\n      }\n      if (message.bodyId) {\n        dom = StropheAll.\n        $msg({\n          from: conn.context.jid || \"\",\n          to: message.toJid,\n          id: message.id,\n          xmlns: \"jabber:client\" }).\n\n        c(\"body\").\n        t(message.bodyId);\n\n        var delivery = {\n          xmlns: \"urn:xmpp:receipts\",\n          id: message.bodyId };\n\n        dom.up().c(\"delivery\", delivery);\n      }\n\n      if (message.ackId) {\n\n        if (conn.context.jid.indexOf(message.toJid) >= 0) {\n          return;\n        }\n        dom = StropheAll.$msg({\n          from: conn.context.jid || \"\",\n          to: message.toJid,\n          id: message.id,\n          xmlns: \"jabber:client\" }).\n        c(\"body\").t(message.ackId);\n        var read = {\n          xmlns: \"urn:xmpp:receipts\",\n          id: message.ackId };\n\n        dom.up().c(\"acked\", read);\n      }\n\n      // setTimeout(function(){\n      // \tif(typeof _msgHash !== \"undefined\" && _msgHash[message.id]){\n      // \t\t_msgHash[message.id].msg.fail instanceof Function\n      // \t\t\t&& _msgHash[message.id].msg.fail(message.id);\n      // \t}\n      // }, 60000);\n      conn.sendCommand(dom.tree(), message.id);\n    };\n\n\n    if (me.msg.file) {\n      if (me.msg.body && me.msg.body.url) {// Only send msg\n        _send(me.msg);\n        return;\n      }\n      var _tmpComplete = me.msg.onFileUploadComplete;\n      var _complete = function _complete(data) {\n        if (data.entities[0][\"file-metadata\"]) {\n          var file_len = data.entities[0][\"file-metadata\"][\"content-length\"];\n          me.msg.file_length = file_len;\n          me.msg.filetype = data.entities[0][\"file-metadata\"][\"content-type\"];\n          if (file_len > 204800) {\n            me.msg.thumbnail = true;\n          }\n        }\n        me.msg.body = {\n          type: me.msg.type || \"file\",\n          url: data.uri + \"/\" + data.entities[0].uuid,\n          secret: data.entities[0][\"share-secret\"],\n          filename: me.msg.file.filename || me.msg.filename,\n          size: {\n            width: me.msg.width || 0,\n            height: me.msg.height || 0 },\n\n          length: me.msg.length || 0,\n          file_length: me.msg.file_length || 0,\n          filetype: me.msg.filetype };\n\n        _send(me.msg);\n        _tmpComplete instanceof Function && _tmpComplete(data, me.msg.id);\n      };\n      me.msg.onFileUploadComplete = _complete;\n      _utils.uploadFile.call(conn, me.msg);\n    } else\n    if (me.msg.type === \"img\") {//  添加img判断规则   wjy\n      _send(me.msg);\n    } else\n    {\n      me.msg.body = {\n        type: me.msg.type === \"chat\" ? \"txt\" : me.msg.type,\n        msg: me.msg.msg };\n\n      if (me.msg.type === \"cmd\") {\n        me.msg.body.action = me.msg.action;\n      } else\n      if (me.msg.type === \"loc\") {\n        me.msg.body.addr = me.msg.addr;\n        me.msg.body.lat = me.msg.lat;\n        me.msg.body.lng = me.msg.lng;\n      }\n      _send(me.msg);\n    }\n  };\n\n  exports._msg = _Message;\n  exports.message = Message;\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///24\n");

/***/ }),

/***/ 25:
/*!*********************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/sdk/queue.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("(function () {\n  function Array_h(length) {\n    this.array = length === undefined ? [] : new Array(length);\n  }\n\n  Array_h.prototype = {\n    /**\r\n                         * 返回数组长度\r\n                         *\r\n                         * @return {Number} length [数组长度]\r\n                         */\n    length: function length() {\n      return this.array.length;\n    },\n\n    at: function at(index) {\n      return this.array[index];\n    },\n\n    set: function set(index, obj) {\n      this.array[index] = obj;\n    },\n\n    /**\r\n        * 向数组的末尾添加一个或多个元素，并返回新的长度。\r\n        *\r\n        * @param  {*} obj [description]\r\n        * @return {Number} length [新数组的长度]\r\n        */\n    push: function push(obj) {\n      return this.array.push(obj);\n    },\n\n    /**\r\n        * 返回数组中选定的元素\r\n        *\r\n        * @param  {Number} start [开始索引值]\r\n        * @param  {Number} end [结束索引值]\r\n        * @return {Array} newArray  [新的数组]\r\n        */\n    slice: function slice(start, end) {\n      this.array = this.array.slice(start, end);\n      return this.array;\n    },\n\n    concat: function concat(array) {\n      this.array = this.array.concat(array);\n    },\n\n    remove: function remove(index, count) {\n      count = count === undefined ? 1 : count;\n      this.array.splice(index, count);\n    },\n\n    join: function join(separator) {\n      return this.array.join(separator);\n    },\n\n    clear: function clear() {\n      this.array.length = 0;\n    } };\n\n\n  /**\r\n          * 先进先出队列 (First Input First Output)\r\n          *\r\n          * 一种先进先出的数据缓存器\r\n          */\n  var Queue = function Queue() {\n    this._array_h = new Array_h();\n  };\n\n  Queue.prototype = {\n    _index: 0,\n\n    /**\r\n                * 排队\r\n                *\r\n                * @param  {Object} obj [description]\r\n                * @return {[type]}     [description]\r\n                */\n    push: function push(obj) {\n      this._array_h.push(obj);\n    },\n\n    /**\r\n        * 出队\r\n        *\r\n        * @return {Object} [description]\r\n        */\n    pop: function pop() {\n      var ret = null;\n      if (this._array_h.length()) {\n        ret = this._array_h.at(this._index);\n        if (++this._index * 2 >= this._array_h.length()) {\n          this._array_h.slice(this._index);\n          this._index = 0;\n        }\n      }\n      return ret;\n    },\n\n    /**\r\n        * 返回队列中头部(即最新添加的)的动态对象\r\n        *\r\n        * @return {Object} [description]\r\n        */\n    head: function head() {\n      var ret = null,len = this._array_h.length();\n      if (len) {\n        ret = this._array_h.at(len - 1);\n      }\n      return ret;\n    },\n\n    /**\r\n        * 返回队列中尾部(即最早添加的)的动态对象\r\n        *\r\n        * @return {Object} [description]\r\n        */\n    tail: function tail() {\n      var ret = null,len = this._array_h.length();\n      if (len) {\n        ret = this._array_h.at(this._index);\n      }\n      return ret;\n    },\n\n    /**\r\n        * 返回数据队列长度\r\n        *\r\n        * @return {Number} [description]\r\n        */\n    length: function length() {\n      return this._array_h.length() - this._index;\n    },\n\n    /**\r\n        * 队列是否为空\r\n        *\r\n        * @return {Boolean} [description]\r\n        */\n    empty: function empty() {\n      return this._array_h.length() === 0;\n    },\n\n    clear: function clear() {\n      this._array_h.clear();\n    } };\n\n\n  exports.Queue = Queue;\n\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),

/***/ 26:
/*!*****************************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/utils/WebIMConfig.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /**\r\n                                                                                                      * git do not control webim.config.js\r\n                                                                                                      * everyone should copy webim.config.js to webim.config.js\r\n                                                                                                      * and have their own configs.\r\n                                                                                                      * In this way , others won't be influenced by this config while git pull.\r\n                                                                                                      *\r\n                                                                                                      */\n\n// for react native\nvar location = {\n  protocol: \"https\" };\n\n\nvar config = {\n  /*\r\n                * XMPP server\r\n                */\n  xmppURL: \"wss://im-api.easemob.com/ws/\",\n  // xmppURL: '172.17.3.122:5280',\n  /*\r\n   * Backend REST API URL\r\n   */\n  // apiURL: (location.protocol === 'https:' ? 'https:' : 'http:') + '//a1.easemob.com',\n  // ios must be https!!! by lwz\n  apiURL: \"https://a1.easemob.com\",\n  // apiURL: (location.protocol === 'https:' ? 'https:' : 'http:') + '//172.17.3.155:8080',\n  /*\r\n   * Application AppKey\r\n   */\n  appkey: \"1113200310019312#doctors\",\n  /*\r\n                                       * Whether to use HTTPS      '1177161227178308#xcx'\r\n                                       * @parameter {Boolean} true or false\r\n                                       */\n  https: false,\n  /*\r\n                 * isMultiLoginSessions\r\n                 * true: A visitor can sign in to multiple webpages and receive messages at all the webpages.\r\n                 * false: A visitor can sign in to only one webpage and receive messages at the webpage.\r\n                 */\n  isMultiLoginSessions: false,\n  /**\r\n                                * Whether to use window.doQuery()\r\n                                * @parameter {Boolean} true or false\r\n                                */\n  isWindowSDK: false,\n  /**\r\n                       * isSandBox=true:  xmppURL: 'im-api.sandbox.easemob.com',  apiURL: '//a1.sdb.easemob.com',\r\n                       * isSandBox=false: xmppURL: 'im-api.easemob.com',          apiURL: '//a1.easemob.com',\r\n                       * @parameter {Boolean} true or false\r\n                       */\n  isSandBox: false,\n  /**\r\n                     * Whether to console.log in strophe.log()\r\n                     * @parameter {Boolean} true or false\r\n                     */\n  isDebug: false,\n  /**\r\n                   * will auto connect the xmpp server autoReconnectNumMax times in background when client is offline.\r\n                   * won't auto connect if autoReconnectNumMax=0.\r\n                   */\n  autoReconnectNumMax: 15,\n  /**\r\n                            * the interval secons between each atuo reconnectting.\r\n                            * works only if autoReconnectMaxNum >= 2.\r\n                            */\n  autoReconnectInterval: 2,\n  /**\r\n                             * webrtc supports WebKit and https only\r\n                             */\n  isWebRTC: false,\n  /*\r\n                    * Set to auto sign-in\r\n                    */\n  isAutoLogin: true };var _default =\n\n\nconfig;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vd2ViSU0vdXRpbHMvV2ViSU1Db25maWcuanMiXSwibmFtZXMiOlsibG9jYXRpb24iLCJwcm90b2NvbCIsImNvbmZpZyIsInhtcHBVUkwiLCJhcGlVUkwiLCJhcHBrZXkiLCJodHRwcyIsImlzTXVsdGlMb2dpblNlc3Npb25zIiwiaXNXaW5kb3dTREsiLCJpc1NhbmRCb3giLCJpc0RlYnVnIiwiYXV0b1JlY29ubmVjdE51bU1heCIsImF1dG9SZWNvbm5lY3RJbnRlcnZhbCIsImlzV2ViUlRDIiwiaXNBdXRvTG9naW4iXSwibWFwcGluZ3MiOiJ3RkFBQTs7Ozs7Ozs7QUFRQTtBQUNBLElBQUlBLFFBQVEsR0FBRztBQUNkQyxVQUFRLEVBQUUsT0FESSxFQUFmOzs7QUFJQSxJQUFJQyxNQUFNLEdBQUc7QUFDWjs7O0FBR0FDLFNBQU8sRUFBRSw4QkFKRztBQUtaO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQUMsUUFBTSxFQUFFLHdCQVhJO0FBWVo7QUFDQTs7O0FBR0FDLFFBQU0sRUFBRSwwQkFoQkk7QUFpQlo7Ozs7QUFJQUMsT0FBSyxFQUFFLEtBckJLO0FBc0JaOzs7OztBQUtBQyxzQkFBb0IsRUFBRSxLQTNCVjtBQTRCWjs7OztBQUlBQyxhQUFXLEVBQUUsS0FoQ0Q7QUFpQ1o7Ozs7O0FBS0FDLFdBQVMsRUFBRSxLQXRDQztBQXVDWjs7OztBQUlBQyxTQUFPLEVBQUUsS0EzQ0c7QUE0Q1o7Ozs7QUFJQUMscUJBQW1CLEVBQUUsRUFoRFQ7QUFpRFo7Ozs7QUFJQUMsdUJBQXFCLEVBQUUsQ0FyRFg7QUFzRFo7OztBQUdBQyxVQUFRLEVBQUUsS0F6REU7QUEwRFo7OztBQUdBQyxhQUFXLEVBQUUsSUE3REQsRUFBYixDOzs7QUFnRWVaLE0iLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogZ2l0IGRvIG5vdCBjb250cm9sIHdlYmltLmNvbmZpZy5qc1xyXG4gKiBldmVyeW9uZSBzaG91bGQgY29weSB3ZWJpbS5jb25maWcuanMgdG8gd2ViaW0uY29uZmlnLmpzXHJcbiAqIGFuZCBoYXZlIHRoZWlyIG93biBjb25maWdzLlxyXG4gKiBJbiB0aGlzIHdheSAsIG90aGVycyB3b24ndCBiZSBpbmZsdWVuY2VkIGJ5IHRoaXMgY29uZmlnIHdoaWxlIGdpdCBwdWxsLlxyXG4gKlxyXG4gKi9cclxuXHJcbi8vIGZvciByZWFjdCBuYXRpdmVcclxubGV0IGxvY2F0aW9uID0ge1xyXG5cdHByb3RvY29sOiBcImh0dHBzXCJcclxufTtcclxuXHJcbmxldCBjb25maWcgPSB7XHJcblx0LypcclxuXHQgKiBYTVBQIHNlcnZlclxyXG5cdCAqL1xyXG5cdHhtcHBVUkw6IFwid3NzOi8vaW0tYXBpLmVhc2Vtb2IuY29tL3dzL1wiLFxyXG5cdC8vIHhtcHBVUkw6ICcxNzIuMTcuMy4xMjI6NTI4MCcsXHJcblx0LypcclxuXHQgKiBCYWNrZW5kIFJFU1QgQVBJIFVSTFxyXG5cdCAqL1xyXG5cdC8vIGFwaVVSTDogKGxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JyA/ICdodHRwczonIDogJ2h0dHA6JykgKyAnLy9hMS5lYXNlbW9iLmNvbScsXHJcblx0Ly8gaW9zIG11c3QgYmUgaHR0cHMhISEgYnkgbHd6XHJcblx0YXBpVVJMOiBcImh0dHBzOi8vYTEuZWFzZW1vYi5jb21cIixcclxuXHQvLyBhcGlVUkw6IChsb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyAnaHR0cHM6JyA6ICdodHRwOicpICsgJy8vMTcyLjE3LjMuMTU1OjgwODAnLFxyXG5cdC8qXHJcblx0ICogQXBwbGljYXRpb24gQXBwS2V5XHJcblx0ICovXHJcblx0YXBwa2V5OiBcIjExMTMyMDAzMTAwMTkzMTIjZG9jdG9yc1wiLFxyXG5cdC8qXHJcblx0ICogV2hldGhlciB0byB1c2UgSFRUUFMgICAgICAnMTE3NzE2MTIyNzE3ODMwOCN4Y3gnXHJcblx0ICogQHBhcmFtZXRlciB7Qm9vbGVhbn0gdHJ1ZSBvciBmYWxzZVxyXG5cdCAqL1xyXG5cdGh0dHBzOiBmYWxzZSxcclxuXHQvKlxyXG5cdCAqIGlzTXVsdGlMb2dpblNlc3Npb25zXHJcblx0ICogdHJ1ZTogQSB2aXNpdG9yIGNhbiBzaWduIGluIHRvIG11bHRpcGxlIHdlYnBhZ2VzIGFuZCByZWNlaXZlIG1lc3NhZ2VzIGF0IGFsbCB0aGUgd2VicGFnZXMuXHJcblx0ICogZmFsc2U6IEEgdmlzaXRvciBjYW4gc2lnbiBpbiB0byBvbmx5IG9uZSB3ZWJwYWdlIGFuZCByZWNlaXZlIG1lc3NhZ2VzIGF0IHRoZSB3ZWJwYWdlLlxyXG5cdCAqL1xyXG5cdGlzTXVsdGlMb2dpblNlc3Npb25zOiBmYWxzZSxcclxuXHQvKipcclxuXHQgKiBXaGV0aGVyIHRvIHVzZSB3aW5kb3cuZG9RdWVyeSgpXHJcblx0ICogQHBhcmFtZXRlciB7Qm9vbGVhbn0gdHJ1ZSBvciBmYWxzZVxyXG5cdCAqL1xyXG5cdGlzV2luZG93U0RLOiBmYWxzZSxcclxuXHQvKipcclxuXHQgKiBpc1NhbmRCb3g9dHJ1ZTogIHhtcHBVUkw6ICdpbS1hcGkuc2FuZGJveC5lYXNlbW9iLmNvbScsICBhcGlVUkw6ICcvL2ExLnNkYi5lYXNlbW9iLmNvbScsXHJcblx0ICogaXNTYW5kQm94PWZhbHNlOiB4bXBwVVJMOiAnaW0tYXBpLmVhc2Vtb2IuY29tJywgICAgICAgICAgYXBpVVJMOiAnLy9hMS5lYXNlbW9iLmNvbScsXHJcblx0ICogQHBhcmFtZXRlciB7Qm9vbGVhbn0gdHJ1ZSBvciBmYWxzZVxyXG5cdCAqL1xyXG5cdGlzU2FuZEJveDogZmFsc2UsXHJcblx0LyoqXHJcblx0ICogV2hldGhlciB0byBjb25zb2xlLmxvZyBpbiBzdHJvcGhlLmxvZygpXHJcblx0ICogQHBhcmFtZXRlciB7Qm9vbGVhbn0gdHJ1ZSBvciBmYWxzZVxyXG5cdCAqL1xyXG5cdGlzRGVidWc6IGZhbHNlLFxyXG5cdC8qKlxyXG5cdCAqIHdpbGwgYXV0byBjb25uZWN0IHRoZSB4bXBwIHNlcnZlciBhdXRvUmVjb25uZWN0TnVtTWF4IHRpbWVzIGluIGJhY2tncm91bmQgd2hlbiBjbGllbnQgaXMgb2ZmbGluZS5cclxuXHQgKiB3b24ndCBhdXRvIGNvbm5lY3QgaWYgYXV0b1JlY29ubmVjdE51bU1heD0wLlxyXG5cdCAqL1xyXG5cdGF1dG9SZWNvbm5lY3ROdW1NYXg6IDE1LFxyXG5cdC8qKlxyXG5cdCAqIHRoZSBpbnRlcnZhbCBzZWNvbnMgYmV0d2VlbiBlYWNoIGF0dW8gcmVjb25uZWN0dGluZy5cclxuXHQgKiB3b3JrcyBvbmx5IGlmIGF1dG9SZWNvbm5lY3RNYXhOdW0gPj0gMi5cclxuXHQgKi9cclxuXHRhdXRvUmVjb25uZWN0SW50ZXJ2YWw6IDIsXHJcblx0LyoqXHJcblx0ICogd2VicnRjIHN1cHBvcnRzIFdlYktpdCBhbmQgaHR0cHMgb25seVxyXG5cdCAqL1xyXG5cdGlzV2ViUlRDOiBmYWxzZSxcclxuXHQvKlxyXG5cdCAqIFNldCB0byBhdXRvIHNpZ24taW5cclxuXHQgKi9cclxuXHRpc0F1dG9Mb2dpbjogdHJ1ZVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29uZmlnO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26\n");

/***/ }),

/***/ 27:
/*!*************************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/utils/msgtype.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("module.exports = {\n  IMAGE: \"img\",\n  TEXT: \"txt\",\n  LOCATION: \"location\",\n  VIDEO: \"video\",\n  AUDIO: \"audio\",\n  EMOJI: \"emoji\",\n  FILE: \"chat\",\n  //\n  chatType: {\n    SINGLE_CHAT: \"singleChat\",\n    CHAT_ROOM: \"chatRoom\" } };//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vd2ViSU0vdXRpbHMvbXNndHlwZS5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiSU1BR0UiLCJURVhUIiwiTE9DQVRJT04iLCJWSURFTyIsIkFVRElPIiwiRU1PSkkiLCJGSUxFIiwiY2hhdFR5cGUiLCJTSU5HTEVfQ0hBVCIsIkNIQVRfUk9PTSJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNoQkMsT0FBSyxFQUFFLEtBRFM7QUFFaEJDLE1BQUksRUFBRSxLQUZVO0FBR2hCQyxVQUFRLEVBQUUsVUFITTtBQUloQkMsT0FBSyxFQUFFLE9BSlM7QUFLaEJDLE9BQUssRUFBRSxPQUxTO0FBTWhCQyxPQUFLLEVBQUUsT0FOUztBQU9oQkMsTUFBSSxFQUFFLE1BUFU7QUFRaEI7QUFDQUMsVUFBUSxFQUFFO0FBQ1RDLGVBQVcsRUFBRSxZQURKO0FBRVRDLGFBQVMsRUFBRSxVQUZGLEVBVE0sRUFBakIiLCJmaWxlIjoiMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcblx0SU1BR0U6IFwiaW1nXCIsXG5cdFRFWFQ6IFwidHh0XCIsXG5cdExPQ0FUSU9OOiBcImxvY2F0aW9uXCIsXG5cdFZJREVPOiBcInZpZGVvXCIsXG5cdEFVRElPOiBcImF1ZGlvXCIsXG5cdEVNT0pJOiBcImVtb2ppXCIsXG5cdEZJTEU6IFwiY2hhdFwiLFxuXHQvL1xuXHRjaGF0VHlwZToge1xuXHRcdFNJTkdMRV9DSEFUOiBcInNpbmdsZUNoYXRcIixcblx0XHRDSEFUX1JPT006IFwiY2hhdFJvb21cIixcblx0fSxcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///27\n");

/***/ }),

/***/ 28:
/*!***************************************************!*\
  !*** D:/张总新版app/maiYa01/webIM/utils/broadcast.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var Dispatcher = __webpack_require__(/*! ./Dispatcher */ 18);\nmodule.exports = new Dispatcher();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vd2ViSU0vdXRpbHMvYnJvYWRjYXN0LmpzIl0sIm5hbWVzIjpbIkRpc3BhdGNoZXIiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsVUFBVSxHQUFHQyxtQkFBTyxDQUFDLHNCQUFELENBQXhCO0FBQ0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixJQUFJSCxVQUFKLEVBQWpCIiwiZmlsZSI6IjI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIERpc3BhdGNoZXIgPSByZXF1aXJlKFwiLi9EaXNwYXRjaGVyXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBuZXcgRGlzcGF0Y2hlcigpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n");

/***/ }),

/***/ 3:
/*!******************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/mp-vue/dist/mp.runtime.esm.js ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(global) {/*!\n * Vue.js v2.6.11\n * (c) 2014-2020 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"development\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"development\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (true) {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    {\n      if(vm.$scope && vm.$scope.is){\n        return vm.$scope.is\n      }\n    }\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var options = typeof vm === 'function' && vm.cid != null\n      ? vm.options\n      : vm._isVue\n        ? vm.$options || vm.constructor.options\n        : vm;\n    var name = options.name || options._componentTag;\n    var file = options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  // fixed by xxxxxx (nvue vuex)\n  /* eslint-disable no-undef */\n  if(typeof SharedObject !== 'undefined'){\n    this.id = SharedObject.uid++;\n  } else {\n    this.id = uid++;\n  }\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.SharedObject.target) {\n    Dep.SharedObject.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if ( true && !config.async) {\n    // subs aren't sorted in scheduler if not running async\n    // we need to sort them now to make sure they fire in correct\n    // order\n    subs.sort(function (a, b) { return a.id - b.id; });\n  }\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\n// fixed by xxxxxx (nvue shared vuex)\n/* eslint-disable no-undef */\nDep.SharedObject = typeof SharedObject !== 'undefined' ? SharedObject : {};\nDep.SharedObject.target = null;\nDep.SharedObject.targetStack = [];\n\nfunction pushTarget (target) {\n  Dep.SharedObject.targetStack.push(target);\n  Dep.SharedObject.target = target;\n}\n\nfunction popTarget () {\n  Dep.SharedObject.targetStack.pop();\n  Dep.SharedObject.target = Dep.SharedObject.targetStack[Dep.SharedObject.targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      {// fixed by xxxxxx 微信小程序使用 plugins 之后，数组方法被直接挂载到了数组对象上，需要执行 copyAugment 逻辑\n        if(value.push !== value.__proto__.push){\n          copyAugment(value, arrayMethods, arrayKeys);\n        } else {\n          protoAugment(value, arrayMethods);\n        }\n      }\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.SharedObject.target) { // fixed by xxxxxx\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if ( true && customSetter) {\n        customSetter();\n      }\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot set reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if ( true &&\n    (isUndef(target) || isPrimitive(target))\n  ) {\n    warn((\"Cannot delete reactive property on undefined, null, or primitive value: \" + ((target))));\n  }\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     true && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (true) {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       true && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     true && assertObjectType(key, childVal, vm);\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (true) {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"development\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (true) {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"props\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(props)) + \".\",\n      vm\n    );\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (true) {\n    warn(\n      \"Invalid value for option \\\"inject\\\": expected an Array or an Object, \" +\n      \"but got \" + (toRawType(inject)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (true) {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if ( true && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    true\n  ) {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if ( true && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (true) {\n    warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n  }\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Technically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (true) {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      'referenced during render. Make sure that this property is reactive, ' +\n      'either in the data option, or for class-based components, by ' +\n      'initializing the property. ' +\n      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',\n      target\n    );\n  };\n\n  var warnReservedPrefix = function (target, key) {\n    warn(\n      \"Property \\\"\" + key + \"\\\" must be accessed with \\\"$data.\" + key + \"\\\" because \" +\n      'properties starting with \"$\" or \"_\" are not proxied in the Vue instance to ' +\n      'prevent conflicts with Vue internals. ' +\n      'See: https://vuejs.org/v2/api/#data',\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' && isNative(Proxy);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) ||\n        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));\n      if (!has && !isAllowed) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        if (key in target.$data) { warnReservedPrefix(target, key); }\n        else { warnNonPresent(target, key); }\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\nvar mark;\nvar measure;\n\nif (true) {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      // perf.clearMeasures(name)\n    };\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       true && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\n// fixed by xxxxxx (mp properties)\r\nfunction extractPropertiesFromVNodeData(data, Ctor, res, context) {\r\n  var propOptions = Ctor.options.mpOptions && Ctor.options.mpOptions.properties;\r\n  if (isUndef(propOptions)) {\r\n    return res\r\n  }\n  var externalClasses = Ctor.options.mpOptions.externalClasses || [];\r\n  var attrs = data.attrs;\n  var props = data.props;\r\n  if (isDef(attrs) || isDef(props)) {\r\n    for (var key in propOptions) {\r\n      var altKey = hyphenate(key);\n      var result = checkProp(res, props, key, altKey, true) ||\n          checkProp(res, attrs, key, altKey, false);\n      // externalClass\n      if (\n        result &&\n        res[key] &&\n        externalClasses.indexOf(altKey) !== -1 &&\n        context[camelize(res[key])]\n      ) {\n        // 赋值 externalClass 真正的值(模板里 externalClass 的值可能是字符串)\n        res[key] = context[camelize(res[key])];\n      }\r\n    }\r\n  }\r\n  return res\r\n}\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag,\n  context// fixed by xxxxxx\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    // fixed by xxxxxx\n    return extractPropertiesFromVNodeData(data, Ctor, {}, context)\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (true) {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  // fixed by xxxxxx\n  return extractPropertiesFromVNodeData(data, Ctor, res, context)\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (true) {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {}\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (true) {\n          warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n        }\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      // fixed by xxxxxx 临时 hack 掉 uni-app 中的异步 name slot page\n      if(child.asyncMeta && child.asyncMeta.data && child.asyncMeta.data.slot === 'page'){\n        (slots['page'] || (slots['page'] = [])).push(child);\n      }else{\n        (slots.default || (slots.default = [])).push(child);\n      }\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i, i, i); // fixed by xxxxxx\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i, i, i); // fixed by xxxxxx\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length, i++, i)); // fixed by xxxxxx\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i, i); // fixed by xxxxxx\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if ( true && !isObject(bindObject)) {\n        warn(\n          'slot v-bind without argument expects an Object',\n          this\n        );\n      }\n      props = extend(extend({}, bindObject), props);\n    }\n    // fixed by xxxxxx app-plus scopedSlot\n    nodes = scopedSlotFn(props, this, props._i) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       true && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       true && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if ( true && key !== '' && key !== null) {\n      // null is a special value for explicitly removing a binding\n      warn(\n        (\"Invalid value for dynamic directive argument (expected string or null): \" + key),\n        this\n      );\n    }\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (true) {\n    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;\n  }\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      callHook(componentInstance, 'onServiceCreated');\n      callHook(componentInstance, 'onServiceAttached');\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (true) {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag, context); // fixed by xxxxxx\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     true && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if ( true &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    {\n      warn(\n        'Avoid using non-primitive value as key, ' +\n        'use string/number value instead.',\n        context\n      );\n    }\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if ( true && isDef(data) && isDef(data.nativeOn)) {\n        warn(\n          (\"The .native modifier for v-on is only valid on components but it was used on <\" + tag + \">.\"),\n          context\n        );\n      }\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (true) {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {}\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if ( true && vm.$options.renderError) {\n        try {\n          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);\n        } catch (e) {\n          handleError(e, vm, \"renderError\");\n          vnode = vm._vnode;\n        }\n      } else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if ( true && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       true && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 true\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : undefined\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (true) {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (true) {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n  \n  // fixed by xxxxxx update properties(mp runtime)\n  vm._$updateProperties && vm._$updateProperties(vm);\n  \n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (true) {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (true) {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if ( true && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if ( true && !config.async) {\n        flushSchedulerQueue();\n        return\n      }\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  true\n    ? expOrFn.toString()\n    : undefined;\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       true && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (true) {\n      var hyphenatedKey = hyphenate(key);\n      if (isReservedAttribute(hyphenatedKey) ||\n          config.isReservedAttr(hyphenatedKey)) {\n        warn(\n          (\"\\\"\" + hyphenatedKey + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (!isRoot && !isUpdatingChildComponent) {\n          {\n            if(vm.mpHost === 'mp-baidu'){//百度 observer 在 setData callback 之后触发，直接忽略该 warn\n                return\n            }\n            //fixed by xxxxxx __next_tick_pending,uni://form-field 时不告警\n            if(\n                key === 'value' && \n                Array.isArray(vm.$options.behaviors) &&\n                vm.$options.behaviors.indexOf('uni://form-field') !== -1\n              ){\n              return\n            }\n            if(vm._getFormData){\n              return\n            }\n            var $parent = vm.$parent;\n            while($parent){\n              if($parent.__next_tick_pending){\n                return  \n              }\n              $parent = $parent.$parent;\n            }\n          }\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {}\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     true && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (true) {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n       true && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if ( true && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (true) {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if ( true &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.SharedObject.target) {// fixed by xxxxxx\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (true) {\n      if (typeof methods[key] !== 'function') {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has type \\\"\" + (typeof methods[key]) + \"\\\" in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (true) {\n    dataDef.set = function () {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      startTag = \"vue-perf-start:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (true) {\n      initProxy(vm);\n    } else {}\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    vm.mpHost !== 'mp-toutiao' && initInjections(vm); // resolve injections before data/props  \n    initState(vm);\n    vm.mpHost !== 'mp-toutiao' && initProvide(vm); // resolve provide after data/props\n    vm.mpHost !== 'mp-toutiao' && callHook(vm, 'created');      \n\n    /* istanbul ignore if */\n    if ( true && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure((\"vue \" + (vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if ( true &&\n    !(this instanceof Vue)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if ( true && name) {\n      validateComponentName(name);\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if ( true && type === 'component') {\n          validateComponentName(id);\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (true) {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.11';\n\n/**\n * https://raw.githubusercontent.com/Tencent/westore/master/packages/westore/utils/diff.js\n */\nvar ARRAYTYPE = '[object Array]';\nvar OBJECTTYPE = '[object Object]';\n// const FUNCTIONTYPE = '[object Function]'\n\nfunction diff(current, pre) {\n    var result = {};\n    syncKeys(current, pre);\n    _diff(current, pre, '', result);\n    return result\n}\n\nfunction syncKeys(current, pre) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE && rootPreType == OBJECTTYPE) {\n        if(Object.keys(current).length >= Object.keys(pre).length){\n            for (var key in pre) {\n                var currentValue = current[key];\n                if (currentValue === undefined) {\n                    current[key] = null;\n                } else {\n                    syncKeys(currentValue, pre[key]);\n                }\n            }\n        }\n    } else if (rootCurrentType == ARRAYTYPE && rootPreType == ARRAYTYPE) {\n        if (current.length >= pre.length) {\n            pre.forEach(function (item, index) {\n                syncKeys(current[index], item);\n            });\n        }\n    }\n}\n\nfunction _diff(current, pre, path, result) {\n    if (current === pre) { return }\n    var rootCurrentType = type(current);\n    var rootPreType = type(pre);\n    if (rootCurrentType == OBJECTTYPE) {\n        if (rootPreType != OBJECTTYPE || Object.keys(current).length < Object.keys(pre).length) {\n            setResult(result, path, current);\n        } else {\n            var loop = function ( key ) {\n                var currentValue = current[key];\n                var preValue = pre[key];\n                var currentType = type(currentValue);\n                var preType = type(preValue);\n                if (currentType != ARRAYTYPE && currentType != OBJECTTYPE) {\n                    if (currentValue != pre[key]) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    }\n                } else if (currentType == ARRAYTYPE) {\n                    if (preType != ARRAYTYPE) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        if (currentValue.length < preValue.length) {\n                            setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                        } else {\n                            currentValue.forEach(function (item, index) {\n                                _diff(item, preValue[index], (path == '' ? '' : path + \".\") + key + '[' + index + ']', result);\n                            });\n                        }\n                    }\n                } else if (currentType == OBJECTTYPE) {\n                    if (preType != OBJECTTYPE || Object.keys(currentValue).length < Object.keys(preValue).length) {\n                        setResult(result, (path == '' ? '' : path + \".\") + key, currentValue);\n                    } else {\n                        for (var subKey in currentValue) {\n                            _diff(currentValue[subKey], preValue[subKey], (path == '' ? '' : path + \".\") + key + '.' + subKey, result);\n                        }\n                    }\n                }\n            };\n\n            for (var key in current) loop( key );\n        }\n    } else if (rootCurrentType == ARRAYTYPE) {\n        if (rootPreType != ARRAYTYPE) {\n            setResult(result, path, current);\n        } else {\n            if (current.length < pre.length) {\n                setResult(result, path, current);\n            } else {\n                current.forEach(function (item, index) {\n                    _diff(item, pre[index], path + '[' + index + ']', result);\n                });\n            }\n        }\n    } else {\n        setResult(result, path, current);\n    }\n}\n\nfunction setResult(result, k, v) {\n    // if (type(v) != FUNCTIONTYPE) {\n        result[k] = v;\n    // }\n}\n\nfunction type(obj) {\n    return Object.prototype.toString.call(obj)\n}\n\n/*  */\r\n\r\nfunction flushCallbacks$1(vm) {\r\n    if (vm.__next_tick_callbacks && vm.__next_tick_callbacks.length) {\r\n        if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n            var mpInstance = vm.$scope;\r\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\r\n                ']:flushCallbacks[' + vm.__next_tick_callbacks.length + ']');\r\n        }\r\n        var copies = vm.__next_tick_callbacks.slice(0);\r\n        vm.__next_tick_callbacks.length = 0;\r\n        for (var i = 0; i < copies.length; i++) {\r\n            copies[i]();\r\n        }\r\n    }\r\n}\r\n\r\nfunction hasRenderWatcher(vm) {\r\n    return queue.find(function (watcher) { return vm._watcher === watcher; })\r\n}\r\n\r\nfunction nextTick$1(vm, cb) {\r\n    //1.nextTick 之前 已 setData 且 setData 还未回调完成\r\n    //2.nextTick 之前存在 render watcher\r\n    if (!vm.__next_tick_pending && !hasRenderWatcher(vm)) {\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + vm._uid +\n                ']:nextVueTick');\n        }\r\n        return nextTick(cb, vm)\r\n    }else{\n        if(Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG){\n            var mpInstance$1 = vm.$scope;\n            console.log('[' + (+new Date) + '][' + (mpInstance$1.is || mpInstance$1.route) + '][' + vm._uid +\n                ']:nextMPTick');\n        }\n    }\r\n    var _resolve;\r\n    if (!vm.__next_tick_callbacks) {\r\n        vm.__next_tick_callbacks = [];\r\n    }\r\n    vm.__next_tick_callbacks.push(function () {\r\n        if (cb) {\r\n            try {\r\n                cb.call(vm);\r\n            } catch (e) {\r\n                handleError(e, vm, 'nextTick');\r\n            }\r\n        } else if (_resolve) {\r\n            _resolve(vm);\r\n        }\r\n    });\r\n    // $flow-disable-line\r\n    if (!cb && typeof Promise !== 'undefined') {\r\n        return new Promise(function (resolve) {\r\n            _resolve = resolve;\r\n        })\r\n    }\r\n}\n\n/*  */\r\n\r\nfunction cloneWithData(vm) {\r\n  // 确保当前 vm 所有数据被同步\r\n  var ret = Object.create(null);\r\n  var dataKeys = [].concat(\r\n    Object.keys(vm._data || {}),\r\n    Object.keys(vm._computedWatchers || {}));\r\n\r\n  dataKeys.reduce(function(ret, key) {\r\n    ret[key] = vm[key];\r\n    return ret\r\n  }, ret);\r\n  //TODO 需要把无用数据处理掉，比如 list=>l0 则 list 需要移除，否则多传输一份数据\r\n  Object.assign(ret, vm.$mp.data || {});\r\n  if (\r\n    Array.isArray(vm.$options.behaviors) &&\r\n    vm.$options.behaviors.indexOf('uni://form-field') !== -1\r\n  ) { //form-field\r\n    ret['name'] = vm.name;\r\n    ret['value'] = vm.value;\r\n  }\r\n\r\n  return JSON.parse(JSON.stringify(ret))\r\n}\r\n\r\nvar patch = function(oldVnode, vnode) {\n  var this$1 = this;\n\r\n  if (vnode === null) { //destroy\r\n    return\r\n  }\r\n  if (this.mpType === 'page' || this.mpType === 'component') {\r\n    var mpInstance = this.$scope;\r\n    var data = Object.create(null);\r\n    try {\r\n      data = cloneWithData(this);\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n    data.__webviewId__ = mpInstance.data.__webviewId__;\r\n    var mpData = Object.create(null);\r\n    Object.keys(data).forEach(function (key) { //仅同步 data 中有的数据\r\n      mpData[key] = mpInstance.data[key];\r\n    });\r\n    var diffData = this.$shouldDiffData === false ? data : diff(data, mpData);\r\n    if (Object.keys(diffData).length) {\r\n      if (Object({\"NODE_ENV\":\"development\",\"VUE_APP_PLATFORM\":\"app-plus\",\"BASE_URL\":\"/\"}).VUE_APP_DEBUG) {\r\n        console.log('[' + (+new Date) + '][' + (mpInstance.is || mpInstance.route) + '][' + this._uid +\r\n          ']差量更新',\r\n          JSON.stringify(diffData));\r\n      }\r\n      this.__next_tick_pending = true;\r\n      mpInstance.setData(diffData, function () {\r\n        this$1.__next_tick_pending = false;\r\n        flushCallbacks$1(this$1);\r\n      });\r\n    } else {\r\n      flushCallbacks$1(this);\r\n    }\r\n  }\r\n};\n\n/*  */\n\nfunction createEmptyRender() {\n\n}\n\nfunction mountComponent$1(\n  vm,\n  el,\n  hydrating\n) {\n  if (!vm.mpType) {//main.js 中的 new Vue\n    return vm\n  }\n  if (vm.mpType === 'app') {\n    vm.$options.render = createEmptyRender;\n  }\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyRender;\n    if (true) {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  \n  vm.mpHost !== 'mp-toutiao' && callHook(vm, 'beforeMount');\n\n  var updateComponent = function () {\n    vm._update(vm._render(), hydrating);\n  };\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before() {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n  return vm\n}\n\n/*  */\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/*  */\r\n\r\nvar MP_METHODS = ['createSelectorQuery', 'createIntersectionObserver', 'selectAllComponents', 'selectComponent'];\r\n\r\nfunction getTarget(obj, path) {\r\n  var parts = path.split('.');\r\n  var key = parts[0];\r\n  if (key.indexOf('__$n') === 0) { //number index\r\n    key = parseInt(key.replace('__$n', ''));\r\n  }\r\n  if (parts.length === 1) {\r\n    return obj[key]\r\n  }\r\n  return getTarget(obj[key], parts.slice(1).join('.'))\r\n}\r\n\r\nfunction internalMixin(Vue) {\r\n\r\n  Vue.config.errorHandler = function(err) {\n    console.error(err);\n    /* eslint-disable no-undef */\r\n    var app = getApp();\r\n    if (app && app.onError) {\r\n      app.onError(err);\r\n    }\r\n  };\r\n\r\n  var oldEmit = Vue.prototype.$emit;\r\n\r\n  Vue.prototype.$emit = function(event) {\r\n    if (this.$scope && event) {\r\n      this.$scope['triggerEvent'](event, {\r\n        __args__: toArray(arguments, 1)\r\n      });\r\n    }\r\n    return oldEmit.apply(this, arguments)\r\n  };\r\n\r\n  Vue.prototype.$nextTick = function(fn) {\r\n    return nextTick$1(this, fn)\r\n  };\r\n\r\n  MP_METHODS.forEach(function (method) {\r\n    Vue.prototype[method] = function(args) {\r\n      if (this.$scope && this.$scope[method]) {\r\n        return this.$scope[method](args)\r\n      }\r\n      // mp-alipay\r\n      if (typeof my === 'undefined') {\r\n        return\r\n      }\r\n      if (method === 'createSelectorQuery') {\r\n        /* eslint-disable no-undef */\r\n        return my.createSelectorQuery(args)\r\n      } else if (method === 'createIntersectionObserver') {\r\n        /* eslint-disable no-undef */\r\n        return my.createIntersectionObserver(args)\r\n      }\r\n      // TODO mp-alipay 暂不支持 selectAllComponents,selectComponent\r\n    };\r\n  });\r\n\r\n  Vue.prototype.__init_provide = initProvide;\r\n\r\n  Vue.prototype.__init_injections = initInjections;\r\n\r\n  Vue.prototype.__call_hook = function(hook, args) {\r\n    var vm = this;\r\n    // #7573 disable dep collection when invoking lifecycle hooks\r\n    pushTarget();\r\n    var handlers = vm.$options[hook];\r\n    var info = hook + \" hook\";\r\n    var ret;\r\n    if (handlers) {\r\n      for (var i = 0, j = handlers.length; i < j; i++) {\r\n        ret = invokeWithErrorHandling(handlers[i], vm, args ? [args] : null, vm, info);\r\n      }\r\n    }\r\n    if (vm._hasHookEvent) {\r\n      vm.$emit('hook:' + hook, args);\r\n    }\r\n    popTarget();\r\n    return ret\r\n  };\r\n\r\n  Vue.prototype.__set_model = function(target, key, value, modifiers) {\r\n    if (Array.isArray(modifiers)) {\r\n      if (modifiers.indexOf('trim') !== -1) {\r\n        value = value.trim();\r\n      }\r\n      if (modifiers.indexOf('number') !== -1) {\r\n        value = this._n(value);\r\n      }\r\n    }\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__set_sync = function(target, key, value) {\r\n    if (!target) {\r\n      target = this;\r\n    }\r\n    target[key] = value;\r\n  };\r\n\r\n  Vue.prototype.__get_orig = function(item) {\r\n    if (isPlainObject(item)) {\r\n      return item['$orig'] || item\r\n    }\r\n    return item\r\n  };\r\n\r\n  Vue.prototype.__get_value = function(dataPath, target) {\r\n    return getTarget(target || this, dataPath)\r\n  };\r\n\r\n\r\n  Vue.prototype.__get_class = function(dynamicClass, staticClass) {\r\n    return renderClass(staticClass, dynamicClass)\r\n  };\r\n\r\n  Vue.prototype.__get_style = function(dynamicStyle, staticStyle) {\r\n    if (!dynamicStyle && !staticStyle) {\r\n      return ''\r\n    }\r\n    var dynamicStyleObj = normalizeStyleBinding(dynamicStyle);\r\n    var styleObj = staticStyle ? extend(staticStyle, dynamicStyleObj) : dynamicStyleObj;\r\n    return Object.keys(styleObj).map(function (name) { return ((hyphenate(name)) + \":\" + (styleObj[name])); }).join(';')\r\n  };\r\n\r\n  Vue.prototype.__map = function(val, iteratee) {\r\n    //TODO 暂不考虑 string,number\r\n    var ret, i, l, keys, key;\r\n    if (Array.isArray(val)) {\r\n      ret = new Array(val.length);\r\n      for (i = 0, l = val.length; i < l; i++) {\r\n        ret[i] = iteratee(val[i], i);\r\n      }\r\n      return ret\r\n    } else if (isObject(val)) {\r\n      keys = Object.keys(val);\r\n      ret = Object.create(null);\r\n      for (i = 0, l = keys.length; i < l; i++) {\r\n        key = keys[i];\r\n        ret[key] = iteratee(val[key], key, i);\r\n      }\r\n      return ret\r\n    }\r\n    return []\r\n  };\r\n\r\n}\n\n/*  */\r\n\r\nvar LIFECYCLE_HOOKS$1 = [\r\n    //App\r\n    'onLaunch',\r\n    'onShow',\r\n    'onHide',\r\n    'onUniNViewMessage',\n    'onError',\r\n    //Page\r\n    'onLoad',\r\n    // 'onShow',\r\n    'onReady',\r\n    // 'onHide',\r\n    'onUnload',\r\n    'onPullDownRefresh',\r\n    'onReachBottom',\r\n    'onTabItemTap',\r\n    'onShareAppMessage',\n    'onResize',\r\n    'onPageScroll',\r\n    'onNavigationBarButtonTap',\r\n    'onBackPress',\r\n    'onNavigationBarSearchInputChanged',\r\n    'onNavigationBarSearchInputConfirmed',\r\n    'onNavigationBarSearchInputClicked',\r\n    //Component\r\n    // 'onReady', // 兼容旧版本，应该移除该事件\r\n    'onPageShow',\r\n    'onPageHide',\r\n    'onPageResize'\r\n];\r\nfunction lifecycleMixin$1(Vue) {\r\n\r\n    //fixed vue-class-component\r\n    var oldExtend = Vue.extend;\r\n    Vue.extend = function(extendOptions) {\r\n        extendOptions = extendOptions || {};\r\n\r\n        var methods = extendOptions.methods;\r\n        if (methods) {\r\n            Object.keys(methods).forEach(function (methodName) {\r\n                if (LIFECYCLE_HOOKS$1.indexOf(methodName)!==-1) {\r\n                    extendOptions[methodName] = methods[methodName];\r\n                    delete methods[methodName];\r\n                }\r\n            });\r\n        }\r\n\r\n        return oldExtend.call(this, extendOptions)\r\n    };\r\n\r\n    var strategies = Vue.config.optionMergeStrategies;\r\n    var mergeHook = strategies.created;\r\n    LIFECYCLE_HOOKS$1.forEach(function (hook) {\r\n        strategies[hook] = mergeHook;\r\n    });\r\n\r\n    Vue.prototype.__lifecycle_hooks__ = LIFECYCLE_HOOKS$1;\r\n}\n\n/*  */\r\n\n// install platform patch function\r\nVue.prototype.__patch__ = patch;\r\n\r\n// public mount method\r\nVue.prototype.$mount = function(\r\n    el ,\r\n    hydrating \r\n) {\r\n    return mountComponent$1(this, el, hydrating)\r\n};\r\n\r\nlifecycleMixin$1(Vue);\r\ninternalMixin(Vue);\n\n/*  */\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../webpack/buildin/global.js */ 2)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsYUFBb0I7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBLFlBQVksYUFBb0I7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHFCQUFxQjtBQUN4QyxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssR0FBRztBQUNSO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEM7O0FBRUEsSUFBSSxJQUFxQztBQUN6QztBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDLHVDQUF1Qyx3QkFBd0IsRUFBRTtBQUNqRSwwQkFBMEI7O0FBRTFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixZQUFZO0FBQ3BDLGtCQUFrQixZQUFZO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBLHdDQUF3QyxFQUFFO0FBQzFDO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTSxLQUFxQztBQUMzQztBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isb0JBQW9CLEVBQUU7QUFDckQ7QUFDQSxrQ0FBa0MsT0FBTztBQUN6QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEIsU0FBUyxxQkFBcUI7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtB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QSxNQUFNLElBQXFDO0FBQzNDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsT0FBTztBQUNyRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQSxNQUFNLEtBQXFDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksSUFFUTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLEtBQXFDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNB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QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxLQUFxQztBQUMzQztBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLElBQXFDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIscUJBQXFCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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O0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUSxJQUFxQztBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0VBQXNFOztBQUV0RTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssdUZBQXVGO0FBQzVGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMENBQTBDO0FBQzFDLGlCQUFpQix5QkFBeUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUcsK0JBQStCO0FBQ2xDLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVEsSUFBcUM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsT0FBTztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxJQUFxQztBQUMzQztBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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QUN6RDtBQUNBLE1BQU0sU0FBRTtBQUNSO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxNQUFNLEtBQXFDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVEsS0FBcUM7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxJQUFxQztBQUM3QztBQUNBLEtBQUssTUFBTSxFQUVOO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFEO0FBQ3JEO0FBQ0Esa0RBQWtEO0FBQ2xELDBEOztBQUVBO0FBQ0EsUUFBUSxLQUFxQztBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZUFBZTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsTUFBTSxLQUFxQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUSxLQUFxQztBQUM3QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7O0FBRWpDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsWUFBWSxLQUFxQztBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOzs7O0FBSUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0EsMENBQTBDLDJCQUEyQixFQUFFO0FBQ3ZFLEtBQUs7QUFDTDtBQUNBLDBDQUEwQyw0QkFBNEIsRUFBRTtBQUN4RSxLQUFLO0FBQ0wsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLGVBQWU7QUFDOUMsTUFBTSxJQUFxQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7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QXNELHFEQUFxRCxFQUFFLFNBQVM7QUFDdEg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxPQUFPO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0Esa0NBQWtDLE9BQU87QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRWUsa0VBQUcsRUFBQyIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBWdWUuanMgdjIuNi4xMVxuICogKGMpIDIwMTQtMjAyMCBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5pZiAoaW5Ccm93c2VyKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgfVxuICAgIH0pKTsgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzI4NVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0LXBhc3NpdmUnLCBudWxsLCBvcHRzKTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxuLy8gdGhpcyBuZWVkcyB0byBiZSBsYXp5LWV2YWxlZCBiZWNhdXNlIHZ1ZSBtYXkgYmUgcmVxdWlyZWQgYmVmb3JlXG4vLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxudmFyIF9pc1NlcnZlcjtcbnZhciBpc1NlcnZlclJlbmRlcmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbnZhciBkZXZ0b29scyA9IGluQnJvd3NlciAmJiB3aW5kb3cuX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoQ3Rvci50b1N0cmluZygpKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU3ltYm9sKSAmJlxuICB0eXBlb2YgUmVmbGVjdCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUmVmbGVjdC5vd25LZXlzKTtcblxudmFyIF9TZXQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi8gLy8gJGZsb3ctZGlzYWJsZS1saW5lXG5pZiAodHlwZW9mIFNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoU2V0KSkge1xuICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgX1NldCA9IFNldDtcbn0gZWxzZSB7XG4gIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgX1NldCA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNldCAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICAgIFNldC5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChrZXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoa2V5KSB7XG4gICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfTtcblxuICAgIHJldHVybiBTZXQ7XG4gIH0oKSk7XG59XG5cbi8qICAqL1xuXG52YXIgd2FybiA9IG5vb3A7XG52YXIgdGlwID0gbm9vcDtcbnZhciBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gKG5vb3ApOyAvLyB3b3JrIGFyb3VuZCBmbG93IGNoZWNrXG52YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAge1xuICAgICAgaWYodm0uJHNjb3BlICYmIHZtLiRzY29wZS5pcyl7XG4gICAgICAgIHJldHVybiB2bS4kc2NvcGUuaXNcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtO1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgLy8gZml4ZWQgYnkgeHh4eHh4IChudnVlIHZ1ZXgpXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG4gIGlmKHR5cGVvZiBTaGFyZWRPYmplY3QgIT09ICd1bmRlZmluZWQnKXtcbiAgICB0aGlzLmlkID0gU2hhcmVkT2JqZWN0LnVpZCsrO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuaWQgPSB1aWQrKztcbiAgfVxuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC5TaGFyZWRPYmplY3QudGFyZ2V0KSB7XG4gICAgRGVwLlNoYXJlZE9iamVjdC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgIC8vIG9yZGVyXG4gICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuLy8gY2FuIGJlIGV2YWx1YXRlZCBhdCBhIHRpbWUuXG4vLyBmaXhlZCBieSB4eHh4eHggKG52dWUgc2hhcmVkIHZ1ZXgpXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuRGVwLlNoYXJlZE9iamVjdCA9IHR5cGVvZiBTaGFyZWRPYmplY3QgIT09ICd1bmRlZmluZWQnID8gU2hhcmVkT2JqZWN0IDoge307XG5EZXAuU2hhcmVkT2JqZWN0LnRhcmdldCA9IG51bGw7XG5EZXAuU2hhcmVkT2JqZWN0LnRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKHRhcmdldCkge1xuICBEZXAuU2hhcmVkT2JqZWN0LnRhcmdldFN0YWNrLnB1c2godGFyZ2V0KTtcbiAgRGVwLlNoYXJlZE9iamVjdC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIERlcC5TaGFyZWRPYmplY3QudGFyZ2V0U3RhY2sucG9wKCk7XG4gIERlcC5TaGFyZWRPYmplY3QudGFyZ2V0ID0gRGVwLlNoYXJlZE9iamVjdC50YXJnZXRTdGFja1tEZXAuU2hhcmVkT2JqZWN0LnRhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmIChoYXNQcm90bykge1xuICAgICAgey8vIGZpeGVkIGJ5IHh4eHh4eCDlvq7kv6HlsI/nqIvluo/kvb/nlKggcGx1Z2lucyDkuYvlkI7vvIzmlbDnu4Tmlrnms5Xooqvnm7TmjqXmjILovb3liLDkuobmlbDnu4Tlr7nosaHkuIrvvIzpnIDopoHmiafooYwgY29weUF1Z21lbnQg6YC76L6RXG4gICAgICAgIGlmKHZhbHVlLnB1c2ggIT09IHZhbHVlLl9fcHJvdG9fXy5wdXNoKXtcbiAgICAgICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3RvQXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcbiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAuU2hhcmVkT2JqZWN0LnRhcmdldCkgeyAvLyBmaXhlZCBieSB4eHh4eHhcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGN1c3RvbVNldHRlcikge1xuICAgICAgICBjdXN0b21TZXR0ZXIoKTtcbiAgICAgIH1cbiAgICAgIC8vICM3OTgxOiBmb3IgYWNjZXNzb3IgcHJvcGVydGllcyB3aXRob3V0IHNldHRlclxuICAgICAgaWYgKGdldHRlciAmJiAhc2V0dGVyKSB7IHJldHVybiB9XG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3Qgc2V0IHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KSlcbiAgKSB7XG4gICAgd2FybigoXCJDYW5ub3QgZGVsZXRlIHJlYWN0aXZlIHByb3BlcnR5IG9uIHVuZGVmaW5lZCwgbnVsbCwgb3IgcHJpbWl0aXZlIHZhbHVlOiBcIiArICgodGFyZ2V0KSkpKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iID0gKHRhcmdldCkuX19vYl9fO1xuICBpZiAodGFyZ2V0Ll9pc1Z1ZSB8fCAob2IgJiYgb2Iudm1Db3VudCkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgaWYgKCF2bSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgJ2NyZWF0aW9uIHdpdGggdGhlIGBuZXdgIGtleXdvcmQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZmF1bHRTdHJhdChwYXJlbnQsIGNoaWxkKVxuICB9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0aGF0IHJlY3Vyc2l2ZWx5IG1lcmdlcyB0d28gZGF0YSBvYmplY3RzIHRvZ2V0aGVyLlxuICovXG5mdW5jdGlvbiBtZXJnZURhdGEgKHRvLCBmcm9tKSB7XG4gIGlmICghZnJvbSkgeyByZXR1cm4gdG8gfVxuICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcblxuICB2YXIga2V5cyA9IGhhc1N5bWJvbFxuICAgID8gUmVmbGVjdC5vd25LZXlzKGZyb20pXG4gICAgOiBPYmplY3Qua2V5cyhmcm9tKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIC8vIGluIGNhc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IG9ic2VydmVkLi4uXG4gICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgIHRvVmFsID0gdG9ba2V5XTtcbiAgICBmcm9tVmFsID0gZnJvbVtrZXldO1xuICAgIGlmICghaGFzT3duKHRvLCBrZXkpKSB7XG4gICAgICBzZXQodG8sIGtleSwgZnJvbVZhbCk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHRvVmFsICE9PSBmcm9tVmFsICYmXG4gICAgICBpc1BsYWluT2JqZWN0KHRvVmFsKSAmJlxuICAgICAgaXNQbGFpbk9iamVjdChmcm9tVmFsKVxuICAgICkge1xuICAgICAgbWVyZ2VEYXRhKHRvVmFsLCBmcm9tVmFsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogRGF0YVxuICovXG5mdW5jdGlvbiBtZXJnZURhdGFPckZuIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgLy8gaW4gYSBWdWUuZXh0ZW5kIG1lcmdlLCBib3RoIHNob3VsZCBiZSBmdW5jdGlvbnNcbiAgICBpZiAoIWNoaWxkVmFsKSB7XG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7XG4gICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICB9XG4gICAgLy8gd2hlbiBwYXJlbnRWYWwgJiBjaGlsZFZhbCBhcmUgYm90aCBwcmVzZW50LFxuICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgIC8vIG1lcmdlZCByZXN1bHQgb2YgYm90aCBmdW5jdGlvbnMuLi4gbm8gbmVlZCB0b1xuICAgIC8vIGNoZWNrIGlmIHBhcmVudFZhbCBpcyBhIGZ1bmN0aW9uIGhlcmUgYmVjYXVzZVxuICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWREYXRhRm4gKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGF0YShcbiAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nID8gcGFyZW50VmFsLmNhbGwodGhpcywgdGhpcykgOiBwYXJlbnRWYWxcbiAgICAgIClcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZEluc3RhbmNlRGF0YUZuICgpIHtcbiAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICB2YXIgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICB2YXIgZGVmYXVsdERhdGEgPSB0eXBlb2YgcGFyZW50VmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcGFyZW50VmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgIGlmIChpbnN0YW5jZURhdGEpIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlRGF0YShpbnN0YW5jZURhdGEsIGRlZmF1bHREYXRhKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXRhXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgdmFyIHJlcyA9IGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbDtcbiAgcmV0dXJuIHJlc1xuICAgID8gZGVkdXBlSG9va3MocmVzKVxuICAgIDogcmVzXG59XG5cbmZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkge1xuICAgICAgcmVzLnB1c2goaG9va3NbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkxJRkVDWUNMRV9IT09LUy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vaztcbn0pO1xuXG4vKipcbiAqIEFzc2V0c1xuICpcbiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAqIGEgdGhyZWUtd2F5IG1lcmdlIGJldHdlZW4gY29uc3RydWN0b3Igb3B0aW9ucywgaW5zdGFuY2VcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBtZXJnZUFzc2V0cyAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG4gIGlmIChjaGlsZFZhbCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gICAgcmV0dXJuIGV4dGVuZChyZXMsIGNoaWxkVmFsKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5BU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzO1xufSk7XG5cbi8qKlxuICogV2F0Y2hlcnMuXG4gKlxuICogV2F0Y2hlcnMgaGFzaGVzIHNob3VsZCBub3Qgb3ZlcndyaXRlIG9uZVxuICogYW5vdGhlciwgc28gd2UgbWVyZ2UgdGhlbSBhcyBhcnJheXMuXG4gKi9cbnN0cmF0cy53YXRjaCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIC8vIHdvcmsgYXJvdW5kIEZpcmVmb3gncyBPYmplY3QucHJvdG90eXBlLndhdGNoLi4uXG4gIGlmIChwYXJlbnRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IHBhcmVudFZhbCA9IHVuZGVmaW5lZDsgfVxuICBpZiAoY2hpbGRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IGNoaWxkVmFsID0gdW5kZWZpbmVkOyB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKSB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZFZhbCkge1xuICAgIHZhciBwYXJlbnQgPSByZXRba2V5JDFdO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleSQxXTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5JDFdID0gcGFyZW50XG4gICAgICA/IHBhcmVudC5jb25jYXQoY2hpbGQpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGQpID8gY2hpbGQgOiBbY2hpbGRdO1xuICB9XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAqL1xuc3RyYXRzLnByb3BzID1cbnN0cmF0cy5tZXRob2RzID1cbnN0cmF0cy5pbmplY3QgPVxuc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgaWYgKGNoaWxkVmFsICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgfVxuICBpZiAoIXBhcmVudFZhbCkgeyByZXR1cm4gY2hpbGRWYWwgfVxuICB2YXIgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgaWYgKGNoaWxkVmFsKSB7IGV4dGVuZChyZXQsIGNoaWxkVmFsKTsgfVxuICByZXR1cm4gcmV0XG59O1xuc3RyYXRzLnByb3ZpZGUgPSBtZXJnZURhdGFPckZuO1xuXG4vKipcbiAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gKi9cbnZhciBkZWZhdWx0U3RyYXQgPSBmdW5jdGlvbiAocGFyZW50VmFsLCBjaGlsZFZhbCkge1xuICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgID8gcGFyZW50VmFsXG4gICAgOiBjaGlsZFZhbFxufTtcblxuLyoqXG4gKiBWYWxpZGF0ZSBjb21wb25lbnQgbmFtZXNcbiAqL1xuZnVuY3Rpb24gY2hlY2tDb21wb25lbnRzIChvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUgKG5hbWUpIHtcbiAgaWYgKCFuZXcgUmVnRXhwKChcIl5bYS16QS1aXVtcXFxcLVxcXFwuMC05X1wiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiXSokXCIpKS50ZXN0KG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAnc2hvdWxkIGNvbmZvcm0gdG8gdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZSBpbiBodG1sNSBzcGVjaWZpY2F0aW9uLidcbiAgICApO1xuICB9XG4gIGlmIChpc0J1aWx0SW5UYWcobmFtZSkgfHwgY29uZmlnLmlzUmVzZXJ2ZWRUYWcobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAnaWQ6ICcgKyBuYW1lXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuICogT2JqZWN0LWJhc2VkIGZvcm1hdC5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBwcm9wcyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmICghcHJvcHMpIHsgcmV0dXJuIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgaSwgdmFsLCBuYW1lO1xuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wcykpIHtcbiAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhbCA9IHByb3BzW2ldO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZSh2YWwpO1xuICAgICAgICByZXNbbmFtZV0gPSB7IHR5cGU6IG51bGwgfTtcbiAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7XG4gICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB7IHR5cGU6IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJwcm9wc1xcXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZShwcm9wcykpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdCAob3B0aW9ucywgdm0pIHtcbiAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xuICBpZiAoIWluamVjdCkgeyByZXR1cm4gfVxuICB2YXIgbm9ybWFsaXplZCA9IG9wdGlvbnMuaW5qZWN0ID0ge307XG4gIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGluamVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgbm9ybWFsaXplZFtpbmplY3RbaV1dID0geyBmcm9tOiBpbmplY3RbaV0gfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChpbmplY3QpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGluamVjdCkge1xuICAgICAgdmFyIHZhbCA9IGluamVjdFtrZXldO1xuICAgICAgbm9ybWFsaXplZFtrZXldID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gZXh0ZW5kKHsgZnJvbToga2V5IH0sIHZhbClcbiAgICAgICAgOiB7IGZyb206IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJpbmplY3RcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUoaW5qZWN0KSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMgKG9wdGlvbnMpIHtcbiAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gIGlmIChkaXJzKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGRpcnMpIHtcbiAgICAgIHZhciBkZWYkJDEgPSBkaXJzW2tleV07XG4gICAgICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkaXJzW2tleV0gPSB7IGJpbmQ6IGRlZiQkMSwgdXBkYXRlOiBkZWYkJDEgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZSAobmFtZSwgdmFsdWUsIHZtKSB7XG4gIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcIlwiICsgbmFtZSArIFwiXFxcIjogZXhwZWN0ZWQgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHZhbHVlKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHR3byBvcHRpb24gb2JqZWN0cyBpbnRvIGEgbmV3IG9uZS5cbiAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlT3B0aW9ucyAoXG4gIHBhcmVudCxcbiAgY2hpbGQsXG4gIHZtXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgfVxuXG4gIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcblxuICAvLyBBcHBseSBleHRlbmRzIGFuZCBtaXhpbnMgb24gdGhlIGNoaWxkIG9wdGlvbnMsXG4gIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgLy8gdGhlIHJlc3VsdCBvZiBhbm90aGVyIG1lcmdlT3B0aW9ucyBjYWxsLlxuICAvLyBPbmx5IG1lcmdlZCBvcHRpb25zIGhhcyB0aGUgX2Jhc2UgcHJvcGVydHkuXG4gIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICBpZiAoY2hpbGQuZXh0ZW5kcykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQuZXh0ZW5kcywgdm0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgbWVyZ2VGaWVsZChrZXkpO1xuICB9XG4gIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRmllbGQgKGtleSkge1xuICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGFuIGFzc2V0LlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCAoXG4gIG9wdGlvbnMsXG4gIHR5cGUsXG4gIGlkLFxuICB3YXJuTWlzc2luZ1xuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKSB7IHJldHVybiBhc3NldHNbaWRdIH1cbiAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfVxuICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2Fybk1pc3NpbmcgJiYgIXJlcykge1xuICAgIHdhcm4oXG4gICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcCAoXG4gIGtleSxcbiAgcHJvcE9wdGlvbnMsXG4gIHByb3BzRGF0YSxcbiAgdm1cbikge1xuICB2YXIgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIHZhciBhYnNlbnQgPSAhaGFzT3duKHByb3BzRGF0YSwga2V5KTtcbiAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gIC8vIGJvb2xlYW4gY2FzdGluZ1xuICB2YXIgYm9vbGVhbkluZGV4ID0gZ2V0VHlwZUluZGV4KEJvb2xlYW4sIHByb3AudHlwZSk7XG4gIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgIGlmIChhYnNlbnQgJiYgIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgICB2YWx1ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgLy8gb25seSBjYXN0IGVtcHR5IHN0cmluZyAvIHNhbWUgbmFtZSB0byBib29sZWFuIGlmXG4gICAgICAvLyBib29sZWFuIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgdmFyIHByZXZTaG91bGRPYnNlcnZlID0gc2hvdWxkT2JzZXJ2ZTtcbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgb2JzZXJ2ZSh2YWx1ZSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHByZXZTaG91bGRPYnNlcnZlKTtcbiAgfVxuICBpZiAoXG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIC8vIHNraXAgdmFsaWRhdGlvbiBmb3Igd2VleCByZWN5Y2xlLWxpc3QgY2hpbGQgY29tcG9uZW50IHByb3BzXG4gICAgIShmYWxzZSlcbiAgKSB7XG4gICAgYXNzZXJ0UHJvcChwcm9wLCBrZXksIHZhbHVlLCB2bSwgYWJzZW50KTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGRlZmF1bHQgdmFsdWUgb2YgYSBwcm9wLlxuICovXG5mdW5jdGlvbiBnZXRQcm9wRGVmYXVsdFZhbHVlICh2bSwgcHJvcCwga2V5KSB7XG4gIC8vIG5vIGRlZmF1bHQsIHJldHVybiB1bmRlZmluZWRcbiAgaWYgKCFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxuICB2YXIgZGVmID0gcHJvcC5kZWZhdWx0O1xuICAvLyB3YXJuIGFnYWluc3Qgbm9uLWZhY3RvcnkgZGVmYXVsdHMgZm9yIE9iamVjdCAmIEFycmF5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzT2JqZWN0KGRlZikpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvcCBcIicgKyBrZXkgKyAnXCI6ICcgK1xuICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuICAgICAgJ3RvIHJldHVybiB0aGUgZGVmYXVsdCB2YWx1ZS4nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHRoZSByYXcgcHJvcCB2YWx1ZSB3YXMgYWxzbyB1bmRlZmluZWQgZnJvbSBwcmV2aW91cyByZW5kZXIsXG4gIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuICBpZiAodm0gJiYgdm0uJG9wdGlvbnMucHJvcHNEYXRhICYmXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhW2tleV0gPT09IHVuZGVmaW5lZCAmJlxuICAgIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgcmV0dXJuIHZtLl9wcm9wc1trZXldXG4gIH1cbiAgLy8gY2FsbCBmYWN0b3J5IGZ1bmN0aW9uIGZvciBub24tRnVuY3Rpb24gdHlwZXNcbiAgLy8gYSB2YWx1ZSBpcyBGdW5jdGlvbiBpZiBpdHMgcHJvdG90eXBlIGlzIGZ1bmN0aW9uIGV2ZW4gYWNyb3NzIGRpZmZlcmVudCBleGVjdXRpb24gY29udGV4dFxuICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBnZXRUeXBlKHByb3AudHlwZSkgIT09ICdGdW5jdGlvbidcbiAgICA/IGRlZi5jYWxsKHZtKVxuICAgIDogZGVmXG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgYSBwcm9wIGlzIHZhbGlkLlxuICovXG5mdW5jdGlvbiBhc3NlcnRQcm9wIChcbiAgcHJvcCxcbiAgbmFtZSxcbiAgdmFsdWUsXG4gIHZtLFxuICBhYnNlbnRcbikge1xuICBpZiAocHJvcC5yZXF1aXJlZCAmJiBhYnNlbnQpIHtcbiAgICB3YXJuKFxuICAgICAgJ01pc3NpbmcgcmVxdWlyZWQgcHJvcDogXCInICsgbmFtZSArICdcIicsXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgdmFyIHZhbGlkID0gIXR5cGUgfHwgdHlwZSA9PT0gdHJ1ZTtcbiAgdmFyIGV4cGVjdGVkVHlwZXMgPSBbXTtcbiAgaWYgKHR5cGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHR5cGUgPSBbdHlwZV07XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHlwZS5sZW5ndGggJiYgIXZhbGlkOyBpKyspIHtcbiAgICAgIHZhciBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldKTtcbiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChhc3NlcnRlZFR5cGUuZXhwZWN0ZWRUeXBlIHx8ICcnKTtcbiAgICAgIHZhbGlkID0gYXNzZXJ0ZWRUeXBlLnZhbGlkO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgdmFsaWRhdG9yID0gcHJvcC52YWxpZGF0b3I7XG4gIGlmICh2YWxpZGF0b3IpIHtcbiAgICBpZiAoIXZhbGlkYXRvcih2YWx1ZSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbnZhciBzaW1wbGVDaGVja1JFID0gL14oU3RyaW5nfE51bWJlcnxCb29sZWFufEZ1bmN0aW9ufFN5bWJvbCkkLztcblxuZnVuY3Rpb24gYXNzZXJ0VHlwZSAodmFsdWUsIHR5cGUpIHtcbiAgdmFyIHZhbGlkO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgaWYgKHNpbXBsZUNoZWNrUkUudGVzdChleHBlY3RlZFR5cGUpKSB7XG4gICAgdmFyIHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgdmFsaWQgPSB0ID09PSBleHBlY3RlZFR5cGUudG9Mb3dlckNhc2UoKTtcbiAgICAvLyBmb3IgcHJpbWl0aXZlIHdyYXBwZXIgb2JqZWN0c1xuICAgIGlmICghdmFsaWQgJiYgdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgdmFsaWQgPSBpc1BsYWluT2JqZWN0KHZhbHVlKTtcbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdBcnJheScpIHtcbiAgICB2YWxpZCA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHZhbGlkID0gdmFsdWUgaW5zdGFuY2VvZiB0eXBlO1xuICB9XG4gIHJldHVybiB7XG4gICAgdmFsaWQ6IHZhbGlkLFxuICAgIGV4cGVjdGVkVHlwZTogZXhwZWN0ZWRUeXBlXG4gIH1cbn1cblxuLyoqXG4gKiBVc2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgYnVpbHQtaW4gdHlwZXMsXG4gKiBiZWNhdXNlIGEgc2ltcGxlIGVxdWFsaXR5IGNoZWNrIHdpbGwgZmFpbCB3aGVuIHJ1bm5pbmdcbiAqIGFjcm9zcyBkaWZmZXJlbnQgdm1zIC8gaWZyYW1lcy5cbiAqL1xuZnVuY3Rpb24gZ2V0VHlwZSAoZm4pIHtcbiAgdmFyIG1hdGNoID0gZm4gJiYgZm4udG9TdHJpbmcoKS5tYXRjaCgvXlxccypmdW5jdGlvbiAoXFx3KykvKTtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJ1xufVxuXG5mdW5jdGlvbiBpc1NhbWVUeXBlIChhLCBiKSB7XG4gIHJldHVybiBnZXRUeXBlKGEpID09PSBnZXRUeXBlKGIpXG59XG5cbmZ1bmN0aW9uIGdldFR5cGVJbmRleCAodHlwZSwgZXhwZWN0ZWRUeXBlcykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHtcbiAgICByZXR1cm4gaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzLCB0eXBlKSA/IDAgOiAtMVxuICB9XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBleHBlY3RlZFR5cGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlc1tpXSwgdHlwZSkpIHtcbiAgICAgIHJldHVybiBpXG4gICAgfVxuICB9XG4gIHJldHVybiAtMVxufVxuXG5mdW5jdGlvbiBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UgKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSB7XG4gIHZhciBtZXNzYWdlID0gXCJJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIuXCIgK1xuICAgIFwiIEV4cGVjdGVkIFwiICsgKGV4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oJywgJykpO1xuICB2YXIgZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlc1swXTtcbiAgdmFyIHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7XG4gIHZhciBleHBlY3RlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKTtcbiAgdmFyIHJlY2VpdmVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCByZWNlaXZlZFR5cGUpO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgZXhwZWN0ZWQgdmFsdWVcbiAgaWYgKGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXG4gICAgICBpc0V4cGxpY2FibGUoZXhwZWN0ZWRUeXBlKSAmJlxuICAgICAgIWlzQm9vbGVhbihleHBlY3RlZFR5cGUsIHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwiIHdpdGggdmFsdWUgXCIgKyBleHBlY3RlZFZhbHVlO1xuICB9XG4gIG1lc3NhZ2UgKz0gXCIsIGdvdCBcIiArIHJlY2VpdmVkVHlwZSArIFwiIFwiO1xuICAvLyBjaGVjayBpZiB3ZSBuZWVkIHRvIHNwZWNpZnkgcmVjZWl2ZWQgdmFsdWVcbiAgaWYgKGlzRXhwbGljYWJsZShyZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIndpdGggdmFsdWUgXCIgKyByZWNlaXZlZFZhbHVlICsgXCIuXCI7XG4gIH1cbiAgcmV0dXJuIG1lc3NhZ2Vcbn1cblxuZnVuY3Rpb24gc3R5bGVWYWx1ZSAodmFsdWUsIHR5cGUpIHtcbiAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgcmV0dXJuIChcIlxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ051bWJlcicpIHtcbiAgICByZXR1cm4gKFwiXCIgKyAoTnVtYmVyKHZhbHVlKSkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcIlwiICsgdmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNFeHBsaWNhYmxlICh2YWx1ZSkge1xuICB2YXIgZXhwbGljaXRUeXBlcyA9IFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJ107XG4gIHJldHVybiBleHBsaWNpdFR5cGVzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IGVsZW07IH0pXG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbiAoKSB7XG4gIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgcmV0dXJuIGFyZ3Muc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gZWxlbS50b0xvd2VyQ2FzZSgpID09PSAnYm9vbGVhbic7IH0pXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBoYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICAvLyBEZWFjdGl2YXRlIGRlcHMgdHJhY2tpbmcgd2hpbGUgcHJvY2Vzc2luZyBlcnJvciBoYW5kbGVyIHRvIGF2b2lkIHBvc3NpYmxlIGluZmluaXRlIHJlbmRlcmluZy5cbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVleC9pc3N1ZXMvMTUwNVxuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgaWYgKHZtKSB7XG4gICAgICB2YXIgY3VyID0gdm07XG4gICAgICB3aGlsZSAoKGN1ciA9IGN1ci4kcGFyZW50KSkge1xuICAgICAgICB2YXIgaG9va3MgPSBjdXIuJG9wdGlvbnMuZXJyb3JDYXB0dXJlZDtcbiAgICAgICAgaWYgKGhvb2tzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgdmFyIGNhcHR1cmUgPSBob29rc1tpXS5jYWxsKGN1ciwgZXJyLCB2bSwgaW5mbykgPT09IGZhbHNlO1xuICAgICAgICAgICAgICBpZiAoY2FwdHVyZSkgeyByZXR1cm4gfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBnbG9iYWxIYW5kbGVFcnJvcihlLCBjdXIsICdlcnJvckNhcHR1cmVkIGhvb2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZ2xvYmFsSGFuZGxlRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcgKFxuICBoYW5kbGVyLFxuICBjb250ZXh0LFxuICBhcmdzLFxuICB2bSxcbiAgaW5mb1xuKSB7XG4gIHZhciByZXM7XG4gIHRyeSB7XG4gICAgcmVzID0gYXJncyA/IGhhbmRsZXIuYXBwbHkoY29udGV4dCwgYXJncykgOiBoYW5kbGVyLmNhbGwoY29udGV4dCk7XG4gICAgaWYgKHJlcyAmJiAhcmVzLl9pc1Z1ZSAmJiBpc1Byb21pc2UocmVzKSAmJiAhcmVzLl9oYW5kbGVkKSB7XG4gICAgICByZXMuY2F0Y2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvICsgXCIgKFByb21pc2UvYXN5bmMpXCIpOyB9KTtcbiAgICAgIC8vIGlzc3VlICM5NTExXG4gICAgICAvLyBhdm9pZCBjYXRjaCB0cmlnZ2VyaW5nIG11bHRpcGxlIHRpbWVzIHdoZW4gbmVzdGVkIGNhbGxzXG4gICAgICByZXMuX2hhbmRsZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdsb2JhbEhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBpZiB0aGUgdXNlciBpbnRlbnRpb25hbGx5IHRocm93cyB0aGUgb3JpZ2luYWwgZXJyb3IgaW4gdGhlIGhhbmRsZXIsXG4gICAgICAvLyBkbyBub3QgbG9nIGl0IHR3aWNlXG4gICAgICBpZiAoZSAhPT0gZXJyKSB7XG4gICAgICAgIGxvZ0Vycm9yKGUsIG51bGwsICdjb25maWcuZXJyb3JIYW5kbGVyJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxvZ0Vycm9yKGVyciwgdm0sIGluZm8pO1xufVxuXG5mdW5jdGlvbiBsb2dFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oKFwiRXJyb3IgaW4gXCIgKyBpbmZvICsgXCI6IFxcXCJcIiArIChlcnIudG9TdHJpbmcoKSkgKyBcIlxcXCJcIiksIHZtKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoKGluQnJvd3NlciB8fCBpbldlZXgpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBlcnJcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIGNhbGxiYWNrcyA9IFtdO1xudmFyIHBlbmRpbmcgPSBmYWxzZTtcblxuZnVuY3Rpb24gZmx1c2hDYWxsYmFja3MgKCkge1xuICBwZW5kaW5nID0gZmFsc2U7XG4gIHZhciBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcGllcy5sZW5ndGg7IGkrKykge1xuICAgIGNvcGllc1tpXSgpO1xuICB9XG59XG5cbi8vIEhlcmUgd2UgaGF2ZSBhc3luYyBkZWZlcnJpbmcgd3JhcHBlcnMgdXNpbmcgbWljcm90YXNrcy5cbi8vIEluIDIuNSB3ZSB1c2VkIChtYWNybykgdGFza3MgKGluIGNvbWJpbmF0aW9uIHdpdGggbWljcm90YXNrcykuXG4vLyBIb3dldmVyLCBpdCBoYXMgc3VidGxlIHByb2JsZW1zIHdoZW4gc3RhdGUgaXMgY2hhbmdlZCByaWdodCBiZWZvcmUgcmVwYWludFxuLy8gKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4vLyBBbHNvLCB1c2luZyAobWFjcm8pIHRhc2tzIGluIGV2ZW50IGhhbmRsZXIgd291bGQgY2F1c2Ugc29tZSB3ZWlyZCBiZWhhdmlvcnNcbi8vIHRoYXQgY2Fubm90IGJlIGNpcmN1bXZlbnRlZCAoZS5nLiAjNzEwOSwgIzcxNTMsICM3NTQ2LCAjNzgzNCwgIzgxMDkpLlxuLy8gU28gd2Ugbm93IHVzZSBtaWNyb3Rhc2tzIGV2ZXJ5d2hlcmUsIGFnYWluLlxuLy8gQSBtYWpvciBkcmF3YmFjayBvZiB0aGlzIHRyYWRlb2ZmIGlzIHRoYXQgdGhlcmUgYXJlIHNvbWUgc2NlbmFyaW9zXG4vLyB3aGVyZSBtaWNyb3Rhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZSBpbiBiZXR3ZWVuIHN1cHBvc2VkbHlcbi8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCwgd2hpY2ggaGF2ZSB3b3JrYXJvdW5kcylcbi8vIG9yIGV2ZW4gYmV0d2VlbiBidWJibGluZyBvZiB0aGUgc2FtZSBldmVudCAoIzY1NjYpLlxudmFyIHRpbWVyRnVuYztcblxuLy8gVGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWRcbi8vIHZpYSBlaXRoZXIgbmF0aXZlIFByb21pc2UudGhlbiBvciBNdXRhdGlvbk9ic2VydmVyLlxuLy8gTXV0YXRpb25PYnNlcnZlciBoYXMgd2lkZXIgc3VwcG9ydCwgaG93ZXZlciBpdCBpcyBzZXJpb3VzbHkgYnVnZ2VkIGluXG4vLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdFxuLy8gY29tcGxldGVseSBzdG9wcyB3b3JraW5nIGFmdGVyIHRyaWdnZXJpbmcgYSBmZXcgdGltZXMuLi4gc28sIGlmIG5hdGl2ZVxuLy8gUHJvbWlzZSBpcyBhdmFpbGFibGUsIHdlIHdpbGwgdXNlIGl0OlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqL1xuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xuICB2YXIgcCA9IFByb21pc2UucmVzb2x2ZSgpO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcC50aGVuKGZsdXNoQ2FsbGJhY2tzKTtcbiAgICAvLyBJbiBwcm9ibGVtYXRpYyBVSVdlYlZpZXdzLCBQcm9taXNlLnRoZW4gZG9lc24ndCBjb21wbGV0ZWx5IGJyZWFrLCBidXRcbiAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcbiAgICAvLyBtaWNyb3Rhc2sgcXVldWUgYnV0IHRoZSBxdWV1ZSBpc24ndCBiZWluZyBmbHVzaGVkLCB1bnRpbCB0aGUgYnJvd3NlclxuICAgIC8vIG5lZWRzIHRvIGRvIHNvbWUgb3RoZXIgd29yaywgZS5nLiBoYW5kbGUgYSB0aW1lci4gVGhlcmVmb3JlIHdlIGNhblxuICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuICAgIGlmIChpc0lPUykgeyBzZXRUaW1lb3V0KG5vb3ApOyB9XG4gIH07XG59IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gIGlzTmF0aXZlKE11dGF0aW9uT2JzZXJ2ZXIpIHx8XG4gIC8vIFBoYW50b21KUyBhbmQgaU9TIDcueFxuICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4pKSB7XG4gIC8vIFVzZSBNdXRhdGlvbk9ic2VydmVyIHdoZXJlIG5hdGl2ZSBQcm9taXNlIGlzIG5vdCBhdmFpbGFibGUsXG4gIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAvLyAoIzY0NjYgTXV0YXRpb25PYnNlcnZlciBpcyB1bnJlbGlhYmxlIGluIElFMTEpXG4gIHZhciBjb3VudGVyID0gMTtcbiAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9KTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICB9O1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCwnICtcbiAgICAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeVxuICApO1xuXG4gIHZhciB3YXJuTm9uUHJlc2VudCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICAncmVmZXJlbmNlZCBkdXJpbmcgcmVuZGVyLiBNYWtlIHN1cmUgdGhhdCB0aGlzIHByb3BlcnR5IGlzIHJlYWN0aXZlLCAnICtcbiAgICAgICdlaXRoZXIgaW4gdGhlIGRhdGEgb3B0aW9uLCBvciBmb3IgY2xhc3MtYmFzZWQgY29tcG9uZW50cywgYnkgJyArXG4gICAgICAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9yZWFjdGl2aXR5Lmh0bWwjRGVjbGFyaW5nLVJlYWN0aXZlLVByb3BlcnRpZXMuJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIHdhcm5SZXNlcnZlZFByZWZpeCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBtdXN0IGJlIGFjY2Vzc2VkIHdpdGggXFxcIiRkYXRhLlwiICsga2V5ICsgXCJcXFwiIGJlY2F1c2UgXCIgK1xuICAgICAgJ3Byb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCBcIiRcIiBvciBcIl9cIiBhcmUgbm90IHByb3hpZWQgaW4gdGhlIFZ1ZSBpbnN0YW5jZSB0byAnICtcbiAgICAgICdwcmV2ZW50IGNvbmZsaWN0cyB3aXRoIFZ1ZSBpbnRlcm5hbHMuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvYXBpLyNkYXRhJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0Jyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fFxuICAgICAgICAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJ18nICYmICEoa2V5IGluIHRhcmdldC4kZGF0YSkpO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgfVxuICB9O1xuXG4gIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm94eSBoYW5kbGVyIHRvIHVzZVxuICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgPyBnZXRIYW5kbGVyXG4gICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UgKHZhbCkge1xuICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG4gIHNlZW5PYmplY3RzLmNsZWFyKCk7XG59XG5cbmZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG4gIHZhciBpLCBrZXlzO1xuICB2YXIgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpO1xuICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcGVyZiAmJlxuICAgIHBlcmYubWFyayAmJlxuICAgIHBlcmYubWVhc3VyZSAmJlxuICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICApIHtcbiAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICBwZXJmLm1lYXN1cmUobmFtZSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICAvLyBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSlcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIilcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGZpeGVkIGJ5IHh4eHh4eCAobXAgcHJvcGVydGllcylcclxuZnVuY3Rpb24gZXh0cmFjdFByb3BlcnRpZXNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHJlcywgY29udGV4dCkge1xyXG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5tcE9wdGlvbnMgJiYgQ3Rvci5vcHRpb25zLm1wT3B0aW9ucy5wcm9wZXJ0aWVzO1xyXG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xyXG4gICAgcmV0dXJuIHJlc1xyXG4gIH1cbiAgdmFyIGV4dGVybmFsQ2xhc3NlcyA9IEN0b3Iub3B0aW9ucy5tcE9wdGlvbnMuZXh0ZXJuYWxDbGFzc2VzIHx8IFtdO1xyXG4gIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG4gIHZhciBwcm9wcyA9IGRhdGEucHJvcHM7XHJcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcclxuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xyXG4gICAgICB2YXIgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICB2YXIgcmVzdWx0ID0gY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgICAgLy8gZXh0ZXJuYWxDbGFzc1xuICAgICAgaWYgKFxuICAgICAgICByZXN1bHQgJiZcbiAgICAgICAgcmVzW2tleV0gJiZcbiAgICAgICAgZXh0ZXJuYWxDbGFzc2VzLmluZGV4T2YoYWx0S2V5KSAhPT0gLTEgJiZcbiAgICAgICAgY29udGV4dFtjYW1lbGl6ZShyZXNba2V5XSldXG4gICAgICApIHtcbiAgICAgICAgLy8g6LWL5YC8IGV4dGVybmFsQ2xhc3Mg55yf5q2j55qE5YC8KOaooeadv+mHjCBleHRlcm5hbENsYXNzIOeahOWAvOWPr+iDveaYr+Wtl+espuS4silcbiAgICAgICAgcmVzW2tleV0gPSBjb250ZXh0W2NhbWVsaXplKHJlc1trZXldKV07XG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiByZXNcclxufVxuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnLFxuICBjb250ZXh0Ly8gZml4ZWQgYnkgeHh4eHh4XG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIC8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgIHJldHVybiBleHRyYWN0UHJvcGVydGllc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3Rvciwge30sIGNvbnRleHQpXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgdmFyIGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgXCJQcm9wIFxcXCJcIiArIGtleUluTG93ZXJDYXNlICsgXCJcXFwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgXCIgK1xuICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgIFwiIFxcXCJcIiArIGtleSArIFwiXFxcIi4gXCIgK1xuICAgICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCBjYW1lbENhc2VkIFwiICtcbiAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICBcInRlbXBsYXRlcy4gWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgYWx0S2V5ICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hlY2tQcm9wKHJlcywgcHJvcHMsIGtleSwgYWx0S2V5LCB0cnVlKSB8fFxuICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgfVxuICB9XG4gIC8vIGZpeGVkIGJ5IHh4eHh4eFxuICByZXR1cm4gZXh0cmFjdFByb3BlcnRpZXNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHJlcywgY29udGV4dClcbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wIChcbiAgcmVzLFxuICBoYXNoLFxuICBrZXksXG4gIGFsdEtleSxcbiAgcHJlc2VydmVcbikge1xuICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICBpZiAoaGFzT3duKGhhc2gsIGtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFtrZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFtrZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGVsc2UgaWYgKGhhc093bihoYXNoLCBhbHRLZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hbYWx0S2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hbYWx0S2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4vLyBzdGF0aWNhbGx5IGFuYWx5emluZyB0aGUgdGVtcGxhdGUgYXQgY29tcGlsZSB0aW1lLlxuLy9cbi8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4vLyBnZW5lcmF0ZWQgcmVuZGVyIGZ1bmN0aW9uIGlzIGd1YXJhbnRlZWQgdG8gcmV0dXJuIEFycmF5PFZOb2RlPi4gVGhlcmUgYXJlXG4vLyB0d28gY2FzZXMgd2hlcmUgZXh0cmEgbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQ6XG5cbi8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbi8vIG1heSByZXR1cm4gYW4gQXJyYXkgaW5zdGVhZCBvZiBhIHNpbmdsZSByb290LiBJbiB0aGlzIGNhc2UsIGp1c3QgYSBzaW1wbGVcbi8vIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkIC0gaWYgYW55IGNoaWxkIGlzIGFuIEFycmF5LCB3ZSBmbGF0dGVuIHRoZSB3aG9sZVxuLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4vLyBiZWNhdXNlIGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhbHJlYWR5IG5vcm1hbGl6ZSB0aGVpciBvd24gY2hpbGRyZW4uXG5mdW5jdGlvbiBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuW2ldKSkge1xuICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoW10sIGNoaWxkcmVuKVxuICAgIH1cbiAgfVxuICByZXR1cm4gY2hpbGRyZW5cbn1cblxuLy8gMi4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29uc3RydWN0cyB0aGF0IGFsd2F5cyBnZW5lcmF0ZWQgbmVzdGVkIEFycmF5cyxcbi8vIGUuZy4gPHRlbXBsYXRlPiwgPHNsb3Q+LCB2LWZvciwgb3Igd2hlbiB0aGUgY2hpbGRyZW4gaXMgcHJvdmlkZWQgYnkgdXNlclxuLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuLy8gaXMgbmVlZGVkIHRvIGNhdGVyIHRvIGFsbCBwb3NzaWJsZSB0eXBlcyBvZiBjaGlsZHJlbiB2YWx1ZXMuXG5mdW5jdGlvbiBub3JtYWxpemVDaGlsZHJlbiAoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgID8gW2NyZWF0ZVRleHRWTm9kZShjaGlsZHJlbildXG4gICAgOiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKVxuICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgOiB1bmRlZmluZWRcbn1cblxuZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICByZXR1cm4gaXNEZWYobm9kZSkgJiYgaXNEZWYobm9kZS50ZXh0KSAmJiBpc0ZhbHNlKG5vZGUuaXNDb21tZW50KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB2YXIgaSwgYywgbGFzdEluZGV4LCBsYXN0O1xuICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjID0gY2hpbGRyZW5baV07XG4gICAgaWYgKGlzVW5kZWYoYykgfHwgdHlwZW9mIGMgPT09ICdib29sZWFuJykgeyBjb250aW51ZSB9XG4gICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCAoKG5lc3RlZEluZGV4IHx8ICcnKSArIFwiX1wiICsgaSkpO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7XG4gICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5nc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxuICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XG4gICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoKGMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgdmFyIHByb3ZpZGUgPSB2bS4kb3B0aW9ucy5wcm92aWRlO1xuICBpZiAocHJvdmlkZSkge1xuICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICA/IHByb3ZpZGUuY2FsbCh2bSlcbiAgICAgIDogcHJvdmlkZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0SW5qZWN0aW9ucyAodm0pIHtcbiAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBcIiArXG4gICAgICAgICAgICBcImluamVjdGlvbiBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVJbmplY3QgKGluamVjdCwgdm0pIHtcbiAgaWYgKGluamVjdCkge1xuICAgIC8vIGluamVjdCBpcyA6YW55IGJlY2F1c2UgZmxvdyBpcyBub3Qgc21hcnQgZW5vdWdoIHRvIGZpZ3VyZSBvdXQgY2FjaGVkXG4gICAgdmFyIHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICAgID8gUmVmbGVjdC5vd25LZXlzKGluamVjdClcbiAgICAgIDogT2JqZWN0LmtleXMoaW5qZWN0KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAvLyAjNjU3NCBpbiBjYXNlIHRoZSBpbmplY3Qgb2JqZWN0IGlzIG9ic2VydmVkLi4uXG4gICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgICB2YXIgcHJvdmlkZUtleSA9IGluamVjdFtrZXldLmZyb207XG4gICAgICB2YXIgc291cmNlID0gdm07XG4gICAgICB3aGlsZSAoc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuX3Byb3ZpZGVkICYmIGhhc093bihzb3VyY2UuX3Byb3ZpZGVkLCBwcm92aWRlS2V5KSkge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gc291cmNlLl9wcm92aWRlZFtwcm92aWRlS2V5XTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHNvdXJjZSA9IHNvdXJjZS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgICAgaWYgKCdkZWZhdWx0JyBpbiBpbmplY3Rba2V5XSkge1xuICAgICAgICAgIHZhciBwcm92aWRlRGVmYXVsdCA9IGluamVjdFtrZXldLmRlZmF1bHQ7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSB0eXBlb2YgcHJvdmlkZURlZmF1bHQgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gcHJvdmlkZURlZmF1bHQuY2FsbCh2bSlcbiAgICAgICAgICAgIDogcHJvdmlkZURlZmF1bHQ7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbiAgdmFyIHNsb3RzID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xuICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICB9XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICB2YXIgbmFtZSA9IGRhdGEuc2xvdDtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmaXhlZCBieSB4eHh4eHgg5Li05pe2IGhhY2sg5o6JIHVuaS1hcHAg5Lit55qE5byC5q2lIG5hbWUgc2xvdCBwYWdlXG4gICAgICBpZihjaGlsZC5hc3luY01ldGEgJiYgY2hpbGQuYXN5bmNNZXRhLmRhdGEgJiYgY2hpbGQuYXN5bmNNZXRhLmRhdGEuc2xvdCA9PT0gJ3BhZ2UnKXtcbiAgICAgICAgKHNsb3RzWydwYWdlJ10gfHwgKHNsb3RzWydwYWdlJ10gPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIChzbG90cy5kZWZhdWx0IHx8IChzbG90cy5kZWZhdWx0ID0gW10pKS5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gaWdub3JlIHNsb3RzIHRoYXQgY29udGFpbnMgb25seSB3aGl0ZXNwYWNlXG4gIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgIGlmIChzbG90c1tuYW1lJDFdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lJDFdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xvdHNcbn1cblxuZnVuY3Rpb24gaXNXaGl0ZXNwYWNlIChub2RlKSB7XG4gIHJldHVybiAobm9kZS5pc0NvbW1lbnQgJiYgIW5vZGUuYXN5bmNGYWN0b3J5KSB8fCBub2RlLnRleHQgPT09ICcgJ1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMgKFxuICBzbG90cyxcbiAgbm9ybWFsU2xvdHMsXG4gIHByZXZTbG90c1xuKSB7XG4gIHZhciByZXM7XG4gIHZhciBoYXNOb3JtYWxTbG90cyA9IE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPiAwO1xuICB2YXIgaXNTdGFibGUgPSBzbG90cyA/ICEhc2xvdHMuJHN0YWJsZSA6ICFoYXNOb3JtYWxTbG90cztcbiAgdmFyIGtleSA9IHNsb3RzICYmIHNsb3RzLiRrZXk7XG4gIGlmICghc2xvdHMpIHtcbiAgICByZXMgPSB7fTtcbiAgfSBlbHNlIGlmIChzbG90cy5fbm9ybWFsaXplZCkge1xuICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxuICAgIHJldHVybiBzbG90cy5fbm9ybWFsaXplZFxuICB9IGVsc2UgaWYgKFxuICAgIGlzU3RhYmxlICYmXG4gICAgcHJldlNsb3RzICYmXG4gICAgcHJldlNsb3RzICE9PSBlbXB0eU9iamVjdCAmJlxuICAgIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiZcbiAgICAhaGFzTm9ybWFsU2xvdHMgJiZcbiAgICAhcHJldlNsb3RzLiRoYXNOb3JtYWxcbiAgKSB7XG4gICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LFxuICAgIC8vIG9ubHkgbmVlZCB0byBub3JtYWxpemUgb25jZVxuICAgIHJldHVybiBwcmV2U2xvdHNcbiAgfSBlbHNlIHtcbiAgICByZXMgPSB7fTtcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBzbG90cykge1xuICAgICAgaWYgKHNsb3RzW2tleSQxXSAmJiBrZXkkMVswXSAhPT0gJyQnKSB7XG4gICAgICAgIHJlc1trZXkkMV0gPSBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXkkMSwgc2xvdHNba2V5JDFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gZXhwb3NlIG5vcm1hbCBzbG90cyBvbiBzY29wZWRTbG90c1xuICBmb3IgKHZhciBrZXkkMiBpbiBub3JtYWxTbG90cykge1xuICAgIGlmICghKGtleSQyIGluIHJlcykpIHtcbiAgICAgIHJlc1trZXkkMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleSQyKTtcbiAgICB9XG4gIH1cbiAgLy8gYXZvcmlheiBzZWVtcyB0byBtb2NrIGEgbm9uLWV4dGVuc2libGUgJHNjb3BlZFNsb3RzIG9iamVjdFxuICAvLyBhbmQgd2hlbiB0aGF0IGlzIHBhc3NlZCBkb3duIHRoaXMgd291bGQgY2F1c2UgYW4gZXJyb3JcbiAgaWYgKHNsb3RzICYmIE9iamVjdC5pc0V4dGVuc2libGUoc2xvdHMpKSB7XG4gICAgKHNsb3RzKS5fbm9ybWFsaXplZCA9IHJlcztcbiAgfVxuICBkZWYocmVzLCAnJHN0YWJsZScsIGlzU3RhYmxlKTtcbiAgZGVmKHJlcywgJyRrZXknLCBrZXkpO1xuICBkZWYocmVzLCAnJGhhc05vcm1hbCcsIGhhc05vcm1hbFNsb3RzKTtcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXksIGZuKSB7XG4gIHZhciBub3JtYWxpemVkID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXMgPSBhcmd1bWVudHMubGVuZ3RoID8gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGZuKHt9KTtcbiAgICByZXMgPSByZXMgJiYgdHlwZW9mIHJlcyA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkocmVzKVxuICAgICAgPyBbcmVzXSAvLyBzaW5nbGUgdm5vZGVcbiAgICAgIDogbm9ybWFsaXplQ2hpbGRyZW4ocmVzKTtcbiAgICByZXR1cm4gcmVzICYmIChcbiAgICAgIHJlcy5sZW5ndGggPT09IDAgfHxcbiAgICAgIChyZXMubGVuZ3RoID09PSAxICYmIHJlc1swXS5pc0NvbW1lbnQpIC8vICM5NjU4XG4gICAgKSA/IHVuZGVmaW5lZFxuICAgICAgOiByZXNcbiAgfTtcbiAgLy8gdGhpcyBpcyBhIHNsb3QgdXNpbmcgdGhlIG5ldyB2LXNsb3Qgc3ludGF4IHdpdGhvdXQgc2NvcGUuIGFsdGhvdWdoIGl0IGlzXG4gIC8vIGNvbXBpbGVkIGFzIGEgc2NvcGVkIHNsb3QsIHJlbmRlciBmbiB1c2VycyB3b3VsZCBleHBlY3QgaXQgdG8gYmUgcHJlc2VudFxuICAvLyBvbiB0aGlzLiRzbG90cyBiZWNhdXNlIHRoZSB1c2FnZSBpcyBzZW1hbnRpY2FsbHkgYSBub3JtYWwgc2xvdC5cbiAgaWYgKGZuLnByb3h5KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vcm1hbFNsb3RzLCBrZXksIHtcbiAgICAgIGdldDogbm9ybWFsaXplZCxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbm9ybWFsaXplZFxufVxuXG5mdW5jdGlvbiBwcm94eU5vcm1hbFNsb3Qoc2xvdHMsIGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gc2xvdHNba2V5XTsgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHYtZm9yIGxpc3RzLlxuICovXG5mdW5jdGlvbiByZW5kZXJMaXN0IChcbiAgdmFsLFxuICByZW5kZXJcbikge1xuICB2YXIgcmV0LCBpLCBsLCBrZXlzLCBrZXk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgbCA9IHZhbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGksIGksIGkpOyAvLyBmaXhlZCBieSB4eHh4eHhcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSwgaSwgaSk7IC8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCwgaSsrLCBpKSk7IC8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSwgaSk7IC8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzRGVmKHJldCkpIHtcbiAgICByZXQgPSBbXTtcbiAgfVxuICAocmV0KS5faXNWTGlzdCA9IHRydWU7XG4gIHJldHVybiByZXRcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU2xvdCAoXG4gIG5hbWUsXG4gIGZhbGxiYWNrLFxuICBwcm9wcyxcbiAgYmluZE9iamVjdFxuKSB7XG4gIHZhciBzY29wZWRTbG90Rm4gPSB0aGlzLiRzY29wZWRTbG90c1tuYW1lXTtcbiAgdmFyIG5vZGVzO1xuICBpZiAoc2NvcGVkU2xvdEZuKSB7IC8vIHNjb3BlZCBzbG90XG4gICAgcHJvcHMgPSBwcm9wcyB8fCB7fTtcbiAgICBpZiAoYmluZE9iamVjdCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzT2JqZWN0KGJpbmRPYmplY3QpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ3Nsb3Qgdi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QnLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHByb3BzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmluZE9iamVjdCksIHByb3BzKTtcbiAgICB9XG4gICAgLy8gZml4ZWQgYnkgeHh4eHh4IGFwcC1wbHVzIHNjb3BlZFNsb3RcbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcywgdGhpcywgcHJvcHMuX2kpIHx8IGZhbGxiYWNrO1xuICB9IGVsc2Uge1xuICAgIG5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV0gfHwgZmFsbGJhY2s7XG4gIH1cblxuICB2YXIgdGFyZ2V0ID0gcHJvcHMgJiYgcHJvcHMuc2xvdDtcbiAgaWYgKHRhcmdldCkge1xuICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScsIHsgc2xvdDogdGFyZ2V0IH0sIG5vZGVzKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBub2Rlc1xuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgZmlsdGVyc1xuICovXG5mdW5jdGlvbiByZXNvbHZlRmlsdGVyIChpZCkge1xuICByZXR1cm4gcmVzb2x2ZUFzc2V0KHRoaXMuJG9wdGlvbnMsICdmaWx0ZXJzJywgaWQsIHRydWUpIHx8IGlkZW50aXR5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0tleU5vdE1hdGNoIChleHBlY3QsIGFjdHVhbCkge1xuICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3QpKSB7XG4gICAgcmV0dXJuIGV4cGVjdC5pbmRleE9mKGFjdHVhbCkgPT09IC0xXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGV4cGVjdCAhPT0gYWN0dWFsXG4gIH1cbn1cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgY2hlY2tpbmcga2V5Q29kZXMgZnJvbSBjb25maWcuXG4gKiBleHBvc2VkIGFzIFZ1ZS5wcm90b3R5cGUuX2tcbiAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICovXG5mdW5jdGlvbiBjaGVja0tleUNvZGVzIChcbiAgZXZlbnRLZXlDb2RlLFxuICBrZXksXG4gIGJ1aWx0SW5LZXlDb2RlLFxuICBldmVudEtleU5hbWUsXG4gIGJ1aWx0SW5LZXlOYW1lXG4pIHtcbiAgdmFyIG1hcHBlZEtleUNvZGUgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluS2V5Q29kZTtcbiAgaWYgKGJ1aWx0SW5LZXlOYW1lICYmIGV2ZW50S2V5TmFtZSAmJiAhY29uZmlnLmtleUNvZGVzW2tleV0pIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChidWlsdEluS2V5TmFtZSwgZXZlbnRLZXlOYW1lKVxuICB9IGVsc2UgaWYgKG1hcHBlZEtleUNvZGUpIHtcbiAgICByZXR1cm4gaXNLZXlOb3RNYXRjaChtYXBwZWRLZXlDb2RlLCBldmVudEtleUNvZGUpXG4gIH0gZWxzZSBpZiAoZXZlbnRLZXlOYW1lKSB7XG4gICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXlcbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgbWVyZ2luZyB2LWJpbmQ9XCJvYmplY3RcIiBpbnRvIGEgVk5vZGUncyBkYXRhLlxuICovXG5mdW5jdGlvbiBiaW5kT2JqZWN0UHJvcHMgKFxuICBkYXRhLFxuICB0YWcsXG4gIHZhbHVlLFxuICBhc1Byb3AsXG4gIGlzU3luY1xuKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvbiA9IGRhdGEub24gPSBkYXRhLm9uID8gZXh0ZW5kKHt9LCBkYXRhLm9uKSA6IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgIHZhciBvdXJzID0gdmFsdWVba2V5XTtcbiAgICAgICAgb25ba2V5XSA9IGV4aXN0aW5nID8gW10uY29uY2F0KGV4aXN0aW5nLCBvdXJzKSA6IG91cnM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICBmbnMsIC8vIHNlZSBmbG93L3Zub2RlXG4gIHJlcyxcbiAgLy8gdGhlIGZvbGxvd2luZyBhcmUgYWRkZWQgaW4gMi42XG4gIGhhc0R5bmFtaWNLZXlzLFxuICBjb250ZW50SGFzaEtleVxuKSB7XG4gIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzbG90ID0gZm5zW2ldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsb3QpKSB7XG4gICAgICByZXNvbHZlU2NvcGVkU2xvdHMoc2xvdCwgcmVzLCBoYXNEeW5hbWljS2V5cyk7XG4gICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICAvLyBtYXJrZXIgZm9yIHJldmVyc2UgcHJveHlpbmcgdi1zbG90IHdpdGhvdXQgc2NvcGUgb24gdGhpcy4kc2xvdHNcbiAgICAgIGlmIChzbG90LnByb3h5KSB7XG4gICAgICAgIHNsb3QuZm4ucHJveHkgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmVzW3Nsb3Qua2V5XSA9IHNsb3QuZm47XG4gICAgfVxuICB9XG4gIGlmIChjb250ZW50SGFzaEtleSkge1xuICAgIChyZXMpLiRrZXkgPSBjb250ZW50SGFzaEtleTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kRHluYW1pY0tleXMgKGJhc2VPYmosIHZhbHVlcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBrZXkgPSB2YWx1ZXNbaV07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkge1xuICAgICAgYmFzZU9ialt2YWx1ZXNbaV1dID0gdmFsdWVzW2kgKyAxXTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYga2V5ICE9PSAnJyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgIC8vIG51bGwgaXMgYSBzcGVjaWFsIHZhbHVlIGZvciBleHBsaWNpdGx5IHJlbW92aW5nIGEgYmluZGluZ1xuICAgICAgd2FybihcbiAgICAgICAgKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIgKyBrZXkpLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZU9ialxufVxuXG4vLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbi8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0XG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xuICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICB2YXIgdGhpcyQxID0gdGhpcztcblxuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgLy8gZW5zdXJlIHRoZSBjcmVhdGVFbGVtZW50IGZ1bmN0aW9uIGluIGZ1bmN0aW9uYWwgY29tcG9uZW50c1xuICAvLyBnZXRzIGEgdW5pcXVlIGNvbnRleHQgLSB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgY29ycmVjdCBuYW1lZCBzbG90IGNoZWNrXG4gIHZhciBjb250ZXh0Vm07XG4gIGlmIChoYXNPd24ocGFyZW50LCAnX3VpZCcpKSB7XG4gICAgY29udGV4dFZtID0gT2JqZWN0LmNyZWF0ZShwYXJlbnQpO1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIGNvbnRleHRWbS5fb3JpZ2luYWwgPSBwYXJlbnQ7XG4gIH0gZWxzZSB7XG4gICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgLy8gaW4gdGhpcyBjYXNlIHdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIGFyZSBhYmxlIHRvIGdldCBhIGhvbGQgdG8gdGhlXG4gICAgLy8gcmVhbCBjb250ZXh0IGluc3RhbmNlLlxuICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBwYXJlbnQgPSBwYXJlbnQuX29yaWdpbmFsO1xuICB9XG4gIHZhciBpc0NvbXBpbGVkID0gaXNUcnVlKG9wdGlvbnMuX2NvbXBpbGVkKTtcbiAgdmFyIG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzJDEuJHNsb3RzKSB7XG4gICAgICBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdGhpcyQxLiRzbG90cyA9IHJlc29sdmVTbG90cyhjaGlsZHJlbiwgcGFyZW50KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMkMS4kc2xvdHNcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpXG4gICAgfVxuICB9KSk7XG5cbiAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoaXNDb21waWxlZCkge1xuICAgIC8vIGV4cG9zaW5nICRvcHRpb25zIGZvciByZW5kZXJTdGF0aWMoKVxuICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgIC8vIHByZS1yZXNvbHZlIHNsb3RzIGZvciByZW5kZXJTbG90KClcbiAgICB0aGlzLiRzbG90cyA9IHRoaXMuc2xvdHMoKTtcbiAgICB0aGlzLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuJHNsb3RzKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLl9zY29wZUlkKSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTsgfTtcbiAgfVxufVxuXG5pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0Vm0sXG4gIGNoaWxkcmVuXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoaXNEZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSB8fCBlbXB0eU9iamVjdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChpc0RlZihkYXRhLmF0dHJzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTsgfVxuICAgIGlmIChpc0RlZihkYXRhLnByb3BzKSkgeyBtZXJnZVByb3BzKHByb3BzLCBkYXRhLnByb3BzKTsgfVxuICB9XG5cbiAgdmFyIHJlbmRlckNvbnRleHQgPSBuZXcgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQoXG4gICAgZGF0YSxcbiAgICBwcm9wcyxcbiAgICBjaGlsZHJlbixcbiAgICBjb250ZXh0Vm0sXG4gICAgQ3RvclxuICApO1xuXG4gIHZhciB2bm9kZSA9IG9wdGlvbnMucmVuZGVyLmNhbGwobnVsbCwgcmVuZGVyQ29udGV4dC5fYywgcmVuZGVyQ29udGV4dCk7XG5cbiAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm4gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZSwgZGF0YSwgcmVuZGVyQ29udGV4dC5wYXJlbnQsIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpXG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgIHZhciByZXMgPSBuZXcgQXJyYXkodm5vZGVzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc1tpXSA9IGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGVzW2ldLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0ICh2bm9kZSwgZGF0YSwgY29udGV4dFZtLCBvcHRpb25zLCByZW5kZXJDb250ZXh0KSB7XG4gIC8vICM3ODE3IGNsb25lIG5vZGUgYmVmb3JlIHNldHRpbmcgZm5Db250ZXh0LCBvdGhlcndpc2UgaWYgdGhlIG5vZGUgaXMgcmV1c2VkXG4gIC8vIChlLmcuIGl0IHdhcyBmcm9tIGEgY2FjaGVkIG5vcm1hbCBzbG90KSB0aGUgZm5Db250ZXh0IGNhdXNlcyBuYW1lZCBzbG90c1xuICAvLyB0aGF0IHNob3VsZCBub3QgYmUgbWF0Y2hlZCB0byBtYXRjaC5cbiAgdmFyIGNsb25lID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gIGNsb25lLmZuQ29udGV4dCA9IGNvbnRleHRWbTtcbiAgY2xvbmUuZm5PcHRpb25zID0gb3B0aW9ucztcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAoY2xvbmUuZGV2dG9vbHNNZXRhID0gY2xvbmUuZGV2dG9vbHNNZXRhIHx8IHt9KS5yZW5kZXJDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcbiAgfVxuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG4gICAgdG9bY2FtZWxpemUoa2V5KV0gPSBmcm9tW2tleV07XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGlubGluZSBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG52YXIgY29tcG9uZW50Vk5vZGVIb29rcyA9IHtcbiAgaW5pdDogZnVuY3Rpb24gaW5pdCAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIGlmIChcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlICYmXG4gICAgICAhdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkICYmXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICkge1xuICAgICAgLy8ga2VwdC1hbGl2ZSBjb21wb25lbnRzLCB0cmVhdCBhcyBhIHBhdGNoXG4gICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgIHZub2RlLFxuICAgICAgICBhY3RpdmVJbnN0YW5jZVxuICAgICAgKTtcbiAgICAgIGNoaWxkLiRtb3VudChoeWRyYXRpbmcgPyB2bm9kZS5lbG0gOiB1bmRlZmluZWQsIGh5ZHJhdGluZyk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBhdGNoOiBmdW5jdGlvbiBwcmVwYXRjaCAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgdXBkYXRlQ2hpbGRDb21wb25lbnQoXG4gICAgICBjaGlsZCxcbiAgICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG4gICAgICBvcHRpb25zLmxpc3RlbmVycywgLy8gdXBkYXRlZCBsaXN0ZW5lcnNcbiAgICAgIHZub2RlLCAvLyBuZXcgcGFyZW50IHZub2RlXG4gICAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuICAgICk7XG4gIH0sXG5cbiAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7XG4gICAgdmFyIGNvbnRleHQgPSB2bm9kZS5jb250ZXh0O1xuICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCkge1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdvblNlcnZpY2VDcmVhdGVkJyk7XG4gICAgICBjYWxsSG9vayhjb21wb25lbnRJbnN0YW5jZSwgJ29uU2VydmljZUF0dGFjaGVkJyk7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZywgY29udGV4dCk7IC8vIGZpeGVkIGJ5IHh4eHh4eFxuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIHZub2RlLCAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3RcbiAgcGFyZW50IC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZXhpc3RpbmcgPSBob29rc1trZXldO1xuICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICBob29rc1trZXldID0gZXhpc3RpbmcgPyBtZXJnZUhvb2skMSh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAoZjEsIGYyKSB7XG4gIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgOyhkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkge1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXG4gICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgKSB7XG4gICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgJ0Fsd2F5cyBjcmVhdGUgZnJlc2ggdm5vZGUgZGF0YSBvYmplY3RzIGluIGVhY2ggcmVuZGVyIScsXG4gICAgICBjb250ZXh0XG4gICAgKTtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEuaXMpKSB7XG4gICAgdGFnID0gZGF0YS5pcztcbiAgfVxuICBpZiAoIXRhZykge1xuICAgIC8vIGluIGNhc2Ugb2YgY29tcG9uZW50IDppcyBzZXQgdG8gZmFsc3kgdmFsdWVcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1wcmltaXRpdmUga2V5XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGRhdGEpICYmIGlzRGVmKGRhdGEubmF0aXZlT24pKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiVGhlIC5uYXRpdmUgbW9kaWZpZXIgZm9yIHYtb24gaXMgb25seSB2YWxpZCBvbiBjb21wb25lbnRzIGJ1dCBpdCB3YXMgdXNlZCBvbiA8XCIgKyB0YWcgKyBcIj4uXCIpLFxuICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICBjb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUodGFnKSwgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoKCFkYXRhIHx8ICFkYXRhLnByZSkgJiYgaXNEZWYoQ3RvciA9IHJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCAnY29tcG9uZW50cycsIHRhZykpKSB7XG4gICAgICAvLyBjb21wb25lbnRcbiAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcbiAgICAgIC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG4gICAgICAvLyBwYXJlbnQgbm9ybWFsaXplcyBjaGlsZHJlblxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIHRhZywgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvclxuICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KHRhZywgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2UgaWYgKGlzRGVmKHZub2RlKSkge1xuICAgIGlmIChpc0RlZihucykpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7IHJlZ2lzdGVyRGVlcEJpbmRpbmdzKGRhdGEpOyB9XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5TlMgKHZub2RlLCBucywgZm9yY2UpIHtcbiAgdm5vZGUubnMgPSBucztcbiAgaWYgKHZub2RlLnRhZyA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgLy8gdXNlIGRlZmF1bHQgbmFtZXNwYWNlIGluc2lkZSBmb3JlaWduT2JqZWN0XG4gICAgbnMgPSB1bmRlZmluZWQ7XG4gICAgZm9yY2UgPSB0cnVlO1xuICB9XG4gIGlmIChpc0RlZih2bm9kZS5jaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoY2hpbGQudGFnKSAmJiAoXG4gICAgICAgIGlzVW5kZWYoY2hpbGQubnMpIHx8IChpc1RydWUoZm9yY2UpICYmIGNoaWxkLnRhZyAhPT0gJ3N2ZycpKSkge1xuICAgICAgICBhcHBseU5TKGNoaWxkLCBucywgZm9yY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyByZWYgIzUzMThcbi8vIG5lY2Vzc2FyeSB0byBlbnN1cmUgcGFyZW50IHJlLXJlbmRlciB3aGVuIGRlZXAgYmluZGluZ3MgbGlrZSA6c3R5bGUgYW5kXG4vLyA6Y2xhc3MgYXJlIHVzZWQgb24gc2xvdCBub2Rlc1xuZnVuY3Rpb24gcmVnaXN0ZXJEZWVwQmluZGluZ3MgKGRhdGEpIHtcbiAgaWYgKGlzT2JqZWN0KGRhdGEuc3R5bGUpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5zdHlsZSk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KGRhdGEuY2xhc3MpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5jbGFzcyk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRSZW5kZXIgKHZtKSB7XG4gIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlXG4gIHZtLl9zdGF0aWNUcmVlcyA9IG51bGw7IC8vIHYtb25jZSBjYWNoZWQgdHJlZXNcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgdmFyIHBhcmVudFZub2RlID0gdm0uJHZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7IC8vIHRoZSBwbGFjZWhvbGRlciBub2RlIGluIHBhcmVudCB0cmVlXG4gIHZhciByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDtcbiAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgdm0uJHNjb3BlZFNsb3RzID0gZW1wdHlPYmplY3Q7XG4gIC8vIGJpbmQgdGhlIGNyZWF0ZUVsZW1lbnQgZm4gdG8gdGhpcyBpbnN0YW5jZVxuICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuICAvLyBhcmdzIG9yZGVyOiB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSwgYWx3YXlzTm9ybWFsaXplXG4gIC8vIGludGVybmFsIHZlcnNpb24gaXMgdXNlZCBieSByZW5kZXIgZnVuY3Rpb25zIGNvbXBpbGVkIGZyb20gdGVtcGxhdGVzXG4gIHZtLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTsgfTtcbiAgLy8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluXG4gIC8vIHVzZXItd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zLlxuICB2bS4kY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcblxuICAvLyAkYXR0cnMgJiAkbGlzdGVuZXJzIGFyZSBleHBvc2VkIGZvciBlYXNpZXIgSE9DIGNyZWF0aW9uLlxuICAvLyB0aGV5IG5lZWQgdG8gYmUgcmVhY3RpdmUgc28gdGhhdCBIT0NzIHVzaW5nIHRoZW0gYXJlIGFsd2F5cyB1cGRhdGVkXG4gIHZhciBwYXJlbnREYXRhID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuZGF0YTtcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkYXR0cnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgbnVsbCwgdHJ1ZSk7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckbGlzdGVuZXJzJywgb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgfVxufVxuXG52YXIgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICBpZiAoX3BhcmVudFZub2RlKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHZtLiRzbG90cyxcbiAgICAgICAgdm0uJHNjb3BlZFNsb3RzXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3NcbiAgICAvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cbiAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7XG4gICAgLy8gcmVuZGVyIHNlbGZcbiAgICB2YXIgdm5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBtYWludGFpbiBhIHN0YWNrIGJlY2F1c2UgYWxsIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gc2VwYXJhdGVseSBmcm9tIG9uZSBhbm90aGVyLiBOZXN0ZWQgY29tcG9uZW50J3MgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyB3aGVuIHBhcmVudCBjb21wb25lbnQgaXMgcGF0Y2hlZC5cbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IHZtO1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2bm9kZSA9IHZtLiRvcHRpb25zLnJlbmRlckVycm9yLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCwgZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJFcnJvclwiKTtcbiAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG4gICAgfVxuICAgIC8vIGlmIHRoZSByZXR1cm5lZCBhcnJheSBjb250YWlucyBvbmx5IGEgc2luZ2xlIG5vZGUsIGFsbG93IGl0XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpICYmIHZub2RlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdm5vZGUgPSB2bm9kZVswXTtcbiAgICB9XG4gICAgLy8gcmV0dXJuIGVtcHR5IHZub2RlIGluIGNhc2UgdGhlIHJlbmRlciBmdW5jdGlvbiBlcnJvcmVkIG91dFxuICAgIGlmICghKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArXG4gICAgICAgICAgJ3Nob3VsZCByZXR1cm4gYSBzaW5nbGUgcm9vdCBub2RlLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICAgIH1cbiAgICAvLyBzZXQgcGFyZW50XG4gICAgdm5vZGUucGFyZW50ID0gX3BhcmVudFZub2RlO1xuICAgIHJldHVybiB2bm9kZVxuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW5zdXJlQ3RvciAoY29tcCwgYmFzZSkge1xuICBpZiAoXG4gICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgKGhhc1N5bWJvbCAmJiBjb21wW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdNb2R1bGUnKVxuICApIHtcbiAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICB9XG4gIHJldHVybiBpc09iamVjdChjb21wKVxuICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICA6IGNvbXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gIGZhY3RvcnksXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICB2YXIgbm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgbm9kZS5hc3luY0ZhY3RvcnkgPSBmYWN0b3J5O1xuICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICByZXR1cm4gbm9kZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICBmYWN0b3J5LFxuICBiYXNlQ3RvclxuKSB7XG4gIGlmIChpc1RydWUoZmFjdG9yeS5lcnJvcikgJiYgaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkuZXJyb3JDb21wXG4gIH1cblxuICBpZiAoaXNEZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5yZXNvbHZlZFxuICB9XG5cbiAgdmFyIG93bmVyID0gY3VycmVudFJlbmRlcmluZ0luc3RhbmNlO1xuICBpZiAob3duZXIgJiYgaXNEZWYoZmFjdG9yeS5vd25lcnMpICYmIGZhY3Rvcnkub3duZXJzLmluZGV4T2Yob3duZXIpID09PSAtMSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3Rvcnkub3duZXJzLnB1c2gob3duZXIpO1xuICB9XG5cbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgfVxuXG4gIGlmIChvd25lciAmJiAhaXNEZWYoZmFjdG9yeS5vd25lcnMpKSB7XG4gICAgdmFyIG93bmVycyA9IGZhY3Rvcnkub3duZXJzID0gW293bmVyXTtcbiAgICB2YXIgc3luYyA9IHRydWU7XG4gICAgdmFyIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgdmFyIHRpbWVyVGltZW91dCA9IG51bGxcblxuICAgIDsob3duZXIpLiRvbignaG9vazpkZXN0cm95ZWQnLCBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUob3duZXJzLCBvd25lcik7IH0pO1xuXG4gICAgdmFyIGZvcmNlUmVuZGVyID0gZnVuY3Rpb24gKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvd25lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIChvd25lcnNbaV0pLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgICBpZiAodGltZXJMb2FkaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyTG9hZGluZyk7XG4gICAgICAgICAgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGltZXJUaW1lb3V0ICE9PSBudWxsKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyVGltZW91dCk7XG4gICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlcykge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgaWYgKGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShyZXMuY29tcG9uZW50KSkge1xuICAgICAgICByZXMuY29tcG9uZW50LnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgICAgICBpZiAoaXNEZWYocmVzLmVycm9yKSkge1xuICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMubG9hZGluZykpIHtcbiAgICAgICAgICBmYWN0b3J5LmxvYWRpbmdDb21wID0gZW5zdXJlQ3RvcihyZXMubG9hZGluZywgYmFzZUN0b3IpO1xuICAgICAgICAgIGlmIChyZXMuZGVsYXkgPT09IDApIHtcbiAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSAmJiBpc1VuZGVmKGZhY3RvcnkuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMudGltZW91dCkpIHtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJ1xuICAgICAgICAgICAgICAgICAgPyAoXCJ0aW1lb3V0IChcIiArIChyZXMudGltZW91dCkgKyBcIm1zKVwiKVxuICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgcmVzLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3luYyA9IGZhbHNlO1xuICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nXG4gICAgICA/IGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgICAgIDogZmFjdG9yeS5yZXNvbHZlZFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkIChjaGlsZHJlbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHtcbiAgICAgICAgcmV0dXJuIGNcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gIH1cbn1cblxudmFyIHRhcmdldDtcblxuZnVuY3Rpb24gYWRkIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMSAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyIChldmVudCwgZm4pIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQ7XG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgX3RhcmdldC4kb2ZmKGV2ZW50LCBvbmNlSGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCwgcmVtb3ZlJDEsIGNyZWF0ZU9uY2VIYW5kbGVyLCB2bSk7XG4gIHRhcmdldCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkge1xuICB2YXIgaG9va1JFID0gL15ob29rOi87XG4gIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2bS4kb24oZXZlbnRbaV0sIGZuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7XG4gICAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG4gICAgICBpZiAoaG9va1JFLnRlc3QoZXZlbnQpKSB7XG4gICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkkMSA8IGw7IGkkMSsrKSB7XG4gICAgICAgIHZtLiRvZmYoZXZlbnRbaSQxXSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmICghY2JzKSB7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKCFmbikge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2I7XG4gICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHZhciBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAobG93ZXJDYXNlRXZlbnQgIT09IGV2ZW50ICYmIHZtLl9ldmVudHNbbG93ZXJDYXNlRXZlbnRdKSB7XG4gICAgICAgIHRpcChcbiAgICAgICAgICBcIkV2ZW50IFxcXCJcIiArIGxvd2VyQ2FzZUV2ZW50ICsgXCJcXFwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIgYnV0IHRoZSBoYW5kbGVyIGlzIHJlZ2lzdGVyZWQgZm9yIFxcXCJcIiArIGV2ZW50ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgXCJOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBcIiArXG4gICAgICAgICAgXCJ2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gXCIgK1xuICAgICAgICAgIFwiWW91IHNob3VsZCBwcm9iYWJseSB1c2UgXFxcIlwiICsgKGh5cGhlbmF0ZShldmVudCkpICsgXCJcXFwiIGluc3RlYWQgb2YgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmIChjYnMpIHtcbiAgICAgIGNicyA9IGNicy5sZW5ndGggPiAxID8gdG9BcnJheShjYnMpIDogY2JzO1xuICAgICAgdmFyIGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgICB2YXIgaW5mbyA9IFwiZXZlbnQgaGFuZGxlciBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCJcIjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gY2JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjYnNbaV0sIHZtLCBhcmdzLCB2bSwgaW5mbyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIGFjdGl2ZUluc3RhbmNlID0gbnVsbDtcbnZhciBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcblxuZnVuY3Rpb24gc2V0QWN0aXZlSW5zdGFuY2Uodm0pIHtcbiAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICBhY3RpdmVJbnN0YW5jZSA9IHZtO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGFjdGl2ZUluc3RhbmNlID0gcHJldkFjdGl2ZUluc3RhbmNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG5cbiAgLy8gbG9jYXRlIGZpcnN0IG5vbi1hYnN0cmFjdCBwYXJlbnRcbiAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBpZiAocGFyZW50ICYmICFvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgd2hpbGUgKHBhcmVudC4kb3B0aW9ucy5hYnN0cmFjdCAmJiBwYXJlbnQuJHBhcmVudCkge1xuICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgfVxuICAgIHBhcmVudC4kY2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICB2bS4kcGFyZW50ID0gcGFyZW50O1xuICB2bS4kcm9vdCA9IHBhcmVudCA/IHBhcmVudC4kcm9vdCA6IHZtO1xuXG4gIHZtLiRjaGlsZHJlbiA9IFtdO1xuICB2bS4kcmVmcyA9IHt9O1xuXG4gIHZtLl93YXRjaGVyID0gbnVsbDtcbiAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gIHZtLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciBwcmV2RWwgPSB2bS4kZWw7XG4gICAgdmFyIHByZXZWbm9kZSA9IHZtLl92bm9kZTtcbiAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2Uodm0pO1xuICAgIHZtLl92bm9kZSA9IHZub2RlO1xuICAgIC8vIFZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fIGlzIGluamVjdGVkIGluIGVudHJ5IHBvaW50c1xuICAgIC8vIGJhc2VkIG9uIHRoZSByZW5kZXJpbmcgYmFja2VuZCB1c2VkLlxuICAgIGlmICghcHJldlZub2RlKSB7XG4gICAgICAvLyBpbml0aWFsIHJlbmRlclxuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHZtLiRlbCwgdm5vZGUsIGh5ZHJhdGluZywgZmFsc2UgLyogcmVtb3ZlT25seSAqLyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZXNcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyhwcmV2Vm5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgLy8gdXBkYXRlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IHZtO1xuICAgIH1cbiAgICAvLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG4gICAgaWYgKHZtLiR2bm9kZSAmJiB2bS4kcGFyZW50ICYmIHZtLiR2bm9kZSA9PT0gdm0uJHBhcmVudC5fdm5vZGUpIHtcbiAgICAgIHZtLiRwYXJlbnQuJGVsID0gdm0uJGVsO1xuICAgIH1cbiAgICAvLyB1cGRhdGVkIGhvb2sgaXMgY2FsbGVkIGJ5IHRoZSBzY2hlZHVsZXIgdG8gZW5zdXJlIHRoYXQgY2hpbGRyZW4gYXJlXG4gICAgLy8gdXBkYXRlZCBpbiBhIHBhcmVudCdzIHVwZGF0ZWQgaG9vay5cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZURlc3Ryb3knKTtcbiAgICB2bS5faXNCZWluZ0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSBwYXJlbnRcbiAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICBpZiAocGFyZW50ICYmICFwYXJlbnQuX2lzQmVpbmdEZXN0cm95ZWQgJiYgIXZtLiRvcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICByZW1vdmUocGFyZW50LiRjaGlsZHJlbiwgdm0pO1xuICAgIH1cbiAgICAvLyB0ZWFyZG93biB3YXRjaGVyc1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudGVhcmRvd24oKTtcbiAgICB9XG4gICAgdmFyIGkgPSB2bS5fd2F0Y2hlcnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZtLl93YXRjaGVyc1tpXS50ZWFyZG93bigpO1xuICAgIH1cbiAgICAvLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYlxuICAgIC8vIGZyb3plbiBvYmplY3QgbWF5IG5vdCBoYXZlIG9ic2VydmVyLlxuICAgIGlmICh2bS5fZGF0YS5fX29iX18pIHtcbiAgICAgIHZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07XG4gICAgfVxuICAgIC8vIGNhbGwgdGhlIGxhc3QgaG9vay4uLlxuICAgIHZtLl9pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgLy8gaW52b2tlIGRlc3Ryb3kgaG9va3Mgb24gY3VycmVudCByZW5kZXJlZCB0cmVlXG4gICAgdm0uX19wYXRjaF9fKHZtLl92bm9kZSwgbnVsbCk7XG4gICAgLy8gZmlyZSBkZXN0cm95ZWQgaG9va1xuICAgIGNhbGxIb29rKHZtLCAnZGVzdHJveWVkJyk7XG4gICAgLy8gdHVybiBvZmYgYWxsIGluc3RhbmNlIGxpc3RlbmVycy5cbiAgICB2bS4kb2ZmKCk7XG4gICAgLy8gcmVtb3ZlIF9fdnVlX18gcmVmZXJlbmNlXG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsO1xuICAgIH1cbiAgICAvLyByZWxlYXNlIGNpcmN1bGFyIHJlZmVyZW5jZSAoIzY3NTkpXG4gICAgaWYgKHZtLiR2bm9kZSkge1xuICAgICAgdm0uJHZub2RlLnBhcmVudCA9IG51bGw7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cbiAgXG4gIC8vIGZpeGVkIGJ5IHh4eHh4eCB1cGRhdGUgcHJvcGVydGllcyhtcCBydW50aW1lKVxuICB2bS5fJHVwZGF0ZVByb3BlcnRpZXMgJiYgdm0uXyR1cGRhdGVQcm9wZXJ0aWVzKHZtKTtcbiAgXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSB7IHJldHVybiB0cnVlIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gZmFsc2U7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2FjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICBpZiAoZGlyZWN0KSB7XG4gICAgdm0uX2RpcmVjdEluYWN0aXZlID0gdHJ1ZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxuICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBjYWxsSG9vayh2bSwgJ2RlYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbEhvb2sgKHZtLCBob29rKSB7XG4gIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgcHVzaFRhcmdldCgpO1xuICB2YXIgaGFuZGxlcnMgPSB2bS4kb3B0aW9uc1tob29rXTtcbiAgdmFyIGluZm8gPSBob29rICsgXCIgaG9va1wiO1xuICBpZiAoaGFuZGxlcnMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgaiA9IGhhbmRsZXJzLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7XG4gICAgfVxuICB9XG4gIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgdm0uJGVtaXQoJ2hvb2s6JyArIGhvb2spO1xuICB9XG4gIHBvcFRhcmdldCgpO1xufVxuXG4vKiAgKi9cblxudmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGFjdGl2YXRlZENoaWxkcmVuID0gW107XG52YXIgaGFzID0ge307XG52YXIgY2lyY3VsYXIgPSB7fTtcbnZhciB3YWl0aW5nID0gZmFsc2U7XG52YXIgZmx1c2hpbmcgPSBmYWxzZTtcbnZhciBpbmRleCA9IDA7XG5cbi8qKlxuICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICovXG5mdW5jdGlvbiByZXNldFNjaGVkdWxlclN0YXRlICgpIHtcbiAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xuICBoYXMgPSB7fTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBjaXJjdWxhciA9IHt9O1xuICB9XG4gIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vLyBBc3luYyBlZGdlIGNhc2UgIzY1NjYgcmVxdWlyZXMgc2F2aW5nIHRoZSB0aW1lc3RhbXAgd2hlbiBldmVudCBsaXN0ZW5lcnMgYXJlXG4vLyBhdHRhY2hlZC4gSG93ZXZlciwgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSBoYXMgYSBwZXJmIG92ZXJoZWFkIGVzcGVjaWFsbHlcbi8vIGlmIHRoZSBwYWdlIGhhcyB0aG91c2FuZHMgb2YgZXZlbnQgbGlzdGVuZXJzLiBJbnN0ZWFkLCB3ZSB0YWtlIGEgdGltZXN0YW1wXG4vLyBldmVyeSB0aW1lIHRoZSBzY2hlZHVsZXIgZmx1c2hlcyBhbmQgdXNlIHRoYXQgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnNcbi8vIGF0dGFjaGVkIGR1cmluZyB0aGF0IGZsdXNoLlxudmFyIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IDA7XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXG52YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7XG5cbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXG4vLyB0aW1lc3RhbXAgY2FuIGVpdGhlciBiZSBoaS1yZXMgKHJlbGF0aXZlIHRvIHBhZ2UgbG9hZCkgb3IgbG93LXJlc1xuLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXG4vLyBBbGwgSUUgdmVyc2lvbnMgdXNlIGxvdy1yZXMgZXZlbnQgdGltZXN0YW1wcywgYW5kIGhhdmUgcHJvYmxlbWF0aWMgY2xvY2tcbi8vIGltcGxlbWVudGF0aW9ucyAoIzk2MzIpXG5pZiAoaW5Ccm93c2VyICYmICFpc0lFKSB7XG4gIHZhciBwZXJmb3JtYW5jZSA9IHdpbmRvdy5wZXJmb3JtYW5jZTtcbiAgaWYgKFxuICAgIHBlcmZvcm1hbmNlICYmXG4gICAgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIGdldE5vdygpID4gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JykudGltZVN0YW1wXG4gICkge1xuICAgIC8vIGlmIHRoZSBldmVudCB0aW1lc3RhbXAsIGFsdGhvdWdoIGV2YWx1YXRlZCBBRlRFUiB0aGUgRGF0ZS5ub3coKSwgaXNcbiAgICAvLyBzbWFsbGVyIHRoYW4gaXQsIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXG4gICAgLy8gYW5kIHdlIG5lZWQgdG8gdXNlIHRoZSBoaS1yZXMgdmVyc2lvbiBmb3IgZXZlbnQgbGlzdGVuZXIgdGltZXN0YW1wcyBhc1xuICAgIC8vIHdlbGwuXG4gICAgZ2V0Tm93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH07XG4gIH1cbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpO1xuICBmbHVzaGluZyA9IHRydWU7XG4gIHZhciB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlmICh3YXRjaGVyLmJlZm9yZSkge1xuICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcbiAgICB9XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGhhc1tpZF0gIT0gbnVsbCkge1xuICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICBpZiAoY2lyY3VsYXJbaWRdID4gTUFYX1VQREFURV9DT1VOVCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgIHdhdGNoZXIudXNlclxuICAgICAgICAgICAgICA/IChcImluIHdhdGNoZXIgd2l0aCBleHByZXNzaW9uIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpXG4gICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gIHZhciB1cGRhdGVkUXVldWUgPSBxdWV1ZS5zbGljZSgpO1xuXG4gIHJlc2V0U2NoZWR1bGVyU3RhdGUoKTtcblxuICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgY2FsbEFjdGl2YXRlZEhvb2tzKGFjdGl2YXRlZFF1ZXVlKTtcbiAgY2FsbFVwZGF0ZWRIb29rcyh1cGRhdGVkUXVldWUpO1xuXG4gIC8vIGRldnRvb2wgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGRldnRvb2xzICYmIGNvbmZpZy5kZXZ0b29scykge1xuICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgdmFyIGkgPSBxdWV1ZS5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIHZhciB2bSA9IHdhdGNoZXIudm07XG4gICAgaWYgKHZtLl93YXRjaGVyID09PSB3YXRjaGVyICYmIHZtLl9pc01vdW50ZWQgJiYgIXZtLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgY2FsbEhvb2sodm0sICd1cGRhdGVkJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUXVldWUgYSBrZXB0LWFsaXZlIGNvbXBvbmVudCB0aGF0IHdhcyBhY3RpdmF0ZWQgZHVyaW5nIHBhdGNoLlxuICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudCAodm0pIHtcbiAgLy8gc2V0dGluZyBfaW5hY3RpdmUgdG8gZmFsc2UgaGVyZSBzbyB0aGF0IGEgcmVuZGVyIGZ1bmN0aW9uIGNhblxuICAvLyByZWx5IG9uIGNoZWNraW5nIHdoZXRoZXIgaXQncyBpbiBhbiBpbmFjdGl2ZSB0cmVlIChlLmcuIHJvdXRlci12aWV3KVxuICB2bS5faW5hY3RpdmUgPSBmYWxzZTtcbiAgYWN0aXZhdGVkQ2hpbGRyZW4ucHVzaCh2bSk7XG59XG5cbmZ1bmN0aW9uIGNhbGxBY3RpdmF0ZWRIb29rcyAocXVldWUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIHF1ZXVlW2ldLl9pbmFjdGl2ZSA9IHRydWU7XG4gICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudChxdWV1ZVtpXSwgdHJ1ZSAvKiB0cnVlICovKTtcbiAgfVxufVxuXG4vKipcbiAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gKiBKb2JzIHdpdGggZHVwbGljYXRlIElEcyB3aWxsIGJlIHNraXBwZWQgdW5sZXNzIGl0J3NcbiAqIHB1c2hlZCB3aGVuIHRoZSBxdWV1ZSBpcyBiZWluZyBmbHVzaGVkLlxuICovXG5mdW5jdGlvbiBxdWV1ZVdhdGNoZXIgKHdhdGNoZXIpIHtcbiAgdmFyIGlkID0gd2F0Y2hlci5pZDtcbiAgaWYgKGhhc1tpZF0gPT0gbnVsbCkge1xuICAgIGhhc1tpZF0gPSB0cnVlO1xuICAgIGlmICghZmx1c2hpbmcpIHtcbiAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGlmIGFscmVhZHkgZmx1c2hpbmcsIHNwbGljZSB0aGUgd2F0Y2hlciBiYXNlZCBvbiBpdHMgaWRcbiAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuXG4gICAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aCAtIDE7XG4gICAgICB3aGlsZSAoaSA+IGluZGV4ICYmIHF1ZXVlW2ldLmlkID4gd2F0Y2hlci5pZCkge1xuICAgICAgICBpLS07XG4gICAgICB9XG4gICAgICBxdWV1ZS5zcGxpY2UoaSArIDEsIDAsIHdhdGNoZXIpO1xuICAgIH1cbiAgICAvLyBxdWV1ZSB0aGUgZmx1c2hcbiAgICBpZiAoIXdhaXRpbmcpIHtcbiAgICAgIHdhaXRpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDIgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICA/IGV4cE9yRm4udG9TdHJpbmcoKVxuICAgIDogJyc7XG4gIC8vIHBhcnNlIGV4cHJlc3Npb24gZm9yIGdldHRlclxuICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aGlzLmdldHRlciA9IGV4cE9yRm47XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgaWYgKCF0aGlzLmdldHRlcikge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBub29wO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgaWYgKGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoaHlwaGVuYXRlZEtleSkgfHxcbiAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJcXFwiXCIgKyBoeXBoZW5hdGVkS2V5ICsgXCJcXFwiIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlIGFuZCBjYW5ub3QgYmUgdXNlZCBhcyBjb21wb25lbnQgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghaXNSb290ICYmICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQpIHtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZih2bS5tcEhvc3QgPT09ICdtcC1iYWlkdScpey8v55m+5bqmIG9ic2VydmVyIOWcqCBzZXREYXRhIGNhbGxiYWNrIOS5i+WQjuinpuWPke+8jOebtOaOpeW/veeVpeivpSB3YXJuXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL2ZpeGVkIGJ5IHh4eHh4eCBfX25leHRfdGlja19wZW5kaW5nLHVuaTovL2Zvcm0tZmllbGQg5pe25LiN5ZGK6K2mXG4gICAgICAgICAgICBpZihcbiAgICAgICAgICAgICAgICBrZXkgPT09ICd2YWx1ZScgJiYgXG4gICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh2bS4kb3B0aW9ucy5iZWhhdmlvcnMpICYmXG4gICAgICAgICAgICAgICAgdm0uJG9wdGlvbnMuYmVoYXZpb3JzLmluZGV4T2YoJ3VuaTovL2Zvcm0tZmllbGQnKSAhPT0gLTFcbiAgICAgICAgICAgICAgKXtcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZih2bS5fZ2V0Rm9ybURhdGEpe1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciAkcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICAgICAgICAgIHdoaWxlKCRwYXJlbnQpe1xuICAgICAgICAgICAgICBpZigkcGFyZW50Ll9fbmV4dF90aWNrX3BlbmRpbmcpe1xuICAgICAgICAgICAgICAgIHJldHVybiAgXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgJHBhcmVudCA9ICRwYXJlbnQuJHBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAuU2hhcmVkT2JqZWN0LnRhcmdldCkgey8vIGZpeGVkIGJ5IHh4eHh4eFxuICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgdHlwZSBcXFwiXCIgKyAodHlwZW9mIG1ldGhvZHNba2V5XSkgKyBcIlxcXCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgXCJEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P1wiLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQgYXMgYSBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChrZXkgaW4gdm0pICYmIGlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBjb25mbGljdHMgd2l0aCBhbiBleGlzdGluZyBWdWUgaW5zdGFuY2UgbWV0aG9kLiBcIiArXG4gICAgICAgICAgXCJBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHZtW2tleV0gPSB0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgZm9yICh2YXIga2V5IGluIHdhdGNoKSB7XG4gICAgdmFyIGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIHZhciBkYXRhRGVmID0ge307XG4gIGRhdGFEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZGF0YSB9O1xuICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgcHJvcHNEZWYuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcHJvcHMgfTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgdm0sIChcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgIH1cblxuICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgdm0uX2lzVnVlID0gdHJ1ZTtcbiAgICAvLyBtZXJnZSBvcHRpb25zXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgIC8vIG9wdGltaXplIGludGVybmFsIGNvbXBvbmVudCBpbnN0YW50aWF0aW9uXG4gICAgICAvLyBzaW5jZSBkeW5hbWljIG9wdGlvbnMgbWVyZ2luZyBpcyBwcmV0dHkgc2xvdywgYW5kIG5vbmUgb2YgdGhlXG4gICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgIGluaXRJbnRlcm5hbENvbXBvbmVudCh2bSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKHZtLmNvbnN0cnVjdG9yKSxcbiAgICAgICAgb3B0aW9ucyB8fCB7fSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgdm0uX3NlbGYgPSB2bTtcbiAgICBpbml0TGlmZWN5Y2xlKHZtKTtcbiAgICBpbml0RXZlbnRzKHZtKTtcbiAgICBpbml0UmVuZGVyKHZtKTtcbiAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZUNyZWF0ZScpO1xuICAgIHZtLm1wSG9zdCAhPT0gJ21wLXRvdXRpYW8nICYmIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzICBcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIHZtLm1wSG9zdCAhPT0gJ21wLXRvdXRpYW8nICYmIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICB2bS5tcEhvc3QgIT09ICdtcC10b3V0aWFvJyAmJiBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTsgICAgICBcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjExJztcblxuLyoqXG4gKiBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vVGVuY2VudC93ZXN0b3JlL21hc3Rlci9wYWNrYWdlcy93ZXN0b3JlL3V0aWxzL2RpZmYuanNcbiAqL1xudmFyIEFSUkFZVFlQRSA9ICdbb2JqZWN0IEFycmF5XSc7XG52YXIgT0JKRUNUVFlQRSA9ICdbb2JqZWN0IE9iamVjdF0nO1xuLy8gY29uc3QgRlVOQ1RJT05UWVBFID0gJ1tvYmplY3QgRnVuY3Rpb25dJ1xuXG5mdW5jdGlvbiBkaWZmKGN1cnJlbnQsIHByZSkge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBzeW5jS2V5cyhjdXJyZW50LCBwcmUpO1xuICAgIF9kaWZmKGN1cnJlbnQsIHByZSwgJycsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5mdW5jdGlvbiBzeW5jS2V5cyhjdXJyZW50LCBwcmUpIHtcbiAgICBpZiAoY3VycmVudCA9PT0gcHJlKSB7IHJldHVybiB9XG4gICAgdmFyIHJvb3RDdXJyZW50VHlwZSA9IHR5cGUoY3VycmVudCk7XG4gICAgdmFyIHJvb3RQcmVUeXBlID0gdHlwZShwcmUpO1xuICAgIGlmIChyb290Q3VycmVudFR5cGUgPT0gT0JKRUNUVFlQRSAmJiByb290UHJlVHlwZSA9PSBPQkpFQ1RUWVBFKSB7XG4gICAgICAgIGlmKE9iamVjdC5rZXlzKGN1cnJlbnQpLmxlbmd0aCA+PSBPYmplY3Qua2V5cyhwcmUpLmxlbmd0aCl7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcHJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IGN1cnJlbnRba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFtrZXldID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzeW5jS2V5cyhjdXJyZW50VmFsdWUsIHByZVtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJvb3RDdXJyZW50VHlwZSA9PSBBUlJBWVRZUEUgJiYgcm9vdFByZVR5cGUgPT0gQVJSQVlUWVBFKSB7XG4gICAgICAgIGlmIChjdXJyZW50Lmxlbmd0aCA+PSBwcmUubGVuZ3RoKSB7XG4gICAgICAgICAgICBwcmUuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBzeW5jS2V5cyhjdXJyZW50W2luZGV4XSwgaXRlbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gX2RpZmYoY3VycmVudCwgcHJlLCBwYXRoLCByZXN1bHQpIHtcbiAgICBpZiAoY3VycmVudCA9PT0gcHJlKSB7IHJldHVybiB9XG4gICAgdmFyIHJvb3RDdXJyZW50VHlwZSA9IHR5cGUoY3VycmVudCk7XG4gICAgdmFyIHJvb3RQcmVUeXBlID0gdHlwZShwcmUpO1xuICAgIGlmIChyb290Q3VycmVudFR5cGUgPT0gT0JKRUNUVFlQRSkge1xuICAgICAgICBpZiAocm9vdFByZVR5cGUgIT0gT0JKRUNUVFlQRSB8fCBPYmplY3Qua2V5cyhjdXJyZW50KS5sZW5ndGggPCBPYmplY3Qua2V5cyhwcmUpLmxlbmd0aCkge1xuICAgICAgICAgICAgc2V0UmVzdWx0KHJlc3VsdCwgcGF0aCwgY3VycmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBjdXJyZW50W2tleV07XG4gICAgICAgICAgICAgICAgdmFyIHByZVZhbHVlID0gcHJlW2tleV07XG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRUeXBlID0gdHlwZShjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgIHZhciBwcmVUeXBlID0gdHlwZShwcmVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRUeXBlICE9IEFSUkFZVFlQRSAmJiBjdXJyZW50VHlwZSAhPSBPQkpFQ1RUWVBFKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgIT0gcHJlW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChyZXN1bHQsIChwYXRoID09ICcnID8gJycgOiBwYXRoICsgXCIuXCIpICsga2V5LCBjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50VHlwZSA9PSBBUlJBWVRZUEUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZVR5cGUgIT0gQVJSQVlUWVBFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRSZXN1bHQocmVzdWx0LCAocGF0aCA9PSAnJyA/ICcnIDogcGF0aCArIFwiLlwiKSArIGtleSwgY3VycmVudFZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUubGVuZ3RoIDwgcHJlVmFsdWUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UmVzdWx0KHJlc3VsdCwgKHBhdGggPT0gJycgPyAnJyA6IHBhdGggKyBcIi5cIikgKyBrZXksIGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZGlmZihpdGVtLCBwcmVWYWx1ZVtpbmRleF0sIChwYXRoID09ICcnID8gJycgOiBwYXRoICsgXCIuXCIpICsga2V5ICsgJ1snICsgaW5kZXggKyAnXScsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRUeXBlID09IE9CSkVDVFRZUEUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByZVR5cGUgIT0gT0JKRUNUVFlQRSB8fCBPYmplY3Qua2V5cyhjdXJyZW50VmFsdWUpLmxlbmd0aCA8IE9iamVjdC5rZXlzKHByZVZhbHVlKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFJlc3VsdChyZXN1bHQsIChwYXRoID09ICcnID8gJycgOiBwYXRoICsgXCIuXCIpICsga2V5LCBjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc3ViS2V5IGluIGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9kaWZmKGN1cnJlbnRWYWx1ZVtzdWJLZXldLCBwcmVWYWx1ZVtzdWJLZXldLCAocGF0aCA9PSAnJyA/ICcnIDogcGF0aCArIFwiLlwiKSArIGtleSArICcuJyArIHN1YktleSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBjdXJyZW50KSBsb29wKCBrZXkgKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAocm9vdEN1cnJlbnRUeXBlID09IEFSUkFZVFlQRSkge1xuICAgICAgICBpZiAocm9vdFByZVR5cGUgIT0gQVJSQVlUWVBFKSB7XG4gICAgICAgICAgICBzZXRSZXN1bHQocmVzdWx0LCBwYXRoLCBjdXJyZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50Lmxlbmd0aCA8IHByZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzZXRSZXN1bHQocmVzdWx0LCBwYXRoLCBjdXJyZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY3VycmVudC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBfZGlmZihpdGVtLCBwcmVbaW5kZXhdLCBwYXRoICsgJ1snICsgaW5kZXggKyAnXScsIHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBzZXRSZXN1bHQocmVzdWx0LCBwYXRoLCBjdXJyZW50KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFJlc3VsdChyZXN1bHQsIGssIHYpIHtcbiAgICAvLyBpZiAodHlwZSh2KSAhPSBGVU5DVElPTlRZUEUpIHtcbiAgICAgICAgcmVzdWx0W2tdID0gdjtcbiAgICAvLyB9XG59XG5cbmZ1bmN0aW9uIHR5cGUob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopXG59XG5cbi8qICAqL1xyXG5cclxuZnVuY3Rpb24gZmx1c2hDYWxsYmFja3MkMSh2bSkge1xyXG4gICAgaWYgKHZtLl9fbmV4dF90aWNrX2NhbGxiYWNrcyAmJiB2bS5fX25leHRfdGlja19jYWxsYmFja3MubGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52LlZVRV9BUFBfREVCVUcpIHtcclxuICAgICAgICAgICAgdmFyIG1wSW5zdGFuY2UgPSB2bS4kc2NvcGU7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbJyArICgrbmV3IERhdGUpICsgJ11bJyArIChtcEluc3RhbmNlLmlzIHx8IG1wSW5zdGFuY2Uucm91dGUpICsgJ11bJyArIHZtLl91aWQgK1xyXG4gICAgICAgICAgICAgICAgJ106Zmx1c2hDYWxsYmFja3NbJyArIHZtLl9fbmV4dF90aWNrX2NhbGxiYWNrcy5sZW5ndGggKyAnXScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY29waWVzID0gdm0uX19uZXh0X3RpY2tfY2FsbGJhY2tzLnNsaWNlKDApO1xyXG4gICAgICAgIHZtLl9fbmV4dF90aWNrX2NhbGxiYWNrcy5sZW5ndGggPSAwO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29waWVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvcGllc1tpXSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gaGFzUmVuZGVyV2F0Y2hlcih2bSkge1xyXG4gICAgcmV0dXJuIHF1ZXVlLmZpbmQoZnVuY3Rpb24gKHdhdGNoZXIpIHsgcmV0dXJuIHZtLl93YXRjaGVyID09PSB3YXRjaGVyOyB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBuZXh0VGljayQxKHZtLCBjYikge1xyXG4gICAgLy8xLm5leHRUaWNrIOS5i+WJjSDlt7Igc2V0RGF0YSDkuJQgc2V0RGF0YSDov5jmnKrlm57osIPlrozmiJBcclxuICAgIC8vMi5uZXh0VGljayDkuYvliY3lrZjlnKggcmVuZGVyIHdhdGNoZXJcclxuICAgIGlmICghdm0uX19uZXh0X3RpY2tfcGVuZGluZyAmJiAhaGFzUmVuZGVyV2F0Y2hlcih2bSkpIHtcbiAgICAgICAgaWYocHJvY2Vzcy5lbnYuVlVFX0FQUF9ERUJVRyl7XG4gICAgICAgICAgICB2YXIgbXBJbnN0YW5jZSA9IHZtLiRzY29wZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbJyArICgrbmV3IERhdGUpICsgJ11bJyArIChtcEluc3RhbmNlLmlzIHx8IG1wSW5zdGFuY2Uucm91dGUpICsgJ11bJyArIHZtLl91aWQgK1xuICAgICAgICAgICAgICAgICddOm5leHRWdWVUaWNrJyk7XG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV4dFRpY2soY2IsIHZtKVxyXG4gICAgfWVsc2V7XG4gICAgICAgIGlmKHByb2Nlc3MuZW52LlZVRV9BUFBfREVCVUcpe1xuICAgICAgICAgICAgdmFyIG1wSW5zdGFuY2UkMSA9IHZtLiRzY29wZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbJyArICgrbmV3IERhdGUpICsgJ11bJyArIChtcEluc3RhbmNlJDEuaXMgfHwgbXBJbnN0YW5jZSQxLnJvdXRlKSArICddWycgKyB2bS5fdWlkICtcbiAgICAgICAgICAgICAgICAnXTpuZXh0TVBUaWNrJyk7XG4gICAgICAgIH1cbiAgICB9XHJcbiAgICB2YXIgX3Jlc29sdmU7XHJcbiAgICBpZiAoIXZtLl9fbmV4dF90aWNrX2NhbGxiYWNrcykge1xyXG4gICAgICAgIHZtLl9fbmV4dF90aWNrX2NhbGxiYWNrcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgdm0uX19uZXh0X3RpY2tfY2FsbGJhY2tzLnB1c2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChjYikge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY2IuY2FsbCh2bSk7XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAnbmV4dFRpY2snKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoX3Jlc29sdmUpIHtcclxuICAgICAgICAgICAgX3Jlc29sdmUodm0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXHJcbiAgICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xyXG4gICAgICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxuXG4vKiAgKi9cclxuXHJcbmZ1bmN0aW9uIGNsb25lV2l0aERhdGEodm0pIHtcclxuICAvLyDnoa7kv53lvZPliY0gdm0g5omA5pyJ5pWw5o2u6KKr5ZCM5q2lXHJcbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgdmFyIGRhdGFLZXlzID0gW10uY29uY2F0KFxyXG4gICAgT2JqZWN0LmtleXModm0uX2RhdGEgfHwge30pLFxyXG4gICAgT2JqZWN0LmtleXModm0uX2NvbXB1dGVkV2F0Y2hlcnMgfHwge30pKTtcclxuXHJcbiAgZGF0YUtleXMucmVkdWNlKGZ1bmN0aW9uKHJldCwga2V5KSB7XHJcbiAgICByZXRba2V5XSA9IHZtW2tleV07XHJcbiAgICByZXR1cm4gcmV0XHJcbiAgfSwgcmV0KTtcclxuICAvL1RPRE8g6ZyA6KaB5oqK5peg55So5pWw5o2u5aSE55CG5o6J77yM5q+U5aaCIGxpc3Q9PmwwIOWImSBsaXN0IOmcgOimgeenu+mZpO+8jOWQpuWImeWkmuS8oOi+k+S4gOS7veaVsOaNrlxyXG4gIE9iamVjdC5hc3NpZ24ocmV0LCB2bS4kbXAuZGF0YSB8fCB7fSk7XHJcbiAgaWYgKFxyXG4gICAgQXJyYXkuaXNBcnJheSh2bS4kb3B0aW9ucy5iZWhhdmlvcnMpICYmXHJcbiAgICB2bS4kb3B0aW9ucy5iZWhhdmlvcnMuaW5kZXhPZigndW5pOi8vZm9ybS1maWVsZCcpICE9PSAtMVxyXG4gICkgeyAvL2Zvcm0tZmllbGRcclxuICAgIHJldFsnbmFtZSddID0gdm0ubmFtZTtcclxuICAgIHJldFsndmFsdWUnXSA9IHZtLnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmV0KSlcclxufVxyXG5cclxudmFyIHBhdGNoID0gZnVuY3Rpb24ob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXHJcbiAgaWYgKHZub2RlID09PSBudWxsKSB7IC8vZGVzdHJveVxyXG4gICAgcmV0dXJuXHJcbiAgfVxyXG4gIGlmICh0aGlzLm1wVHlwZSA9PT0gJ3BhZ2UnIHx8IHRoaXMubXBUeXBlID09PSAnY29tcG9uZW50Jykge1xyXG4gICAgdmFyIG1wSW5zdGFuY2UgPSB0aGlzLiRzY29wZTtcclxuICAgIHZhciBkYXRhID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGRhdGEgPSBjbG9uZVdpdGhEYXRhKHRoaXMpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuICAgIH1cclxuICAgIGRhdGEuX193ZWJ2aWV3SWRfXyA9IG1wSW5zdGFuY2UuZGF0YS5fX3dlYnZpZXdJZF9fO1xyXG4gICAgdmFyIG1wRGF0YSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XHJcbiAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgLy/ku4XlkIzmraUgZGF0YSDkuK3mnInnmoTmlbDmja5cclxuICAgICAgbXBEYXRhW2tleV0gPSBtcEluc3RhbmNlLmRhdGFba2V5XTtcclxuICAgIH0pO1xyXG4gICAgdmFyIGRpZmZEYXRhID0gdGhpcy4kc2hvdWxkRGlmZkRhdGEgPT09IGZhbHNlID8gZGF0YSA6IGRpZmYoZGF0YSwgbXBEYXRhKTtcclxuICAgIGlmIChPYmplY3Qua2V5cyhkaWZmRGF0YSkubGVuZ3RoKSB7XHJcbiAgICAgIGlmIChwcm9jZXNzLmVudi5WVUVfQVBQX0RFQlVHKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ1snICsgKCtuZXcgRGF0ZSkgKyAnXVsnICsgKG1wSW5zdGFuY2UuaXMgfHwgbXBJbnN0YW5jZS5yb3V0ZSkgKyAnXVsnICsgdGhpcy5fdWlkICtcclxuICAgICAgICAgICdd5beu6YeP5pu05pawJyxcclxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGRpZmZEYXRhKSk7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5fX25leHRfdGlja19wZW5kaW5nID0gdHJ1ZTtcclxuICAgICAgbXBJbnN0YW5jZS5zZXREYXRhKGRpZmZEYXRhLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcyQxLl9fbmV4dF90aWNrX3BlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICBmbHVzaENhbGxiYWNrcyQxKHRoaXMkMSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmx1c2hDYWxsYmFja3MkMSh0aGlzKTtcclxuICAgIH1cclxuICB9XHJcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbXB0eVJlbmRlcigpIHtcblxufVxuXG5mdW5jdGlvbiBtb3VudENvbXBvbmVudCQxKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGlmICghdm0ubXBUeXBlKSB7Ly9tYWluLmpzIOS4reeahCBuZXcgVnVlXG4gICAgcmV0dXJuIHZtXG4gIH1cbiAgaWYgKHZtLm1wVHlwZSA9PT0gJ2FwcCcpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVJlbmRlcjtcbiAgfVxuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5UmVuZGVyO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIFxuICB2bS5tcEhvc3QgIT09ICdtcC10b3V0aWFvJyAmJiBjYWxsSG9vayh2bSwgJ2JlZm9yZU1vdW50Jyk7XG5cbiAgdmFyIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2bS5fdXBkYXRlKHZtLl9yZW5kZXIoKSwgaHlkcmF0aW5nKTtcbiAgfTtcblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG4gIHJldHVybiB2bVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIHBhcnNlU3R5bGVUZXh0ID0gY2FjaGVkKGZ1bmN0aW9uIChjc3NUZXh0KSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGxpc3REZWxpbWl0ZXIgPSAvOyg/IVteKF0qXFwpKS9nO1xuICB2YXIgcHJvcGVydHlEZWxpbWl0ZXIgPSAvOiguKykvO1xuICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBpZiAoaXRlbSkge1xuICAgICAgdmFyIHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBub3JtYWxpemUgcG9zc2libGUgYXJyYXkgLyBzdHJpbmcgdmFsdWVzIGludG8gT2JqZWN0XG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShiaW5kaW5nU3R5bGUpKSB7XG4gICAgcmV0dXJuIHRvT2JqZWN0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICBpZiAodHlwZW9mIGJpbmRpbmdTdHlsZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gcGFyc2VTdHlsZVRleHQoYmluZGluZ1N0eWxlKVxuICB9XG4gIHJldHVybiBiaW5kaW5nU3R5bGVcbn1cblxuLyogICovXHJcblxyXG52YXIgTVBfTUVUSE9EUyA9IFsnY3JlYXRlU2VsZWN0b3JRdWVyeScsICdjcmVhdGVJbnRlcnNlY3Rpb25PYnNlcnZlcicsICdzZWxlY3RBbGxDb21wb25lbnRzJywgJ3NlbGVjdENvbXBvbmVudCddO1xyXG5cclxuZnVuY3Rpb24gZ2V0VGFyZ2V0KG9iaiwgcGF0aCkge1xyXG4gIHZhciBwYXJ0cyA9IHBhdGguc3BsaXQoJy4nKTtcclxuICB2YXIga2V5ID0gcGFydHNbMF07XHJcbiAgaWYgKGtleS5pbmRleE9mKCdfXyRuJykgPT09IDApIHsgLy9udW1iZXIgaW5kZXhcclxuICAgIGtleSA9IHBhcnNlSW50KGtleS5yZXBsYWNlKCdfXyRuJywgJycpKTtcclxuICB9XHJcbiAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgcmV0dXJuIG9ialtrZXldXHJcbiAgfVxyXG4gIHJldHVybiBnZXRUYXJnZXQob2JqW2tleV0sIHBhcnRzLnNsaWNlKDEpLmpvaW4oJy4nKSlcclxufVxyXG5cclxuZnVuY3Rpb24gaW50ZXJuYWxNaXhpbihWdWUpIHtcclxuXHJcbiAgVnVlLmNvbmZpZy5lcnJvckhhbmRsZXIgPSBmdW5jdGlvbihlcnIpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cclxuICAgIHZhciBhcHAgPSBnZXRBcHAoKTtcclxuICAgIGlmIChhcHAgJiYgYXBwLm9uRXJyb3IpIHtcclxuICAgICAgYXBwLm9uRXJyb3IoZXJyKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgb2xkRW1pdCA9IFZ1ZS5wcm90b3R5cGUuJGVtaXQ7XHJcblxyXG4gIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbihldmVudCkge1xyXG4gICAgaWYgKHRoaXMuJHNjb3BlICYmIGV2ZW50KSB7XHJcbiAgICAgIHRoaXMuJHNjb3BlWyd0cmlnZ2VyRXZlbnQnXShldmVudCwge1xyXG4gICAgICAgIF9fYXJnc19fOiB0b0FycmF5KGFyZ3VtZW50cywgMSlcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2xkRW1pdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXHJcbiAgfTtcclxuXHJcbiAgVnVlLnByb3RvdHlwZS4kbmV4dFRpY2sgPSBmdW5jdGlvbihmbikge1xyXG4gICAgcmV0dXJuIG5leHRUaWNrJDEodGhpcywgZm4pXHJcbiAgfTtcclxuXHJcbiAgTVBfTUVUSE9EUy5mb3JFYWNoKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuICAgIFZ1ZS5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZ3MpIHtcclxuICAgICAgaWYgKHRoaXMuJHNjb3BlICYmIHRoaXMuJHNjb3BlW21ldGhvZF0pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy4kc2NvcGVbbWV0aG9kXShhcmdzKVxyXG4gICAgICB9XHJcbiAgICAgIC8vIG1wLWFsaXBheVxyXG4gICAgICBpZiAodHlwZW9mIG15ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICAgIGlmIChtZXRob2QgPT09ICdjcmVhdGVTZWxlY3RvclF1ZXJ5Jykge1xyXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXHJcbiAgICAgICAgcmV0dXJuIG15LmNyZWF0ZVNlbGVjdG9yUXVlcnkoYXJncylcclxuICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdjcmVhdGVJbnRlcnNlY3Rpb25PYnNlcnZlcicpIHtcclxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xyXG4gICAgICAgIHJldHVybiBteS5jcmVhdGVJbnRlcnNlY3Rpb25PYnNlcnZlcihhcmdzKVxyXG4gICAgICB9XHJcbiAgICAgIC8vIFRPRE8gbXAtYWxpcGF5IOaaguS4jeaUr+aMgSBzZWxlY3RBbGxDb21wb25lbnRzLHNlbGVjdENvbXBvbmVudFxyXG4gICAgfTtcclxuICB9KTtcclxuXHJcbiAgVnVlLnByb3RvdHlwZS5fX2luaXRfcHJvdmlkZSA9IGluaXRQcm92aWRlO1xyXG5cclxuICBWdWUucHJvdG90eXBlLl9faW5pdF9pbmplY3Rpb25zID0gaW5pdEluamVjdGlvbnM7XHJcblxyXG4gIFZ1ZS5wcm90b3R5cGUuX19jYWxsX2hvb2sgPSBmdW5jdGlvbihob29rLCBhcmdzKSB7XHJcbiAgICB2YXIgdm0gPSB0aGlzO1xyXG4gICAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xyXG4gICAgcHVzaFRhcmdldCgpO1xyXG4gICAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XHJcbiAgICB2YXIgaW5mbyA9IGhvb2sgKyBcIiBob29rXCI7XHJcbiAgICB2YXIgcmV0O1xyXG4gICAgaWYgKGhhbmRsZXJzKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XHJcbiAgICAgICAgcmV0ID0gaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBhcmdzID8gW2FyZ3NdIDogbnVsbCwgdm0sIGluZm8pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xyXG4gICAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vaywgYXJncyk7XHJcbiAgICB9XHJcbiAgICBwb3BUYXJnZXQoKTtcclxuICAgIHJldHVybiByZXRcclxuICB9O1xyXG5cclxuICBWdWUucHJvdG90eXBlLl9fc2V0X21vZGVsID0gZnVuY3Rpb24odGFyZ2V0LCBrZXksIHZhbHVlLCBtb2RpZmllcnMpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZGlmaWVycykpIHtcclxuICAgICAgaWYgKG1vZGlmaWVycy5pbmRleE9mKCd0cmltJykgIT09IC0xKSB7XHJcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG1vZGlmaWVycy5pbmRleE9mKCdudW1iZXInKSAhPT0gLTEpIHtcclxuICAgICAgICB2YWx1ZSA9IHRoaXMuX24odmFsdWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIXRhcmdldCkge1xyXG4gICAgICB0YXJnZXQgPSB0aGlzO1xyXG4gICAgfVxyXG4gICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcclxuICB9O1xyXG5cclxuICBWdWUucHJvdG90eXBlLl9fc2V0X3N5bmMgPSBmdW5jdGlvbih0YXJnZXQsIGtleSwgdmFsdWUpIHtcclxuICAgIGlmICghdGFyZ2V0KSB7XHJcbiAgICAgIHRhcmdldCA9IHRoaXM7XHJcbiAgICB9XHJcbiAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xyXG4gIH07XHJcblxyXG4gIFZ1ZS5wcm90b3R5cGUuX19nZXRfb3JpZyA9IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgIGlmIChpc1BsYWluT2JqZWN0KGl0ZW0pKSB7XHJcbiAgICAgIHJldHVybiBpdGVtWyckb3JpZyddIHx8IGl0ZW1cclxuICAgIH1cclxuICAgIHJldHVybiBpdGVtXHJcbiAgfTtcclxuXHJcbiAgVnVlLnByb3RvdHlwZS5fX2dldF92YWx1ZSA9IGZ1bmN0aW9uKGRhdGFQYXRoLCB0YXJnZXQpIHtcclxuICAgIHJldHVybiBnZXRUYXJnZXQodGFyZ2V0IHx8IHRoaXMsIGRhdGFQYXRoKVxyXG4gIH07XHJcblxyXG5cclxuICBWdWUucHJvdG90eXBlLl9fZ2V0X2NsYXNzID0gZnVuY3Rpb24oZHluYW1pY0NsYXNzLCBzdGF0aWNDbGFzcykge1xyXG4gICAgcmV0dXJuIHJlbmRlckNsYXNzKHN0YXRpY0NsYXNzLCBkeW5hbWljQ2xhc3MpXHJcbiAgfTtcclxuXHJcbiAgVnVlLnByb3RvdHlwZS5fX2dldF9zdHlsZSA9IGZ1bmN0aW9uKGR5bmFtaWNTdHlsZSwgc3RhdGljU3R5bGUpIHtcclxuICAgIGlmICghZHluYW1pY1N0eWxlICYmICFzdGF0aWNTdHlsZSkge1xyXG4gICAgICByZXR1cm4gJydcclxuICAgIH1cclxuICAgIHZhciBkeW5hbWljU3R5bGVPYmogPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZHluYW1pY1N0eWxlKTtcclxuICAgIHZhciBzdHlsZU9iaiA9IHN0YXRpY1N0eWxlID8gZXh0ZW5kKHN0YXRpY1N0eWxlLCBkeW5hbWljU3R5bGVPYmopIDogZHluYW1pY1N0eWxlT2JqO1xyXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHN0eWxlT2JqKS5tYXAoZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICgoaHlwaGVuYXRlKG5hbWUpKSArIFwiOlwiICsgKHN0eWxlT2JqW25hbWVdKSk7IH0pLmpvaW4oJzsnKVxyXG4gIH07XHJcblxyXG4gIFZ1ZS5wcm90b3R5cGUuX19tYXAgPSBmdW5jdGlvbih2YWwsIGl0ZXJhdGVlKSB7XHJcbiAgICAvL1RPRE8g5pqC5LiN6ICD6JmRIHN0cmluZyxudW1iZXJcclxuICAgIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcclxuICAgICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xyXG4gICAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIHJldFtpXSA9IGl0ZXJhdGVlKHZhbFtpXSwgaSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJldFxyXG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XHJcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xyXG4gICAgICByZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBrZXkgPSBrZXlzW2ldO1xyXG4gICAgICAgIHJldFtrZXldID0gaXRlcmF0ZWUodmFsW2tleV0sIGtleSwgaSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHJldFxyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtdXHJcbiAgfTtcclxuXHJcbn1cblxuLyogICovXHJcblxyXG52YXIgTElGRUNZQ0xFX0hPT0tTJDEgPSBbXHJcbiAgICAvL0FwcFxyXG4gICAgJ29uTGF1bmNoJyxcclxuICAgICdvblNob3cnLFxyXG4gICAgJ29uSGlkZScsXHJcbiAgICAnb25VbmlOVmlld01lc3NhZ2UnLFxuICAgICdvbkVycm9yJyxcclxuICAgIC8vUGFnZVxyXG4gICAgJ29uTG9hZCcsXHJcbiAgICAvLyAnb25TaG93JyxcclxuICAgICdvblJlYWR5JyxcclxuICAgIC8vICdvbkhpZGUnLFxyXG4gICAgJ29uVW5sb2FkJyxcclxuICAgICdvblB1bGxEb3duUmVmcmVzaCcsXHJcbiAgICAnb25SZWFjaEJvdHRvbScsXHJcbiAgICAnb25UYWJJdGVtVGFwJyxcclxuICAgICdvblNoYXJlQXBwTWVzc2FnZScsXG4gICAgJ29uUmVzaXplJyxcclxuICAgICdvblBhZ2VTY3JvbGwnLFxyXG4gICAgJ29uTmF2aWdhdGlvbkJhckJ1dHRvblRhcCcsXHJcbiAgICAnb25CYWNrUHJlc3MnLFxyXG4gICAgJ29uTmF2aWdhdGlvbkJhclNlYXJjaElucHV0Q2hhbmdlZCcsXHJcbiAgICAnb25OYXZpZ2F0aW9uQmFyU2VhcmNoSW5wdXRDb25maXJtZWQnLFxyXG4gICAgJ29uTmF2aWdhdGlvbkJhclNlYXJjaElucHV0Q2xpY2tlZCcsXHJcbiAgICAvL0NvbXBvbmVudFxyXG4gICAgLy8gJ29uUmVhZHknLCAvLyDlhbzlrrnml6fniYjmnKzvvIzlupTor6Xnp7vpmaTor6Xkuovku7ZcclxuICAgICdvblBhZ2VTaG93JyxcclxuICAgICdvblBhZ2VIaWRlJyxcclxuICAgICdvblBhZ2VSZXNpemUnXHJcbl07XHJcbmZ1bmN0aW9uIGxpZmVjeWNsZU1peGluJDEoVnVlKSB7XHJcblxyXG4gICAgLy9maXhlZCB2dWUtY2xhc3MtY29tcG9uZW50XHJcbiAgICB2YXIgb2xkRXh0ZW5kID0gVnVlLmV4dGVuZDtcclxuICAgIFZ1ZS5leHRlbmQgPSBmdW5jdGlvbihleHRlbmRPcHRpb25zKSB7XHJcbiAgICAgICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XHJcblxyXG4gICAgICAgIHZhciBtZXRob2RzID0gZXh0ZW5kT3B0aW9ucy5tZXRob2RzO1xyXG4gICAgICAgIGlmIChtZXRob2RzKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKG1ldGhvZHMpLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChMSUZFQ1lDTEVfSE9PS1MkMS5pbmRleE9mKG1ldGhvZE5hbWUpIT09LTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHRlbmRPcHRpb25zW21ldGhvZE5hbWVdID0gbWV0aG9kc1ttZXRob2ROYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWV0aG9kc1ttZXRob2ROYW1lXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gb2xkRXh0ZW5kLmNhbGwodGhpcywgZXh0ZW5kT3B0aW9ucylcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHN0cmF0ZWdpZXMgPSBWdWUuY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcclxuICAgIHZhciBtZXJnZUhvb2sgPSBzdHJhdGVnaWVzLmNyZWF0ZWQ7XHJcbiAgICBMSUZFQ1lDTEVfSE9PS1MkMS5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XHJcbiAgICAgICAgc3RyYXRlZ2llc1tob29rXSA9IG1lcmdlSG9vaztcclxuICAgIH0pO1xyXG5cclxuICAgIFZ1ZS5wcm90b3R5cGUuX19saWZlY3ljbGVfaG9va3NfXyA9IExJRkVDWUNMRV9IT09LUyQxO1xyXG59XG5cbi8qICAqL1xyXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cclxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBwYXRjaDtcclxuXHJcbi8vIHB1YmxpYyBtb3VudCBtZXRob2RcclxuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbihcclxuICAgIGVsICxcclxuICAgIGh5ZHJhdGluZyBcclxuKSB7XHJcbiAgICByZXR1cm4gbW91bnRDb21wb25lbnQkMSh0aGlzLCBlbCwgaHlkcmF0aW5nKVxyXG59O1xyXG5cclxubGlmZWN5Y2xlTWl4aW4kMShWdWUpO1xyXG5pbnRlcm5hbE1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5leHBvcnQgZGVmYXVsdCBWdWU7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),

/***/ 31:
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return normalizeComponent; });\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode, /* vue-cli only */\n  components, // fixed by xxxxxx auto components\n  renderjs // fixed by xxxxxx renderjs\n) {\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // fixed by xxxxxx auto components\n  if (components) {\n    options.components = Object.assign(components, options.components || {})\n  }\n  // fixed by xxxxxx renderjs\n  if (renderjs) {\n    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {\n      this[renderjs.__module] = this\n    });\n    (options.mixins || (options.mixins = [])).push(renderjs)\n  }\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDJFQUEyRTtBQUMzRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjMxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXG5cbi8vIElNUE9SVEFOVDogRG8gTk9UIHVzZSBFUzIwMTUgZmVhdHVyZXMgaW4gdGhpcyBmaWxlIChleGNlcHQgZm9yIG1vZHVsZXMpLlxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxuICBzY3JpcHRFeHBvcnRzLFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxuICBpbmplY3RTdHlsZXMsXG4gIHNjb3BlSWQsXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXG4gIHNoYWRvd01vZGUsIC8qIHZ1ZS1jbGkgb25seSAqL1xuICBjb21wb25lbnRzLCAvLyBmaXhlZCBieSB4eHh4eHggYXV0byBjb21wb25lbnRzXG4gIHJlbmRlcmpzIC8vIGZpeGVkIGJ5IHh4eHh4eCByZW5kZXJqc1xuKSB7XG4gIC8vIFZ1ZS5leHRlbmQgY29uc3RydWN0b3IgZXhwb3J0IGludGVyb3BcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXG4gICAgOiBzY3JpcHRFeHBvcnRzXG5cbiAgLy8gZml4ZWQgYnkgeHh4eHh4IGF1dG8gY29tcG9uZW50c1xuICBpZiAoY29tcG9uZW50cykge1xuICAgIG9wdGlvbnMuY29tcG9uZW50cyA9IE9iamVjdC5hc3NpZ24oY29tcG9uZW50cywgb3B0aW9ucy5jb21wb25lbnRzIHx8IHt9KVxuICB9XG4gIC8vIGZpeGVkIGJ5IHh4eHh4eCByZW5kZXJqc1xuICBpZiAocmVuZGVyanMpIHtcbiAgICAocmVuZGVyanMuYmVmb3JlQ3JlYXRlIHx8IChyZW5kZXJqcy5iZWZvcmVDcmVhdGUgPSBbXSkpLnVuc2hpZnQoZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzW3JlbmRlcmpzLl9fbW9kdWxlXSA9IHRoaXNcbiAgICB9KTtcbiAgICAob3B0aW9ucy5taXhpbnMgfHwgKG9wdGlvbnMubWl4aW5zID0gW10pKS5wdXNoKHJlbmRlcmpzKVxuICB9XG5cbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xuICBpZiAocmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xuICAgIG9wdGlvbnMuX2NvbXBpbGVkID0gdHJ1ZVxuICB9XG5cbiAgLy8gZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxuICB9XG5cbiAgLy8gc2NvcGVkSWRcbiAgaWYgKHNjb3BlSWQpIHtcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxuICB9XG5cbiAgdmFyIGhvb2tcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXG4gICAgaG9vayA9IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID1cbiAgICAgICAgY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxuICAgICAgLy8gMi4yIHdpdGggcnVuSW5OZXdDb250ZXh0OiB0cnVlXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXG4gICAgICB9XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xuICAgICAgICBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCBjb250ZXh0KVxuICAgICAgfVxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXG4gICAgICBpZiAoY29udGV4dCAmJiBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cykge1xuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxuICAgIG9wdGlvbnMuX3NzclJlZ2lzdGVyID0gaG9va1xuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xuICAgIGhvb2sgPSBzaGFkb3dNb2RlXG4gICAgICA/IGZ1bmN0aW9uICgpIHsgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgdGhpcy4kcm9vdC4kb3B0aW9ucy5zaGFkb3dSb290KSB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9hbCBjb21wb25lbnQgaW4gdnVlIGZpbGVcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dClcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxuICAgICAgb3B0aW9ucy5iZWZvcmVDcmVhdGUgPSBleGlzdGluZ1xuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcbiAgICAgICAgOiBbaG9va11cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXG4gICAgb3B0aW9uczogb3B0aW9uc1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///31\n");

/***/ }),

/***/ 32:
/*!*****************************************!*\
  !*** D:/张总新版app/maiYa01/store/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\nvar _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _vuex = _interopRequireDefault(__webpack_require__(/*! vuex */ 33));\nvar _api = _interopRequireDefault(__webpack_require__(/*! @/common/luchApi/api.js */ 34));\n\n\nvar _mutations = __webpack_require__(/*! @/store/mutations.js */ 39);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };} // 组装模块并导出store的地方\n_vue.default.use(_vuex.default);\n\n\n\n\n\n\n\nvar store = new _vuex.default.Store({\n  state: {\n    userInfo: uni.getStorageSync('userInfo') },\n\n  mutations: {},\n\n\n  // 有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤等；我们可以在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。例如：\n  getters: {\n    setLogin: function setLogin(state) {\n      return state.isLogin ? '已登录' : '未登录';\n    } },\n\n  actions: {} });var _default =\n\n\nstore;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvaW5kZXguanMiXSwibmFtZXMiOlsiVnVlIiwidXNlIiwiVnVleCIsInN0b3JlIiwiU3RvcmUiLCJzdGF0ZSIsInVzZXJJbmZvIiwidW5pIiwiZ2V0U3RvcmFnZVN5bmMiLCJtdXRhdGlvbnMiLCJnZXR0ZXJzIiwic2V0TG9naW4iLCJpc0xvZ2luIiwiYWN0aW9ucyJdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EscUUsOEZBTkE7QUFJQUEsYUFBSUMsR0FBSixDQUFRQyxhQUFSOzs7Ozs7OztBQVdBLElBQU1DLEtBQUssR0FBRyxJQUFJRCxjQUFLRSxLQUFULENBQWU7QUFDNUJDLE9BQUssRUFBRTtBQUNOQyxZQUFRLEVBQUNDLEdBQUcsQ0FBQ0MsY0FBSixDQUFtQixVQUFuQixDQURILEVBRHFCOztBQUk1QkMsV0FBUyxFQUFFLEVBSmlCOzs7QUFPNUI7QUFDQUMsU0FBTyxFQUFFO0FBQ1JDLFlBQVEsRUFBRSxrQkFBQU4sS0FBSyxFQUFJO0FBQ2xCLGFBQU9BLEtBQUssQ0FBQ08sT0FBTixHQUFnQixLQUFoQixHQUF3QixLQUEvQjtBQUNBLEtBSE8sRUFSbUI7O0FBYTVCQyxTQUFPLEVBQUUsRUFibUIsRUFBZixDQUFkLEM7OztBQWdCZVYsSyIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIOe7hOijheaooeWdl+W5tuWvvOWHunN0b3Jl55qE5Zyw5pa5XHJcbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xyXG5pbXBvcnQgVnVleCBmcm9tICd2dWV4J1xyXG5pbXBvcnQgaHR0cCBmcm9tICdAL2NvbW1vbi9sdWNoQXBpL2FwaS5qcydcclxuVnVlLnVzZShWdWV4KVxyXG5cclxuaW1wb3J0IHtcclxuXHRVU0VSX0lORk8sXHJcblx0VVNFUl9JRCxcclxuXHRJU19MT0dJTixcclxuXHRVU0VSX1RPS0VOLFxyXG5cdExPQ0FMVElPTl9DSVRZLFxyXG5cdExPQ0FMVElPTl9SRUdJT05cclxufSBmcm9tICdAL3N0b3JlL211dGF0aW9ucy5qcydcclxuXHJcbmNvbnN0IHN0b3JlID0gbmV3IFZ1ZXguU3RvcmUoe1xyXG5cdHN0YXRlOiB7XHJcblx0XHR1c2VySW5mbzp1bmkuZ2V0U3RvcmFnZVN5bmMoJ3VzZXJJbmZvJykgLFxyXG5cdH0sXHJcblx0bXV0YXRpb25zOiB7XHJcblx0XHRcclxuXHR9LFxyXG5cdC8vIOacieaXtuWAmeaIkeS7rOmcgOimgeS7jiBzdG9yZSDkuK3nmoQgc3RhdGUg5Lit5rS+55Sf5Ye65LiA5Lqb54q25oCB77yM5L6L5aaC5a+55YiX6KGo6L+b6KGM6L+H5ruk562J77yb5oiR5Lus5Y+v5Lul5ZyoIHN0b3JlIOS4reWumuS5ieKAnGdldHRlcuKAne+8iOWPr+S7peiupOS4uuaYryBzdG9yZSDnmoTorqHnrpflsZ7mgKfvvInjgILlsLHlg4/orqHnrpflsZ7mgKfkuIDmoLfvvIxnZXR0ZXIg55qE6L+U5Zue5YC85Lya5qC55o2u5a6D55qE5L6d6LWW6KKr57yT5a2Y6LW35p2l77yM5LiU5Y+q5pyJ5b2T5a6D55qE5L6d6LWW5YC85Y+R55Sf5LqG5pS55Y+Y5omN5Lya6KKr6YeN5paw6K6h566X44CC5L6L5aaC77yaXHJcblx0Z2V0dGVyczoge1xyXG5cdFx0c2V0TG9naW46IHN0YXRlID0+IHtcclxuXHRcdFx0cmV0dXJuIHN0YXRlLmlzTG9naW4gPyAn5bey55m75b2VJyA6ICfmnKrnmbvlvZUnXHJcblx0XHR9XHJcblx0fSxcclxuXHRhY3Rpb25zOiB7fVxyXG59KVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgc3RvcmVcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///32\n");

/***/ }),

/***/ 33:
/*!********************************************!*\
  !*** ./node_modules/vuex/dist/vuex.esm.js ***!
  \********************************************/
/*! exports provided: Store, install, mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Store\", function() { return Store; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"install\", function() { return install; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapState\", function() { return mapState; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapMutations\", function() { return mapMutations; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapGetters\", function() { return mapGetters; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mapActions\", function() { return mapActions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createNamespacedHelpers\", function() { return createNamespacedHelpers; });\n/**\n * vuex v3.0.1\n * (c) 2017 Evan You\n * @license MIT\n */\nvar applyMixin = function (Vue) {\n  var version = Number(Vue.version.split('.')[0]);\n\n  if (version >= 2) {\n    Vue.mixin({ beforeCreate: vuexInit });\n  } else {\n    // override init and inject vuex init procedure\n    // for 1.x backwards compatibility.\n    var _init = Vue.prototype._init;\n    Vue.prototype._init = function (options) {\n      if ( options === void 0 ) options = {};\n\n      options.init = options.init\n        ? [vuexInit].concat(options.init)\n        : vuexInit;\n      _init.call(this, options);\n    };\n  }\n\n  /**\n   * Vuex init hook, injected into each instances init hooks list.\n   */\n\n  function vuexInit () {\n    var options = this.$options;\n    // store injection\n    if (options.store) {\n      this.$store = typeof options.store === 'function'\n        ? options.store()\n        : options.store;\n    } else if (options.parent && options.parent.$store) {\n      this.$store = options.parent.$store;\n    }\n  }\n};\n\nvar devtoolHook =\n  typeof window !== 'undefined' &&\n  window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\nfunction devtoolPlugin (store) {\n  if (!devtoolHook) { return }\n\n  store._devtoolHook = devtoolHook;\n\n  devtoolHook.emit('vuex:init', store);\n\n  devtoolHook.on('vuex:travel-to-state', function (targetState) {\n    store.replaceState(targetState);\n  });\n\n  store.subscribe(function (mutation, state) {\n    devtoolHook.emit('vuex:mutation', mutation, state);\n  });\n}\n\n/**\n * Get the first item that pass the test\n * by second argument function\n *\n * @param {Array} list\n * @param {Function} f\n * @return {*}\n */\n/**\n * Deep copy the given object considering circular structure.\n * This function caches all nested objects and its copies.\n * If it detects circular structure, use cached copy to avoid infinite loop.\n *\n * @param {*} obj\n * @param {Array<Object>} cache\n * @return {*}\n */\n\n\n/**\n * forEach for object\n */\nfunction forEachValue (obj, fn) {\n  Object.keys(obj).forEach(function (key) { return fn(obj[key], key); });\n}\n\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nfunction isPromise (val) {\n  return val && typeof val.then === 'function'\n}\n\nfunction assert (condition, msg) {\n  if (!condition) { throw new Error((\"[vuex] \" + msg)) }\n}\n\nvar Module = function Module (rawModule, runtime) {\n  this.runtime = runtime;\n  this._children = Object.create(null);\n  this._rawModule = rawModule;\n  var rawState = rawModule.state;\n  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};\n};\n\nvar prototypeAccessors$1 = { namespaced: { configurable: true } };\n\nprototypeAccessors$1.namespaced.get = function () {\n  return !!this._rawModule.namespaced\n};\n\nModule.prototype.addChild = function addChild (key, module) {\n  this._children[key] = module;\n};\n\nModule.prototype.removeChild = function removeChild (key) {\n  delete this._children[key];\n};\n\nModule.prototype.getChild = function getChild (key) {\n  return this._children[key]\n};\n\nModule.prototype.update = function update (rawModule) {\n  this._rawModule.namespaced = rawModule.namespaced;\n  if (rawModule.actions) {\n    this._rawModule.actions = rawModule.actions;\n  }\n  if (rawModule.mutations) {\n    this._rawModule.mutations = rawModule.mutations;\n  }\n  if (rawModule.getters) {\n    this._rawModule.getters = rawModule.getters;\n  }\n};\n\nModule.prototype.forEachChild = function forEachChild (fn) {\n  forEachValue(this._children, fn);\n};\n\nModule.prototype.forEachGetter = function forEachGetter (fn) {\n  if (this._rawModule.getters) {\n    forEachValue(this._rawModule.getters, fn);\n  }\n};\n\nModule.prototype.forEachAction = function forEachAction (fn) {\n  if (this._rawModule.actions) {\n    forEachValue(this._rawModule.actions, fn);\n  }\n};\n\nModule.prototype.forEachMutation = function forEachMutation (fn) {\n  if (this._rawModule.mutations) {\n    forEachValue(this._rawModule.mutations, fn);\n  }\n};\n\nObject.defineProperties( Module.prototype, prototypeAccessors$1 );\n\nvar ModuleCollection = function ModuleCollection (rawRootModule) {\n  // register root module (Vuex.Store options)\n  this.register([], rawRootModule, false);\n};\n\nModuleCollection.prototype.get = function get (path) {\n  return path.reduce(function (module, key) {\n    return module.getChild(key)\n  }, this.root)\n};\n\nModuleCollection.prototype.getNamespace = function getNamespace (path) {\n  var module = this.root;\n  return path.reduce(function (namespace, key) {\n    module = module.getChild(key);\n    return namespace + (module.namespaced ? key + '/' : '')\n  }, '')\n};\n\nModuleCollection.prototype.update = function update$1 (rawRootModule) {\n  update([], this.root, rawRootModule);\n};\n\nModuleCollection.prototype.register = function register (path, rawModule, runtime) {\n    var this$1 = this;\n    if ( runtime === void 0 ) runtime = true;\n\n  if (true) {\n    assertRawModule(path, rawModule);\n  }\n\n  var newModule = new Module(rawModule, runtime);\n  if (path.length === 0) {\n    this.root = newModule;\n  } else {\n    var parent = this.get(path.slice(0, -1));\n    parent.addChild(path[path.length - 1], newModule);\n  }\n\n  // register nested modules\n  if (rawModule.modules) {\n    forEachValue(rawModule.modules, function (rawChildModule, key) {\n      this$1.register(path.concat(key), rawChildModule, runtime);\n    });\n  }\n};\n\nModuleCollection.prototype.unregister = function unregister (path) {\n  var parent = this.get(path.slice(0, -1));\n  var key = path[path.length - 1];\n  if (!parent.getChild(key).runtime) { return }\n\n  parent.removeChild(key);\n};\n\nfunction update (path, targetModule, newModule) {\n  if (true) {\n    assertRawModule(path, newModule);\n  }\n\n  // update target module\n  targetModule.update(newModule);\n\n  // update nested modules\n  if (newModule.modules) {\n    for (var key in newModule.modules) {\n      if (!targetModule.getChild(key)) {\n        if (true) {\n          console.warn(\n            \"[vuex] trying to add a new module '\" + key + \"' on hot reloading, \" +\n            'manual reload is needed'\n          );\n        }\n        return\n      }\n      update(\n        path.concat(key),\n        targetModule.getChild(key),\n        newModule.modules[key]\n      );\n    }\n  }\n}\n\nvar functionAssert = {\n  assert: function (value) { return typeof value === 'function'; },\n  expected: 'function'\n};\n\nvar objectAssert = {\n  assert: function (value) { return typeof value === 'function' ||\n    (typeof value === 'object' && typeof value.handler === 'function'); },\n  expected: 'function or object with \"handler\" function'\n};\n\nvar assertTypes = {\n  getters: functionAssert,\n  mutations: functionAssert,\n  actions: objectAssert\n};\n\nfunction assertRawModule (path, rawModule) {\n  Object.keys(assertTypes).forEach(function (key) {\n    if (!rawModule[key]) { return }\n\n    var assertOptions = assertTypes[key];\n\n    forEachValue(rawModule[key], function (value, type) {\n      assert(\n        assertOptions.assert(value),\n        makeAssertionMessage(path, key, type, value, assertOptions.expected)\n      );\n    });\n  });\n}\n\nfunction makeAssertionMessage (path, key, type, value, expected) {\n  var buf = key + \" should be \" + expected + \" but \\\"\" + key + \".\" + type + \"\\\"\";\n  if (path.length > 0) {\n    buf += \" in module \\\"\" + (path.join('.')) + \"\\\"\";\n  }\n  buf += \" is \" + (JSON.stringify(value)) + \".\";\n  return buf\n}\n\nvar Vue; // bind on install\n\nvar Store = function Store (options) {\n  var this$1 = this;\n  if ( options === void 0 ) options = {};\n\n  // Auto install if it is not done yet and `window` has `Vue`.\n  // To allow users to avoid auto-installation in some cases,\n  // this code should be placed here. See #731\n  if (!Vue && typeof window !== 'undefined' && window.Vue) {\n    install(window.Vue);\n  }\n\n  if (true) {\n    assert(Vue, \"must call Vue.use(Vuex) before creating a store instance.\");\n    assert(typeof Promise !== 'undefined', \"vuex requires a Promise polyfill in this browser.\");\n    assert(this instanceof Store, \"Store must be called with the new operator.\");\n  }\n\n  var plugins = options.plugins; if ( plugins === void 0 ) plugins = [];\n  var strict = options.strict; if ( strict === void 0 ) strict = false;\n\n  var state = options.state; if ( state === void 0 ) state = {};\n  if (typeof state === 'function') {\n    state = state() || {};\n  }\n\n  // store internal state\n  this._committing = false;\n  this._actions = Object.create(null);\n  this._actionSubscribers = [];\n  this._mutations = Object.create(null);\n  this._wrappedGetters = Object.create(null);\n  this._modules = new ModuleCollection(options);\n  this._modulesNamespaceMap = Object.create(null);\n  this._subscribers = [];\n  this._watcherVM = new Vue();\n\n  // bind commit and dispatch to self\n  var store = this;\n  var ref = this;\n  var dispatch = ref.dispatch;\n  var commit = ref.commit;\n  this.dispatch = function boundDispatch (type, payload) {\n    return dispatch.call(store, type, payload)\n  };\n  this.commit = function boundCommit (type, payload, options) {\n    return commit.call(store, type, payload, options)\n  };\n\n  // strict mode\n  this.strict = strict;\n\n  // init root module.\n  // this also recursively registers all sub-modules\n  // and collects all module getters inside this._wrappedGetters\n  installModule(this, state, [], this._modules.root);\n\n  // initialize the store vm, which is responsible for the reactivity\n  // (also registers _wrappedGetters as computed properties)\n  resetStoreVM(this, state);\n\n  // apply plugins\n  plugins.forEach(function (plugin) { return plugin(this$1); });\n\n  if (Vue.config.devtools) {\n    devtoolPlugin(this);\n  }\n};\n\nvar prototypeAccessors = { state: { configurable: true } };\n\nprototypeAccessors.state.get = function () {\n  return this._vm._data.$$state\n};\n\nprototypeAccessors.state.set = function (v) {\n  if (true) {\n    assert(false, \"Use store.replaceState() to explicit replace store state.\");\n  }\n};\n\nStore.prototype.commit = function commit (_type, _payload, _options) {\n    var this$1 = this;\n\n  // check object-style commit\n  var ref = unifyObjectStyle(_type, _payload, _options);\n    var type = ref.type;\n    var payload = ref.payload;\n    var options = ref.options;\n\n  var mutation = { type: type, payload: payload };\n  var entry = this._mutations[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown mutation type: \" + type));\n    }\n    return\n  }\n  this._withCommit(function () {\n    entry.forEach(function commitIterator (handler) {\n      handler(payload);\n    });\n  });\n  this._subscribers.forEach(function (sub) { return sub(mutation, this$1.state); });\n\n  if (\n     true &&\n    options && options.silent\n  ) {\n    console.warn(\n      \"[vuex] mutation type: \" + type + \". Silent option has been removed. \" +\n      'Use the filter functionality in the vue-devtools'\n    );\n  }\n};\n\nStore.prototype.dispatch = function dispatch (_type, _payload) {\n    var this$1 = this;\n\n  // check object-style dispatch\n  var ref = unifyObjectStyle(_type, _payload);\n    var type = ref.type;\n    var payload = ref.payload;\n\n  var action = { type: type, payload: payload };\n  var entry = this._actions[type];\n  if (!entry) {\n    if (true) {\n      console.error((\"[vuex] unknown action type: \" + type));\n    }\n    return\n  }\n\n  this._actionSubscribers.forEach(function (sub) { return sub(action, this$1.state); });\n\n  return entry.length > 1\n    ? Promise.all(entry.map(function (handler) { return handler(payload); }))\n    : entry[0](payload)\n};\n\nStore.prototype.subscribe = function subscribe (fn) {\n  return genericSubscribe(fn, this._subscribers)\n};\n\nStore.prototype.subscribeAction = function subscribeAction (fn) {\n  return genericSubscribe(fn, this._actionSubscribers)\n};\n\nStore.prototype.watch = function watch (getter, cb, options) {\n    var this$1 = this;\n\n  if (true) {\n    assert(typeof getter === 'function', \"store.watch only accepts a function.\");\n  }\n  return this._watcherVM.$watch(function () { return getter(this$1.state, this$1.getters); }, cb, options)\n};\n\nStore.prototype.replaceState = function replaceState (state) {\n    var this$1 = this;\n\n  this._withCommit(function () {\n    this$1._vm._data.$$state = state;\n  });\n};\n\nStore.prototype.registerModule = function registerModule (path, rawModule, options) {\n    if ( options === void 0 ) options = {};\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n    assert(path.length > 0, 'cannot register the root module by using registerModule.');\n  }\n\n  this._modules.register(path, rawModule);\n  installModule(this, this.state, path, this._modules.get(path), options.preserveState);\n  // reset store to update getters...\n  resetStoreVM(this, this.state);\n};\n\nStore.prototype.unregisterModule = function unregisterModule (path) {\n    var this$1 = this;\n\n  if (typeof path === 'string') { path = [path]; }\n\n  if (true) {\n    assert(Array.isArray(path), \"module path must be a string or an Array.\");\n  }\n\n  this._modules.unregister(path);\n  this._withCommit(function () {\n    var parentState = getNestedState(this$1.state, path.slice(0, -1));\n    Vue.delete(parentState, path[path.length - 1]);\n  });\n  resetStore(this);\n};\n\nStore.prototype.hotUpdate = function hotUpdate (newOptions) {\n  this._modules.update(newOptions);\n  resetStore(this, true);\n};\n\nStore.prototype._withCommit = function _withCommit (fn) {\n  var committing = this._committing;\n  this._committing = true;\n  fn();\n  this._committing = committing;\n};\n\nObject.defineProperties( Store.prototype, prototypeAccessors );\n\nfunction genericSubscribe (fn, subs) {\n  if (subs.indexOf(fn) < 0) {\n    subs.push(fn);\n  }\n  return function () {\n    var i = subs.indexOf(fn);\n    if (i > -1) {\n      subs.splice(i, 1);\n    }\n  }\n}\n\nfunction resetStore (store, hot) {\n  store._actions = Object.create(null);\n  store._mutations = Object.create(null);\n  store._wrappedGetters = Object.create(null);\n  store._modulesNamespaceMap = Object.create(null);\n  var state = store.state;\n  // init all modules\n  installModule(store, state, [], store._modules.root, true);\n  // reset vm\n  resetStoreVM(store, state, hot);\n}\n\nfunction resetStoreVM (store, state, hot) {\n  var oldVm = store._vm;\n\n  // bind store public getters\n  store.getters = {};\n  var wrappedGetters = store._wrappedGetters;\n  var computed = {};\n  forEachValue(wrappedGetters, function (fn, key) {\n    // use computed to leverage its lazy-caching mechanism\n    computed[key] = function () { return fn(store); };\n    Object.defineProperty(store.getters, key, {\n      get: function () { return store._vm[key]; },\n      enumerable: true // for local getters\n    });\n  });\n\n  // use a Vue instance to store the state tree\n  // suppress warnings just in case the user has added\n  // some funky global mixins\n  var silent = Vue.config.silent;\n  Vue.config.silent = true;\n  store._vm = new Vue({\n    data: {\n      $$state: state\n    },\n    computed: computed\n  });\n  Vue.config.silent = silent;\n\n  // enable strict mode for new vm\n  if (store.strict) {\n    enableStrictMode(store);\n  }\n\n  if (oldVm) {\n    if (hot) {\n      // dispatch changes in all subscribed watchers\n      // to force getter re-evaluation for hot reloading.\n      store._withCommit(function () {\n        oldVm._data.$$state = null;\n      });\n    }\n    Vue.nextTick(function () { return oldVm.$destroy(); });\n  }\n}\n\nfunction installModule (store, rootState, path, module, hot) {\n  var isRoot = !path.length;\n  var namespace = store._modules.getNamespace(path);\n\n  // register in namespace map\n  if (module.namespaced) {\n    store._modulesNamespaceMap[namespace] = module;\n  }\n\n  // set state\n  if (!isRoot && !hot) {\n    var parentState = getNestedState(rootState, path.slice(0, -1));\n    var moduleName = path[path.length - 1];\n    store._withCommit(function () {\n      Vue.set(parentState, moduleName, module.state);\n    });\n  }\n\n  var local = module.context = makeLocalContext(store, namespace, path);\n\n  module.forEachMutation(function (mutation, key) {\n    var namespacedType = namespace + key;\n    registerMutation(store, namespacedType, mutation, local);\n  });\n\n  module.forEachAction(function (action, key) {\n    var type = action.root ? key : namespace + key;\n    var handler = action.handler || action;\n    registerAction(store, type, handler, local);\n  });\n\n  module.forEachGetter(function (getter, key) {\n    var namespacedType = namespace + key;\n    registerGetter(store, namespacedType, getter, local);\n  });\n\n  module.forEachChild(function (child, key) {\n    installModule(store, rootState, path.concat(key), child, hot);\n  });\n}\n\n/**\n * make localized dispatch, commit, getters and state\n * if there is no namespace, just use root ones\n */\nfunction makeLocalContext (store, namespace, path) {\n  var noNamespace = namespace === '';\n\n  var local = {\n    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._actions[type]) {\n          console.error((\"[vuex] unknown local action type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      return store.dispatch(type, payload)\n    },\n\n    commit: noNamespace ? store.commit : function (_type, _payload, _options) {\n      var args = unifyObjectStyle(_type, _payload, _options);\n      var payload = args.payload;\n      var options = args.options;\n      var type = args.type;\n\n      if (!options || !options.root) {\n        type = namespace + type;\n        if ( true && !store._mutations[type]) {\n          console.error((\"[vuex] unknown local mutation type: \" + (args.type) + \", global type: \" + type));\n          return\n        }\n      }\n\n      store.commit(type, payload, options);\n    }\n  };\n\n  // getters and state object must be gotten lazily\n  // because they will be changed by vm update\n  Object.defineProperties(local, {\n    getters: {\n      get: noNamespace\n        ? function () { return store.getters; }\n        : function () { return makeLocalGetters(store, namespace); }\n    },\n    state: {\n      get: function () { return getNestedState(store.state, path); }\n    }\n  });\n\n  return local\n}\n\nfunction makeLocalGetters (store, namespace) {\n  var gettersProxy = {};\n\n  var splitPos = namespace.length;\n  Object.keys(store.getters).forEach(function (type) {\n    // skip if the target getter is not match this namespace\n    if (type.slice(0, splitPos) !== namespace) { return }\n\n    // extract local getter type\n    var localType = type.slice(splitPos);\n\n    // Add a port to the getters proxy.\n    // Define as getter property because\n    // we do not want to evaluate the getters in this time.\n    Object.defineProperty(gettersProxy, localType, {\n      get: function () { return store.getters[type]; },\n      enumerable: true\n    });\n  });\n\n  return gettersProxy\n}\n\nfunction registerMutation (store, type, handler, local) {\n  var entry = store._mutations[type] || (store._mutations[type] = []);\n  entry.push(function wrappedMutationHandler (payload) {\n    handler.call(store, local.state, payload);\n  });\n}\n\nfunction registerAction (store, type, handler, local) {\n  var entry = store._actions[type] || (store._actions[type] = []);\n  entry.push(function wrappedActionHandler (payload, cb) {\n    var res = handler.call(store, {\n      dispatch: local.dispatch,\n      commit: local.commit,\n      getters: local.getters,\n      state: local.state,\n      rootGetters: store.getters,\n      rootState: store.state\n    }, payload, cb);\n    if (!isPromise(res)) {\n      res = Promise.resolve(res);\n    }\n    if (store._devtoolHook) {\n      return res.catch(function (err) {\n        store._devtoolHook.emit('vuex:error', err);\n        throw err\n      })\n    } else {\n      return res\n    }\n  });\n}\n\nfunction registerGetter (store, type, rawGetter, local) {\n  if (store._wrappedGetters[type]) {\n    if (true) {\n      console.error((\"[vuex] duplicate getter key: \" + type));\n    }\n    return\n  }\n  store._wrappedGetters[type] = function wrappedGetter (store) {\n    return rawGetter(\n      local.state, // local state\n      local.getters, // local getters\n      store.state, // root state\n      store.getters // root getters\n    )\n  };\n}\n\nfunction enableStrictMode (store) {\n  store._vm.$watch(function () { return this._data.$$state }, function () {\n    if (true) {\n      assert(store._committing, \"Do not mutate vuex store state outside mutation handlers.\");\n    }\n  }, { deep: true, sync: true });\n}\n\nfunction getNestedState (state, path) {\n  return path.length\n    ? path.reduce(function (state, key) { return state[key]; }, state)\n    : state\n}\n\nfunction unifyObjectStyle (type, payload, options) {\n  if (isObject(type) && type.type) {\n    options = payload;\n    payload = type;\n    type = type.type;\n  }\n\n  if (true) {\n    assert(typeof type === 'string', (\"Expects string as the type, but found \" + (typeof type) + \".\"));\n  }\n\n  return { type: type, payload: payload, options: options }\n}\n\nfunction install (_Vue) {\n  if (Vue && _Vue === Vue) {\n    if (true) {\n      console.error(\n        '[vuex] already installed. Vue.use(Vuex) should be called only once.'\n      );\n    }\n    return\n  }\n  Vue = _Vue;\n  applyMixin(Vue);\n}\n\nvar mapState = normalizeNamespace(function (namespace, states) {\n  var res = {};\n  normalizeMap(states).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedState () {\n      var state = this.$store.state;\n      var getters = this.$store.getters;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapState', namespace);\n        if (!module) {\n          return\n        }\n        state = module.context.state;\n        getters = module.context.getters;\n      }\n      return typeof val === 'function'\n        ? val.call(this, state, getters)\n        : state[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapMutations = normalizeNamespace(function (namespace, mutations) {\n  var res = {};\n  normalizeMap(mutations).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedMutation () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var commit = this.$store.commit;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);\n        if (!module) {\n          return\n        }\n        commit = module.context.commit;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [commit].concat(args))\n        : commit.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar mapGetters = normalizeNamespace(function (namespace, getters) {\n  var res = {};\n  normalizeMap(getters).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    val = namespace + val;\n    res[key] = function mappedGetter () {\n      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {\n        return\n      }\n      if ( true && !(val in this.$store.getters)) {\n        console.error((\"[vuex] unknown getter: \" + val));\n        return\n      }\n      return this.$store.getters[val]\n    };\n    // mark vuex getter for devtools\n    res[key].vuex = true;\n  });\n  return res\n});\n\nvar mapActions = normalizeNamespace(function (namespace, actions) {\n  var res = {};\n  normalizeMap(actions).forEach(function (ref) {\n    var key = ref.key;\n    var val = ref.val;\n\n    res[key] = function mappedAction () {\n      var args = [], len = arguments.length;\n      while ( len-- ) args[ len ] = arguments[ len ];\n\n      var dispatch = this.$store.dispatch;\n      if (namespace) {\n        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);\n        if (!module) {\n          return\n        }\n        dispatch = module.context.dispatch;\n      }\n      return typeof val === 'function'\n        ? val.apply(this, [dispatch].concat(args))\n        : dispatch.apply(this.$store, [val].concat(args))\n    };\n  });\n  return res\n});\n\nvar createNamespacedHelpers = function (namespace) { return ({\n  mapState: mapState.bind(null, namespace),\n  mapGetters: mapGetters.bind(null, namespace),\n  mapMutations: mapMutations.bind(null, namespace),\n  mapActions: mapActions.bind(null, namespace)\n}); };\n\nfunction normalizeMap (map) {\n  return Array.isArray(map)\n    ? map.map(function (key) { return ({ key: key, val: key }); })\n    : Object.keys(map).map(function (key) { return ({ key: key, val: map[key] }); })\n}\n\nfunction normalizeNamespace (fn) {\n  return function (namespace, map) {\n    if (typeof namespace !== 'string') {\n      map = namespace;\n      namespace = '';\n    } else if (namespace.charAt(namespace.length - 1) !== '/') {\n      namespace += '/';\n    }\n    return fn(namespace, map)\n  }\n}\n\nfunction getModuleByNamespace (store, helper, namespace) {\n  var module = store._modulesNamespaceMap[namespace];\n  if ( true && !module) {\n    console.error((\"[vuex] module namespace not found in \" + helper + \"(): \" + namespace));\n  }\n  return module\n}\n\nvar index_esm = {\n  Store: Store,\n  install: install,\n  version: '3.0.1',\n  mapState: mapState,\n  mapMutations: mapMutations,\n  mapGetters: mapGetters,\n  mapActions: mapActions,\n  createNamespacedHelpers: createNamespacedHelpers\n};\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (index_esm);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///33\n");

/***/ }),

/***/ 34:
/*!************************************************!*\
  !*** D:/张总新版app/maiYa01/common/luchApi/api.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _index = _interopRequireDefault(__webpack_require__(/*! ./index */ 35));\nvar _md = _interopRequireDefault(__webpack_require__(/*! @/utils/md5.js */ 38));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n/**\r\n                                                                                                                                                           * object转化成url拼接样式\r\n                                                                                                                                                           * @param obj 需要转化的参数\r\n                                                                                                                                                           */\nvar objToUrl = function objToUrl(obj) {\n  var arr = [];\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      arr.push(encodeURIComponent(i) + \"=\" + encodeURIComponent(obj[i]));\n    }\n  }\n  return arr.join(\"&\");\n};\n/**\r\n    * url转化成object拼接样式\r\n    * @param url 需要转化的参数\r\n    */\nvar urlToObj = function urlToObj(url) {\n  var string = url.split('&');\n  var res = {};\n  for (var i = 0; i < string.length; i++) {\n    var str = string[i].split('=');\n    if (str[0] != '') {\n      res[str[0]] = str[1];\n    }\n  }\n  return res;\n};\n\n// 应用编号和签名  开发环境\n// let appId = 1\n// let appSecret = \"l3A44xNwuZ8\"\n// 应用编号和签名\nvar appId = 5;\nvar appSecret = \"FVikcEgR6OA\";\nvar t_time = parseInt(new Date().getTime() / 1000);\nvar s_sing = (0, _md.default)(appSecret + ',' + t_time);\n\nvar ab_ = {\n  // 生成带签名的RpcUri\n  pr: function pr(uri) {\n    var t = parseInt(new Date().getTime() / 1000);\n    return uri + '?t=' + t + '&p=' + appId + '&s=' + (0, _md.default)(appSecret + ',' + t);\n  } };\n\nvar API = {\n  BaseUrl: _index.default.config.baseURL,\n  imgBaseUrl: _index.default.config.imgBaseURL,\n  yygjUrl: _index.default.config.yygjURL,\n  wanjiaURL: _index.default.config.wanjiaURL,\n  t: t_time,\n  p: appId,\n  s: s_sing,\n\n  // 接口示例 1---------------------------------------------------------------------------\n  oauth: function oauth(token) {\n    return _index.default.post(API.yygjUrl + ab_.pr('O/oauth'), JSON.stringify([token]));\n  },\n  member: function member(token) {\n    return _index.default.post(API.yygjUrl + ab_.pr('O/member'), JSON.stringify([token, true]));\n  },\n\n  // 接口示例 2---------------------------------------------------------------------------\n  getWanJiaToken: function getWanJiaToken() {\n    return _index.default.post(API.wanjiaURL, {\n      method: \"token.gettoken\",\n      appid: \"YY_wanjia\",\n      sign: \"SDDFJSDMWSDFJ\" });\n\n  },\n  // 接口示例 3---------------------------------------------------------------------------\n  refreshToken: function refreshToken(userId) {\n    return _index.default.post('user/refreshToken', objToUrl({ userId: userId }));\n  },\n\n\n  // 正式后台数据接口\n\n  //注册接口\n  register: function register(data) {\n    return _index.default.post('/index/Doctors/register', data);\n  },\n  // 登录接口\n  login: function login(data) {\n    return _index.default.post('/index/Doctors/login', data);\n  },\n  //获取医生端的聊天列表\n  getMessageList: function getMessageList(data) {\n    return _index.default.post('/index/Doctors/chatrecord', data);\n  },\n  //医生端发送消息后转发到微信上端接口\n  zhuanfaMessage: function zhuanfaMessage(data) {\n    return _index.default.post('/index/Wechat/forward', data);\n  } };var _default =\n\n\nAPI;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34\n");

/***/ }),

/***/ 35:
/*!**************************************************!*\
  !*** D:/张总新版app/maiYa01/common/luchApi/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _config = _interopRequireDefault(__webpack_require__(/*! @/common/config.js */ 36));\nvar _request = _interopRequireDefault(__webpack_require__(/*! ./request */ 37));\n\n\n\n\nvar _store = _interopRequireDefault(__webpack_require__(/*! @/store */ 32));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}var http = new _request.default();\n\n// 以下baseurl 均可放在common/config下进行全局定义，此处只做示例展示\n\n// const BASE_URL = \"http://192.168.6.130:8081/chongguan/api/v1/\";\n// const IMG_BASE_URL = \"http://192.168.6.130:8081/chongguan/img/server/\";\n\n// http://plt.yiyiny.com/api\n// const YiYIGJ_URL = 'http://plt.yiyiny.com/api';\n// const WANJIA_URL = 'https://wanjia.yiyitop.com/platauth.html';\n\nvar log = console.log.bind(console);\nvar S = JSON.stringify.bind(JSON);\n\nhttp.setConfig(function (config) {\n  config.baseUrl = _config.default.API_BASE_URL;\n  config.imgBaseURL = _config.default.IMG_BASE_URL;\n  // 引入其他请求,仅用展示,此项目无用\n  // config.yygjURL = YiYIGJ_URL;\n  // config.wanjiaURL = WANJIA_URL;\n  config.header = _objectSpread({},\n  config.header);\n\n  http.config.timeout = 300000;\n  return config;\n});\n\n\n/**\r\n     * object转化成url拼接样式\r\n     * @param obj 需要转化的参数\r\n     */\nvar objToUrl = function objToUrl(obj) {\n  var arr = [];\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      arr.push(encodeURIComponent(i) + \"=\" + encodeURIComponent(obj[i]));\n    }\n  }\n  return arr.join(\"&\");\n};\n\n\nhttp.interceptor.request(function (config, cancel) {\n  /*\r\n                                                    if (!token) { // 如果token不存在，调用cancel 会取消本次请求，但是该函数的catch() 仍会执行\r\n                                                      cancel('token 不存在') // 接收一个参数，会传给catch((err) => {}) err.errMsg === 'token 不存在'\r\n                                                    }\r\n                                                    */\n  // 过滤不需要token的接口\n  if (config.url.indexOf('O/') > 0 || config.url.indexOf('platauth') > 0 ||\n  config.url.indexOf('checkToken') > 0 || config.url.indexOf('addLogin') > 0 || config.url.indexOf('refreshToken') >\n  0) {\n    return config;\n  } else {\n    config.header = _objectSpread({},\n    config.header);\n\n\n    return config;\n  }\n  // return config;\n});\nhttp.interceptor.response(function (response) {\n  /**\r\n                                                * @param {code}\r\n                                                * 0:请求报错，直接弹框提示\r\n                                                * 1:请求成功，处理数据，进行页面交互\r\n                                                * 2:用户登录失效，提示登录失效，自动跳转登录。\r\n                                                * */\n  return response.data;\n  // if (response.data.code == 1 || response.data.code == 3 || response.data.code == 4) {\n  // \treturn response.data\n  // } else if (response.data.code == 203) {\n  // \thttp.post('user/refreshToken', objToUrl({\n  // \t\tuserId: uni.getStorageSync(\"user_id\")\n  // \t})).then(res => {\n  // \t\tuni.setStorageSync('user_token', res.data.token)\n  // \t\tstore.commit(\"USER_TOKEN\", res.data.token)\n  // \t\treturn response.data\n  // \t})\n  // } else {\n  // \tuni.showToast({\n  // \t\ticon: 'none',\n  // \t\ttitle: res.msg || '数据返回异常',\n  // \t\tduration: 2000,\n  // \t\tcomplete: () => {}\n  // \t});\n  // \treturn response.data\n  // }\n\n}, function (response) {/*  对响应错误做点什么 （statusCode !== 200），必须return response*/\n  __f__(\"log\", '对响应错误做点什么', response, \" at common\\\\luchApi\\\\index.js:99\");\n  return response;\n});var _default =\n\nhttp;exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2x1Y2hBcGkvaW5kZXguanMiXSwibmFtZXMiOlsiaHR0cCIsIlJlcXVlc3QiLCJsb2ciLCJjb25zb2xlIiwiYmluZCIsIlMiLCJKU09OIiwic3RyaW5naWZ5Iiwic2V0Q29uZmlnIiwiY29uZmlnIiwiYmFzZVVybCIsImNvbmZpZ1VybCIsIkFQSV9CQVNFX1VSTCIsImltZ0Jhc2VVUkwiLCJJTUdfQkFTRV9VUkwiLCJoZWFkZXIiLCJ0aW1lb3V0Iiwib2JqVG9VcmwiLCJvYmoiLCJhcnIiLCJpIiwiaGFzT3duUHJvcGVydHkiLCJwdXNoIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwiam9pbiIsImludGVyY2VwdG9yIiwicmVxdWVzdCIsImNhbmNlbCIsInVybCIsImluZGV4T2YiLCJyZXNwb25zZSIsImRhdGEiXSwibWFwcGluZ3MiOiJvSUFBQTtBQUNBOzs7OztBQUtBLDRFLDB2QkFIQSxJQUFNQSxJQUFJLEdBQUcsSUFBSUMsZ0JBQUosRUFBYjs7QUFLQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0QsR0FBUixDQUFZRSxJQUFaLENBQWlCRCxPQUFqQixDQUFWO0FBQ0EsSUFBSUUsQ0FBQyxHQUFHQyxJQUFJLENBQUNDLFNBQUwsQ0FBZUgsSUFBZixDQUFvQkUsSUFBcEIsQ0FBUjs7QUFFQU4sSUFBSSxDQUFDUSxTQUFMLENBQWUsVUFBQ0MsTUFBRCxFQUFZO0FBQzFCQSxRQUFNLENBQUNDLE9BQVAsR0FBaUJDLGdCQUFVQyxZQUEzQjtBQUNBSCxRQUFNLENBQUNJLFVBQVAsR0FBb0JGLGdCQUFVRyxZQUE5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBTCxRQUFNLENBQUNNLE1BQVA7QUFDSU4sUUFBTSxDQUFDTSxNQURYOztBQUdBZixNQUFJLENBQUNTLE1BQUwsQ0FBWU8sT0FBWixHQUFzQixNQUF0QjtBQUNBLFNBQU9QLE1BQVA7QUFDQSxDQVhEOzs7QUFjQTs7OztBQUlBLElBQU1RLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQUFDLEdBQUcsRUFBSTtBQUN2QixNQUFJQyxHQUFHLEdBQUcsRUFBVjtBQUNBLE9BQUssSUFBSUMsQ0FBVCxJQUFjRixHQUFkLEVBQW1CO0FBQ2xCLFFBQUlBLEdBQUcsQ0FBQ0csY0FBSixDQUFtQkQsQ0FBbkIsQ0FBSixFQUEyQjtBQUMxQkQsU0FBRyxDQUFDRyxJQUFKLENBQVNDLGtCQUFrQixDQUFDSCxDQUFELENBQWxCLEdBQXdCLEdBQXhCLEdBQThCRyxrQkFBa0IsQ0FBQ0wsR0FBRyxDQUFDRSxDQUFELENBQUosQ0FBekQ7QUFDQTtBQUNEO0FBQ0QsU0FBT0QsR0FBRyxDQUFDSyxJQUFKLENBQVMsR0FBVCxDQUFQO0FBQ0EsQ0FSRDs7O0FBV0F4QixJQUFJLENBQUN5QixXQUFMLENBQWlCQyxPQUFqQixDQUF5QixVQUFDakIsTUFBRCxFQUFTa0IsTUFBVCxFQUFvQjtBQUM1Qzs7Ozs7QUFLQTtBQUNBLE1BQUlsQixNQUFNLENBQUNtQixHQUFQLENBQVdDLE9BQVgsQ0FBbUIsSUFBbkIsSUFBMkIsQ0FBM0IsSUFBZ0NwQixNQUFNLENBQUNtQixHQUFQLENBQVdDLE9BQVgsQ0FBbUIsVUFBbkIsSUFBaUMsQ0FBakU7QUFDSHBCLFFBQU0sQ0FBQ21CLEdBQVAsQ0FBV0MsT0FBWCxDQUFtQixZQUFuQixJQUFtQyxDQURoQyxJQUNxQ3BCLE1BQU0sQ0FBQ21CLEdBQVAsQ0FBV0MsT0FBWCxDQUFtQixVQUFuQixJQUFpQyxDQUR0RSxJQUMyRXBCLE1BQU0sQ0FBQ21CLEdBQVAsQ0FBV0MsT0FBWCxDQUFtQixjQUFuQjtBQUM5RSxHQUZELEVBRUk7QUFDSCxXQUFPcEIsTUFBUDtBQUNBLEdBSkQsTUFJTztBQUNOQSxVQUFNLENBQUNNLE1BQVA7QUFDSU4sVUFBTSxDQUFDTSxNQURYOzs7QUFJQSxXQUFPTixNQUFQO0FBQ0E7QUFDRDtBQUNBLENBbkJEO0FBb0JBVCxJQUFJLENBQUN5QixXQUFMLENBQWlCSyxRQUFqQixDQUEwQixVQUFDQSxRQUFELEVBQWM7QUFDdkM7Ozs7OztBQU1FLFNBQU9BLFFBQVEsQ0FBQ0MsSUFBaEI7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQTVCRCxFQTRCRyxVQUFDRCxRQUFELEVBQWMsQ0FBRTtBQUNsQixlQUFZLFdBQVosRUFBd0JBLFFBQXhCO0FBQ0EsU0FBT0EsUUFBUDtBQUNBLENBL0JELEU7O0FBaUNlOUIsSSIsImZpbGUiOiIzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb25maWdVcmwgZnJvbSBcIkAvY29tbW9uL2NvbmZpZy5qc1wiXHJcbmltcG9ydCBSZXF1ZXN0IGZyb20gJy4vcmVxdWVzdCdcclxuXHJcbmNvbnN0IGh0dHAgPSBuZXcgUmVxdWVzdCgpO1xyXG5cclxuXHJcbmltcG9ydCBzdG9yZSBmcm9tICdAL3N0b3JlJ1xyXG5cclxuLy8g5Lul5LiLYmFzZXVybCDlnYflj6/mlL7lnKhjb21tb24vY29uZmln5LiL6L+b6KGM5YWo5bGA5a6a5LmJ77yM5q2k5aSE5Y+q5YGa56S65L6L5bGV56S6XHJcblxyXG4vLyBjb25zdCBCQVNFX1VSTCA9IFwiaHR0cDovLzE5Mi4xNjguNi4xMzA6ODA4MS9jaG9uZ2d1YW4vYXBpL3YxL1wiO1xyXG4vLyBjb25zdCBJTUdfQkFTRV9VUkwgPSBcImh0dHA6Ly8xOTIuMTY4LjYuMTMwOjgwODEvY2hvbmdndWFuL2ltZy9zZXJ2ZXIvXCI7XHJcblxyXG4vLyBodHRwOi8vcGx0LnlpeWlueS5jb20vYXBpXHJcbi8vIGNvbnN0IFlpWUlHSl9VUkwgPSAnaHR0cDovL3BsdC55aXlpbnkuY29tL2FwaSc7XHJcbi8vIGNvbnN0IFdBTkpJQV9VUkwgPSAnaHR0cHM6Ly93YW5qaWEueWl5aXRvcC5jb20vcGxhdGF1dGguaHRtbCc7XHJcblxyXG52YXIgbG9nID0gY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcclxudmFyIFMgPSBKU09OLnN0cmluZ2lmeS5iaW5kKEpTT04pO1xyXG5cclxuaHR0cC5zZXRDb25maWcoKGNvbmZpZykgPT4ge1xyXG5cdGNvbmZpZy5iYXNlVXJsID0gY29uZmlnVXJsLkFQSV9CQVNFX1VSTDtcclxuXHRjb25maWcuaW1nQmFzZVVSTCA9IGNvbmZpZ1VybC5JTUdfQkFTRV9VUkw7XHJcblx0Ly8g5byV5YWl5YW25LuW6K+35rGCLOS7heeUqOWxleekuizmraTpobnnm67ml6DnlKhcclxuXHQvLyBjb25maWcueXlnalVSTCA9IFlpWUlHSl9VUkw7XHJcblx0Ly8gY29uZmlnLndhbmppYVVSTCA9IFdBTkpJQV9VUkw7XHJcblx0Y29uZmlnLmhlYWRlciA9IHtcclxuXHRcdC4uLmNvbmZpZy5oZWFkZXJcclxuXHR9XHJcblx0aHR0cC5jb25maWcudGltZW91dCA9IDMwMDAwMDtcclxuXHRyZXR1cm4gY29uZmlnXHJcbn0pXHJcblxyXG5cclxuLyoqXHJcbiAqIG9iamVjdOi9rOWMluaIkHVybOaLvOaOpeagt+W8j1xyXG4gKiBAcGFyYW0gb2JqIOmcgOimgei9rOWMlueahOWPguaVsFxyXG4gKi9cclxuY29uc3Qgb2JqVG9VcmwgPSBvYmogPT4ge1xyXG5cdGxldCBhcnIgPSBbXTtcclxuXHRmb3IgKGxldCBpIGluIG9iaikge1xyXG5cdFx0aWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xyXG5cdFx0XHRhcnIucHVzaChlbmNvZGVVUklDb21wb25lbnQoaSkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudChvYmpbaV0pKTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGFyci5qb2luKFwiJlwiKTtcclxufVxyXG5cclxuXHJcbmh0dHAuaW50ZXJjZXB0b3IucmVxdWVzdCgoY29uZmlnLCBjYW5jZWwpID0+IHtcclxuXHQvKlxyXG5cdGlmICghdG9rZW4pIHsgLy8g5aaC5p6cdG9rZW7kuI3lrZjlnKjvvIzosIPnlKhjYW5jZWwg5Lya5Y+W5raI5pys5qyh6K+35rGC77yM5L2G5piv6K+l5Ye95pWw55qEY2F0Y2goKSDku43kvJrmiafooYxcclxuXHQgIGNhbmNlbCgndG9rZW4g5LiN5a2Y5ZyoJykgLy8g5o6l5pS25LiA5Liq5Y+C5pWw77yM5Lya5Lyg57uZY2F0Y2goKGVycikgPT4ge30pIGVyci5lcnJNc2cgPT09ICd0b2tlbiDkuI3lrZjlnKgnXHJcblx0fVxyXG5cdCovXHJcblx0Ly8g6L+H5ruk5LiN6ZyA6KaBdG9rZW7nmoTmjqXlj6NcclxuXHRpZiAoY29uZmlnLnVybC5pbmRleE9mKCdPLycpID4gMCB8fCBjb25maWcudXJsLmluZGV4T2YoJ3BsYXRhdXRoJykgPiAwIHx8XHJcblx0XHRjb25maWcudXJsLmluZGV4T2YoJ2NoZWNrVG9rZW4nKSA+IDAgfHwgY29uZmlnLnVybC5pbmRleE9mKCdhZGRMb2dpbicpID4gMCB8fCBjb25maWcudXJsLmluZGV4T2YoJ3JlZnJlc2hUb2tlbicpID5cclxuXHRcdDApIHtcclxuXHRcdHJldHVybiBjb25maWc7XHJcblx0fSBlbHNlIHtcclxuXHRcdGNvbmZpZy5oZWFkZXIgPSB7XHJcblx0XHRcdC4uLmNvbmZpZy5oZWFkZXIsXHJcblx0XHRcdC8vICdYLUFVVEgtVE9LRU4nOiB1c2VyVG9rZW5cclxuXHRcdH1cclxuXHRcdHJldHVybiBjb25maWdcclxuXHR9XHJcblx0Ly8gcmV0dXJuIGNvbmZpZztcclxufSlcclxuaHR0cC5pbnRlcmNlcHRvci5yZXNwb25zZSgocmVzcG9uc2UpID0+IHtcclxuXHQvKipcclxuXHQgKiBAcGFyYW0ge2NvZGV9XHJcblx0ICogMDror7fmsYLmiqXplJnvvIznm7TmjqXlvLnmoYbmj5DnpLpcclxuXHQgKiAxOuivt+axguaIkOWKn++8jOWkhOeQhuaVsOaNru+8jOi/m+ihjOmhtemdouS6pOS6klxyXG5cdCAqIDI655So5oi355m75b2V5aSx5pWI77yM5o+Q56S655m75b2V5aSx5pWI77yM6Ieq5Yqo6Lez6L2s55m75b2V44CCXHJcblx0ICogKi9cclxuXHQgXHRyZXR1cm4gcmVzcG9uc2UuZGF0YVxyXG5cdC8vIGlmIChyZXNwb25zZS5kYXRhLmNvZGUgPT0gMSB8fCByZXNwb25zZS5kYXRhLmNvZGUgPT0gMyB8fCByZXNwb25zZS5kYXRhLmNvZGUgPT0gNCkge1xyXG5cdC8vIFx0cmV0dXJuIHJlc3BvbnNlLmRhdGFcclxuXHQvLyB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEuY29kZSA9PSAyMDMpIHtcclxuXHQvLyBcdGh0dHAucG9zdCgndXNlci9yZWZyZXNoVG9rZW4nLCBvYmpUb1VybCh7XHJcblx0Ly8gXHRcdHVzZXJJZDogdW5pLmdldFN0b3JhZ2VTeW5jKFwidXNlcl9pZFwiKVxyXG5cdC8vIFx0fSkpLnRoZW4ocmVzID0+IHtcclxuXHQvLyBcdFx0dW5pLnNldFN0b3JhZ2VTeW5jKCd1c2VyX3Rva2VuJywgcmVzLmRhdGEudG9rZW4pXHJcblx0Ly8gXHRcdHN0b3JlLmNvbW1pdChcIlVTRVJfVE9LRU5cIiwgcmVzLmRhdGEudG9rZW4pXHJcblx0Ly8gXHRcdHJldHVybiByZXNwb25zZS5kYXRhXHJcblx0Ly8gXHR9KVxyXG5cdC8vIH0gZWxzZSB7XHJcblx0Ly8gXHR1bmkuc2hvd1RvYXN0KHtcclxuXHQvLyBcdFx0aWNvbjogJ25vbmUnLFxyXG5cdC8vIFx0XHR0aXRsZTogcmVzLm1zZyB8fCAn5pWw5o2u6L+U5Zue5byC5bi4JyxcclxuXHQvLyBcdFx0ZHVyYXRpb246IDIwMDAsXHJcblx0Ly8gXHRcdGNvbXBsZXRlOiAoKSA9PiB7fVxyXG5cdC8vIFx0fSk7XHJcblx0Ly8gXHRyZXR1cm4gcmVzcG9uc2UuZGF0YVxyXG5cdC8vIH1cclxuXHJcbn0sIChyZXNwb25zZSkgPT4geyAvKiAg5a+55ZON5bqU6ZSZ6K+v5YGa54K55LuA5LmIIO+8iHN0YXR1c0NvZGUgIT09IDIwMO+8ie+8jOW/hemhu3JldHVybiByZXNwb25zZSovXHJcblx0Y29uc29sZS5sb2coJ+WvueWTjeW6lOmUmeivr+WBmueCueS7gOS5iCcscmVzcG9uc2UpO1xyXG5cdHJldHVybiByZXNwb25zZTtcclxufSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGh0dHA7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///35\n");

/***/ }),

/***/ 36:
/*!*******************************************!*\
  !*** D:/张总新版app/maiYa01/common/config.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /**\r\n                                                                                                      * @Author: SnowBeatRain\r\n                                                                                                      * @createTime: 2019-08-02\r\n                                                                                                      * @updateTime: 2019-08-02\r\n                                                                                                      * @description: 配置项目的baseUrl，便于统一调用以及修改。\r\n                                                                                                      */\n\n/**\r\n                                                                                                          * @param {type}  \r\n                                                                                                          * @API_BASE_URL：请求基本路径\r\n                                                                                                          * @IMG_BASE_URL：图片基本路径\r\n                                                                                                          */\n// const API_BASE_URL = \"http://newapp.lamamuying.com/index.php\"\n// const IMG_BASE_URL = \"http://newapp.lamamuying.com/index.php\"\n\nvar API_BASE_URL = \"http://wechat.maiyayisheng.com/index.php\";\nvar IMG_BASE_URL = \"http://aq.appython.top/qay-boot/api/\";var _default =\n\n{\n  API_BASE_URL: API_BASE_URL, IMG_BASE_URL: IMG_BASE_URL };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2NvbmZpZy5qcyJdLCJuYW1lcyI6WyJBUElfQkFTRV9VUkwiLCJJTUdfQkFTRV9VUkwiXSwibWFwcGluZ3MiOiJ3RkFBQTs7Ozs7OztBQU9BOzs7OztBQUtBO0FBQ0E7O0FBRUEsSUFBTUEsWUFBWSxHQUFHLDBDQUFyQjtBQUNBLElBQU1DLFlBQVksR0FBRyxzQ0FBckIsQzs7QUFFZTtBQUNkRCxjQUFZLEVBQVpBLFlBRGMsRUFDREMsWUFBWSxFQUFaQSxZQURDLEUiLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQEF1dGhvcjogU25vd0JlYXRSYWluXHJcbiAqIEBjcmVhdGVUaW1lOiAyMDE5LTA4LTAyXHJcbiAqIEB1cGRhdGVUaW1lOiAyMDE5LTA4LTAyXHJcbiAqIEBkZXNjcmlwdGlvbjog6YWN572u6aG555uu55qEYmFzZVVybO+8jOS+v+S6jue7n+S4gOiwg+eUqOS7peWPiuS/ruaUueOAglxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3R5cGV9ICBcclxuICogQEFQSV9CQVNFX1VSTO+8muivt+axguWfuuacrOi3r+W+hFxyXG4gKiBASU1HX0JBU0VfVVJM77ya5Zu+54mH5Z+65pys6Lev5b6EXHJcbiAqL1xyXG4vLyBjb25zdCBBUElfQkFTRV9VUkwgPSBcImh0dHA6Ly9uZXdhcHAubGFtYW11eWluZy5jb20vaW5kZXgucGhwXCJcclxuLy8gY29uc3QgSU1HX0JBU0VfVVJMID0gXCJodHRwOi8vbmV3YXBwLmxhbWFtdXlpbmcuY29tL2luZGV4LnBocFwiXHJcblxyXG5jb25zdCBBUElfQkFTRV9VUkwgPSBcImh0dHA6Ly93ZWNoYXQubWFpeWF5aXNoZW5nLmNvbS9pbmRleC5waHBcIlxyXG5jb25zdCBJTUdfQkFTRV9VUkwgPSBcImh0dHA6Ly9hcS5hcHB5dGhvbi50b3AvcWF5LWJvb3QvYXBpL1wiXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0QVBJX0JBU0VfVVJMLElNR19CQVNFX1VSTFxyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///36\n");

/***/ }),

/***/ 37:
/*!****************************************************!*\
  !*** D:/张总新版app/maiYa01/common/luchApi/request.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};var ownKeys = Object.keys(source);if (typeof Object.getOwnPropertySymbols === 'function') {ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {return Object.getOwnPropertyDescriptor(source, sym).enumerable;}));}ownKeys.forEach(function (key) {_defineProperty(target, key, source[key]);});}return target;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;} /**\r\nequest 1.0.0\r\nlass Request\r\ndescription luch-request 1.0.0 http请求插件\r\nuthor lu-ch\r\nate 2019-09-06\r\nmail webwork.s@qq.com\r\nhttp://ext.dcloud.net.cn/plugin?id=392\r\nvar\nRequest = /*#__PURE__*/function () {function Request() {var _this = this;_classCallCheck(this, Request);_defineProperty(this, \"config\",\n    {\n      baseUrl: '',\n      header: {\n        // 自定义全局的header\n        'content-type': 'application/x-www-form-urlencoded;charset=UTF-8' },\n\n      method: 'GET',\n      dataType: 'json',\n      responseType: 'text',\n      success: function success() {},\n      fail: function fail() {},\n      complete: function complete() {} });_defineProperty(this, \"interceptor\",\n\n\n\n\n\n\n    {\n      request: function request(f) {\n        if (f) {\n          _this.requestBeforeFun = f;\n        }\n      },\n      response: function response(f) {\n        if (f) {\n          _this.requestComFun = f;\n        }\n      } });}_createClass(Request, [{ key: \"setConfig\", value: function setConfig(\n\n\n\n\n\n\n\n\n\n\n    f) {\n      this.config = f(this.config);\n    } }, { key: \"request\", value: function request()\n\n    {var _this2 = this;var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      options.baseUrl = options.baseUrl || this.config.baseUrl;\n      options.dataType = options.dataType || this.config.dataType;\n      options.url = Request.posUrl(options.url) ? options.url : options.baseUrl + options.url;\n      options.data = options.data || {};\n      options.header = options.header || this.config.header;\n      options.method = options.method || this.config.method;\n      return new Promise(function (resolve, reject) {\n        var next = true;\n        var _config = null;\n        options.complete = function (response) {\n          var statusCode = response.statusCode;\n          response.config = _config;\n          response = _this2.requestComFun(response);\n          if (statusCode === 200) {// 成功\n            resolve(response);\n          } else {\n            reject(response);\n          }\n        };\n        var cancel = function cancel() {var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'handle cancel';\n          var err = {\n            errMsg: t,\n            config: afC };\n\n          reject(err);\n          next = false;\n        };\n        var afC = _objectSpread({}, _this2.config, options);\n        _config = _objectSpread({}, afC, _this2.requestBeforeFun(afC, cancel));\n        if (!next) return;\n        uni.request(_config);\n      });\n    } }, { key: \"get\", value: function get(\n\n    url, data) {var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      options.url = url;\n      options.data = data;\n      options.method = 'GET';\n      return this.request(options);\n    } }, { key: \"post\", value: function post(\n\n    url, data) {var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      options.url = url;\n      options.data = data;\n      options.method = 'POST';\n      return this.request(options);\n    } }], [{ key: \"posUrl\", value: function posUrl(url) {/* 判断url是否为绝对路径 */return /(http|https):\\/\\/([\\w.]+\\/?)\\S*/.test(url);} }, { key: \"requestBeforeFun\", value: function requestBeforeFun(config) {return config;} }, { key: \"requestComFun\", value: function requestComFun(response) {return response;} }]);return Request;}();exports.default = Request;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vY29tbW9uL2x1Y2hBcGkvcmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJSZXF1ZXN0IiwiYmFzZVVybCIsImhlYWRlciIsIm1ldGhvZCIsImRhdGFUeXBlIiwicmVzcG9uc2VUeXBlIiwic3VjY2VzcyIsImZhaWwiLCJjb21wbGV0ZSIsInJlcXVlc3QiLCJmIiwicmVxdWVzdEJlZm9yZUZ1biIsInJlc3BvbnNlIiwicmVxdWVzdENvbUZ1biIsImNvbmZpZyIsIm9wdGlvbnMiLCJ1cmwiLCJwb3NVcmwiLCJkYXRhIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJuZXh0IiwiX2NvbmZpZyIsInN0YXR1c0NvZGUiLCJjYW5jZWwiLCJ0IiwiZXJyIiwiZXJyTXNnIiwiYWZDIiwidW5pIiwidGVzdCJdLCJtYXBwaW5ncyI6IjY3Q0FBQTs7Ozs7Ozs7O0FBU3FCQSxPO0FBQ1Y7QUFDUEMsYUFBTyxFQUFFLEVBREY7QUFFUEMsWUFBTSxFQUFFO0FBQ1Y7QUFDSSx3QkFBZ0IsaURBRlYsRUFGRDs7QUFNUEMsWUFBTSxFQUFFLEtBTkQ7QUFPUEMsY0FBUSxFQUFFLE1BUEg7QUFRUEMsa0JBQVksRUFBRSxNQVJQO0FBU1BDLGFBVE8scUJBU0csQ0FBRSxDQVRMO0FBVVBDLFVBVk8sa0JBVUEsQ0FBRSxDQVZGO0FBV1BDLGNBWE8sc0JBV0ksQ0FBRSxDQVhOLEU7Ozs7Ozs7QUFrQks7QUFDWkMsYUFBTyxFQUFFLGlCQUFDQyxDQUFELEVBQU87QUFDZCxZQUFJQSxDQUFKLEVBQU87QUFDTCxlQUFJLENBQUNDLGdCQUFMLEdBQXdCRCxDQUF4QjtBQUNEO0FBQ0YsT0FMVztBQU1aRSxjQUFRLEVBQUUsa0JBQUNGLENBQUQsRUFBTztBQUNmLFlBQUlBLENBQUosRUFBTztBQUNMLGVBQUksQ0FBQ0csYUFBTCxHQUFxQkgsQ0FBckI7QUFDRDtBQUNGLE9BVlcsRTs7Ozs7Ozs7Ozs7QUFxQkpBLEssRUFBRztBQUNYLFdBQUtJLE1BQUwsR0FBY0osQ0FBQyxD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QyxDQUF1Q2YsR0FBdkMsQ0FBUCxDQUNELEMsZ0VBZXVCRixNLEVBQVEsQ0FDOUIsT0FBT0EsTUFBUCxDQUNELEMsMERBRW9CRixRLEVBQVUsQ0FDN0IsT0FBT0EsUUFBUCxDQUNELEMiLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogUmVxdWVzdCAxLjAuMFxyXG4gKiBAQ2xhc3MgUmVxdWVzdFxyXG4gKiBAZGVzY3JpcHRpb24gbHVjaC1yZXF1ZXN0IDEuMC4wIGh0dHDor7fmsYLmj5Lku7ZcclxuICogQEF1dGhvciBsdS1jaFxyXG4gKiBARGF0ZSAyMDE5LTA5LTA2XHJcbiAqIEBFbWFpbCB3ZWJ3b3JrLnNAcXEuY29tXHJcbiAqIGh0dHA6Ly9leHQuZGNsb3VkLm5ldC5jbi9wbHVnaW4/aWQ9MzkyXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZXF1ZXN0IHtcclxuICBjb25maWcgPSB7XHJcbiAgICBiYXNlVXJsOiAnJyxcclxuICAgIGhlYWRlcjoge1xyXG5cdFx0Ly8g6Ieq5a6a5LmJ5YWo5bGA55qEaGVhZGVyXHJcbiAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnXHJcbiAgICB9LFxyXG4gICAgbWV0aG9kOiAnR0VUJyxcclxuICAgIGRhdGFUeXBlOiAnanNvbicsXHJcbiAgICByZXNwb25zZVR5cGU6ICd0ZXh0JyxcclxuICAgIHN1Y2Nlc3MoKSB7fSxcclxuICAgIGZhaWwoKSB7fSxcclxuICAgIGNvbXBsZXRlKCkge31cclxuICB9XHJcblxyXG4gIHN0YXRpYyBwb3NVcmwodXJsKSB7IC8qIOWIpOaWrXVybOaYr+WQpuS4uue7neWvuei3r+W+hCAqL1xyXG4gICAgcmV0dXJuIC8oaHR0cHxodHRwcyk6XFwvXFwvKFtcXHcuXStcXC8/KVxcUyovLnRlc3QodXJsKVxyXG4gIH1cclxuXHJcbiAgaW50ZXJjZXB0b3IgPSB7XHJcbiAgICByZXF1ZXN0OiAoZikgPT4ge1xyXG4gICAgICBpZiAoZikge1xyXG4gICAgICAgIHRoaXMucmVxdWVzdEJlZm9yZUZ1biA9IGZcclxuICAgICAgfVxyXG4gICAgfSxcclxuICAgIHJlc3BvbnNlOiAoZikgPT4ge1xyXG4gICAgICBpZiAoZikge1xyXG4gICAgICAgIHRoaXMucmVxdWVzdENvbUZ1biA9IGZcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJlcXVlc3RCZWZvcmVGdW4oY29uZmlnKSB7XHJcbiAgICByZXR1cm4gY29uZmlnXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmVxdWVzdENvbUZ1bihyZXNwb25zZSkge1xyXG4gICAgcmV0dXJuIHJlc3BvbnNlXHJcbiAgfVxyXG5cclxuICBzZXRDb25maWcoZikge1xyXG4gICAgdGhpcy5jb25maWcgPSBmKHRoaXMuY29uZmlnKVxyXG4gIH1cclxuXHJcbiAgcmVxdWVzdChvcHRpb25zID0ge30pIHtcclxuICAgIG9wdGlvbnMuYmFzZVVybCA9IG9wdGlvbnMuYmFzZVVybCB8fCB0aGlzLmNvbmZpZy5iYXNlVXJsXHJcbiAgICBvcHRpb25zLmRhdGFUeXBlID0gb3B0aW9ucy5kYXRhVHlwZSB8fCB0aGlzLmNvbmZpZy5kYXRhVHlwZVxyXG4gICAgb3B0aW9ucy51cmwgPSBSZXF1ZXN0LnBvc1VybChvcHRpb25zLnVybCkgPyBvcHRpb25zLnVybCA6IChvcHRpb25zLmJhc2VVcmwgKyBvcHRpb25zLnVybClcclxuICAgIG9wdGlvbnMuZGF0YSA9IG9wdGlvbnMuZGF0YSB8fCB7fVxyXG4gICAgb3B0aW9ucy5oZWFkZXIgPSBvcHRpb25zLmhlYWRlciB8fCB0aGlzLmNvbmZpZy5oZWFkZXJcclxuICAgIG9wdGlvbnMubWV0aG9kID0gb3B0aW9ucy5tZXRob2QgfHwgdGhpcy5jb25maWcubWV0aG9kXHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBsZXQgbmV4dCA9IHRydWVcclxuICAgICAgbGV0IF9jb25maWcgPSBudWxsXHJcbiAgICAgIG9wdGlvbnMuY29tcGxldGUgPSAocmVzcG9uc2UpID0+IHtcclxuICAgICAgICBsZXQgc3RhdHVzQ29kZSA9IHJlc3BvbnNlLnN0YXR1c0NvZGVcclxuICAgICAgICByZXNwb25zZS5jb25maWcgPSBfY29uZmlnXHJcbiAgICAgICAgcmVzcG9uc2UgPSB0aGlzLnJlcXVlc3RDb21GdW4ocmVzcG9uc2UpXHJcbiAgICAgICAgaWYgKHN0YXR1c0NvZGUgPT09IDIwMCkgeyAvLyDmiJDlip9cclxuICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlamVjdChyZXNwb25zZSlcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgbGV0IGNhbmNlbCA9ICh0ID0gJ2hhbmRsZSBjYW5jZWwnKSA9PiB7XHJcbiAgICAgICAgbGV0IGVyciA9IHtcclxuICAgICAgICAgIGVyck1zZzogdCxcclxuICAgICAgICAgIGNvbmZpZzogYWZDXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlamVjdChlcnIpXHJcbiAgICAgICAgbmV4dCA9IGZhbHNlXHJcbiAgICAgIH1cclxuICAgICAgbGV0IGFmQyA9IHsgLi4udGhpcy5jb25maWcsIC4uLm9wdGlvbnMgfVxyXG4gICAgICBfY29uZmlnID0geyAuLi5hZkMsIC4uLnRoaXMucmVxdWVzdEJlZm9yZUZ1bihhZkMsIGNhbmNlbCkgfVxyXG4gICAgICBpZiAoIW5leHQpIHJldHVyblxyXG4gICAgICB1bmkucmVxdWVzdChfY29uZmlnKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIGdldCh1cmwsIGRhdGEsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgb3B0aW9ucy51cmwgPSB1cmxcclxuICAgIG9wdGlvbnMuZGF0YSA9IGRhdGFcclxuICAgIG9wdGlvbnMubWV0aG9kID0gJ0dFVCdcclxuICAgIHJldHVybiB0aGlzLnJlcXVlc3Qob3B0aW9ucylcclxuICB9XHJcblxyXG4gIHBvc3QodXJsLCBkYXRhLCBvcHRpb25zID0ge30pIHtcclxuICAgIG9wdGlvbnMudXJsID0gdXJsXHJcbiAgICBvcHRpb25zLmRhdGEgPSBkYXRhXHJcbiAgICBvcHRpb25zLm1ldGhvZCA9ICdQT1NUJ1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdChvcHRpb25zKVxyXG4gIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///37\n");

/***/ }),

/***/ 38:
/*!***************************************!*\
  !*** D:/张总新版app/maiYa01/utils/md5.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; /*\r\n                                                                                                      * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\r\n                                                                                                      * Digest Algorithm, as defined in RFC 1321.\r\n                                                                                                      * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\r\n                                                                                                      * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n                                                                                                      * Distributed under the BSD License\r\n                                                                                                      * See http://pajhome.org.uk/crypt/md5 for more info.\r\n                                                                                                      */\n\n/*\r\n                                                                                                          * Configurable variables. You may need to tweak these to be compatible with\r\n                                                                                                          * the server-side, but the defaults work in most cases.\r\n                                                                                                          */\nvar hexcase = 0; /* hex output format. 0 - lowercase; 1 - uppercase        */\nvar b64pad = \"\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\nvar chrsz = 8; /* bits per input character. 8 - ASCII; 16 - Unicode      */\n\n/*\r\n                                                                             * These are the functions you'll usually want to call\r\n                                                                             * They take string arguments and return either hex or base-64 encoded strings\r\n                                                                             */\nfunction hex_md5(s) {return binl2hex(core_md5(str2binl(s), s.length * chrsz));}\nfunction b64_md5(s) {return binl2b64(core_md5(str2binl(s), s.length * chrsz));}\nfunction str_md5(s) {return binl2str(core_md5(str2binl(s), s.length * chrsz));}\nfunction hex_hmac_md5(key, data) {return binl2hex(core_hmac_md5(key, data));}\nfunction b64_hmac_md5(key, data) {return binl2b64(core_hmac_md5(key, data));}\nfunction str_hmac_md5(key, data) {return binl2str(core_hmac_md5(key, data));}\n\n/*\r\n                                                                               * Perform a simple self-test to see if the VM is working\r\n                                                                               */\nfunction md5_vm_test()\n{\n  return hex_md5(\"abc\") == \"900150983cd24fb0d6963f7d28e17f72\";\n}\n\n/*\r\n   * Calculate the MD5 of an array of little-endian words, and a bit length\r\n   */\nfunction core_md5(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << len % 32;\n  x[(len + 64 >>> 9 << 4) + 14] = len;\n\n  var a = 1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d = 271733878;\n\n  for (var i = 0; i < x.length; i += 16)\n  {\n    var olda = a;\n    var oldb = b;\n    var oldc = c;\n    var oldd = d;\n\n    a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);\n    d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);\n    c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);\n    b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);\n    a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);\n    d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);\n    c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);\n    b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);\n    a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);\n    d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);\n    c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);\n    b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);\n    a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);\n    d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);\n    c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);\n    b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);\n\n    a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);\n    d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);\n    c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);\n    b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);\n    a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);\n    d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);\n    c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);\n    b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);\n    a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);\n    d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);\n    c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);\n    b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);\n    a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);\n    d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);\n    c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);\n    b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);\n\n    a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);\n    d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);\n    c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);\n    b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);\n    a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);\n    d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);\n    c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);\n    b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);\n    a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);\n    d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);\n    c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);\n    b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);\n    a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);\n    d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);\n    c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);\n    b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);\n\n    a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);\n    d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);\n    c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);\n    b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);\n    a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);\n    d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);\n    c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);\n    b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);\n    a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);\n    d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);\n    c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);\n    b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);\n    a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);\n    d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);\n    c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);\n    b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n  }\n  return Array(a, b, c, d);\n\n}\n\n/*\r\n   * These functions implement the four basic operations the algorithm uses.\r\n   */\nfunction md5_cmn(q, a, b, x, s, t)\n{\n  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);\n}\nfunction md5_ff(a, b, c, d, x, s, t)\n{\n  return md5_cmn(b & c | ~b & d, a, b, x, s, t);\n}\nfunction md5_gg(a, b, c, d, x, s, t)\n{\n  return md5_cmn(b & d | c & ~d, a, b, x, s, t);\n}\nfunction md5_hh(a, b, c, d, x, s, t)\n{\n  return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n}\nfunction md5_ii(a, b, c, d, x, s, t)\n{\n  return md5_cmn(c ^ (b | ~d), a, b, x, s, t);\n}\n\n/*\r\n   * Calculate the HMAC-MD5, of a key and some data\r\n   */\nfunction core_hmac_md5(key, data)\n{\n  var bkey = str2binl(key);\n  if (bkey.length > 16) bkey = core_md5(bkey, key.length * chrsz);\n\n  var ipad = Array(16),opad = Array(16);\n  for (var i = 0; i < 16; i++)\n  {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n\n  var hash = core_md5(ipad.concat(str2binl(data)), 512 + data.length * chrsz);\n  return core_md5(opad.concat(hash), 512 + 128);\n}\n\n/*\r\n   * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n   * to work around bugs in some JS interpreters.\r\n   */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return msw << 16 | lsw & 0xFFFF;\n}\n\n/*\r\n   * Bitwise rotate a 32-bit number to the left.\r\n   */\nfunction bit_rol(num, cnt)\n{\n  return num << cnt | num >>> 32 - cnt;\n}\n\n/*\r\n   * Convert a string to an array of little-endian words\r\n   * If chrsz is ASCII, characters >255 have their hi-byte silently ignored.\r\n   */\nfunction str2binl(str)\n{\n  var bin = Array();\n  var mask = (1 << chrsz) - 1;\n  for (var i = 0; i < str.length * chrsz; i += chrsz) {\n    bin[i >> 5] |= (str.charCodeAt(i / chrsz) & mask) << i % 32;}\n  return bin;\n}\n\n/*\r\n   * Convert an array of little-endian words to a string\r\n   */\nfunction binl2str(bin)\n{\n  var str = \"\";\n  var mask = (1 << chrsz) - 1;\n  for (var i = 0; i < bin.length * 32; i += chrsz) {\n    str += String.fromCharCode(bin[i >> 5] >>> i % 32 & mask);}\n  return str;\n}\n\n/*\r\n   * Convert an array of little-endian words to a hex string.\r\n   */\nfunction binl2hex(binarray)\n{\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\n  var str = \"\";\n  for (var i = 0; i < binarray.length * 4; i++)\n  {\n    str += hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 + 4 & 0xF) +\n    hex_tab.charAt(binarray[i >> 2] >> i % 4 * 8 & 0xF);\n  }\n  return str;\n}\n\n/*\r\n   * Convert an array of little-endian words to a base-64 string\r\n   */\nfunction binl2b64(binarray)\n{\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var str = \"\";\n  for (var i = 0; i < binarray.length * 4; i += 3)\n  {\n    var triplet = (binarray[i >> 2] >> 8 * (i % 4) & 0xFF) << 16 |\n    (binarray[i + 1 >> 2] >> 8 * ((i + 1) % 4) & 0xFF) << 8 |\n    binarray[i + 2 >> 2] >> 8 * ((i + 2) % 4) & 0xFF;\n    for (var j = 0; j < 4; j++)\n    {\n      if (i * 8 + j * 6 > binarray.length * 32) str += b64pad;else\n      str += tab.charAt(triplet >> 6 * (3 - j) & 0x3F);\n    }\n  }\n  return str;\n}var _default =\n\nhex_md5;exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38\n");

/***/ }),

/***/ 39:
/*!*********************************************!*\
  !*** D:/张总新版app/maiYa01/store/mutations.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.LOCALTION_REGION = exports.LOCALTION_CITY = exports.USER_TOKEN = exports.USER_INFO = exports.USER_ID = exports.IS_LOGIN = void 0; // 根级别的mutation \n// 是否登录 true 登录\nvar IS_LOGIN = 'IS_LOGIN';\n//  用户信息\nexports.IS_LOGIN = IS_LOGIN;var USER_ID = 'USER_ID';exports.USER_ID = USER_ID;\nvar USER_INFO = 'USER_INFO';exports.USER_INFO = USER_INFO;\nvar USER_TOKEN = 'USER_TOKEN';\n\n// 定位城市\nexports.USER_TOKEN = USER_TOKEN;var LOCALTION_CITY = 'LOCALTION_CITY';exports.LOCALTION_CITY = LOCALTION_CITY;\nvar LOCALTION_REGION = 'LOCALTION_REGION';exports.LOCALTION_REGION = LOCALTION_REGION;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vc3RvcmUvbXV0YXRpb25zLmpzIl0sIm5hbWVzIjpbIklTX0xPR0lOIiwiVVNFUl9JRCIsIlVTRVJfSU5GTyIsIlVTRVJfVE9LRU4iLCJMT0NBTFRJT05fQ0lUWSIsIkxPQ0FMVElPTl9SRUdJT04iXSwibWFwcGluZ3MiOiJ3TUFBQTtBQUNBO0FBQ08sSUFBTUEsUUFBUSxHQUFHLFVBQWpCO0FBQ1A7NEJBQ08sSUFBTUMsT0FBTyxHQUFHLFNBQWhCLEM7QUFDQSxJQUFNQyxTQUFTLEdBQUcsV0FBbEIsQztBQUNBLElBQU1DLFVBQVUsR0FBRyxZQUFuQjs7QUFFUDtnQ0FDTyxJQUFNQyxjQUFjLEdBQUcsZ0JBQXZCLEM7QUFDQSxJQUFNQyxnQkFBZ0IsR0FBRyxrQkFBekIsQyIsImZpbGUiOiIzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIOaguee6p+WIq+eahG11dGF0aW9uIFxyXG4vLyDmmK/lkKbnmbvlvZUgdHJ1ZSDnmbvlvZVcclxuZXhwb3J0IGNvbnN0IElTX0xPR0lOID0gJ0lTX0xPR0lOJztcclxuLy8gIOeUqOaIt+S/oeaBr1xyXG5leHBvcnQgY29uc3QgVVNFUl9JRCA9ICdVU0VSX0lEJztcclxuZXhwb3J0IGNvbnN0IFVTRVJfSU5GTyA9ICdVU0VSX0lORk8nO1xyXG5leHBvcnQgY29uc3QgVVNFUl9UT0tFTiA9ICdVU0VSX1RPS0VOJztcclxuXHJcbi8vIOWumuS9jeWfjuW4glxyXG5leHBvcnQgY29uc3QgTE9DQUxUSU9OX0NJVFkgPSAnTE9DQUxUSU9OX0NJVFknXHJcbmV4cG9ydCBjb25zdCBMT0NBTFRJT05fUkVHSU9OID0gJ0xPQ0FMVElPTl9SRUdJT04nXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39\n");

/***/ }),

/***/ 4:
/*!*************************************!*\
  !*** D:/张总新版app/maiYa01/pages.json ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI0LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n");

/***/ }),

/***/ 40:
/*!*********************************************!*\
  !*** D:/张总新版app/maiYa01/utils/globalFun.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni, __f__) {var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 3));\nvar _store = _interopRequireDefault(__webpack_require__(/*! ../store */ 32));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}\n\n// 定义全局检测是否需要登录的方法\nfunction isLoginFun() {\n  var isLogin = new Promise(function (resolve, reject) {\n    var vuexToken = _store.default.state.userToken;\n    if (vuexToken) {\n      return resolve({\n        islogin: true });\n\n    } else {\n      return resolve({\n        islogin: false });\n\n\n    }\n  });\n\n  return Promise.all([isLogin]).then(function (allRes) {\n    if (allRes[0].islogin) {\n      return true;\n    } else {\n      uni.showModal({\n        content: \"您还未登录，是否登录\",\n        confirmText: \"登录\",\n        cancelText: \"再看看\",\n        success: function success(res) {\n          if (res.confirm) {\n            uni.navigateTo({\n              url: \"/pages/login/login\" });\n\n          } else if (res.cancel) {\n            __f__(\"log\", '用户点击取消', \" at utils\\\\globalFun.js:34\");\n          }\n        } });\n\n      return false;\n    }\n  });\n}\n// 函数节流： 让一个函数不要执行得太频繁，减少一些过快的调用来节流。\nfunction throttle(fun) {var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;\n  var last, deferTimer;\n  return function (args) {\n    var that = this;\n    var _args = arguments;\n\n    var now = +new Date();\n    if (last && now < last + delay) {\n      clearTimeout(deferTimer);\n      deferTimer = setTimeout(function () {\n        last = now;\n        fun.apply(that, _args);\n      }, delay);\n    } else {\n      last = now;\n      fun.apply(that, _args);\n    }\n  };\n}\n\n// 防抖：事件保持触发，一定时间内没有触发。在一定时间段的连续函数调用，只让其执行一次\nfunction debounce(fn, delay) {\n  var timerId;\n  return function () {for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(function () {\n      fn.apply(void 0, args);\n      timerId = null;\n    }, delay);\n  };\n}\n\n\n// 使用方法\n// eventClick: debounce(function(e){\n// \t\t\tconsole.log(e)\n// \t\t}),\n\n\n_vue.default.prototype.$isLoginFun = isLoginFun;\n_vue.default.prototype.$throttle = throttle;\n_vue.default.prototype.$debounce = debounce;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 12)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvZ2xvYmFsRnVuLmpzIl0sIm5hbWVzIjpbImlzTG9naW5GdW4iLCJpc0xvZ2luIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJ2dWV4VG9rZW4iLCJzdG9yZSIsInN0YXRlIiwidXNlclRva2VuIiwiaXNsb2dpbiIsImFsbCIsInRoZW4iLCJhbGxSZXMiLCJ1bmkiLCJzaG93TW9kYWwiLCJjb250ZW50IiwiY29uZmlybVRleHQiLCJjYW5jZWxUZXh0Iiwic3VjY2VzcyIsInJlcyIsImNvbmZpcm0iLCJuYXZpZ2F0ZVRvIiwidXJsIiwiY2FuY2VsIiwidGhyb3R0bGUiLCJmdW4iLCJkZWxheSIsImxhc3QiLCJkZWZlclRpbWVyIiwiYXJncyIsInRoYXQiLCJfYXJncyIsImFyZ3VtZW50cyIsIm5vdyIsIkRhdGUiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiLCJkZWJvdW5jZSIsImZuIiwidGltZXJJZCIsIlZ1ZSIsInByb3RvdHlwZSIsIiRpc0xvZ2luRnVuIiwiJHRocm90dGxlIiwiJGRlYm91bmNlIl0sIm1hcHBpbmdzIjoia0RBQUE7QUFDQSw2RTs7QUFFQTtBQUNBLFNBQVNBLFVBQVQsR0FBc0I7QUFDckIsTUFBSUMsT0FBTyxHQUFHLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVYsRUFBcUI7QUFDOUMsUUFBSUMsU0FBUyxHQUFHQyxlQUFNQyxLQUFOLENBQVlDLFNBQTVCO0FBQ0EsUUFBSUgsU0FBSixFQUFlO0FBQ2QsYUFBT0YsT0FBTyxDQUFDO0FBQ2RNLGVBQU8sRUFBRSxJQURLLEVBQUQsQ0FBZDs7QUFHQSxLQUpELE1BSU87QUFDTixhQUFPTixPQUFPLENBQUM7QUFDZE0sZUFBTyxFQUFFLEtBREssRUFBRCxDQUFkOzs7QUFJQTtBQUNELEdBWmEsQ0FBZDs7QUFjQSxTQUFPUCxPQUFPLENBQUNRLEdBQVIsQ0FBWSxDQUFDVCxPQUFELENBQVosRUFBdUJVLElBQXZCLENBQTRCLFVBQUNDLE1BQUQsRUFBWTtBQUM5QyxRQUFJQSxNQUFNLENBQUMsQ0FBRCxDQUFOLENBQVVILE9BQWQsRUFBdUI7QUFDdEIsYUFBTyxJQUFQO0FBQ0EsS0FGRCxNQUVPO0FBQ05JLFNBQUcsQ0FBQ0MsU0FBSixDQUFjO0FBQ2JDLGVBQU8sRUFBRSxZQURJO0FBRWJDLG1CQUFXLEVBQUUsSUFGQTtBQUdiQyxrQkFBVSxFQUFFLEtBSEM7QUFJYkMsZUFBTyxFQUFFLGlCQUFDQyxHQUFELEVBQVM7QUFDakIsY0FBSUEsR0FBRyxDQUFDQyxPQUFSLEVBQWlCO0FBQ2hCUCxlQUFHLENBQUNRLFVBQUosQ0FBZTtBQUNkQyxpQkFBRyxFQUFFLG9CQURTLEVBQWY7O0FBR0EsV0FKRCxNQUlPLElBQUlILEdBQUcsQ0FBQ0ksTUFBUixFQUFnQjtBQUN0Qix5QkFBWSxRQUFaO0FBQ0E7QUFDRCxTQVpZLEVBQWQ7O0FBY0EsYUFBTyxLQUFQO0FBQ0E7QUFDRCxHQXBCTSxDQUFQO0FBcUJBO0FBQ0Q7QUFDQSxTQUFTQyxRQUFULENBQWtCQyxHQUFsQixFQUFxQyxLQUFkQyxLQUFjLHVFQUFOLElBQU07QUFDbkMsTUFBSUMsSUFBSixFQUFVQyxVQUFWO0FBQ0EsU0FBTyxVQUFTQyxJQUFULEVBQWU7QUFDckIsUUFBSUMsSUFBSSxHQUFHLElBQVg7QUFDQSxRQUFJQyxLQUFLLEdBQUdDLFNBQVo7O0FBRUEsUUFBSUMsR0FBRyxHQUFHLENBQUMsSUFBSUMsSUFBSixFQUFYO0FBQ0EsUUFBSVAsSUFBSSxJQUFJTSxHQUFHLEdBQUdOLElBQUksR0FBR0QsS0FBekIsRUFBZ0M7QUFDL0JTLGtCQUFZLENBQUNQLFVBQUQsQ0FBWjtBQUNBQSxnQkFBVSxHQUFHUSxVQUFVLENBQUMsWUFBVztBQUNsQ1QsWUFBSSxHQUFHTSxHQUFQO0FBQ0FSLFdBQUcsQ0FBQ1ksS0FBSixDQUFVUCxJQUFWLEVBQWdCQyxLQUFoQjtBQUNBLE9BSHNCLEVBR3BCTCxLQUhvQixDQUF2QjtBQUlBLEtBTkQsTUFNTztBQUNOQyxVQUFJLEdBQUdNLEdBQVA7QUFDQVIsU0FBRyxDQUFDWSxLQUFKLENBQVVQLElBQVYsRUFBZ0JDLEtBQWhCO0FBQ0E7QUFDRCxHQWZEO0FBZ0JBOztBQUVEO0FBQ0EsU0FBU08sUUFBVCxDQUFrQkMsRUFBbEIsRUFBc0JiLEtBQXRCLEVBQTZCO0FBQzVCLE1BQUljLE9BQUo7QUFDQSxTQUFPLFlBQWtCLG1DQUFOWCxJQUFNLG9EQUFOQSxJQUFNO0FBQ3hCLFFBQUlXLE9BQUosRUFBYTtBQUNaTCxrQkFBWSxDQUFDSyxPQUFELENBQVo7QUFDQTtBQUNEQSxXQUFPLEdBQUdKLFVBQVUsQ0FBQyxZQUFNO0FBQzFCRyxRQUFFLE1BQUYsU0FBTVYsSUFBTjtBQUNBVyxhQUFPLEdBQUcsSUFBVjtBQUNBLEtBSG1CLEVBR2pCZCxLQUhpQixDQUFwQjtBQUlBLEdBUkQ7QUFTQTs7O0FBR0Y7QUFDQTtBQUNBO0FBQ0E7OztBQUdBZSxhQUFJQyxTQUFKLENBQWNDLFdBQWQsR0FBNEIzQyxVQUE1QjtBQUNBeUMsYUFBSUMsU0FBSixDQUFjRSxTQUFkLEdBQTBCcEIsUUFBMUI7QUFDQWlCLGFBQUlDLFNBQUosQ0FBY0csU0FBZCxHQUEwQlAsUUFBMUIsQyIsImZpbGUiOiI0MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJ1xyXG5pbXBvcnQgc3RvcmUgZnJvbSAnLi4vc3RvcmUnXHJcblxyXG4vLyDlrprkuYnlhajlsYDmo4DmtYvmmK/lkKbpnIDopoHnmbvlvZXnmoTmlrnms5VcclxuZnVuY3Rpb24gaXNMb2dpbkZ1bigpIHtcclxuXHRsZXQgaXNMb2dpbiA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdGxldCB2dWV4VG9rZW4gPSBzdG9yZS5zdGF0ZS51c2VyVG9rZW5cclxuXHRcdGlmICh2dWV4VG9rZW4pIHtcclxuXHRcdFx0cmV0dXJuIHJlc29sdmUoe1xyXG5cdFx0XHRcdGlzbG9naW46IHRydWVcclxuXHRcdFx0fSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRyZXR1cm4gcmVzb2x2ZSh7XHJcblx0XHRcdFx0aXNsb2dpbjogZmFsc2VcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0fVxyXG5cdH0pXHJcblxyXG5cdHJldHVybiBQcm9taXNlLmFsbChbaXNMb2dpbl0pLnRoZW4oKGFsbFJlcykgPT4ge1xyXG5cdFx0aWYgKGFsbFJlc1swXS5pc2xvZ2luKSB7XHJcblx0XHRcdHJldHVybiB0cnVlXHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR1bmkuc2hvd01vZGFsKHtcclxuXHRcdFx0XHRjb250ZW50OiBcIuaCqOi/mOacqueZu+W9le+8jOaYr+WQpueZu+W9lVwiLFxyXG5cdFx0XHRcdGNvbmZpcm1UZXh0OiBcIueZu+W9lVwiLFxyXG5cdFx0XHRcdGNhbmNlbFRleHQ6IFwi5YaN55yL55yLXCIsXHJcblx0XHRcdFx0c3VjY2VzczogKHJlcykgPT4ge1xyXG5cdFx0XHRcdFx0aWYgKHJlcy5jb25maXJtKSB7XHJcblx0XHRcdFx0XHRcdHVuaS5uYXZpZ2F0ZVRvKHtcclxuXHRcdFx0XHRcdFx0XHR1cmw6IFwiL3BhZ2VzL2xvZ2luL2xvZ2luXCJcclxuXHRcdFx0XHRcdFx0fSlcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAocmVzLmNhbmNlbCkge1xyXG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZygn55So5oi354K55Ye75Y+W5raIJyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0XHRyZXR1cm4gZmFsc2VcclxuXHRcdH1cclxuXHR9KVxyXG59XHJcbi8vIOWHveaVsOiKgua1ge+8miDorqnkuIDkuKrlh73mlbDkuI3opoHmiafooYzlvpflpKrpopHnuYHvvIzlh4/lsJHkuIDkupvov4flv6vnmoTosIPnlKjmnaXoioLmtYHjgIJcclxuZnVuY3Rpb24gdGhyb3R0bGUoZnVuLCBkZWxheSA9IDEwMDApIHtcclxuXHRcdGxldCBsYXN0LCBkZWZlclRpbWVyO1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGFyZ3MpIHtcclxuXHRcdFx0bGV0IHRoYXQgPSB0aGlzO1xyXG5cdFx0XHRsZXQgX2FyZ3MgPSBhcmd1bWVudHM7XHJcblxyXG5cdFx0XHRsZXQgbm93ID0gK25ldyBEYXRlKCk7XHJcblx0XHRcdGlmIChsYXN0ICYmIG5vdyA8IGxhc3QgKyBkZWxheSkge1xyXG5cdFx0XHRcdGNsZWFyVGltZW91dChkZWZlclRpbWVyKTtcclxuXHRcdFx0XHRkZWZlclRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRcdGxhc3QgPSBub3c7XHJcblx0XHRcdFx0XHRmdW4uYXBwbHkodGhhdCwgX2FyZ3MpO1xyXG5cdFx0XHRcdH0sIGRlbGF5KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRsYXN0ID0gbm93O1xyXG5cdFx0XHRcdGZ1bi5hcHBseSh0aGF0LCBfYXJncyk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fVxyXG5cclxuXHQvLyDpmLLmipbvvJrkuovku7bkv53mjIHop6blj5HvvIzkuIDlrprml7bpl7TlhoXmsqHmnInop6blj5HjgILlnKjkuIDlrprml7bpl7TmrrXnmoTov57nu63lh73mlbDosIPnlKjvvIzlj6rorqnlhbbmiafooYzkuIDmrKFcclxuXHRmdW5jdGlvbiBkZWJvdW5jZShmbiwgZGVsYXkpIHtcclxuXHRcdGxldCB0aW1lcklkO1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uKC4uLmFyZ3MpIHtcclxuXHRcdFx0aWYgKHRpbWVySWQpIHtcclxuXHRcdFx0XHRjbGVhclRpbWVvdXQodGltZXJJZCk7XHJcblx0XHRcdH1cclxuXHRcdFx0dGltZXJJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdGZuKC4uLmFyZ3MpO1xyXG5cdFx0XHRcdHRpbWVySWQgPSBudWxsO1xyXG5cdFx0XHR9LCBkZWxheSk7XHJcblx0XHR9O1xyXG5cdH1cclxuXHJcblxyXG4vLyDkvb/nlKjmlrnms5VcclxuLy8gZXZlbnRDbGljazogZGVib3VuY2UoZnVuY3Rpb24oZSl7XHJcbi8vIFx0XHRcdGNvbnNvbGUubG9nKGUpXHJcbi8vIFx0XHR9KSxcclxuXHJcblxyXG5WdWUucHJvdG90eXBlLiRpc0xvZ2luRnVuID0gaXNMb2dpbkZ1bjtcclxuVnVlLnByb3RvdHlwZS4kdGhyb3R0bGUgPSB0aHJvdHRsZTtcclxuVnVlLnByb3RvdHlwZS4kZGVib3VuY2UgPSBkZWJvdW5jZTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///40\n");

/***/ }),

/***/ 41:
/*!********************************************!*\
  !*** D:/张总新版app/maiYa01/utils/uniToast.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n/**\r\n                                                                                                      * 页面跳转\r\n                                                                                                      * @param {Object} url\r\n                                                                                                      */\nfunction to(url) {\n  uni.navigateTo({\n    url: url });\n\n}\n\n// 页面弹框\nfunction toast(icon, text, duration, mask, position) {\n  duration = duration || 1500;\n  mask = mask || false;\n  position = position || false;\n  uni.showToast({\n    icon: icon,\n    title: text,\n    duration: duration,\n    mask: mask,\n    position: position });\n\n}var _default =\n\n\n{\n  to: to,\n  toast: toast };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvdW5pVG9hc3QuanMiXSwibmFtZXMiOlsidG8iLCJ1cmwiLCJ1bmkiLCJuYXZpZ2F0ZVRvIiwidG9hc3QiLCJpY29uIiwidGV4dCIsImR1cmF0aW9uIiwibWFzayIsInBvc2l0aW9uIiwic2hvd1RvYXN0IiwidGl0bGUiXSwibWFwcGluZ3MiOiI7QUFDQTs7OztBQUlBLFNBQVNBLEVBQVQsQ0FBWUMsR0FBWixFQUFpQjtBQUNoQkMsS0FBRyxDQUFDQyxVQUFKLENBQWU7QUFDZEYsT0FBRyxFQUFFQSxHQURTLEVBQWY7O0FBR0E7O0FBRUQ7QUFDQSxTQUFTRyxLQUFULENBQWVDLElBQWYsRUFBcUJDLElBQXJCLEVBQTJCQyxRQUEzQixFQUFxQ0MsSUFBckMsRUFBMkNDLFFBQTNDLEVBQXFEO0FBQ3BERixVQUFRLEdBQUdBLFFBQVEsSUFBSSxJQUF2QjtBQUNBQyxNQUFJLEdBQUdBLElBQUksSUFBSSxLQUFmO0FBQ0FDLFVBQVEsR0FBR0EsUUFBUSxJQUFJLEtBQXZCO0FBQ0FQLEtBQUcsQ0FBQ1EsU0FBSixDQUFjO0FBQ2JMLFFBQUksRUFBRUEsSUFETztBQUViTSxTQUFLLEVBQUVMLElBRk07QUFHYkMsWUFBUSxFQUFFQSxRQUhHO0FBSWJDLFFBQUksRUFBRUEsSUFKTztBQUtiQyxZQUFRLEVBQUVBLFFBTEcsRUFBZDs7QUFPQSxDOzs7QUFHYztBQUNkVCxJQUFFLEVBQUZBLEVBRGM7QUFFZEksT0FBSyxFQUFMQSxLQUZjLEUiLCJmaWxlIjoiNDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyoqXHJcbiAqIOmhtemdoui3s+i9rFxyXG4gKiBAcGFyYW0ge09iamVjdH0gdXJsXHJcbiAqL1xyXG5mdW5jdGlvbiB0byh1cmwpIHtcclxuXHR1bmkubmF2aWdhdGVUbyh7XHJcblx0XHR1cmw6IHVybFxyXG5cdH0pO1xyXG59XHJcblxyXG4vLyDpobXpnaLlvLnmoYZcclxuZnVuY3Rpb24gdG9hc3QoaWNvbiwgdGV4dCwgZHVyYXRpb24sIG1hc2ssIHBvc2l0aW9uKSB7XHJcblx0ZHVyYXRpb24gPSBkdXJhdGlvbiB8fCAxNTAwO1xyXG5cdG1hc2sgPSBtYXNrIHx8IGZhbHNlO1xyXG5cdHBvc2l0aW9uID0gcG9zaXRpb24gfHwgZmFsc2U7XHJcblx0dW5pLnNob3dUb2FzdCh7XHJcblx0XHRpY29uOiBpY29uLFxyXG5cdFx0dGl0bGU6IHRleHQsXHJcblx0XHRkdXJhdGlvbjogZHVyYXRpb24sXHJcblx0XHRtYXNrOiBtYXNrLFxyXG5cdFx0cG9zaXRpb246IHBvc2l0aW9uLFxyXG5cdH0pXHJcbn1cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0dG8sXHJcblx0dG9hc3QsXHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///41\n");

/***/ }),

/***/ 42:
/*!****************************************!*\
  !*** D:/张总新版app/maiYa01/utils/tool.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\nfunction testPhone(a) {//验证手机号\n  var ph = /^[1][0-9]{10}$/;\n  return ph.test(a);\n}\n\nfunction testCode(a) {//验证验证码\n  var ph = /^[1][0-9]{5}$/;\n  return ph.test(a);\n}\nfunction testPassWord(a) {//验证密码\n  var ph = /^[0-9A-Z_!]{6,12}$/;\n  return ph.test(a);\n}var _default =\n\n{\n  testPhone: testPhone,\n  testCode: testCode,\n  testPassWord: testPassWord };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vdXRpbHMvdG9vbC5qcyJdLCJuYW1lcyI6WyJ0ZXN0UGhvbmUiLCJhIiwicGgiLCJ0ZXN0IiwidGVzdENvZGUiLCJ0ZXN0UGFzc1dvcmQiXSwibWFwcGluZ3MiOiI7QUFDQSxTQUFTQSxTQUFULENBQW1CQyxDQUFuQixFQUFxQixDQUFHO0FBQ3ZCLE1BQUlDLEVBQUUsR0FBRyxnQkFBVDtBQUNBLFNBQU9BLEVBQUUsQ0FBQ0MsSUFBSCxDQUFRRixDQUFSLENBQVA7QUFDQTs7QUFFRCxTQUFTRyxRQUFULENBQWtCSCxDQUFsQixFQUFvQixDQUFHO0FBQ3RCLE1BQUlDLEVBQUUsR0FBRyxlQUFUO0FBQ0EsU0FBT0EsRUFBRSxDQUFDQyxJQUFILENBQVFGLENBQVIsQ0FBUDtBQUNBO0FBQ0QsU0FBU0ksWUFBVCxDQUFzQkosQ0FBdEIsRUFBd0IsQ0FBRztBQUMxQixNQUFJQyxFQUFFLEdBQUUsb0JBQVI7QUFDQSxTQUFPQSxFQUFFLENBQUNDLElBQUgsQ0FBUUYsQ0FBUixDQUFQO0FBQ0EsQzs7QUFFYztBQUNkRCxXQUFTLEVBQVRBLFNBRGM7QUFFZEksVUFBUSxFQUFSQSxRQUZjO0FBR2RDLGNBQVksRUFBWkEsWUFIYyxFIiwiZmlsZSI6IjQyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmZ1bmN0aW9uIHRlc3RQaG9uZShhKXsgIC8v6aqM6K+B5omL5py65Y+3XHJcblx0bGV0IHBoID0gL15bMV1bMC05XXsxMH0kLztcclxuXHRyZXR1cm4gcGgudGVzdChhKVxyXG59XHJcblxyXG5mdW5jdGlvbiB0ZXN0Q29kZShhKXsgIC8v6aqM6K+B6aqM6K+B56CBXHJcblx0bGV0IHBoID0gL15bMV1bMC05XXs1fSQvO1xyXG5cdHJldHVybiBwaC50ZXN0KGEpXHJcbn1cclxuZnVuY3Rpb24gdGVzdFBhc3NXb3JkKGEpeyAgLy/pqozor4Hlr4bnoIFcclxuXHRsZXQgcGggPS9eWzAtOUEtWl8hXXs2LDEyfSQvO1xyXG5cdHJldHVybiBwaC50ZXN0KGEpXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHR0ZXN0UGhvbmUsXHJcblx0dGVzdENvZGUsXHJcblx0dGVzdFBhc3NXb3JkLFxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///42\n");

/***/ }),

/***/ 49:
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ 50);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixtQkFBTyxDQUFDLDZCQUFxQiIsImZpbGUiOiI0OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIik7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///49\n");

/***/ }),

/***/ 5:
/*!*******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/dist/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(uni) {var _package = __webpack_require__(/*! ../package.json */ 6);function _possibleConstructorReturn(self, call) {if (call && (typeof call === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\n\nvar STAT_VERSION = _package.version;\nvar STAT_URL = 'https://tongji.dcloud.io/uni/stat';\nvar STAT_H5_URL = 'https://tongji.dcloud.io/uni/stat.gif';\nvar PAGE_PVER_TIME = 1800;\nvar APP_PVER_TIME = 300;\nvar OPERATING_TIME = 10;\n\nvar UUID_KEY = '__DC_STAT_UUID';\nvar UUID_VALUE = '__DC_UUID_VALUE';\n\nfunction getUuid() {\n  var uuid = '';\n  if (getPlatformName() === 'n') {\n    try {\n      uuid = plus.runtime.getDCloudId();\n    } catch (e) {\n      uuid = '';\n    }\n    return uuid;\n  }\n\n  try {\n    uuid = uni.getStorageSync(UUID_KEY);\n  } catch (e) {\n    uuid = UUID_VALUE;\n  }\n\n  if (!uuid) {\n    uuid = Date.now() + '' + Math.floor(Math.random() * 1e7);\n    try {\n      uni.setStorageSync(UUID_KEY, uuid);\n    } catch (e) {\n      uni.setStorageSync(UUID_KEY, UUID_VALUE);\n    }\n  }\n  return uuid;\n}\n\nvar getSgin = function getSgin(statData) {\n  var arr = Object.keys(statData);\n  var sortArr = arr.sort();\n  var sgin = {};\n  var sginStr = '';\n  for (var i in sortArr) {\n    sgin[sortArr[i]] = statData[sortArr[i]];\n    sginStr += sortArr[i] + '=' + statData[sortArr[i]] + '&';\n  }\n  // const options = sginStr.substr(0, sginStr.length - 1)\n  // sginStr = sginStr.substr(0, sginStr.length - 1) + '&key=' + STAT_KEY;\n  // const si = crypto.createHash('md5').update(sginStr).digest('hex');\n  return {\n    sign: '',\n    options: sginStr.substr(0, sginStr.length - 1) };\n\n};\n\nvar getSplicing = function getSplicing(data) {\n  var str = '';\n  for (var i in data) {\n    str += i + '=' + data[i] + '&';\n  }\n  return str.substr(0, str.length - 1);\n};\n\nvar getTime = function getTime() {\n  return parseInt(new Date().getTime() / 1000);\n};\n\nvar getPlatformName = function getPlatformName() {\n  var platformList = {\n    'app-plus': 'n',\n    'h5': 'h5',\n    'mp-weixin': 'wx',\n    'mp-alipay': 'ali',\n    'mp-baidu': 'bd',\n    'mp-toutiao': 'tt',\n    'mp-qq': 'qq' };\n\n  return platformList[\"app-plus\"];\n};\n\nvar getPackName = function getPackName() {\n  var packName = '';\n  if (getPlatformName() === 'wx' || getPlatformName() === 'qq') {\n    // 兼容微信小程序低版本基础库\n    if (uni.canIUse('getAccountInfoSync')) {\n      packName = uni.getAccountInfoSync().miniProgram.appId || '';\n    }\n  }\n  return packName;\n};\n\nvar getVersion = function getVersion() {\n  return getPlatformName() === 'n' ? plus.runtime.version : '';\n};\n\nvar getChannel = function getChannel() {\n  var platformName = getPlatformName();\n  var channel = '';\n  if (platformName === 'n') {\n    channel = plus.runtime.channel;\n  }\n  return channel;\n};\n\nvar getScene = function getScene(options) {\n  var platformName = getPlatformName();\n  var scene = '';\n  if (options) {\n    return options;\n  }\n  if (platformName === 'wx') {\n    scene = uni.getLaunchOptionsSync().scene;\n  }\n  return scene;\n};\nvar First__Visit__Time__KEY = 'First__Visit__Time';\nvar Last__Visit__Time__KEY = 'Last__Visit__Time';\n\nvar getFirstVisitTime = function getFirstVisitTime() {\n  var timeStorge = uni.getStorageSync(First__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = getTime();\n    uni.setStorageSync(First__Visit__Time__KEY, time);\n    uni.removeStorageSync(Last__Visit__Time__KEY);\n  }\n  return time;\n};\n\nvar getLastVisitTime = function getLastVisitTime() {\n  var timeStorge = uni.getStorageSync(Last__Visit__Time__KEY);\n  var time = 0;\n  if (timeStorge) {\n    time = timeStorge;\n  } else {\n    time = '';\n  }\n  uni.setStorageSync(Last__Visit__Time__KEY, getTime());\n  return time;\n};\n\n\nvar PAGE_RESIDENCE_TIME = '__page__residence__time';\nvar First_Page_residence_time = 0;\nvar Last_Page_residence_time = 0;\n\n\nvar setPageResidenceTime = function setPageResidenceTime() {\n  First_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    uni.setStorageSync(PAGE_RESIDENCE_TIME, getTime());\n  }\n  return First_Page_residence_time;\n};\n\nvar getPageResidenceTime = function getPageResidenceTime() {\n  Last_Page_residence_time = getTime();\n  if (getPlatformName() === 'n') {\n    First_Page_residence_time = uni.getStorageSync(PAGE_RESIDENCE_TIME);\n  }\n  return Last_Page_residence_time - First_Page_residence_time;\n};\nvar TOTAL__VISIT__COUNT = 'Total__Visit__Count';\nvar getTotalVisitCount = function getTotalVisitCount() {\n  var timeStorge = uni.getStorageSync(TOTAL__VISIT__COUNT);\n  var count = 1;\n  if (timeStorge) {\n    count = timeStorge;\n    count++;\n  }\n  uni.setStorageSync(TOTAL__VISIT__COUNT, count);\n  return count;\n};\n\nvar GetEncodeURIComponentOptions = function GetEncodeURIComponentOptions(statData) {\n  var data = {};\n  for (var prop in statData) {\n    data[prop] = encodeURIComponent(statData[prop]);\n  }\n  return data;\n};\n\nvar Set__First__Time = 0;\nvar Set__Last__Time = 0;\n\nvar getFirstTime = function getFirstTime() {\n  var time = new Date().getTime();\n  Set__First__Time = time;\n  Set__Last__Time = 0;\n  return time;\n};\n\n\nvar getLastTime = function getLastTime() {\n  var time = new Date().getTime();\n  Set__Last__Time = time;\n  return time;\n};\n\n\nvar getResidenceTime = function getResidenceTime(type) {\n  var residenceTime = 0;\n  if (Set__First__Time !== 0) {\n    residenceTime = Set__Last__Time - Set__First__Time;\n  }\n\n  residenceTime = parseInt(residenceTime / 1000);\n  residenceTime = residenceTime < 1 ? 1 : residenceTime;\n  if (type === 'app') {\n    var overtime = residenceTime > APP_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: overtime };\n\n  }\n  if (type === 'page') {\n    var _overtime = residenceTime > PAGE_PVER_TIME ? true : false;\n    return {\n      residenceTime: residenceTime,\n      overtime: _overtime };\n\n  }\n\n  return {\n    residenceTime: residenceTime };\n\n\n};\n\nvar getRoute = function getRoute() {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is;\n  } else {\n    return _self.$scope && _self.$scope.route || _self.$mp && _self.$mp.page.route;\n  }\n};\n\nvar getPageRoute = function getPageRoute(self) {\n  var pages = getCurrentPages();\n  var page = pages[pages.length - 1];\n  var _self = page.$vm;\n  var query = self._query;\n  var str = query && JSON.stringify(query) !== '{}' ? '?' + JSON.stringify(query) : '';\n  // clear\n  self._query = '';\n  if (getPlatformName() === 'bd') {\n    return _self.$mp && _self.$mp.page.is + str;\n  } else {\n    return _self.$scope && _self.$scope.route + str || _self.$mp && _self.$mp.page.route + str;\n  }\n};\n\nvar getPageTypes = function getPageTypes(self) {\n  if (self.mpType === 'page' || self.$mp && self.$mp.mpType === 'page' || self.$options.mpType === 'page') {\n    return true;\n  }\n  return false;\n};\n\nvar calibration = function calibration(eventName, options) {\n  //  login 、 share 、pay_success 、pay_fail 、register 、title\n  if (!eventName) {\n    console.error(\"uni.report \\u7F3A\\u5C11 [eventName] \\u53C2\\u6570\");\n    return true;\n  }\n  if (typeof eventName !== 'string') {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u7C7B\\u578B\");\n    return true;\n  }\n  if (eventName.length > 255) {\n    console.error(\"uni.report [eventName] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (typeof options !== 'string' && typeof options !== 'object') {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u7C7B\\u578B\\u9519\\u8BEF,\\u53EA\\u80FD\\u4E3A String \\u6216 Object \\u7C7B\\u578B\");\n    return true;\n  }\n\n  if (typeof options === 'string' && options.length > 255) {\n    console.error(\"uni.report [options] \\u53C2\\u6570\\u957F\\u5EA6\\u4E0D\\u80FD\\u5927\\u4E8E 255\");\n    return true;\n  }\n\n  if (eventName === 'title' && typeof options !== 'string') {\n    console.error('uni.report [eventName] 参数为 title 时，[options] 参数只能为 String 类型');\n    return true;\n  }\n};\n\nvar PagesJson = __webpack_require__(/*! uni-pages?{\"type\":\"style\"} */ 7).default;\nvar statConfig = __webpack_require__(/*! uni-stat-config */ 8).default || __webpack_require__(/*! uni-stat-config */ 8);\n\nvar resultOptions = uni.getSystemInfoSync();var\n\nUtil = /*#__PURE__*/function () {\n  function Util() {_classCallCheck(this, Util);\n    this.self = '';\n    this._retry = 0;\n    this._platform = '';\n    this._query = {};\n    this._navigationBarTitle = {\n      config: '',\n      page: '',\n      report: '',\n      lt: '' };\n\n    this._operatingTime = 0;\n    this._reportingRequestData = {\n      '1': [],\n      '11': [] };\n\n    this.__prevent_triggering = false;\n\n    this.__licationHide = false;\n    this.__licationShow = false;\n    this._lastPageRoute = '';\n    this.statData = {\n      uuid: getUuid(),\n      ut: getPlatformName(),\n      mpn: getPackName(),\n      ak: statConfig.appid,\n      usv: STAT_VERSION,\n      v: getVersion(),\n      ch: getChannel(),\n      cn: '',\n      pn: '',\n      ct: '',\n      t: getTime(),\n      tt: '',\n      p: resultOptions.platform === 'android' ? 'a' : 'i',\n      brand: resultOptions.brand || '',\n      md: resultOptions.model,\n      sv: resultOptions.system.replace(/(Android|iOS)\\s/, ''),\n      mpsdk: resultOptions.SDKVersion || '',\n      mpv: resultOptions.version || '',\n      lang: resultOptions.language,\n      pr: resultOptions.pixelRatio,\n      ww: resultOptions.windowWidth,\n      wh: resultOptions.windowHeight,\n      sw: resultOptions.screenWidth,\n      sh: resultOptions.screenHeight };\n\n\n  }_createClass(Util, [{ key: \"_applicationShow\", value: function _applicationShow()\n\n    {\n      if (this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('app');\n        if (time.overtime) {\n          var options = {\n            path: this._lastPageRoute,\n            scene: this.statData.sc };\n\n          this._sendReportRequest(options);\n        }\n        this.__licationHide = false;\n      }\n    } }, { key: \"_applicationHide\", value: function _applicationHide(\n\n    self, type) {\n\n      this.__licationHide = true;\n      getLastTime();\n      var time = getResidenceTime();\n      getFirstTime();\n      var route = getPageRoute(this);\n      this._sendHideRequest({\n        urlref: route,\n        urlref_ts: time.residenceTime },\n      type);\n    } }, { key: \"_pageShow\", value: function _pageShow()\n\n    {\n      var route = getPageRoute(this);\n      var routepath = getRoute();\n      this._navigationBarTitle.config = PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].titleNView &&\n      PagesJson.pages[routepath].titleNView.titleText ||\n      PagesJson &&\n      PagesJson.pages[routepath] &&\n      PagesJson.pages[routepath].navigationBarTitleText || '';\n\n      if (this.__licationShow) {\n        getFirstTime();\n        this.__licationShow = false;\n        // console.log('这是 onLauch 之后执行的第一次 pageShow ，为下次记录时间做准备');\n        this._lastPageRoute = route;\n        return;\n      }\n\n      getLastTime();\n      this._lastPageRoute = route;\n      var time = getResidenceTime('page');\n      if (time.overtime) {\n        var options = {\n          path: this._lastPageRoute,\n          scene: this.statData.sc };\n\n        this._sendReportRequest(options);\n      }\n      getFirstTime();\n    } }, { key: \"_pageHide\", value: function _pageHide()\n\n    {\n      if (!this.__licationHide) {\n        getLastTime();\n        var time = getResidenceTime('page');\n        this._sendPageRequest({\n          url: this._lastPageRoute,\n          urlref: this._lastPageRoute,\n          urlref_ts: time.residenceTime });\n\n        this._navigationBarTitle = {\n          config: '',\n          page: '',\n          report: '',\n          lt: '' };\n\n        return;\n      }\n    } }, { key: \"_login\", value: function _login()\n\n    {\n      this._sendEventRequest({\n        key: 'login' },\n      0);\n    } }, { key: \"_share\", value: function _share()\n\n    {\n      this._sendEventRequest({\n        key: 'share' },\n      0);\n    } }, { key: \"_payment\", value: function _payment(\n    key) {\n      this._sendEventRequest({\n        key: key },\n      0);\n    } }, { key: \"_sendReportRequest\", value: function _sendReportRequest(\n    options) {\n\n      this._navigationBarTitle.lt = '1';\n      var query = options.query && JSON.stringify(options.query) !== '{}' ? '?' + JSON.stringify(options.query) : '';\n      this.statData.lt = '1';\n      this.statData.url = options.path + query || '';\n      this.statData.t = getTime();\n      this.statData.sc = getScene(options.scene);\n      this.statData.fvts = getFirstVisitTime();\n      this.statData.lvts = getLastVisitTime();\n      this.statData.tvc = getTotalVisitCount();\n      if (getPlatformName() === 'n') {\n        this.getProperty();\n      } else {\n        this.getNetworkInfo();\n      }\n    } }, { key: \"_sendPageRequest\", value: function _sendPageRequest(\n\n    opt) {var\n\n      url =\n\n\n      opt.url,urlref = opt.urlref,urlref_ts = opt.urlref_ts;\n      this._navigationBarTitle.lt = '11';\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '11',\n        ut: this.statData.ut,\n        url: url,\n        tt: this.statData.tt,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"_sendHideRequest\", value: function _sendHideRequest(\n\n    opt, type) {var\n\n      urlref =\n\n      opt.urlref,urlref_ts = opt.urlref_ts;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '3',\n        ut: this.statData.ut,\n        urlref: urlref,\n        urlref_ts: urlref_ts,\n        ch: this.statData.ch,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options, type);\n    } }, { key: \"_sendEventRequest\", value: function _sendEventRequest()\n\n\n\n    {var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},_ref$key = _ref.key,key = _ref$key === void 0 ? '' : _ref$key,_ref$value = _ref.value,value = _ref$value === void 0 ? \"\" : _ref$value;\n      var route = this._lastPageRoute;\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '21',\n        ut: this.statData.ut,\n        url: route,\n        ch: this.statData.ch,\n        e_n: key,\n        e_v: typeof value === 'object' ? JSON.stringify(value) : value.toString(),\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }, { key: \"getNetworkInfo\", value: function getNetworkInfo()\n\n    {var _this = this;\n      uni.getNetworkType({\n        success: function success(result) {\n          _this.statData.net = result.networkType;\n          _this.getLocation();\n        } });\n\n    } }, { key: \"getProperty\", value: function getProperty()\n\n    {var _this2 = this;\n      plus.runtime.getProperty(plus.runtime.appid, function (wgtinfo) {\n        _this2.statData.v = wgtinfo.version || '';\n        _this2.getNetworkInfo();\n      });\n    } }, { key: \"getLocation\", value: function getLocation()\n\n    {var _this3 = this;\n      if (statConfig.getLocation) {\n        uni.getLocation({\n          type: 'wgs84',\n          geocode: true,\n          success: function success(result) {\n            if (result.address) {\n              _this3.statData.cn = result.address.country;\n              _this3.statData.pn = result.address.province;\n              _this3.statData.ct = result.address.city;\n            }\n\n            _this3.statData.lat = result.latitude;\n            _this3.statData.lng = result.longitude;\n            _this3.request(_this3.statData);\n          } });\n\n      } else {\n        this.statData.lat = 0;\n        this.statData.lng = 0;\n        this.request(this.statData);\n      }\n    } }, { key: \"request\", value: function request(\n\n    data, type) {var _this4 = this;\n      var time = getTime();\n      var title = this._navigationBarTitle;\n      data.ttn = title.page;\n      data.ttpj = title.config;\n      data.ttc = title.report;\n\n      var requestData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        requestData = uni.getStorageSync('__UNI__STAT__DATA') || {};\n      }\n      if (!requestData[data.lt]) {\n        requestData[data.lt] = [];\n      }\n      requestData[data.lt].push(data);\n\n      if (getPlatformName() === 'n') {\n        uni.setStorageSync('__UNI__STAT__DATA', requestData);\n      }\n      if (getPageResidenceTime() < OPERATING_TIME && !type) {\n        return;\n      }\n      var uniStatData = this._reportingRequestData;\n      if (getPlatformName() === 'n') {\n        uniStatData = uni.getStorageSync('__UNI__STAT__DATA');\n      }\n      // 时间超过，重新获取时间戳\n      setPageResidenceTime();\n      var firstArr = [];\n      var contentArr = [];\n      var lastArr = [];var _loop = function _loop(\n\n      i) {\n        var rd = uniStatData[i];\n        rd.forEach(function (elm) {\n          var newData = getSplicing(elm);\n          if (i === 0) {\n            firstArr.push(newData);\n          } else if (i === 3) {\n            lastArr.push(newData);\n          } else {\n            contentArr.push(newData);\n          }\n        });};for (var i in uniStatData) {_loop(i);\n      }\n\n      firstArr.push.apply(firstArr, contentArr.concat(lastArr));\n      var optionsData = {\n        usv: STAT_VERSION, //统计 SDK 版本号\n        t: time, //发送请求时的时间戮\n        requests: JSON.stringify(firstArr) };\n\n\n      this._reportingRequestData = {};\n      if (getPlatformName() === 'n') {\n        uni.removeStorageSync('__UNI__STAT__DATA');\n      }\n\n      if (data.ut === 'h5') {\n        this.imageRequest(optionsData);\n        return;\n      }\n\n      if (getPlatformName() === 'n' && this.statData.p === 'a') {\n        setTimeout(function () {\n          _this4._sendRequest(optionsData);\n        }, 200);\n        return;\n      }\n      this._sendRequest(optionsData);\n    } }, { key: \"_sendRequest\", value: function _sendRequest(\n    optionsData) {var _this5 = this;\n      uni.request({\n        url: STAT_URL,\n        method: 'POST',\n        // header: {\n        //   'content-type': 'application/json' // 默认值\n        // },\n        data: optionsData,\n        success: function success() {\n          // if (process.env.NODE_ENV === 'development') {\n          //   console.log('stat request success');\n          // }\n        },\n        fail: function fail(e) {\n          if (++_this5._retry < 3) {\n            setTimeout(function () {\n              _this5._sendRequest(optionsData);\n            }, 1000);\n          }\n        } });\n\n    }\n    /**\r\n       * h5 请求\r\n       */ }, { key: \"imageRequest\", value: function imageRequest(\n    data) {\n      var image = new Image();\n      var options = getSgin(GetEncodeURIComponentOptions(data)).options;\n      image.src = STAT_H5_URL + '?' + options;\n    } }, { key: \"sendEvent\", value: function sendEvent(\n\n    key, value) {\n      // 校验 type 参数\n      if (calibration(key, value)) return;\n\n      if (key === 'title') {\n        this._navigationBarTitle.report = value;\n        return;\n      }\n      this._sendEventRequest({\n        key: key,\n        value: typeof value === 'object' ? JSON.stringify(value) : value },\n      1);\n    } }]);return Util;}();var\n\n\n\nStat = /*#__PURE__*/function (_Util) {_inherits(Stat, _Util);_createClass(Stat, null, [{ key: \"getInstance\", value: function getInstance()\n    {\n      if (!this.instance) {\n        this.instance = new Stat();\n      }\n      return this.instance;\n    } }]);\n  function Stat() {var _this6;_classCallCheck(this, Stat);\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(Stat).call(this));\n    _this6.instance = null;\n    // 注册拦截器\n    if (typeof uni.addInterceptor === 'function' && \"development\" !== 'development') {\n      _this6.addInterceptorInit();\n      _this6.interceptLogin();\n      _this6.interceptShare(true);\n      _this6.interceptRequestPayment();\n    }return _this6;\n  }_createClass(Stat, [{ key: \"addInterceptorInit\", value: function addInterceptorInit()\n\n    {\n      var self = this;\n      uni.addInterceptor('setNavigationBarTitle', {\n        invoke: function invoke(args) {\n          self._navigationBarTitle.page = args.title;\n        } });\n\n    } }, { key: \"interceptLogin\", value: function interceptLogin()\n\n    {\n      var self = this;\n      uni.addInterceptor('login', {\n        complete: function complete() {\n          self._login();\n        } });\n\n    } }, { key: \"interceptShare\", value: function interceptShare(\n\n    type) {\n      var self = this;\n      if (!type) {\n        self._share();\n        return;\n      }\n      uni.addInterceptor('share', {\n        success: function success() {\n          self._share();\n        },\n        fail: function fail() {\n          self._share();\n        } });\n\n    } }, { key: \"interceptRequestPayment\", value: function interceptRequestPayment()\n\n    {\n      var self = this;\n      uni.addInterceptor('requestPayment', {\n        success: function success() {\n          self._payment('pay_success');\n        },\n        fail: function fail() {\n          self._payment('pay_fail');\n        } });\n\n    } }, { key: \"report\", value: function report(\n\n    options, self) {\n      this.self = self;\n      // if (process.env.NODE_ENV === 'development') {\n      //   console.log('report init');\n      // }\n      setPageResidenceTime();\n      this.__licationShow = true;\n      this._sendReportRequest(options, true);\n    } }, { key: \"load\", value: function load(\n\n    options, self) {\n      if (!self.$scope && !self.$mp) {\n        var page = getCurrentPages();\n        self.$scope = page[page.length - 1];\n      }\n      this.self = self;\n      this._query = options;\n    } }, { key: \"show\", value: function show(\n\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageShow(self);\n      } else {\n        this._applicationShow(self);\n      }\n    } }, { key: \"ready\", value: function ready(\n\n    self) {\n      // this.self = self;\n      // if (getPageTypes(self)) {\n      //   this._pageShow(self);\n      // }\n    } }, { key: \"hide\", value: function hide(\n    self) {\n      this.self = self;\n      if (getPageTypes(self)) {\n        this._pageHide(self);\n      } else {\n        this._applicationHide(self, true);\n      }\n    } }, { key: \"error\", value: function error(\n    em) {\n      if (this._platform === 'devtools') {\n        if (true) {\n          console.info('当前运行环境为开发者工具，不上报数据。');\n        }\n        // return;\n      }\n      var emVal = '';\n      if (!em.message) {\n        emVal = JSON.stringify(em);\n      } else {\n        emVal = em.stack;\n      }\n      var options = {\n        ak: this.statData.ak,\n        uuid: this.statData.uuid,\n        lt: '31',\n        ut: this.statData.ut,\n        ch: this.statData.ch,\n        mpsdk: this.statData.mpsdk,\n        mpv: this.statData.mpv,\n        v: this.statData.v,\n        em: emVal,\n        usv: this.statData.usv,\n        t: getTime(),\n        p: this.statData.p };\n\n      this.request(options);\n    } }]);return Stat;}(Util);\n\n\nvar stat = Stat.getInstance();\nvar isHide = false;\nvar lifecycle = {\n  onLaunch: function onLaunch(options) {\n    stat.report(options, this);\n  },\n  onReady: function onReady() {\n    stat.ready(this);\n  },\n  onLoad: function onLoad(options) {\n    stat.load(options, this);\n    // 重写分享，获取分享上报事件\n    if (this.$scope && this.$scope.onShareAppMessage) {\n      var oldShareAppMessage = this.$scope.onShareAppMessage;\n      this.$scope.onShareAppMessage = function (options) {\n        stat.interceptShare(false);\n        return oldShareAppMessage.call(this, options);\n      };\n    }\n  },\n  onShow: function onShow() {\n    isHide = false;\n    stat.show(this);\n  },\n  onHide: function onHide() {\n    isHide = true;\n    stat.hide(this);\n  },\n  onUnload: function onUnload() {\n    if (isHide) {\n      isHide = false;\n      return;\n    }\n    stat.hide(this);\n  },\n  onError: function onError(e) {\n    stat.error(e);\n  } };\n\n\nfunction main() {\n  if (true) {\n    uni.report = function (type, options) {};\n  } else { var Vue; }\n}\n\nmain();\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/uni-app-plus/dist/index.js */ 1)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),

/***/ 50:
/*!************************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime-module.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() {\n  return this || (typeof self === \"object\" && self);\n})() || Function(\"return this\")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf(\"regeneratorRuntime\") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ 51);\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLG1CQUFXOztBQUVwQztBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSIsImZpbGUiOiI1MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLy8gVGhpcyBtZXRob2Qgb2Ygb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0IG5lZWRzIHRvIGJlXG4vLyBrZXB0IGlkZW50aWNhbCB0byB0aGUgd2F5IGl0IGlzIG9idGFpbmVkIGluIHJ1bnRpbWUuanNcbnZhciBnID0gKGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcyB8fCAodHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgJiYgc2VsZik7XG59KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcblxuLy8gVXNlIGBnZXRPd25Qcm9wZXJ0eU5hbWVzYCBiZWNhdXNlIG5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCBjYWxsaW5nXG4vLyBgaGFzT3duUHJvcGVydHlgIG9uIHRoZSBnbG9iYWwgYHNlbGZgIG9iamVjdCBpbiBhIHdvcmtlci4gU2VlICMxODMuXG52YXIgaGFkUnVudGltZSA9IGcucmVnZW5lcmF0b3JSdW50aW1lICYmXG4gIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGcpLmluZGV4T2YoXCJyZWdlbmVyYXRvclJ1bnRpbWVcIikgPj0gMDtcblxuLy8gU2F2ZSB0aGUgb2xkIHJlZ2VuZXJhdG9yUnVudGltZSBpbiBjYXNlIGl0IG5lZWRzIHRvIGJlIHJlc3RvcmVkIGxhdGVyLlxudmFyIG9sZFJ1bnRpbWUgPSBoYWRSdW50aW1lICYmIGcucmVnZW5lcmF0b3JSdW50aW1lO1xuXG4vLyBGb3JjZSByZWV2YWx1dGF0aW9uIG9mIHJ1bnRpbWUuanMuXG5nLnJlZ2VuZXJhdG9yUnVudGltZSA9IHVuZGVmaW5lZDtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9ydW50aW1lXCIpO1xuXG5pZiAoaGFkUnVudGltZSkge1xuICAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBydW50aW1lLlxuICBnLnJlZ2VuZXJhdG9yUnVudGltZSA9IG9sZFJ1bnRpbWU7XG59IGVsc2Uge1xuICAvLyBSZW1vdmUgdGhlIGdsb2JhbCBwcm9wZXJ0eSBhZGRlZCBieSBydW50aW1lLmpzLlxuICB0cnkge1xuICAgIGRlbGV0ZSBnLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgfSBjYXRjaChlKSB7XG4gICAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///50\n");

/***/ }),

/***/ 51:
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() {\n    return this || (typeof self === \"object\" && self);\n  })() || Function(\"return this\")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///51\n");

/***/ }),

/***/ 6:
/*!******************************************************!*\
  !*** ./node_modules/@dcloudio/uni-stat/package.json ***!
  \******************************************************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, files, gitHead, homepage, license, main, name, repository, scripts, version, default */
/***/ (function(module) {

eval("module.exports = {\"_from\":\"@dcloudio/uni-stat@next\",\"_id\":\"@dcloudio/uni-stat@2.0.0-26420200313001\",\"_inBundle\":false,\"_integrity\":\"sha512-7dPuazTiDmUyRcw+WW+UlWGKH0eeCUB+p0P4pJVKEHjpdXnXgvDQCSdJk764NH99TfsUycnuxecP5oHckVa88g==\",\"_location\":\"/@dcloudio/uni-stat\",\"_phantomChildren\":{},\"_requested\":{\"type\":\"tag\",\"registry\":true,\"raw\":\"@dcloudio/uni-stat@next\",\"name\":\"@dcloudio/uni-stat\",\"escapedName\":\"@dcloudio%2funi-stat\",\"scope\":\"@dcloudio\",\"rawSpec\":\"next\",\"saveSpec\":null,\"fetchSpec\":\"next\"},\"_requiredBy\":[\"#USER\",\"/\",\"/@dcloudio/vue-cli-plugin-uni\"],\"_resolved\":\"https://registry.npmjs.org/@dcloudio/uni-stat/-/uni-stat-2.0.0-26420200313001.tgz\",\"_shasum\":\"a006e329e033cd412accfa635f8933dbb822a9c3\",\"_spec\":\"@dcloudio/uni-stat@next\",\"_where\":\"/Users/guoshengqiang/Documents/dcloud-plugins/release/uniapp-cli\",\"author\":\"\",\"bugs\":{\"url\":\"https://github.com/dcloudio/uni-app/issues\"},\"bundleDependencies\":false,\"deprecated\":false,\"description\":\"\",\"devDependencies\":{\"@babel/core\":\"^7.5.5\",\"@babel/preset-env\":\"^7.5.5\",\"eslint\":\"^6.1.0\",\"rollup\":\"^1.19.3\",\"rollup-plugin-babel\":\"^4.3.3\",\"rollup-plugin-clear\":\"^2.0.7\",\"rollup-plugin-commonjs\":\"^10.0.2\",\"rollup-plugin-copy\":\"^3.1.0\",\"rollup-plugin-eslint\":\"^7.0.0\",\"rollup-plugin-json\":\"^4.0.0\",\"rollup-plugin-node-resolve\":\"^5.2.0\",\"rollup-plugin-replace\":\"^2.2.0\",\"rollup-plugin-uglify\":\"^6.0.2\"},\"files\":[\"dist\",\"package.json\",\"LICENSE\"],\"gitHead\":\"b1fdbafab5dd4673cff64188a5203d0c947e4f50\",\"homepage\":\"https://github.com/dcloudio/uni-app#readme\",\"license\":\"Apache-2.0\",\"main\":\"dist/index.js\",\"name\":\"@dcloudio/uni-stat\",\"repository\":{\"type\":\"git\",\"url\":\"git+https://github.com/dcloudio/uni-app.git\",\"directory\":\"packages/uni-stat\"},\"scripts\":{\"build\":\"NODE_ENV=production rollup -c rollup.config.js\",\"dev\":\"NODE_ENV=development rollup -w -c rollup.config.js\"},\"version\":\"2.0.0-26420200313001\"};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI2LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n");

/***/ }),

/***/ 7:
/*!******************************************************!*\
  !*** D:/张总新版app/maiYa01/pages.json?{"type":"style"} ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"pages\": { \"pages/tabBar/index/index\": { \"navigationStyle\": \"custom\" }, \"pages/tabBar/patient/patient\": { \"navigationStyle\": \"custom\" }, \"pages/tabBar/mine/mine\": { \"navigationStyle\": \"custom\" }, \"pages/views/register/newUser\": { \"navigationStyle\": \"custom\" }, \"pages/views/register/doctorRegister\": { \"navigationBarTitleText\": \"医生注册\" }, \"pages/views/register/confirmCode\": { \"navigationBarTitleText\": \"确认验证码\" }, \"pages/views/register/settingCode\": { \"navigationBarTitleText\": \"设置登录密码页面\" }, \"pages/views/register/doctorRenzheng\": { \"navigationBarTitleText\": \"医生认证\" }, \"pages/views/register/doctorZiZhi\": { \"navigationBarTitleText\": \"医生资质\" }, \"pages/views/login/login\": { \"navigationBarTitleText\": \"\" }, \"pages/views/login/forgetPassword\": { \"navigationBarTitleText\": \"忘记密码\" }, \"pages/views/login/loginConfirCode\": { \"navigationBarTitleText\": \"确认验证码\" }, \"pages/views/login/settingPassWord\": { \"navigationBarTitleText\": \"重新设置登录密码\" }, \"pages/kefuPage/kefuPage\": { \"navigationBarTitleText\": \"聊天室\" }, \"pages/kefuPage/chat\": { \"navigationBarTitleText\": \"患者\" }, \"pages/views/index/qcode\": { \"navigationBarTitleText\": \"分享二维码\" } }, \"globalStyle\": { \"navigationBarTextStyle\": \"black\", \"navigationBarTitleText\": \"新版麦芽儿\", \"navigationBarBackgroundColor\": \"#ffffff\", \"backgroundColor\": \"#F8F8F8\" } };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsRUFBQyw0QkFBMkIsRUFBQyxtQkFBa0IsUUFBbkIsRUFBNUIsRUFBeUQsZ0NBQStCLEVBQUMsbUJBQWtCLFFBQW5CLEVBQXhGLEVBQXFILDBCQUF5QixFQUFDLG1CQUFrQixRQUFuQixFQUE5SSxFQUEySyxnQ0FBK0IsRUFBQyxtQkFBa0IsUUFBbkIsRUFBMU0sRUFBdU8sdUNBQXNDLEVBQUMsMEJBQXlCLE1BQTFCLEVBQTdRLEVBQStTLG9DQUFtQyxFQUFDLDBCQUF5QixPQUExQixFQUFsVixFQUFxWCxvQ0FBbUMsRUFBQywwQkFBeUIsVUFBMUIsRUFBeFosRUFBOGIsdUNBQXNDLEVBQUMsMEJBQXlCLE1BQTFCLEVBQXBlLEVBQXNnQixvQ0FBbUMsRUFBQywwQkFBeUIsTUFBMUIsRUFBemlCLEVBQTJrQiwyQkFBMEIsRUFBQywwQkFBeUIsRUFBMUIsRUFBcm1CLEVBQW1vQixvQ0FBbUMsRUFBQywwQkFBeUIsTUFBMUIsRUFBdHFCLEVBQXdzQixxQ0FBb0MsRUFBQywwQkFBeUIsT0FBMUIsRUFBNXVCLEVBQSt3QixxQ0FBb0MsRUFBQywwQkFBeUIsVUFBMUIsRUFBbnpCLEVBQXkxQiwyQkFBMEIsRUFBQywwQkFBeUIsS0FBMUIsRUFBbjNCLEVBQW81Qix1QkFBc0IsRUFBQywwQkFBeUIsSUFBMUIsRUFBMTZCLEVBQTA4QiwyQkFBMEIsRUFBQywwQkFBeUIsT0FBMUIsRUFBcCtCLEVBQVQsRUFBaWhDLGVBQWMsRUFBQywwQkFBeUIsT0FBMUIsRUFBa0MsMEJBQXlCLE9BQTNELEVBQW1FLGdDQUErQixTQUFsRyxFQUE0RyxtQkFBa0IsU0FBOUgsRUFBL2hDLEUiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcInBhZ2VzXCI6e1wicGFnZXMvdGFiQmFyL2luZGV4L2luZGV4XCI6e1wibmF2aWdhdGlvblN0eWxlXCI6XCJjdXN0b21cIn0sXCJwYWdlcy90YWJCYXIvcGF0aWVudC9wYXRpZW50XCI6e1wibmF2aWdhdGlvblN0eWxlXCI6XCJjdXN0b21cIn0sXCJwYWdlcy90YWJCYXIvbWluZS9taW5lXCI6e1wibmF2aWdhdGlvblN0eWxlXCI6XCJjdXN0b21cIn0sXCJwYWdlcy92aWV3cy9yZWdpc3Rlci9uZXdVc2VyXCI6e1wibmF2aWdhdGlvblN0eWxlXCI6XCJjdXN0b21cIn0sXCJwYWdlcy92aWV3cy9yZWdpc3Rlci9kb2N0b3JSZWdpc3RlclwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuWMu+eUn+azqOWGjFwifSxcInBhZ2VzL3ZpZXdzL3JlZ2lzdGVyL2NvbmZpcm1Db2RlXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi56Gu6K6k6aqM6K+B56CBXCJ9LFwicGFnZXMvdmlld3MvcmVnaXN0ZXIvc2V0dGluZ0NvZGVcIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCLorr7nva7nmbvlvZXlr4bnoIHpobXpnaJcIn0sXCJwYWdlcy92aWV3cy9yZWdpc3Rlci9kb2N0b3JSZW56aGVuZ1wiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuWMu+eUn+iupOivgVwifSxcInBhZ2VzL3ZpZXdzL3JlZ2lzdGVyL2RvY3RvclppWmhpXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5Yy755Sf6LWE6LSoXCJ9LFwicGFnZXMvdmlld3MvbG9naW4vbG9naW5cIjp7XCJuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0XCI6XCJcIn0sXCJwYWdlcy92aWV3cy9sb2dpbi9mb3JnZXRQYXNzd29yZFwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuW/mOiusOWvhueggVwifSxcInBhZ2VzL3ZpZXdzL2xvZ2luL2xvZ2luQ29uZmlyQ29kZVwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuehruiupOmqjOivgeeggVwifSxcInBhZ2VzL3ZpZXdzL2xvZ2luL3NldHRpbmdQYXNzV29yZFwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIumHjeaWsOiuvue9rueZu+W9leWvhueggVwifSxcInBhZ2VzL2tlZnVQYWdlL2tlZnVQYWdlXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi6IGK5aSp5a6kXCJ9LFwicGFnZXMva2VmdVBhZ2UvY2hhdFwiOntcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuaCo+iAhVwifSxcInBhZ2VzL3ZpZXdzL2luZGV4L3Fjb2RlXCI6e1wibmF2aWdhdGlvbkJhclRpdGxlVGV4dFwiOlwi5YiG5Lqr5LqM57u056CBXCJ9fSxcImdsb2JhbFN0eWxlXCI6e1wibmF2aWdhdGlvbkJhclRleHRTdHlsZVwiOlwiYmxhY2tcIixcIm5hdmlnYXRpb25CYXJUaXRsZVRleHRcIjpcIuaWsOeJiOm6puiKveWEv1wiLFwibmF2aWdhdGlvbkJhckJhY2tncm91bmRDb2xvclwiOlwiI2ZmZmZmZlwiLFwiYmFja2dyb3VuZENvbG9yXCI6XCIjRjhGOEY4XCJ9fSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n");

/***/ }),

/***/ 8:
/*!*****************************************************!*\
  !*** D:/张总新版app/maiYa01/pages.json?{"type":"stat"} ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default = { \"appid\": \"__UNI__EA88FE0\" };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJzR0FBZSxFQUFDLFNBQVEsZ0JBQVQsRSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1wiYXBwaWRcIjpcIl9fVU5JX19FQTg4RkUwXCJ9Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n");

/***/ })

}]);